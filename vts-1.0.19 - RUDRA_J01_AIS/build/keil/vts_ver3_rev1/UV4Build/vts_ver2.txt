; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\vts_ver2.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\vts_ver2.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I..\vts_ver3_rev1 -IF:\vts-ver19\build\keil\vts_ver3_rev1\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z256xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\vts_ver2.crf ..\..\..\src\projects\KEIL_MAG\vts_ver2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_SD PROC
;;;58     
;;;59     void send_SD(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;60     {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;61     	clear();
00000c  f7fffffe          BL       clear
;;;62     	tout=0;
000010  2000              MOVS     r0,#0
000012  49fd              LDR      r1,|L1.1032|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;63     		memset(uart_string_gsm,0,5000);
000016  49fd              LDR      r1,|L1.1036|
000018  48fd              LDR      r0,|L1.1040|
00001a  f7fffffe          BL       __aeabi_memclr
;;;64     		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  49fc              LDR      r1,|L1.1044|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;65     		clear();
000024  f7fffffe          BL       clear
;;;66     		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;67     		
;;;68     		delay(10);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       delay
;;;69     		uart_putchar(UART1_BASE_PTR,'\r');//uart_putchar(UART1_BASE_PTR,'\r');
000034  210d              MOVS     r1,#0xd
000036  48f8              LDR      r0,|L1.1048|
000038  f7fffffe          BL       uart_putchar
;;;70     	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;71     		do
00003c  bf00              NOP      
                  |L1.62|
;;;72     		{
;;;73     			
;;;74     //					time111--;
;;;75     //				  timeout222--;
;;;76     
;;;77     			
;;;78     	cond122=strstr(uart_string_gsm, responseA);
00003e  48f4              LDR      r0,|L1.1040|
000040  9902              LDR      r1,[sp,#8]
000042  f7fffffe          BL       strstr
000046  49f5              LDR      r1,|L1.1052|
000048  6008              STR      r0,[r1,#0]  ; cond122
;;;79     	cond123=strstr(uart_string_gsm, responseB);
00004a  4621              MOV      r1,r4
00004c  48f0              LDR      r0,|L1.1040|
00004e  f7fffffe          BL       strstr
000052  49f3              LDR      r1,|L1.1056|
000054  6008              STR      r0,[r1,#0]  ; cond123
;;;80       cond124=strstr(uart_string_gsm, responseC);
000056  4629              MOV      r1,r5
000058  48ed              LDR      r0,|L1.1040|
00005a  f7fffffe          BL       strstr
00005e  49f1              LDR      r1,|L1.1060|
000060  6008              STR      r0,[r1,#0]  ; cond124
;;;81     	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
000062  48ee              LDR      r0,|L1.1052|
000064  6800              LDR      r0,[r0,#0]  ; cond122
000066  2800              CMP      r0,#0
000068  d10b              BNE      |L1.130|
00006a  48ed              LDR      r0,|L1.1056|
00006c  6800              LDR      r0,[r0,#0]  ; cond123
00006e  2800              CMP      r0,#0
000070  d107              BNE      |L1.130|
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]  ; cond124
000076  2800              CMP      r0,#0
000078  d103              BNE      |L1.130|
00007a  48e3              LDR      r0,|L1.1032|
00007c  6800              LDR      r0,[r0,#0]  ; tout
00007e  42b0              CMP      r0,r6
000080  dd01              BLE      |L1.134|
                  |L1.130|
000082  2001              MOVS     r0,#1
000084  e000              B        |L1.136|
                  |L1.134|
000086  2000              MOVS     r0,#0
                  |L1.136|
000088  49e7              LDR      r1,|L1.1064|
00008a  7008              STRB     r0,[r1,#0]
;;;82     			
;;;83     		}while (!cond121);
00008c  4608              MOV      r0,r1
00008e  7800              LDRB     r0,[r0,#0]  ; cond121
000090  2800              CMP      r0,#0
000092  d0d4              BEQ      |L1.62|
;;;84     		clear();
000094  f7fffffe          BL       clear
;;;85     		if(tout>timeout){
000098  48db              LDR      r0,|L1.1032|
00009a  6800              LDR      r0,[r0,#0]  ; tout
00009c  42b0              CMP      r0,r6
00009e  dd17              BLE      |L1.208|
;;;86     			uart_putchar(UART1_BASE_PTR,'\r');
0000a0  210d              MOVS     r1,#0xd
0000a2  48dd              LDR      r0,|L1.1048|
0000a4  f7fffffe          BL       uart_putchar
;;;87     		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000a8  210a              MOVS     r1,#0xa
0000aa  48db              LDR      r0,|L1.1048|
0000ac  f7fffffe          BL       uart_putchar
0000b0  211a              MOVS     r1,#0x1a
0000b2  48d9              LDR      r0,|L1.1048|
0000b4  f7fffffe          BL       uart_putchar
;;;88     		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000b8  211a              MOVS     r1,#0x1a
0000ba  48d7              LDR      r0,|L1.1048|
0000bc  f7fffffe          BL       uart_putchar
0000c0  210d              MOVS     r1,#0xd
0000c2  48d5              LDR      r0,|L1.1048|
0000c4  f7fffffe          BL       uart_putchar
;;;89     		uart_putchar(UART1_BASE_PTR,'\n');}
0000c8  210a              MOVS     r1,#0xa
0000ca  48d3              LDR      r0,|L1.1048|
0000cc  f7fffffe          BL       uart_putchar
                  |L1.208|
;;;90     		//return;
;;;91     //		return uart_string_gsm;
;;;92     
;;;93     }
0000d0  b005              ADD      sp,sp,#0x14
0000d2  bdf0              POP      {r4-r7,pc}
;;;94     
                          ENDP

                  mystrstr PROC
;;;61     
;;;62     char mystrstr(char* str1, char character)
0000d4  b570              PUSH     {r4-r6,lr}
;;;63     {
0000d6  4604              MOV      r4,r0
0000d8  460d              MOV      r5,r1
;;;64     	sz=strlen(str1);
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       strlen
0000e0  49d2              LDR      r1,|L1.1068|
0000e2  6008              STR      r0,[r1,#0]  ; sz
;;;65     	for(cn=0;cn<=sz;cn++)
0000e4  2000              MOVS     r0,#0
0000e6  49d2              LDR      r1,|L1.1072|
0000e8  6008              STR      r0,[r1,#0]  ; cn
0000ea  e00b              B        |L1.260|
                  |L1.236|
;;;66     	{if(str1[cn] == character)
0000ec  48d0              LDR      r0,|L1.1072|
0000ee  6800              LDR      r0,[r0,#0]  ; cn
0000f0  5c20              LDRB     r0,[r4,r0]
0000f2  42a8              CMP      r0,r5
0000f4  d101              BNE      |L1.250|
;;;67     		{return 1;}
0000f6  2001              MOVS     r0,#1
                  |L1.248|
;;;68     	}
;;;69     	return 0;
;;;70     }
0000f8  bd70              POP      {r4-r6,pc}
                  |L1.250|
0000fa  48cd              LDR      r0,|L1.1072|
0000fc  6800              LDR      r0,[r0,#0]            ;65  ; cn
0000fe  1c40              ADDS     r0,r0,#1              ;65
000100  49cb              LDR      r1,|L1.1072|
000102  6008              STR      r0,[r1,#0]            ;65  ; cn
                  |L1.260|
000104  48ca              LDR      r0,|L1.1072|
000106  6800              LDR      r0,[r0,#0]            ;65  ; cn
000108  49c8              LDR      r1,|L1.1068|
00010a  6809              LDR      r1,[r1,#0]            ;65  ; sz
00010c  4288              CMP      r0,r1                 ;65
00010e  dded              BLE      |L1.236|
000110  2000              MOVS     r0,#0                 ;69
000112  e7f1              B        |L1.248|
;;;71     
                          ENDP

                  LED_state2 PROC
;;;240    
;;;241    void LED_state2(void)
000114  b500              PUSH     {lr}
;;;242    {
;;;243    if(sleep_flag == 1)
000116  48c7              LDR      r0,|L1.1076|
000118  6800              LDR      r0,[r0,#0]  ; sleep_flag
00011a  2801              CMP      r0,#1
00011c  d102              BNE      |L1.292|
;;;244    {stateCount=99;
00011e  2063              MOVS     r0,#0x63
000120  49c5              LDR      r1,|L1.1080|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;245    }	
;;;246    			
;;;247    	switch(stateCount){
000124  48c4              LDR      r0,|L1.1080|
000126  7800              LDRB     r0,[r0,#0]  ; stateCount
000128  0003              MOVS     r3,r0
00012a  f7fffffe          BL       __ARM_common_switch8
00012e  0604              DCB      0x06,0x04
000130  0f1a2530          DCB      0x0f,0x1a,0x25,0x30
000134  3b46              DCB      0x3b,0x46
;;;248    	
;;;249    
;;;250                case 0:     //Red
;;;251                       RED_ON;
000136  2001              MOVS     r0,#1
000138  0740              LSLS     r0,r0,#29
00013a  49c0              LDR      r1,|L1.1084|
00013c  6088              STR      r0,[r1,#8]
;;;252                       GREEN_OFF;
00013e  0080              LSLS     r0,r0,#2
000140  6048              STR      r0,[r1,#4]
;;;253                       BLUE_OFF;
000142  2020              MOVS     r0,#0x20
000144  49bd              LDR      r1,|L1.1084|
000146  3940              SUBS     r1,r1,#0x40
000148  6048              STR      r0,[r1,#4]
;;;254                       break;
00014a  e044              B        |L1.470|
;;;255    
;;;256                case 1:	//Yellow
;;;257    		               RED_ON;
00014c  2001              MOVS     r0,#1
00014e  0740              LSLS     r0,r0,#29
000150  49ba              LDR      r1,|L1.1084|
000152  6088              STR      r0,[r1,#8]
;;;258    		               GREEN_ON;
000154  0080              LSLS     r0,r0,#2
000156  6088              STR      r0,[r1,#8]
;;;259    		               BLUE_OFF;
000158  2020              MOVS     r0,#0x20
00015a  49b8              LDR      r1,|L1.1084|
00015c  3940              SUBS     r1,r1,#0x40
00015e  6048              STR      r0,[r1,#4]
;;;260    		               break;
000160  e039              B        |L1.470|
;;;261    				
;;;262                case 2:	//Green
;;;263    		               RED_OFF;
000162  2001              MOVS     r0,#1
000164  0740              LSLS     r0,r0,#29
000166  49b5              LDR      r1,|L1.1084|
000168  6048              STR      r0,[r1,#4]
;;;264    		               GREEN_ON;
00016a  0080              LSLS     r0,r0,#2
00016c  6088              STR      r0,[r1,#8]
;;;265    		               BLUE_OFF;
00016e  2020              MOVS     r0,#0x20
000170  49b2              LDR      r1,|L1.1084|
000172  3940              SUBS     r1,r1,#0x40
000174  6048              STR      r0,[r1,#4]
;;;266    		               break;
000176  e02e              B        |L1.470|
;;;267    				
;;;268                case 3:	//Blue
;;;269    		               RED_OFF;
000178  2001              MOVS     r0,#1
00017a  0740              LSLS     r0,r0,#29
00017c  49af              LDR      r1,|L1.1084|
00017e  6048              STR      r0,[r1,#4]
;;;270    		               GREEN_OFF;
000180  0080              LSLS     r0,r0,#2
000182  6048              STR      r0,[r1,#4]
;;;271    		               BLUE_ON;
000184  2020              MOVS     r0,#0x20
000186  49ad              LDR      r1,|L1.1084|
000188  3940              SUBS     r1,r1,#0x40
00018a  6088              STR      r0,[r1,#8]
;;;272    		               break;
00018c  e023              B        |L1.470|
;;;273    				
;;;274                case 4:	//Violet
;;;275    		               RED_ON;
00018e  2001              MOVS     r0,#1
000190  0740              LSLS     r0,r0,#29
000192  49aa              LDR      r1,|L1.1084|
000194  6088              STR      r0,[r1,#8]
;;;276    		               GREEN_OFF;
000196  0080              LSLS     r0,r0,#2
000198  6048              STR      r0,[r1,#4]
;;;277    		               BLUE_ON;
00019a  2020              MOVS     r0,#0x20
00019c  49a7              LDR      r1,|L1.1084|
00019e  3940              SUBS     r1,r1,#0x40
0001a0  6088              STR      r0,[r1,#8]
;;;278    		               break;
0001a2  e018              B        |L1.470|
;;;279    				
;;;280                case 5:	//White
;;;281    		              RED_ON;
0001a4  2001              MOVS     r0,#1
0001a6  0740              LSLS     r0,r0,#29
0001a8  49a4              LDR      r1,|L1.1084|
0001aa  6088              STR      r0,[r1,#8]
;;;282    		              GREEN_ON;
0001ac  0080              LSLS     r0,r0,#2
0001ae  6088              STR      r0,[r1,#8]
;;;283    		              BLUE_ON;
0001b0  2020              MOVS     r0,#0x20
0001b2  49a2              LDR      r1,|L1.1084|
0001b4  3940              SUBS     r1,r1,#0x40
0001b6  6088              STR      r0,[r1,#8]
;;;284    		              break;
0001b8  e00d              B        |L1.470|
;;;285    				
;;;286                default:	//Red
;;;287    
;;;288    		              RED_OFF;
0001ba  2001              MOVS     r0,#1
0001bc  0740              LSLS     r0,r0,#29
0001be  499f              LDR      r1,|L1.1084|
0001c0  6048              STR      r0,[r1,#4]
;;;289    		              GREEN_OFF;
0001c2  0080              LSLS     r0,r0,#2
0001c4  6048              STR      r0,[r1,#4]
;;;290    		              BLUE_OFF;
0001c6  2020              MOVS     r0,#0x20
0001c8  499c              LDR      r1,|L1.1084|
0001ca  3940              SUBS     r1,r1,#0x40
0001cc  6048              STR      r0,[r1,#4]
;;;291    		              stateCount = 0;	//Reset state counter
0001ce  2000              MOVS     r0,#0
0001d0  4999              LDR      r1,|L1.1080|
0001d2  7008              STRB     r0,[r1,#0]
;;;292    			      break;
0001d4  bf00              NOP      
                  |L1.470|
0001d6  bf00              NOP                            ;254
;;;293    
;;;294        }
;;;295    	
;;;296    }
0001d8  bd00              POP      {pc}
;;;297    
                          ENDP

                  parse_gsm PROC
;;;1615   
;;;1616   void parse_gsm(char *str, int first, int sec, char *string)
0001da  b5f8              PUSH     {r3-r7,lr}
;;;1617   {
0001dc  4604              MOV      r4,r0
0001de  460e              MOV      r6,r1
0001e0  4617              MOV      r7,r2
0001e2  461d              MOV      r5,r3
;;;1618   
;;;1619   		delay(10);		
0001e4  200a              MOVS     r0,#0xa
0001e6  f7fffffe          BL       delay
;;;1620   		memset(string,0,15);
0001ea  210f              MOVS     r1,#0xf
0001ec  4628              MOV      r0,r5
0001ee  f7fffffe          BL       __aeabi_memclr
;;;1621   		for(i11=0,temp11=0;i11<100;i11++)
0001f2  2000              MOVS     r0,#0
0001f4  4992              LDR      r1,|L1.1088|
0001f6  6008              STR      r0,[r1,#0]  ; i11
0001f8  4992              LDR      r1,|L1.1092|
0001fa  6008              STR      r0,[r1,#0]  ; temp11
0001fc  e01a              B        |L1.564|
                  |L1.510|
;;;1622   		{
;;;1623   		if(str[i11]=='"')
0001fe  4890              LDR      r0,|L1.1088|
000200  6800              LDR      r0,[r0,#0]  ; i11
000202  5c20              LDRB     r0,[r4,r0]
000204  2822              CMP      r0,#0x22
000206  d108              BNE      |L1.538|
;;;1624   			{temp11++;j11=i11;}
000208  488e              LDR      r0,|L1.1092|
00020a  6800              LDR      r0,[r0,#0]  ; temp11
00020c  1c40              ADDS     r0,r0,#1
00020e  498d              LDR      r1,|L1.1092|
000210  6008              STR      r0,[r1,#0]  ; temp11
000212  488b              LDR      r0,|L1.1088|
000214  6800              LDR      r0,[r0,#0]  ; i11
000216  498c              LDR      r1,|L1.1096|
000218  6008              STR      r0,[r1,#0]  ; j11
                  |L1.538|
;;;1625   		else{}
;;;1626   			
;;;1627   		if(temp11>=sec){i11=900;}
00021a  488a              LDR      r0,|L1.1092|
00021c  6800              LDR      r0,[r0,#0]  ; temp11
00021e  42b8              CMP      r0,r7
000220  db03              BLT      |L1.554|
000222  20e1              MOVS     r0,#0xe1
000224  0080              LSLS     r0,r0,#2
000226  4986              LDR      r1,|L1.1088|
000228  6008              STR      r0,[r1,#0]  ; i11
                  |L1.554|
00022a  4885              LDR      r0,|L1.1088|
00022c  6800              LDR      r0,[r0,#0]            ;1621  ; i11
00022e  1c40              ADDS     r0,r0,#1              ;1621
000230  4983              LDR      r1,|L1.1088|
000232  6008              STR      r0,[r1,#0]            ;1621  ; i11
                  |L1.564|
000234  4882              LDR      r0,|L1.1088|
000236  6800              LDR      r0,[r0,#0]            ;1621  ; i11
000238  2864              CMP      r0,#0x64              ;1621
00023a  dbe0              BLT      |L1.510|
;;;1628   		else{}	
;;;1629   		
;;;1630   		}	
;;;1631   		
;;;1632   		for(i11=0,temp11=0;i11<100;i11++)
00023c  2000              MOVS     r0,#0
00023e  4980              LDR      r1,|L1.1088|
000240  6008              STR      r0,[r1,#0]  ; i11
000242  4980              LDR      r1,|L1.1092|
000244  6008              STR      r0,[r1,#0]  ; temp11
000246  e01a              B        |L1.638|
                  |L1.584|
;;;1633   		{
;;;1634   		if(str[i11]=='"')
000248  487d              LDR      r0,|L1.1088|
00024a  6800              LDR      r0,[r0,#0]  ; i11
00024c  5c20              LDRB     r0,[r4,r0]
00024e  2822              CMP      r0,#0x22
000250  d108              BNE      |L1.612|
;;;1635   			{temp11++;l=i11;}										
000252  487c              LDR      r0,|L1.1092|
000254  6800              LDR      r0,[r0,#0]  ; temp11
000256  1c40              ADDS     r0,r0,#1
000258  497a              LDR      r1,|L1.1092|
00025a  6008              STR      r0,[r1,#0]  ; temp11
00025c  4878              LDR      r0,|L1.1088|
00025e  6800              LDR      r0,[r0,#0]  ; i11
000260  497a              LDR      r1,|L1.1100|
000262  6008              STR      r0,[r1,#0]  ; l
                  |L1.612|
;;;1636   		else{}
;;;1637   		if(temp11>=first){i11=900;}else{}
000264  4877              LDR      r0,|L1.1092|
000266  6800              LDR      r0,[r0,#0]  ; temp11
000268  42b0              CMP      r0,r6
00026a  db03              BLT      |L1.628|
00026c  20e1              MOVS     r0,#0xe1
00026e  0080              LSLS     r0,r0,#2
000270  4973              LDR      r1,|L1.1088|
000272  6008              STR      r0,[r1,#0]  ; i11
                  |L1.628|
000274  4872              LDR      r0,|L1.1088|
000276  6800              LDR      r0,[r0,#0]            ;1632  ; i11
000278  1c40              ADDS     r0,r0,#1              ;1632
00027a  4971              LDR      r1,|L1.1088|
00027c  6008              STR      r0,[r1,#0]            ;1632  ; i11
                  |L1.638|
00027e  4870              LDR      r0,|L1.1088|
000280  6800              LDR      r0,[r0,#0]            ;1632  ; i11
000282  2864              CMP      r0,#0x64              ;1632
000284  dbe0              BLT      |L1.584|
;;;1638   		}	
;;;1639   		for(i11=0;i11<(j11-l-1);i11++)
000286  2000              MOVS     r0,#0
000288  496d              LDR      r1,|L1.1088|
00028a  6008              STR      r0,[r1,#0]  ; i11
00028c  e00e              B        |L1.684|
                  |L1.654|
;;;1640   		{
;;;1641   		string[i11] = str[l+i11+1];
00028e  486f              LDR      r0,|L1.1100|
000290  6800              LDR      r0,[r0,#0]  ; l
000292  496b              LDR      r1,|L1.1088|
000294  6809              LDR      r1,[r1,#0]  ; i11
000296  1840              ADDS     r0,r0,r1
000298  1c40              ADDS     r0,r0,#1
00029a  5c20              LDRB     r0,[r4,r0]
00029c  4968              LDR      r1,|L1.1088|
00029e  6809              LDR      r1,[r1,#0]  ; i11
0002a0  5468              STRB     r0,[r5,r1]
0002a2  4867              LDR      r0,|L1.1088|
0002a4  6800              LDR      r0,[r0,#0]            ;1639  ; i11
0002a6  1c40              ADDS     r0,r0,#1              ;1639
0002a8  4965              LDR      r1,|L1.1088|
0002aa  6008              STR      r0,[r1,#0]            ;1639  ; i11
                  |L1.684|
0002ac  4866              LDR      r0,|L1.1096|
0002ae  6800              LDR      r0,[r0,#0]            ;1639  ; j11
0002b0  4966              LDR      r1,|L1.1100|
0002b2  6809              LDR      r1,[r1,#0]            ;1639  ; l
0002b4  1a40              SUBS     r0,r0,r1              ;1639
0002b6  1e40              SUBS     r0,r0,#1              ;1639
0002b8  4961              LDR      r1,|L1.1088|
0002ba  6809              LDR      r1,[r1,#0]            ;1639  ; i11
0002bc  4288              CMP      r0,r1                 ;1639
0002be  dce6              BGT      |L1.654|
;;;1642   		}			
;;;1643   	
;;;1644   
;;;1645   }
0002c0  bdf8              POP      {r3-r7,pc}
;;;1646   
                          ENDP

                  cursor_val PROC
;;;2111   
;;;2112   int cursor_val(char * stringsd, int cur){
0002c2  b5f8              PUSH     {r3-r7,lr}
0002c4  4605              MOV      r5,r0
0002c6  460e              MOV      r6,r1
;;;2113   int curinc=0,curcounter=0,cur2=0;
0002c8  2400              MOVS     r4,#0
0002ca  2700              MOVS     r7,#0
0002cc  2000              MOVS     r0,#0
0002ce  9000              STR      r0,[sp,#0]
;;;2114   for(curinc=0;curinc<strlen(stringsd);curinc++){
0002d0  bf00              NOP      
0002d2  e007              B        |L1.740|
                  |L1.724|
;;;2115   		
;;;2116   		if(stringsd[curinc] == '\n'     &&    curcounter < cur   ){ //&& curcounter<=cur	){
0002d4  5d28              LDRB     r0,[r5,r4]
0002d6  280a              CMP      r0,#0xa
0002d8  d103              BNE      |L1.738|
0002da  42b7              CMP      r7,r6
0002dc  da01              BGE      |L1.738|
;;;2117   			++curcounter;     cur2=curinc;
0002de  1c7f              ADDS     r7,r7,#1
0002e0  9400              STR      r4,[sp,#0]
                  |L1.738|
0002e2  1c64              ADDS     r4,r4,#1              ;2114
                  |L1.740|
0002e4  4628              MOV      r0,r5                 ;2114
0002e6  f7fffffe          BL       strlen
0002ea  42a0              CMP      r0,r4                 ;2114
0002ec  d8f2              BHI      |L1.724|
;;;2118   		}
;;;2119   
;;;2120   		
;;;2121   
;;;2122   }
;;;2123   	
;;;2124   	
;;;2125   	return cur2;
0002ee  9800              LDR      r0,[sp,#0]
;;;2126   
;;;2127   }
0002f0  bdf8              POP      {r3-r7,pc}
;;;2128   
                          ENDP

                  count_char PROC
;;;2092   }
;;;2093   int count_char(char ch,char* string)
0002f2  b570              PUSH     {r4-r6,lr}
;;;2094   {count=0;
0002f4  4605              MOV      r5,r0
0002f6  460c              MOV      r4,r1
0002f8  2000              MOVS     r0,#0
0002fa  4955              LDR      r1,|L1.1104|
0002fc  6008              STR      r0,[r1,#0]  ; count
;;;2095   
;;;2096   	//remove_all_chars(string,'\0','\0');
;;;2097   //	ass=strlen(string);
;;;2098   	for(ass=0;ass<strlen(string);ass++)
0002fe  4955              LDR      r1,|L1.1108|
000300  6008              STR      r0,[r1,#0]  ; ass
000302  e00e              B        |L1.802|
                  |L1.772|
;;;2099   	{
;;;2100   		if(string[ass] == ch)
000304  4853              LDR      r0,|L1.1108|
000306  6800              LDR      r0,[r0,#0]  ; ass
000308  5c20              LDRB     r0,[r4,r0]
00030a  42a8              CMP      r0,r5
00030c  d104              BNE      |L1.792|
;;;2101   		{count++;}
00030e  4850              LDR      r0,|L1.1104|
000310  6800              LDR      r0,[r0,#0]  ; count
000312  1c40              ADDS     r0,r0,#1
000314  494e              LDR      r1,|L1.1104|
000316  6008              STR      r0,[r1,#0]  ; count
                  |L1.792|
000318  484e              LDR      r0,|L1.1108|
00031a  6800              LDR      r0,[r0,#0]            ;2098  ; ass
00031c  1c40              ADDS     r0,r0,#1              ;2098
00031e  494d              LDR      r1,|L1.1108|
000320  6008              STR      r0,[r1,#0]            ;2098  ; ass
                  |L1.802|
000322  4620              MOV      r0,r4                 ;2098
000324  f7fffffe          BL       strlen
000328  494a              LDR      r1,|L1.1108|
00032a  6809              LDR      r1,[r1,#0]            ;2098  ; ass
00032c  4288              CMP      r0,r1                 ;2098
00032e  d8e9              BHI      |L1.772|
;;;2102   		
;;;2103   	}
;;;2104   return count;
000330  4847              LDR      r0,|L1.1104|
000332  6800              LDR      r0,[r0,#0]  ; count
;;;2105   }
000334  bd70              POP      {r4-r6,pc}
;;;2106   
                          ENDP

                  send_tcp PROC
;;;97     
;;;98     void send_tcp()
000336  b538              PUSH     {r3-r5,lr}
;;;99     {	
;;;100    memset(stcond1,0,strlen(stcond1));	
000338  4847              LDR      r0,|L1.1112|
00033a  6800              LDR      r0,[r0,#0]  ; stcond1
00033c  f7fffffe          BL       strlen
000340  4604              MOV      r4,r0
000342  4621              MOV      r1,r4
000344  4844              LDR      r0,|L1.1112|
000346  6800              LDR      r0,[r0,#0]  ; stcond1
000348  f7fffffe          BL       __aeabi_memclr
;;;101    memset(con1d,0,strlen(con1d));	
00034c  4843              LDR      r0,|L1.1116|
00034e  6800              LDR      r0,[r0,#0]  ; con1d
000350  f7fffffe          BL       strlen
000354  4604              MOV      r4,r0
000356  4621              MOV      r1,r4
000358  4840              LDR      r0,|L1.1116|
00035a  6800              LDR      r0,[r0,#0]  ; con1d
00035c  f7fffffe          BL       __aeabi_memclr
;;;102    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;103    
;;;104    								cond=mystrstr(uart_string_gsm,'>');
000360  213e              MOVS     r1,#0x3e
000362  482b              LDR      r0,|L1.1040|
000364  f7fffffe          BL       mystrstr
000368  493d              LDR      r1,|L1.1120|
00036a  7008              STRB     r0,[r1,#0]
;;;105    								if(cond)	
00036c  4608              MOV      r0,r1
00036e  7800              LDRB     r0,[r0,#0]  ; cond
000370  2800              CMP      r0,#0
000372  d048              BEQ      |L1.1030|
;;;106    								{
;;;107    									
;;;108    									clear();
000374  f7fffffe          BL       clear
;;;109    									memset(uart_string_gsm,0,5000);
000378  4924              LDR      r1,|L1.1036|
00037a  4825              LDR      r0,|L1.1040|
00037c  f7fffffe          BL       __aeabi_memclr
;;;110    									strcat(data,"\n\n");
000380  a138              ADR      r1,|L1.1124|
000382  4839              LDR      r0,|L1.1128|
000384  f7fffffe          BL       strcat
;;;111    									len=strlen(data);
000388  4837              LDR      r0,|L1.1128|
00038a  f7fffffe          BL       strlen
00038e  4937              LDR      r1,|L1.1132|
000390  6008              STR      r0,[r1,#0]  ; len
;;;112    									tout=0;
000392  2000              MOVS     r0,#0
000394  491c              LDR      r1,|L1.1032|
000396  6008              STR      r0,[r1,#0]  ; tout
;;;113    									k2=0;
000398  491e              LDR      r1,|L1.1044|
00039a  6008              STR      r0,[r1,#0]  ; k2
;;;114    									for(k=0;k<len;k++)
00039c  4934              LDR      r1,|L1.1136|
00039e  6008              STR      r0,[r1,#0]  ; k
0003a0  e00b              B        |L1.954|
                  |L1.930|
;;;115    									{
;;;116    										uart_putchar(UART1_BASE_PTR, data[k]);
0003a2  4831              LDR      r0,|L1.1128|
0003a4  4a32              LDR      r2,|L1.1136|
0003a6  6812              LDR      r2,[r2,#0]  ; k
0003a8  5c81              LDRB     r1,[r0,r2]
0003aa  481b              LDR      r0,|L1.1048|
0003ac  f7fffffe          BL       uart_putchar
0003b0  482f              LDR      r0,|L1.1136|
0003b2  6800              LDR      r0,[r0,#0]            ;114  ; k
0003b4  1c40              ADDS     r0,r0,#1              ;114
0003b6  492e              LDR      r1,|L1.1136|
0003b8  6008              STR      r0,[r1,#0]            ;114  ; k
                  |L1.954|
0003ba  482d              LDR      r0,|L1.1136|
0003bc  6800              LDR      r0,[r0,#0]            ;114  ; k
0003be  492b              LDR      r1,|L1.1132|
0003c0  6809              LDR      r1,[r1,#0]            ;114  ; len
0003c2  4288              CMP      r0,r1                 ;114
0003c4  dbed              BLT      |L1.930|
;;;117    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0003c6  210a              MOVS     r1,#0xa
0003c8  4813              LDR      r0,|L1.1048|
0003ca  f7fffffe          BL       uart_putchar
0003ce  211a              MOVS     r1,#0x1a
0003d0  4811              LDR      r0,|L1.1048|
0003d2  f7fffffe          BL       uart_putchar
0003d6  211a              MOVS     r1,#0x1a
0003d8  480f              LDR      r0,|L1.1048|
0003da  f7fffffe          BL       uart_putchar
0003de  211a              MOVS     r1,#0x1a
0003e0  480d              LDR      r0,|L1.1048|
0003e2  f7fffffe          BL       uart_putchar
0003e6  211a              MOVS     r1,#0x1a
0003e8  480b              LDR      r0,|L1.1048|
0003ea  f7fffffe          BL       uart_putchar
0003ee  211a              MOVS     r1,#0x1a
0003f0  4809              LDR      r0,|L1.1048|
0003f2  f7fffffe          BL       uart_putchar
;;;118    									do
0003f6  bf00              NOP      
                  |L1.1016|
;;;119    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0003f8  a11e              ADR      r1,|L1.1140|
0003fa  4805              LDR      r0,|L1.1040|
0003fc  f7fffffe          BL       strstr
000400  4915              LDR      r1,|L1.1112|
000402  6008              STR      r0,[r1,#0]  ; stcond1
;;;120    																	stcond2=strstr(uart_string_gsm, "ERROR");
000404  e03a              B        |L1.1148|
                  |L1.1030|
000406  e083              B        |L1.1296|
                  |L1.1032|
                          DCD      tout
                  |L1.1036|
                          DCD      0x00001388
                  |L1.1040|
                          DCD      uart_string_gsm
                  |L1.1044|
                          DCD      ||k2||
                  |L1.1048|
                          DCD      0x4006b000
                  |L1.1052|
                          DCD      cond122
                  |L1.1056|
                          DCD      cond123
                  |L1.1060|
                          DCD      cond124
                  |L1.1064|
                          DCD      cond121
                  |L1.1068|
                          DCD      ||sz||
                  |L1.1072|
                          DCD      ||cn||
                  |L1.1076|
                          DCD      sleep_flag
                  |L1.1080|
                          DCD      stateCount
                  |L1.1084|
                          DCD      0x400ff100
                  |L1.1088|
                          DCD      i11
                  |L1.1092|
                          DCD      temp11
                  |L1.1096|
                          DCD      j11
                  |L1.1100|
                          DCD      l
                  |L1.1104|
                          DCD      count
                  |L1.1108|
                          DCD      ass
                  |L1.1112|
                          DCD      stcond1
                  |L1.1116|
                          DCD      con1d
                  |L1.1120|
                          DCD      cond
                  |L1.1124|
000464  0a0a00            DCB      "\n\n",0
000467  00                DCB      0
                  |L1.1128|
                          DCD      data
                  |L1.1132|
                          DCD      len
                  |L1.1136|
                          DCD      k
                  |L1.1140|
000474  53454e44          DCB      "SEND OK",0
000478  204f4b00
                  |L1.1148|
00047c  a1fc              ADR      r1,|L1.2160|
00047e  48fe              LDR      r0,|L1.2168|
000480  f7fffffe          BL       strstr
000484  49fd              LDR      r1,|L1.2172|
000486  6008              STR      r0,[r1,#0]  ; stcond2
;;;121    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000488  a1fd              ADR      r1,|L1.2176|
00048a  48fb              LDR      r0,|L1.2168|
00048c  f7fffffe          BL       strstr
000490  49fd              LDR      r1,|L1.2184|
000492  6008              STR      r0,[r1,#0]  ; stcond3
;;;122    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000494  a1fd              ADR      r1,|L1.2188|
000496  48f8              LDR      r0,|L1.2168|
000498  f7fffffe          BL       strstr
00049c  49fd              LDR      r1,|L1.2196|
00049e  6008              STR      r0,[r1,#0]  ; stcond4
;;;123    																	
;;;124    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
0004a0  48f6              LDR      r0,|L1.2172|
0004a2  6800              LDR      r0,[r0,#0]  ; stcond2
0004a4  2800              CMP      r0,#0
0004a6  d10f              BNE      |L1.1224|
0004a8  48f7              LDR      r0,|L1.2184|
0004aa  6800              LDR      r0,[r0,#0]  ; stcond3
0004ac  2800              CMP      r0,#0
0004ae  d10b              BNE      |L1.1224|
0004b0  4608              MOV      r0,r1
0004b2  6800              LDR      r0,[r0,#0]  ; stcond4
0004b4  2800              CMP      r0,#0
0004b6  d107              BNE      |L1.1224|
0004b8  48f7              LDR      r0,|L1.2200|
0004ba  6800              LDR      r0,[r0,#0]  ; stcond1
0004bc  2800              CMP      r0,#0
0004be  d103              BNE      |L1.1224|
0004c0  48f6              LDR      r0,|L1.2204|
0004c2  6800              LDR      r0,[r0,#0]  ; tout
0004c4  2805              CMP      r0,#5
0004c6  dd97              BLE      |L1.1016|
                  |L1.1224|
;;;125    																//delay(10);clear();
;;;126    														uart_putchar(UART1_BASE_PTR,0x1A);
0004c8  211a              MOVS     r1,#0x1a
0004ca  48f5              LDR      r0,|L1.2208|
0004cc  f7fffffe          BL       uart_putchar
;;;127    												//delay(10);
;;;128    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0004d0  211a              MOVS     r1,#0x1a
0004d2  48f3              LDR      r0,|L1.2208|
0004d4  f7fffffe          BL       uart_putchar
0004d8  211a              MOVS     r1,#0x1a
0004da  48f1              LDR      r0,|L1.2208|
0004dc  f7fffffe          BL       uart_putchar
0004e0  211a              MOVS     r1,#0x1a
0004e2  48ef              LDR      r0,|L1.2208|
0004e4  f7fffffe          BL       uart_putchar
;;;129    						
;;;130    									
;;;131    									
;;;132    									
;;;133    									if(flagch==1){		int_erval=temp;flagch=0;	}
0004e8  48ee              LDR      r0,|L1.2212|
0004ea  6800              LDR      r0,[r0,#0]  ; flagch
0004ec  2801              CMP      r0,#1
0004ee  d106              BNE      |L1.1278|
0004f0  48ed              LDR      r0,|L1.2216|
0004f2  6800              LDR      r0,[r0,#0]  ; temp
0004f4  49ed              LDR      r1,|L1.2220|
0004f6  6008              STR      r0,[r1,#0]  ; int_erval
0004f8  2000              MOVS     r0,#0
0004fa  49ea              LDR      r1,|L1.2212|
0004fc  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.1278|
;;;134    									
;;;135    									
;;;136    									
;;;137    
;;;138    //									for(k=0;k<len;k++)
;;;139    //									{
;;;140    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;141    //									}
;;;142    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;143    
;;;144    //									
;;;145    //													k2=0;									//string array counter for uart 1
;;;146    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;147    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;148    //																{
;;;149    //																	timeout--;
;;;150    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;151    //
;;;152    									delay(20);															
0004fe  2014              MOVS     r0,#0x14
000500  f7fffffe          BL       delay
;;;153    stcond1=strstr(uart_string_gsm,"SEND OK"); 
000504  49ea              LDR      r1,|L1.2224|
000506  48dc              LDR      r0,|L1.2168|
000508  f7fffffe          BL       strstr
00050c  49e2              LDR      r1,|L1.2200|
00050e  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.1296|
;;;154    
;;;155    								}
;;;156    
;;;157      //checks for send ok
;;;158    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
000510  48e1              LDR      r0,|L1.2200|
000512  6800              LDR      r0,[r0,#0]  ; stcond1
000514  2800              CMP      r0,#0
000516  d001              BEQ      |L1.1308|
000518  f000ff8d          BL       |L1.5174|
                  |L1.1308|
;;;159    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00051c  211a              MOVS     r1,#0x1a
00051e  48e0              LDR      r0,|L1.2208|
000520  f7fffffe          BL       uart_putchar
000524  f7fffffe          BL       clear
000528  200a              MOVS     r0,#0xa
00052a  f7fffffe          BL       delay
;;;160    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00052e  211a              MOVS     r1,#0x1a
000530  48db              LDR      r0,|L1.2208|
000532  f7fffffe          BL       uart_putchar
000536  f7fffffe          BL       clear
00053a  200a              MOVS     r0,#0xa
00053c  f7fffffe          BL       delay
;;;161    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
000540  211a              MOVS     r1,#0x1a
000542  48d7              LDR      r0,|L1.2208|
000544  f7fffffe          BL       uart_putchar
000548  f7fffffe          BL       clear
00054c  200a              MOVS     r0,#0xa
00054e  f7fffffe          BL       delay
;;;162    							remove_all_chars(data, '\n', '\n');
000552  220a              MOVS     r2,#0xa
000554  4611              MOV      r1,r2
000556  48d7              LDR      r0,|L1.2228|
000558  f7fffffe          BL       remove_all_chars
;;;163    	
;;;164    		strreplace(data, ",L,", ",H,");	
00055c  a2d6              ADR      r2,|L1.2232|
00055e  a1d7              ADR      r1,|L1.2236|
000560  48d4              LDR      r0,|L1.2228|
000562  f7fffffe          BL       strreplace
;;;165    		
;;;166    	
;;;167    	delay(100);
000566  2064              MOVS     r0,#0x64
000568  f7fffffe          BL       delay
;;;168    		clear();//memset(uart_string_gsm,0,5000);
00056c  f7fffffe          BL       clear
;;;169    	
;;;170    	memset(at_,0,100);
000570  2164              MOVS     r1,#0x64
000572  48d3              LDR      r0,|L1.2240|
000574  f7fffffe          BL       __aeabi_memclr
;;;171    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000578  48ce              LDR      r0,|L1.2228|
00057a  f7fffffe          BL       strlen
00057e  1c44              ADDS     r4,r0,#1
000580  4623              MOV      r3,r4
000582  4ad0              LDR      r2,|L1.2244|
000584  a1d0              ADR      r1,|L1.2248|
000586  48ce              LDR      r0,|L1.2240|
000588  f7fffffe          BL       __2sprintf
;;;172    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00058c  2005              MOVS     r0,#5
00058e  a3b8              ADR      r3,|L1.2160|
000590  a2d6              ADR      r2,|L1.2284|
000592  a1d8              ADR      r1,|L1.2292|
000594  9000              STR      r0,[sp,#0]
000596  48ca              LDR      r0,|L1.2240|
000598  f7fffffe          BL       send_SD
;;;173    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;174    //	if(strstr(uart_string_gsm,"ERROR")){
;;;175    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;176    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;177    //	}
;;;178    	
;;;179    clear();	
00059c  f7fffffe          BL       clear
;;;180    									k2=0;									//string array counter for uart 1
0005a0  2000              MOVS     r0,#0
0005a2  49d5              LDR      r1,|L1.2296|
0005a4  6008              STR      r0,[r1,#0]  ; k2
;;;181    									tout=0;	
0005a6  49bd              LDR      r1,|L1.2204|
0005a8  6008              STR      r0,[r1,#0]  ; tout
;;;182    		for(k=0;k<strlen(data);k++)
0005aa  49d4              LDR      r1,|L1.2300|
0005ac  6008              STR      r0,[r1,#0]  ; k
0005ae  e00b              B        |L1.1480|
                  |L1.1456|
;;;183    		{
;;;184    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0005b0  48c0              LDR      r0,|L1.2228|
0005b2  4ad2              LDR      r2,|L1.2300|
0005b4  6812              LDR      r2,[r2,#0]  ; k
0005b6  5c81              LDRB     r1,[r0,r2]
0005b8  48b9              LDR      r0,|L1.2208|
0005ba  f7fffffe          BL       uart_putchar
0005be  48cf              LDR      r0,|L1.2300|
0005c0  6800              LDR      r0,[r0,#0]            ;182  ; k
0005c2  1c40              ADDS     r0,r0,#1              ;182
0005c4  49cd              LDR      r1,|L1.2300|
0005c6  6008              STR      r0,[r1,#0]            ;182  ; k
                  |L1.1480|
0005c8  48ba              LDR      r0,|L1.2228|
0005ca  f7fffffe          BL       strlen
0005ce  49cb              LDR      r1,|L1.2300|
0005d0  6809              LDR      r1,[r1,#0]            ;182  ; k
0005d2  4288              CMP      r0,r1                 ;182
0005d4  d8ec              BHI      |L1.1456|
;;;185    		}	
;;;186    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0005d6  210a              MOVS     r1,#0xa
0005d8  48b1              LDR      r0,|L1.2208|
0005da  f7fffffe          BL       uart_putchar
0005de  210a              MOVS     r1,#0xa
0005e0  48af              LDR      r0,|L1.2208|
0005e2  f7fffffe          BL       uart_putchar
0005e6  210a              MOVS     r1,#0xa
0005e8  48ad              LDR      r0,|L1.2208|
0005ea  f7fffffe          BL       uart_putchar
0005ee  210a              MOVS     r1,#0xa
0005f0  48ab              LDR      r0,|L1.2208|
0005f2  f7fffffe          BL       uart_putchar
0005f6  210a              MOVS     r1,#0xa
0005f8  48a9              LDR      r0,|L1.2208|
0005fa  f7fffffe          BL       uart_putchar
0005fe  210a              MOVS     r1,#0xa
000600  48a7              LDR      r0,|L1.2208|
000602  f7fffffe          BL       uart_putchar
000606  210a              MOVS     r1,#0xa
000608  48a5              LDR      r0,|L1.2208|
00060a  f7fffffe          BL       uart_putchar
00060e  210a              MOVS     r1,#0xa
000610  48a3              LDR      r0,|L1.2208|
000612  f7fffffe          BL       uart_putchar
000616  210a              MOVS     r1,#0xa
000618  48a1              LDR      r0,|L1.2208|
00061a  f7fffffe          BL       uart_putchar
00061e  210a              MOVS     r1,#0xa
000620  489f              LDR      r0,|L1.2208|
000622  f7fffffe          BL       uart_putchar
000626  210a              MOVS     r1,#0xa
000628  489d              LDR      r0,|L1.2208|
00062a  f7fffffe          BL       uart_putchar
00062e  210a              MOVS     r1,#0xa
000630  489b              LDR      r0,|L1.2208|
000632  f7fffffe          BL       uart_putchar
000636  210a              MOVS     r1,#0xa
000638  4899              LDR      r0,|L1.2208|
00063a  f7fffffe          BL       uart_putchar
00063e  210a              MOVS     r1,#0xa
000640  4897              LDR      r0,|L1.2208|
000642  f7fffffe          BL       uart_putchar
000646  210a              MOVS     r1,#0xa
000648  4895              LDR      r0,|L1.2208|
00064a  f7fffffe          BL       uart_putchar
00064e  210a              MOVS     r1,#0xa
000650  4893              LDR      r0,|L1.2208|
000652  f7fffffe          BL       uart_putchar
000656  210a              MOVS     r1,#0xa
000658  4891              LDR      r0,|L1.2208|
00065a  f7fffffe          BL       uart_putchar
00065e  210a              MOVS     r1,#0xa
000660  488f              LDR      r0,|L1.2208|
000662  f7fffffe          BL       uart_putchar
000666  210a              MOVS     r1,#0xa
000668  488d              LDR      r0,|L1.2208|
00066a  f7fffffe          BL       uart_putchar
00066e  210a              MOVS     r1,#0xa
000670  488b              LDR      r0,|L1.2208|
000672  f7fffffe          BL       uart_putchar
000676  210a              MOVS     r1,#0xa
000678  4889              LDR      r0,|L1.2208|
00067a  f7fffffe          BL       uart_putchar
00067e  210a              MOVS     r1,#0xa
000680  4887              LDR      r0,|L1.2208|
000682  f7fffffe          BL       uart_putchar
000686  210a              MOVS     r1,#0xa
000688  4885              LDR      r0,|L1.2208|
00068a  f7fffffe          BL       uart_putchar
00068e  210a              MOVS     r1,#0xa
000690  4883              LDR      r0,|L1.2208|
000692  f7fffffe          BL       uart_putchar
000696  210a              MOVS     r1,#0xa
000698  4881              LDR      r0,|L1.2208|
00069a  f7fffffe          BL       uart_putchar
00069e  210a              MOVS     r1,#0xa
0006a0  487f              LDR      r0,|L1.2208|
0006a2  f7fffffe          BL       uart_putchar
0006a6  210a              MOVS     r1,#0xa
0006a8  487d              LDR      r0,|L1.2208|
0006aa  f7fffffe          BL       uart_putchar
0006ae  210a              MOVS     r1,#0xa
0006b0  487b              LDR      r0,|L1.2208|
0006b2  f7fffffe          BL       uart_putchar
0006b6  210a              MOVS     r1,#0xa
0006b8  4879              LDR      r0,|L1.2208|
0006ba  f7fffffe          BL       uart_putchar
0006be  210a              MOVS     r1,#0xa
0006c0  4877              LDR      r0,|L1.2208|
0006c2  f7fffffe          BL       uart_putchar
0006c6  210a              MOVS     r1,#0xa
0006c8  4875              LDR      r0,|L1.2208|
0006ca  f7fffffe          BL       uart_putchar
0006ce  210a              MOVS     r1,#0xa
0006d0  4873              LDR      r0,|L1.2208|
0006d2  f7fffffe          BL       uart_putchar
0006d6  210a              MOVS     r1,#0xa
0006d8  4871              LDR      r0,|L1.2208|
0006da  f7fffffe          BL       uart_putchar
0006de  210a              MOVS     r1,#0xa
0006e0  486f              LDR      r0,|L1.2208|
0006e2  f7fffffe          BL       uart_putchar
0006e6  210a              MOVS     r1,#0xa
0006e8  486d              LDR      r0,|L1.2208|
0006ea  f7fffffe          BL       uart_putchar
0006ee  210a              MOVS     r1,#0xa
0006f0  486b              LDR      r0,|L1.2208|
0006f2  f7fffffe          BL       uart_putchar
0006f6  210a              MOVS     r1,#0xa
0006f8  4869              LDR      r0,|L1.2208|
0006fa  f7fffffe          BL       uart_putchar
0006fe  210a              MOVS     r1,#0xa
000700  4867              LDR      r0,|L1.2208|
000702  f7fffffe          BL       uart_putchar
000706  210a              MOVS     r1,#0xa
000708  4865              LDR      r0,|L1.2208|
00070a  f7fffffe          BL       uart_putchar
00070e  210a              MOVS     r1,#0xa
000710  4863              LDR      r0,|L1.2208|
000712  f7fffffe          BL       uart_putchar
000716  210a              MOVS     r1,#0xa
000718  4861              LDR      r0,|L1.2208|
00071a  f7fffffe          BL       uart_putchar
00071e  210a              MOVS     r1,#0xa
000720  485f              LDR      r0,|L1.2208|
000722  f7fffffe          BL       uart_putchar
000726  210a              MOVS     r1,#0xa
000728  485d              LDR      r0,|L1.2208|
00072a  f7fffffe          BL       uart_putchar
00072e  210a              MOVS     r1,#0xa
000730  485b              LDR      r0,|L1.2208|
000732  f7fffffe          BL       uart_putchar
000736  210a              MOVS     r1,#0xa
000738  4859              LDR      r0,|L1.2208|
00073a  f7fffffe          BL       uart_putchar
00073e  210a              MOVS     r1,#0xa
000740  4857              LDR      r0,|L1.2208|
000742  f7fffffe          BL       uart_putchar
000746  210a              MOVS     r1,#0xa
000748  4855              LDR      r0,|L1.2208|
00074a  f7fffffe          BL       uart_putchar
00074e  210a              MOVS     r1,#0xa
000750  4853              LDR      r0,|L1.2208|
000752  f7fffffe          BL       uart_putchar
000756  210a              MOVS     r1,#0xa
000758  4851              LDR      r0,|L1.2208|
00075a  f7fffffe          BL       uart_putchar
00075e  210a              MOVS     r1,#0xa
000760  484f              LDR      r0,|L1.2208|
000762  f7fffffe          BL       uart_putchar
000766  210a              MOVS     r1,#0xa
000768  484d              LDR      r0,|L1.2208|
00076a  f7fffffe          BL       uart_putchar
00076e  210a              MOVS     r1,#0xa
000770  484b              LDR      r0,|L1.2208|
000772  f7fffffe          BL       uart_putchar
000776  210a              MOVS     r1,#0xa
000778  4849              LDR      r0,|L1.2208|
00077a  f7fffffe          BL       uart_putchar
00077e  210a              MOVS     r1,#0xa
000780  4847              LDR      r0,|L1.2208|
000782  f7fffffe          BL       uart_putchar
000786  210a              MOVS     r1,#0xa
000788  4845              LDR      r0,|L1.2208|
00078a  f7fffffe          BL       uart_putchar
00078e  210a              MOVS     r1,#0xa
000790  4843              LDR      r0,|L1.2208|
000792  f7fffffe          BL       uart_putchar
000796  210a              MOVS     r1,#0xa
000798  4841              LDR      r0,|L1.2208|
00079a  f7fffffe          BL       uart_putchar
;;;187    									//memset(data,0,1000);
;;;188    														//timer counts to wait for characters in uart 1 									
;;;189    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00079e  bf00              NOP      
                  |L1.1952|
0007a0  a157              ADR      r1,|L1.2304|
0007a2  4835              LDR      r0,|L1.2168|
0007a4  f7fffffe          BL       strstr
0007a8  2800              CMP      r0,#0
0007aa  d109              BNE      |L1.1984|
0007ac  a130              ADR      r1,|L1.2160|
0007ae  4832              LDR      r0,|L1.2168|
0007b0  f7fffffe          BL       strstr
0007b4  2800              CMP      r0,#0
0007b6  d103              BNE      |L1.1984|
0007b8  4838              LDR      r0,|L1.2204|
0007ba  6800              LDR      r0,[r0,#0]  ; tout
0007bc  2805              CMP      r0,#5
0007be  ddef              BLE      |L1.1952|
                  |L1.1984|
;;;190    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;191    									}
;;;192    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0007c0  f7fffffe          BL       clear
;;;193    									//clear();
;;;194    									memset(data,0,strlen(data));
0007c4  483b              LDR      r0,|L1.2228|
0007c6  f7fffffe          BL       strlen
0007ca  4604              MOV      r4,r0
0007cc  4621              MOV      r1,r4
0007ce  4839              LDR      r0,|L1.2228|
0007d0  f7fffffe          BL       __aeabi_memclr
;;;195    									clear();
0007d4  f7fffffe          BL       clear
;;;196    
;;;197    								
;;;198    	
;;;199    	//log_it();		                         //logging
;;;200    		memset(data,0,strlen(data));	
0007d8  4836              LDR      r0,|L1.2228|
0007da  f7fffffe          BL       strlen
0007de  4604              MOV      r4,r0
0007e0  4621              MOV      r1,r4
0007e2  4834              LDR      r0,|L1.2228|
0007e4  f7fffffe          BL       __aeabi_memclr
;;;201    
;;;202    					   	if(flagch!=1){
0007e8  482e              LDR      r0,|L1.2212|
0007ea  6800              LDR      r0,[r0,#0]  ; flagch
0007ec  2801              CMP      r0,#1
0007ee  d009              BEQ      |L1.2052|
;;;203    							temp=int_erval;				
0007f0  482e              LDR      r0,|L1.2220|
0007f2  6800              LDR      r0,[r0,#0]  ; int_erval
0007f4  492c              LDR      r1,|L1.2216|
0007f6  6008              STR      r0,[r1,#0]  ; temp
;;;204    							int_erval=4;
0007f8  2004              MOVS     r0,#4
0007fa  492c              LDR      r1,|L1.2220|
0007fc  6008              STR      r0,[r1,#0]  ; int_erval
;;;205    							flagch=1;}
0007fe  2001              MOVS     r0,#1
000800  4928              LDR      r1,|L1.2212|
000802  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.2052|
;;;206    							clear();	
000804  f7fffffe          BL       clear
;;;207    									GPS_COLLECT();
000808  f7fffffe          BL       GPS_COLLECT
;;;208    									strreplace(data, ",L,", ",H,");	
00080c  a22a              ADR      r2,|L1.2232|
00080e  a12b              ADR      r1,|L1.2236|
000810  4828              LDR      r0,|L1.2228|
000812  f7fffffe          BL       strreplace
;;;209    
;;;210    //*********************************tcp_initialization();//reinitialization*************************************//
;;;211    
;;;212    	
;;;213    msg_sim800(); 
000816  f7fffffe          BL       msg_sim800
;;;214    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00081a  2005              MOVS     r0,#5
00081c  a314              ADR      r3,|L1.2160|
00081e  a233              ADR      r2,|L1.2284|
000820  a139              ADR      r1,|L1.2312|
000822  9000              STR      r0,[sp,#0]
000824  a039              ADR      r0,|L1.2316|
000826  f7fffffe          BL       send_GSM
;;;215    delay(100);
00082a  2064              MOVS     r0,#0x64
00082c  f7fffffe          BL       delay
;;;216    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
000830  2004              MOVS     r0,#4
000832  a30f              ADR      r3,|L1.2160|
000834  a239              ADR      r2,|L1.2332|
000836  a134              ADR      r1,|L1.2312|
000838  9000              STR      r0,[sp,#0]
00083a  a03d              ADR      r0,|L1.2352|
00083c  f7fffffe          BL       send_GSM
;;;217    GPS_COLLECT2();
000840  f7fffffe          BL       GPS_COLLECT2
;;;218    strreplace(data, ",L,", ",H,");		
000844  a21c              ADR      r2,|L1.2232|
000846  a11d              ADR      r1,|L1.2236|
000848  481a              LDR      r0,|L1.2228|
00084a  f7fffffe          BL       strreplace
;;;219    GPS_COLLECT2();
00084e  f7fffffe          BL       GPS_COLLECT2
;;;220    strreplace(data, ",L,", ",H,");	
000852  a219              ADR      r2,|L1.2232|
000854  a119              ADR      r1,|L1.2236|
000856  4817              LDR      r0,|L1.2228|
000858  f7fffffe          BL       strreplace
;;;221    GPS_COLLECT2();
00085c  f7fffffe          BL       GPS_COLLECT2
;;;222    strreplace(data, ",L,", ",H,");
000860  a215              ADR      r2,|L1.2232|
000862  a116              ADR      r1,|L1.2236|
000864  4813              LDR      r0,|L1.2228|
000866  f7fffffe          BL       strreplace
;;;223    cond201=(strstr(uart_string_gsm, "OK"));
00086a  a127              ADR      r1,|L1.2312|
00086c  4802              LDR      r0,|L1.2168|
00086e  e067              B        |L1.2368|
                  |L1.2160|
000870  4552524f          DCB      "ERROR",0
000874  5200    
000876  00                DCB      0
000877  00                DCB      0
                  |L1.2168|
                          DCD      uart_string_gsm
                  |L1.2172|
                          DCD      stcond2
                  |L1.2176|
000880  4641494c          DCB      "FAIL",0
000884  00      
000885  00                DCB      0
000886  00                DCB      0
000887  00                DCB      0
                  |L1.2184|
                          DCD      stcond3
                  |L1.2188|
00088c  44454143          DCB      "DEACT",0
000890  5400    
000892  00                DCB      0
000893  00                DCB      0
                  |L1.2196|
                          DCD      stcond4
                  |L1.2200|
                          DCD      stcond1
                  |L1.2204|
                          DCD      tout
                  |L1.2208|
                          DCD      0x4006b000
                  |L1.2212|
                          DCD      flagch
                  |L1.2216|
                          DCD      temp
                  |L1.2220|
                          DCD      int_erval
                  |L1.2224|
                          DCD      ||.text||+0x474
                  |L1.2228|
                          DCD      data
                  |L1.2232|
0008b8  2c482c00          DCB      ",H,",0
                  |L1.2236|
0008bc  2c4c2c00          DCB      ",L,",0
                  |L1.2240|
                          DCD      at_
                  |L1.2244|
                          DCD      drive
                  |L1.2248|
0008c8  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
0008cc  2b465357
0008d0  52495445
0008d4  3d25735c
0008d8  4c4f472e
0008dc  5458542c
0008e0  312c2564
0008e4  2c31300a
0008e8  0a00    
0008ea  00                DCB      0
0008eb  00                DCB      0
                  |L1.2284|
0008ec  4552524f          DCB      "ERROR\r\n",0
0008f0  520d0a00
                  |L1.2292|
0008f4  3e00              DCB      ">",0
0008f6  00                DCB      0
0008f7  00                DCB      0
                  |L1.2296|
                          DCD      ||k2||
                  |L1.2300|
                          DCD      k
                  |L1.2304|
000900  4f4b0d0a          DCB      "OK\r\n",0
000904  00      
000905  00                DCB      0
000906  00                DCB      0
000907  00                DCB      0
                  |L1.2312|
000908  4f4b00            DCB      "OK",0
00090b  00                DCB      0
                  |L1.2316|
00090c  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
000910  2b434655
000914  4e3d300d
000918  0d0a0a00
                  |L1.2332|
00091c  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
000920  494e5345
000924  52544544
000928  0d0a4f4b
00092c  00      
00092d  00                DCB      0
00092e  00                DCB      0
00092f  00                DCB      0
                  |L1.2352|
000930  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
000934  2b434655
000938  4e3d310d
00093c  0a00    
00093e  00                DCB      0
00093f  00                DCB      0
                  |L1.2368|
000940  f7fffffe          BL       strstr
000944  49f8              LDR      r1,|L1.3368|
000946  6008              STR      r0,[r1,#0]  ; cond201
;;;224    cond200=(strstr(uart_string_gsm, "ERROR"));
000948  49f8              LDR      r1,|L1.3372|
00094a  48f9              LDR      r0,|L1.3376|
00094c  f7fffffe          BL       strstr
000950  49f8              LDR      r1,|L1.3380|
000952  6008              STR      r0,[r1,#0]  ; cond200
;;;225    if((!(cond201|| cond200 ))  && sleep_flag != 1)
000954  48f4              LDR      r0,|L1.3368|
000956  6800              LDR      r0,[r0,#0]  ; cond201
000958  2800              CMP      r0,#0
                  |L1.2394|
00095a  d17c              BNE      |L1.2646|
00095c  4608              MOV      r0,r1
00095e  6800              LDR      r0,[r0,#0]  ; cond200
000960  2800              CMP      r0,#0
000962  d1fa              BNE      |L1.2394|
000964  48f4              LDR      r0,|L1.3384|
000966  6800              LDR      r0,[r0,#0]  ; sleep_flag
000968  2801              CMP      r0,#1
00096a  d074              BEQ      |L1.2646|
;;;226    {
;;;227    delay(100);
00096c  2064              MOVS     r0,#0x64
00096e  f7fffffe          BL       delay
;;;228    clear();//memset(uart_string_gsm,0,5000);
000972  f7fffffe          BL       clear
;;;229    memset(at_,0,100);
000976  2164              MOVS     r1,#0x64
000978  48f0              LDR      r0,|L1.3388|
00097a  f7fffffe          BL       __aeabi_memclr
;;;230    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00097e  48f0              LDR      r0,|L1.3392|
000980  f7fffffe          BL       strlen
000984  1c44              ADDS     r4,r0,#1
000986  4623              MOV      r3,r4
000988  4aee              LDR      r2,|L1.3396|
00098a  49e8              LDR      r1,|L1.3372|
00098c  3158              ADDS     r1,r1,#0x58
00098e  48eb              LDR      r0,|L1.3388|
000990  f7fffffe          BL       __2sprintf
;;;231    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000994  2005              MOVS     r0,#5
000996  4be5              LDR      r3,|L1.3372|
000998  461a              MOV      r2,r3
00099a  327c              ADDS     r2,r2,#0x7c
00099c  a1ea              ADR      r1,|L1.3400|
00099e  9000              STR      r0,[sp,#0]
0009a0  48e6              LDR      r0,|L1.3388|
0009a2  f7fffffe          BL       send_SD
;;;232    clear();	
0009a6  f7fffffe          BL       clear
;;;233    k2=0;									//string array counter for uart 1
0009aa  2000              MOVS     r0,#0
0009ac  49e7              LDR      r1,|L1.3404|
0009ae  6008              STR      r0,[r1,#0]  ; k2
;;;234    tout=0;	
0009b0  49e7              LDR      r1,|L1.3408|
0009b2  6008              STR      r0,[r1,#0]  ; tout
;;;235    for(k=0;k<strlen(data);k++)
0009b4  49e7              LDR      r1,|L1.3412|
0009b6  6008              STR      r0,[r1,#0]  ; k
0009b8  e00b              B        |L1.2514|
                  |L1.2490|
;;;236    {
;;;237    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0009ba  48e1              LDR      r0,|L1.3392|
0009bc  4ae5              LDR      r2,|L1.3412|
0009be  6812              LDR      r2,[r2,#0]  ; k
0009c0  5c81              LDRB     r1,[r0,r2]
0009c2  48e5              LDR      r0,|L1.3416|
0009c4  f7fffffe          BL       uart_putchar
0009c8  48e2              LDR      r0,|L1.3412|
0009ca  6800              LDR      r0,[r0,#0]            ;235  ; k
0009cc  1c40              ADDS     r0,r0,#1              ;235
0009ce  49e1              LDR      r1,|L1.3412|
0009d0  6008              STR      r0,[r1,#0]            ;235  ; k
                  |L1.2514|
0009d2  48db              LDR      r0,|L1.3392|
0009d4  f7fffffe          BL       strlen
0009d8  49de              LDR      r1,|L1.3412|
0009da  6809              LDR      r1,[r1,#0]            ;235  ; k
0009dc  4288              CMP      r0,r1                 ;235
0009de  d8ec              BHI      |L1.2490|
;;;238    }	
;;;239    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0009e0  210a              MOVS     r1,#0xa
0009e2  48dd              LDR      r0,|L1.3416|
0009e4  f7fffffe          BL       uart_putchar
0009e8  210a              MOVS     r1,#0xa
0009ea  48db              LDR      r0,|L1.3416|
0009ec  f7fffffe          BL       uart_putchar
0009f0  210a              MOVS     r1,#0xa
0009f2  48d9              LDR      r0,|L1.3416|
0009f4  f7fffffe          BL       uart_putchar
0009f8  210a              MOVS     r1,#0xa
0009fa  48d7              LDR      r0,|L1.3416|
0009fc  f7fffffe          BL       uart_putchar
000a00  210a              MOVS     r1,#0xa
000a02  48d5              LDR      r0,|L1.3416|
000a04  f7fffffe          BL       uart_putchar
000a08  210a              MOVS     r1,#0xa
000a0a  48d3              LDR      r0,|L1.3416|
000a0c  f7fffffe          BL       uart_putchar
000a10  210a              MOVS     r1,#0xa
000a12  48d1              LDR      r0,|L1.3416|
000a14  f7fffffe          BL       uart_putchar
000a18  210a              MOVS     r1,#0xa
000a1a  48cf              LDR      r0,|L1.3416|
000a1c  f7fffffe          BL       uart_putchar
000a20  210a              MOVS     r1,#0xa
000a22  48cd              LDR      r0,|L1.3416|
000a24  f7fffffe          BL       uart_putchar
000a28  210a              MOVS     r1,#0xa
000a2a  48cb              LDR      r0,|L1.3416|
000a2c  f7fffffe          BL       uart_putchar
000a30  210a              MOVS     r1,#0xa
000a32  48c9              LDR      r0,|L1.3416|
000a34  f7fffffe          BL       uart_putchar
000a38  210a              MOVS     r1,#0xa
000a3a  48c7              LDR      r0,|L1.3416|
000a3c  f7fffffe          BL       uart_putchar
000a40  210a              MOVS     r1,#0xa
000a42  48c5              LDR      r0,|L1.3416|
000a44  f7fffffe          BL       uart_putchar
000a48  210a              MOVS     r1,#0xa
000a4a  48c3              LDR      r0,|L1.3416|
000a4c  f7fffffe          BL       uart_putchar
000a50  210a              MOVS     r1,#0xa
000a52  48c1              LDR      r0,|L1.3416|
000a54  e000              B        |L1.2648|
                  |L1.2646|
000a56  e0d3              B        |L1.3072|
                  |L1.2648|
000a58  f7fffffe          BL       uart_putchar
000a5c  210a              MOVS     r1,#0xa
000a5e  48be              LDR      r0,|L1.3416|
000a60  f7fffffe          BL       uart_putchar
000a64  210a              MOVS     r1,#0xa
000a66  48bc              LDR      r0,|L1.3416|
000a68  f7fffffe          BL       uart_putchar
000a6c  210a              MOVS     r1,#0xa
000a6e  48ba              LDR      r0,|L1.3416|
000a70  f7fffffe          BL       uart_putchar
000a74  210a              MOVS     r1,#0xa
000a76  48b8              LDR      r0,|L1.3416|
000a78  f7fffffe          BL       uart_putchar
000a7c  210a              MOVS     r1,#0xa
000a7e  48b6              LDR      r0,|L1.3416|
000a80  f7fffffe          BL       uart_putchar
000a84  210a              MOVS     r1,#0xa
000a86  48b4              LDR      r0,|L1.3416|
000a88  f7fffffe          BL       uart_putchar
000a8c  210a              MOVS     r1,#0xa
000a8e  48b2              LDR      r0,|L1.3416|
000a90  f7fffffe          BL       uart_putchar
000a94  210a              MOVS     r1,#0xa
000a96  48b0              LDR      r0,|L1.3416|
000a98  f7fffffe          BL       uart_putchar
000a9c  210a              MOVS     r1,#0xa
000a9e  48ae              LDR      r0,|L1.3416|
000aa0  f7fffffe          BL       uart_putchar
000aa4  210a              MOVS     r1,#0xa
000aa6  48ac              LDR      r0,|L1.3416|
000aa8  f7fffffe          BL       uart_putchar
000aac  210a              MOVS     r1,#0xa
000aae  48aa              LDR      r0,|L1.3416|
000ab0  f7fffffe          BL       uart_putchar
000ab4  210a              MOVS     r1,#0xa
000ab6  48a8              LDR      r0,|L1.3416|
000ab8  f7fffffe          BL       uart_putchar
000abc  210a              MOVS     r1,#0xa
000abe  48a6              LDR      r0,|L1.3416|
000ac0  f7fffffe          BL       uart_putchar
000ac4  210a              MOVS     r1,#0xa
000ac6  48a4              LDR      r0,|L1.3416|
000ac8  f7fffffe          BL       uart_putchar
000acc  210a              MOVS     r1,#0xa
000ace  48a2              LDR      r0,|L1.3416|
000ad0  f7fffffe          BL       uart_putchar
000ad4  210a              MOVS     r1,#0xa
000ad6  48a0              LDR      r0,|L1.3416|
000ad8  f7fffffe          BL       uart_putchar
000adc  210a              MOVS     r1,#0xa
000ade  489e              LDR      r0,|L1.3416|
000ae0  f7fffffe          BL       uart_putchar
000ae4  210a              MOVS     r1,#0xa
000ae6  489c              LDR      r0,|L1.3416|
000ae8  f7fffffe          BL       uart_putchar
000aec  210a              MOVS     r1,#0xa
000aee  489a              LDR      r0,|L1.3416|
000af0  f7fffffe          BL       uart_putchar
000af4  210a              MOVS     r1,#0xa
000af6  4898              LDR      r0,|L1.3416|
000af8  f7fffffe          BL       uart_putchar
000afc  210a              MOVS     r1,#0xa
000afe  4896              LDR      r0,|L1.3416|
000b00  f7fffffe          BL       uart_putchar
000b04  210a              MOVS     r1,#0xa
000b06  4894              LDR      r0,|L1.3416|
000b08  f7fffffe          BL       uart_putchar
000b0c  210a              MOVS     r1,#0xa
000b0e  4892              LDR      r0,|L1.3416|
000b10  f7fffffe          BL       uart_putchar
000b14  210a              MOVS     r1,#0xa
000b16  4890              LDR      r0,|L1.3416|
000b18  f7fffffe          BL       uart_putchar
000b1c  210a              MOVS     r1,#0xa
000b1e  488e              LDR      r0,|L1.3416|
000b20  f7fffffe          BL       uart_putchar
000b24  210a              MOVS     r1,#0xa
000b26  488c              LDR      r0,|L1.3416|
000b28  f7fffffe          BL       uart_putchar
000b2c  210a              MOVS     r1,#0xa
000b2e  488a              LDR      r0,|L1.3416|
000b30  f7fffffe          BL       uart_putchar
000b34  210a              MOVS     r1,#0xa
000b36  4888              LDR      r0,|L1.3416|
000b38  f7fffffe          BL       uart_putchar
000b3c  210a              MOVS     r1,#0xa
000b3e  4886              LDR      r0,|L1.3416|
000b40  f7fffffe          BL       uart_putchar
000b44  210a              MOVS     r1,#0xa
000b46  4884              LDR      r0,|L1.3416|
000b48  f7fffffe          BL       uart_putchar
000b4c  210a              MOVS     r1,#0xa
000b4e  4882              LDR      r0,|L1.3416|
000b50  f7fffffe          BL       uart_putchar
000b54  210a              MOVS     r1,#0xa
000b56  4880              LDR      r0,|L1.3416|
000b58  f7fffffe          BL       uart_putchar
000b5c  210a              MOVS     r1,#0xa
000b5e  487e              LDR      r0,|L1.3416|
000b60  f7fffffe          BL       uart_putchar
000b64  210a              MOVS     r1,#0xa
000b66  487c              LDR      r0,|L1.3416|
000b68  f7fffffe          BL       uart_putchar
000b6c  210a              MOVS     r1,#0xa
000b6e  487a              LDR      r0,|L1.3416|
000b70  f7fffffe          BL       uart_putchar
000b74  210a              MOVS     r1,#0xa
000b76  4878              LDR      r0,|L1.3416|
000b78  f7fffffe          BL       uart_putchar
000b7c  210a              MOVS     r1,#0xa
000b7e  4876              LDR      r0,|L1.3416|
000b80  f7fffffe          BL       uart_putchar
000b84  210a              MOVS     r1,#0xa
000b86  4874              LDR      r0,|L1.3416|
000b88  f7fffffe          BL       uart_putchar
000b8c  210a              MOVS     r1,#0xa
000b8e  4872              LDR      r0,|L1.3416|
000b90  f7fffffe          BL       uart_putchar
000b94  210a              MOVS     r1,#0xa
000b96  4870              LDR      r0,|L1.3416|
000b98  f7fffffe          BL       uart_putchar
000b9c  210a              MOVS     r1,#0xa
000b9e  486e              LDR      r0,|L1.3416|
000ba0  f7fffffe          BL       uart_putchar
000ba4  210a              MOVS     r1,#0xa
000ba6  486c              LDR      r0,|L1.3416|
000ba8  f7fffffe          BL       uart_putchar
;;;240    									//memset(data,0,1000);
;;;241    														//timer counts to wait for characters in uart 1 									
;;;242    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000bac  bf00              NOP      
                  |L1.2990|
000bae  495f              LDR      r1,|L1.3372|
000bb0  3190              ADDS     r1,r1,#0x90
000bb2  485f              LDR      r0,|L1.3376|
000bb4  f7fffffe          BL       strstr
000bb8  2800              CMP      r0,#0
000bba  d109              BNE      |L1.3024|
000bbc  495b              LDR      r1,|L1.3372|
000bbe  485c              LDR      r0,|L1.3376|
000bc0  f7fffffe          BL       strstr
000bc4  2800              CMP      r0,#0
000bc6  d103              BNE      |L1.3024|
000bc8  4861              LDR      r0,|L1.3408|
000bca  6800              LDR      r0,[r0,#0]  ; tout
000bcc  2805              CMP      r0,#5
000bce  ddee              BLE      |L1.2990|
                  |L1.3024|
;;;243    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;244    									}
;;;245    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000bd0  f7fffffe          BL       clear
;;;246    									//clear();
;;;247    									memset(data,0,strlen(data));
000bd4  485a              LDR      r0,|L1.3392|
000bd6  f7fffffe          BL       strlen
000bda  4604              MOV      r4,r0
000bdc  4621              MOV      r1,r4
000bde  4858              LDR      r0,|L1.3392|
000be0  f7fffffe          BL       __aeabi_memclr
;;;248    									clear();
000be4  f7fffffe          BL       clear
;;;249    									RESET_OFF;delay(100);
000be8  2020              MOVS     r0,#0x20
000bea  495c              LDR      r1,|L1.3420|
000bec  6088              STR      r0,[r1,#8]
000bee  2064              MOVS     r0,#0x64
000bf0  f7fffffe          BL       delay
;;;250    									RESET_ON;delay(100);		
000bf4  2020              MOVS     r0,#0x20
000bf6  4959              LDR      r1,|L1.3420|
000bf8  6048              STR      r0,[r1,#4]
000bfa  2064              MOVS     r0,#0x64
000bfc  f7fffffe          BL       delay
                  |L1.3072|
;;;251    }
;;;252    	
;;;253    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000c00  2004              MOVS     r0,#4
000c02  a357              ADR      r3,|L1.3424|
000c04  4a49              LDR      r2,|L1.3372|
000c06  327c              ADDS     r2,r2,#0x7c
000c08  a157              ADR      r1,|L1.3432|
000c0a  9000              STR      r0,[sp,#0]
000c0c  a057              ADR      r0,|L1.3436|
000c0e  f7fffffe          BL       send_GSM
;;;254    GPS_COLLECT2();
000c12  f7fffffe          BL       GPS_COLLECT2
;;;255    strreplace(data, ",L,", ",H,");	
000c16  4a45              LDR      r2,|L1.3372|
000c18  3248              ADDS     r2,r2,#0x48
000c1a  1d11              ADDS     r1,r2,#4
000c1c  4848              LDR      r0,|L1.3392|
000c1e  f7fffffe          BL       strreplace
;;;256    memset(at_,0,100);
000c22  2164              MOVS     r1,#0x64
000c24  4845              LDR      r0,|L1.3388|
000c26  f7fffffe          BL       __aeabi_memclr
;;;257    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000c2a  4a54              LDR      r2,|L1.3452|
000c2c  a154              ADR      r1,|L1.3456|
000c2e  4843              LDR      r0,|L1.3388|
000c30  f7fffffe          BL       __2sprintf
;;;258    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000c34  4857              LDR      r0,|L1.3476|
000c36  6800              LDR      r0,[r0,#0]  ; tmeout
000c38  a349              ADR      r3,|L1.3424|
000c3a  4a3c              LDR      r2,|L1.3372|
000c3c  327c              ADDS     r2,r2,#0x7c
000c3e  a14a              ADR      r1,|L1.3432|
000c40  9000              STR      r0,[sp,#0]
000c42  483e              LDR      r0,|L1.3388|
000c44  f7fffffe          BL       send_GSM
;;;259    msg_sim800(); 
000c48  f7fffffe          BL       msg_sim800
;;;260    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000c4c  2004              MOVS     r0,#4
000c4e  4b37              LDR      r3,|L1.3372|
000c50  331c              ADDS     r3,r3,#0x1c
000c52  461a              MOV      r2,r3
000c54  3260              ADDS     r2,r2,#0x60
000c56  a144              ADR      r1,|L1.3432|
000c58  9000              STR      r0,[sp,#0]
000c5a  a04f              ADR      r0,|L1.3480|
000c5c  f7fffffe          BL       send_GSM
;;;261    GPS_COLLECT2();
000c60  f7fffffe          BL       GPS_COLLECT2
;;;262    strreplace(data, ",L,", ",H,");	
000c64  4a31              LDR      r2,|L1.3372|
000c66  3248              ADDS     r2,r2,#0x48
000c68  1d11              ADDS     r1,r2,#4
000c6a  4835              LDR      r0,|L1.3392|
000c6c  f7fffffe          BL       strreplace
;;;263    GPS_COLLECT2();
000c70  f7fffffe          BL       GPS_COLLECT2
;;;264    strreplace(data, ",L,", ",H,");	
000c74  4a2d              LDR      r2,|L1.3372|
000c76  3248              ADDS     r2,r2,#0x48
000c78  1d11              ADDS     r1,r2,#4
000c7a  4831              LDR      r0,|L1.3392|
000c7c  f7fffffe          BL       strreplace
;;;265    
;;;266    
;;;267    msg_sim800(); 
000c80  f7fffffe          BL       msg_sim800
;;;268    GPS_COLLECT2();
000c84  f7fffffe          BL       GPS_COLLECT2
;;;269    strreplace(data, ",L,", ",H,");	
000c88  4a28              LDR      r2,|L1.3372|
000c8a  3248              ADDS     r2,r2,#0x48
000c8c  1d11              ADDS     r1,r2,#4
000c8e  482c              LDR      r0,|L1.3392|
000c90  f7fffffe          BL       strreplace
;;;270    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR" , "DEACT",1);		
000c94  2001              MOVS     r0,#1
000c96  4b25              LDR      r3,|L1.3372|
000c98  331c              ADDS     r3,r3,#0x1c
000c9a  4a24              LDR      r2,|L1.3372|
000c9c  a132              ADR      r1,|L1.3432|
000c9e  9000              STR      r0,[sp,#0]
000ca0  a041              ADR      r0,|L1.3496|
000ca2  f7fffffe          BL       send_GSM
;;;271    
;;;272    //delay(20);
;;;273    
;;;274    
;;;275    msg_sim800(); 
000ca6  f7fffffe          BL       msg_sim800
;;;276    
;;;277    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000caa  4b43              LDR      r3,|L1.3512|
000cac  4a43              LDR      r2,|L1.3516|
000cae  a144              ADR      r1,|L1.3520|
000cb0  4822              LDR      r0,|L1.3388|
000cb2  f7fffffe          BL       __2sprintf
;;;278    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000cb6  4837              LDR      r0,|L1.3476|
000cb8  6800              LDR      r0,[r0,#0]  ; tmeout
000cba  a329              ADR      r3,|L1.3424|
000cbc  4a1b              LDR      r2,|L1.3372|
000cbe  a148              ADR      r1,|L1.3552|
000cc0  9000              STR      r0,[sp,#0]
000cc2  481e              LDR      r0,|L1.3388|
000cc4  f7fffffe          BL       send_GSM
;;;279    						clear();
000cc8  f7fffffe          BL       clear
;;;280    						
;;;281    						
;;;282    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
000ccc  4831              LDR      r0,|L1.3476|
000cce  6800              LDR      r0,[r0,#0]  ; tmeout
000cd0  a345              ADR      r3,|L1.3560|
000cd2  4a16              LDR      r2,|L1.3372|
000cd4  a11c              ADR      r1,|L1.3400|
000cd6  9000              STR      r0,[sp,#0]
000cd8  a047              ADR      r0,|L1.3576|
000cda  f7fffffe          BL       send_GSM
;;;283    //*********************************tcp_initialization_ends*****************************************************//							
;;;284    									
;;;285    						clear();		
000cde  f7fffffe          BL       clear
;;;286    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
000ce2  213e              MOVS     r1,#0x3e
000ce4  4812              LDR      r0,|L1.3376|
000ce6  f7fffffe          BL       mystrstr
000cea  4947              LDR      r1,|L1.3592|
000cec  7008              STRB     r0,[r1,#0]
;;;287    								if(cond)	
000cee  4608              MOV      r0,r1
000cf0  7800              LDRB     r0,[r0,#0]  ; cond
000cf2  2800              CMP      r0,#0
000cf4  d016              BEQ      |L1.3364|
;;;288    								{	
;;;289    
;;;290    									clear();
000cf6  f7fffffe          BL       clear
;;;291    									memset(uart_string_gsm,0,5000);
000cfa  4944              LDR      r1,|L1.3596|
000cfc  480c              LDR      r0,|L1.3376|
000cfe  f7fffffe          BL       __aeabi_memclr
;;;292    									strcat(data,"\n");
000d02  a128              ADR      r1,|L1.3492|
000d04  480e              LDR      r0,|L1.3392|
000d06  f7fffffe          BL       strcat
;;;293    									len=strlen(data);
000d0a  480d              LDR      r0,|L1.3392|
000d0c  f7fffffe          BL       strlen
000d10  493f              LDR      r1,|L1.3600|
000d12  6008              STR      r0,[r1,#0]  ; len
;;;294    									tout=0;
000d14  2000              MOVS     r0,#0
000d16  490e              LDR      r1,|L1.3408|
000d18  6008              STR      r0,[r1,#0]  ; tout
;;;295    									k2=0;
000d1a  490c              LDR      r1,|L1.3404|
000d1c  6008              STR      r0,[r1,#0]  ; k2
;;;296    									for(k=0;k<len;k++)
000d1e  490d              LDR      r1,|L1.3412|
000d20  6008              STR      r0,[r1,#0]  ; k
000d22  e083              B        |L1.3628|
                  |L1.3364|
000d24  e225              B        |L1.4466|
000d26  0000              DCW      0x0000
                  |L1.3368|
                          DCD      cond201
                  |L1.3372|
                          DCD      ||.text||+0x870
                  |L1.3376|
                          DCD      uart_string_gsm
                  |L1.3380|
                          DCD      cond200
                  |L1.3384|
                          DCD      sleep_flag
                  |L1.3388|
                          DCD      at_
                  |L1.3392|
                          DCD      data
                  |L1.3396|
                          DCD      drive
                  |L1.3400|
000d48  3e00              DCB      ">",0
000d4a  00                DCB      0
000d4b  00                DCB      0
                  |L1.3404|
                          DCD      ||k2||
                  |L1.3408|
                          DCD      tout
                  |L1.3412|
                          DCD      k
                  |L1.3416|
                          DCD      0x4006b000
                  |L1.3420|
                          DCD      0x400ff080
                  |L1.3424|
000d60  4552524f          DCB      "ERROR:",0
000d64  523a00  
000d67  00                DCB      0
                  |L1.3432|
000d68  4f4b00            DCB      "OK",0
000d6b  00                DCB      0
                  |L1.3436|
000d6c  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
000d70  2b434950
000d74  53485554
000d78  0d0a00  
000d7b  00                DCB      0
                  |L1.3452|
                          DCD      apn
                  |L1.3456|
000d80  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
000d84  2b435354
000d88  543d2225
000d8c  73220d0a
000d90  00      
000d91  00                DCB      0
000d92  00                DCB      0
000d93  00                DCB      0
                  |L1.3476|
                          DCD      tmeout
                  |L1.3480|
000d98  0d0a4154          DCB      "\r\nAT+CIICR\r\r"
000d9c  2b434949
000da0  43520d0d
                  |L1.3492|
000da4  0a00              DCB      "\n",0
000da6  00                DCB      0
000da7  00                DCB      0
                  |L1.3496|
000da8  0d0a4154          DCB      "\r\nAT+CIFSR\r\r\n",0
000dac  2b434946
000db0  53520d0d
000db4  0a00    
000db6  00                DCB      0
000db7  00                DCB      0
                  |L1.3512|
                          DCD      port
                  |L1.3516|
                          DCD      ||ip||
                  |L1.3520|
000dc0  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000dc4  2b434950
000dc8  53544152
000dcc  543d2254
000dd0  4350222c
000dd4  22257322
000dd8  2c222573
000ddc  220d0a00
                  |L1.3552|
000de0  434f4e4e          DCB      "CONNECT",0
000de4  45435400
                  |L1.3560|
000de8  434f4e4e          DCB      "CONNECT FAIL",0
000dec  45435420
000df0  4641494c
000df4  00      
000df5  00                DCB      0
000df6  00                DCB      0
000df7  00                DCB      0
                  |L1.3576|
000df8  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
000dfc  2b434950
000e00  53454e44
000e04  0d0a00  
000e07  00                DCB      0
                  |L1.3592|
                          DCD      cond
                  |L1.3596|
                          DCD      0x00001388
                  |L1.3600|
                          DCD      len
                  |L1.3604|
;;;297    									{
;;;298    										uart_putchar(UART1_BASE_PTR, data[k]);
000e14  48fd              LDR      r0,|L1.4620|
000e16  4afe              LDR      r2,|L1.4624|
000e18  6812              LDR      r2,[r2,#0]  ; k
000e1a  5c81              LDRB     r1,[r0,r2]
000e1c  48fd              LDR      r0,|L1.4628|
000e1e  f7fffffe          BL       uart_putchar
000e22  48fb              LDR      r0,|L1.4624|
000e24  6800              LDR      r0,[r0,#0]            ;296  ; k
000e26  1c40              ADDS     r0,r0,#1              ;296
000e28  49f9              LDR      r1,|L1.4624|
000e2a  6008              STR      r0,[r1,#0]            ;296  ; k
                  |L1.3628|
000e2c  48f8              LDR      r0,|L1.4624|
000e2e  6800              LDR      r0,[r0,#0]            ;296  ; k
000e30  49f9              LDR      r1,|L1.4632|
000e32  6809              LDR      r1,[r1,#0]            ;296  ; len
000e34  4288              CMP      r0,r1                 ;296
000e36  dbed              BLT      |L1.3604|
;;;299    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000e38  210a              MOVS     r1,#0xa
000e3a  48f6              LDR      r0,|L1.4628|
000e3c  f7fffffe          BL       uart_putchar
000e40  211a              MOVS     r1,#0x1a
000e42  48f4              LDR      r0,|L1.4628|
000e44  f7fffffe          BL       uart_putchar
000e48  211a              MOVS     r1,#0x1a
000e4a  48f2              LDR      r0,|L1.4628|
000e4c  f7fffffe          BL       uart_putchar
000e50  211a              MOVS     r1,#0x1a
000e52  48f0              LDR      r0,|L1.4628|
000e54  f7fffffe          BL       uart_putchar
;;;300    									do
000e58  bf00              NOP      
                  |L1.3674|
;;;301    																{stcond1=strstr(uart_string_gsm,"SEND OK");
000e5a  49f0              LDR      r1,|L1.4636|
000e5c  48f0              LDR      r0,|L1.4640|
000e5e  f7fffffe          BL       strstr
000e62  49f0              LDR      r1,|L1.4644|
000e64  6008              STR      r0,[r1,#0]  ; stcond1
;;;302    																	stcond2=strstr(uart_string_gsm, "ERROR");
000e66  49f0              LDR      r1,|L1.4648|
000e68  48ed              LDR      r0,|L1.4640|
000e6a  f7fffffe          BL       strstr
000e6e  49ef              LDR      r1,|L1.4652|
000e70  6008              STR      r0,[r1,#0]  ; stcond2
;;;303    																		stcond3=strstr(uart_string_gsm, "FAIL");	
000e72  49ef              LDR      r1,|L1.4656|
000e74  48ea              LDR      r0,|L1.4640|
000e76  f7fffffe          BL       strstr
000e7a  49ee              LDR      r1,|L1.4660|
000e7c  6008              STR      r0,[r1,#0]  ; stcond3
;;;304    																			stcond4=strstr(uart_string_gsm, "DEACT");	
000e7e  49ea              LDR      r1,|L1.4648|
000e80  311c              ADDS     r1,r1,#0x1c
000e82  48e7              LDR      r0,|L1.4640|
000e84  f7fffffe          BL       strstr
000e88  49eb              LDR      r1,|L1.4664|
000e8a  6008              STR      r0,[r1,#0]  ; stcond4
;;;305    																	
;;;306    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
000e8c  48e7              LDR      r0,|L1.4652|
000e8e  6800              LDR      r0,[r0,#0]  ; stcond2
000e90  2800              CMP      r0,#0
000e92  d10f              BNE      |L1.3764|
000e94  48e7              LDR      r0,|L1.4660|
000e96  6800              LDR      r0,[r0,#0]  ; stcond3
000e98  2800              CMP      r0,#0
000e9a  d10b              BNE      |L1.3764|
000e9c  4608              MOV      r0,r1
000e9e  6800              LDR      r0,[r0,#0]  ; stcond4
000ea0  2800              CMP      r0,#0
000ea2  d107              BNE      |L1.3764|
000ea4  48df              LDR      r0,|L1.4644|
000ea6  6800              LDR      r0,[r0,#0]  ; stcond1
000ea8  2800              CMP      r0,#0
000eaa  d103              BNE      |L1.3764|
000eac  48e3              LDR      r0,|L1.4668|
000eae  6800              LDR      r0,[r0,#0]  ; tout
000eb0  2805              CMP      r0,#5
000eb2  ddd2              BLE      |L1.3674|
                  |L1.3764|
;;;307    															//	delay(10);clear();
;;;308    														uart_putchar(UART1_BASE_PTR,0x1A);
000eb4  211a              MOVS     r1,#0x1a
000eb6  48d7              LDR      r0,|L1.4628|
000eb8  f7fffffe          BL       uart_putchar
;;;309    											//	delay(10);
;;;310    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000ebc  211a              MOVS     r1,#0x1a
000ebe  48d5              LDR      r0,|L1.4628|
000ec0  f7fffffe          BL       uart_putchar
000ec4  211a              MOVS     r1,#0x1a
000ec6  48d3              LDR      r0,|L1.4628|
000ec8  f7fffffe          BL       uart_putchar
000ecc  211a              MOVS     r1,#0x1a
000ece  48d1              LDR      r0,|L1.4628|
000ed0  f7fffffe          BL       uart_putchar
;;;311    						
;;;312    
;;;313    
;;;314    									
;;;315    															
;;;316    															
;;;317    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;318    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;319    															
;;;320    														//qwe=strlen(uart_string_gsm);
;;;321    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;322    															delay(20);
000ed4  2014              MOVS     r0,#0x14
000ed6  f7fffffe          BL       delay
;;;323    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
000eda  49d0              LDR      r1,|L1.4636|
000edc  48d0              LDR      r0,|L1.4640|
000ede  f7fffffe          BL       strstr
000ee2  49d7              LDR      r1,|L1.4672|
000ee4  6008              STR      r0,[r1,#0]  ; con1d
;;;324    																if(!con1d)
000ee6  4608              MOV      r0,r1
000ee8  6800              LDR      r0,[r0,#0]  ; con1d
000eea  2800              CMP      r0,#0
000eec  d17e              BNE      |L1.4076|
;;;325    																{
;;;326    																	
;;;327    																	
;;;328    																	
;;;329    																	
;;;330    																	
;;;331    	delay(100);
000eee  2064              MOVS     r0,#0x64
000ef0  f7fffffe          BL       delay
;;;332    		clear();//memset(uart_string_gsm,0,5000);
000ef4  f7fffffe          BL       clear
;;;333    	
;;;334    	memset(at_,0,100);
000ef8  2164              MOVS     r1,#0x64
000efa  48d2              LDR      r0,|L1.4676|
000efc  f7fffffe          BL       __aeabi_memclr
;;;335    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000f00  48c2              LDR      r0,|L1.4620|
000f02  f7fffffe          BL       strlen
000f06  1c44              ADDS     r4,r0,#1
000f08  4623              MOV      r3,r4
000f0a  4acf              LDR      r2,|L1.4680|
000f0c  49c6              LDR      r1,|L1.4648|
000f0e  3158              ADDS     r1,r1,#0x58
000f10  48cc              LDR      r0,|L1.4676|
000f12  f7fffffe          BL       __2sprintf
;;;336    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000f16  2005              MOVS     r0,#5
000f18  4bc3              LDR      r3,|L1.4648|
000f1a  461a              MOV      r2,r3
000f1c  327c              ADDS     r2,r2,#0x7c
000f1e  a1cb              ADR      r1,|L1.4684|
000f20  9000              STR      r0,[sp,#0]
000f22  48c8              LDR      r0,|L1.4676|
000f24  f7fffffe          BL       send_SD
;;;337    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;338    //	if(strstr(uart_string_gsm,"ERROR")){
;;;339    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;340    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;341    //	}
;;;342    	
;;;343    clear();	
000f28  f7fffffe          BL       clear
;;;344    									k2=0;									//string array counter for uart 1
000f2c  2000              MOVS     r0,#0
000f2e  49c8              LDR      r1,|L1.4688|
000f30  6008              STR      r0,[r1,#0]  ; k2
;;;345    									tout=0;	
000f32  49c2              LDR      r1,|L1.4668|
000f34  6008              STR      r0,[r1,#0]  ; tout
;;;346    		for(k=0;k<strlen(data);k++)
000f36  49b6              LDR      r1,|L1.4624|
000f38  6008              STR      r0,[r1,#0]  ; k
000f3a  e00b              B        |L1.3924|
                  |L1.3900|
;;;347    		{
;;;348    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000f3c  48b3              LDR      r0,|L1.4620|
000f3e  4ab4              LDR      r2,|L1.4624|
000f40  6812              LDR      r2,[r2,#0]  ; k
000f42  5c81              LDRB     r1,[r0,r2]
000f44  48b3              LDR      r0,|L1.4628|
000f46  f7fffffe          BL       uart_putchar
000f4a  48b1              LDR      r0,|L1.4624|
000f4c  6800              LDR      r0,[r0,#0]            ;346  ; k
000f4e  1c40              ADDS     r0,r0,#1              ;346
000f50  49af              LDR      r1,|L1.4624|
000f52  6008              STR      r0,[r1,#0]            ;346  ; k
                  |L1.3924|
000f54  48ad              LDR      r0,|L1.4620|
000f56  f7fffffe          BL       strlen
000f5a  49ad              LDR      r1,|L1.4624|
000f5c  6809              LDR      r1,[r1,#0]            ;346  ; k
000f5e  4288              CMP      r0,r1                 ;346
000f60  d8ec              BHI      |L1.3900|
;;;349    		}	
;;;350    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000f62  210a              MOVS     r1,#0xa
000f64  48ab              LDR      r0,|L1.4628|
000f66  f7fffffe          BL       uart_putchar
000f6a  210a              MOVS     r1,#0xa
000f6c  48a9              LDR      r0,|L1.4628|
000f6e  f7fffffe          BL       uart_putchar
000f72  210a              MOVS     r1,#0xa
000f74  48a7              LDR      r0,|L1.4628|
000f76  f7fffffe          BL       uart_putchar
000f7a  210a              MOVS     r1,#0xa
000f7c  48a5              LDR      r0,|L1.4628|
000f7e  f7fffffe          BL       uart_putchar
000f82  210a              MOVS     r1,#0xa
000f84  48a3              LDR      r0,|L1.4628|
000f86  f7fffffe          BL       uart_putchar
000f8a  210a              MOVS     r1,#0xa
000f8c  48a1              LDR      r0,|L1.4628|
000f8e  f7fffffe          BL       uart_putchar
000f92  210a              MOVS     r1,#0xa
000f94  489f              LDR      r0,|L1.4628|
000f96  f7fffffe          BL       uart_putchar
000f9a  210a              MOVS     r1,#0xa
000f9c  489d              LDR      r0,|L1.4628|
000f9e  f7fffffe          BL       uart_putchar
000fa2  210a              MOVS     r1,#0xa
000fa4  489b              LDR      r0,|L1.4628|
000fa6  f7fffffe          BL       uart_putchar
000faa  210a              MOVS     r1,#0xa
000fac  4899              LDR      r0,|L1.4628|
000fae  f7fffffe          BL       uart_putchar
000fb2  210a              MOVS     r1,#0xa
000fb4  4897              LDR      r0,|L1.4628|
000fb6  f7fffffe          BL       uart_putchar
000fba  210a              MOVS     r1,#0xa
000fbc  4895              LDR      r0,|L1.4628|
000fbe  f7fffffe          BL       uart_putchar
000fc2  210a              MOVS     r1,#0xa
000fc4  4893              LDR      r0,|L1.4628|
000fc6  f7fffffe          BL       uart_putchar
000fca  210a              MOVS     r1,#0xa
000fcc  4891              LDR      r0,|L1.4628|
000fce  f7fffffe          BL       uart_putchar
000fd2  210a              MOVS     r1,#0xa
000fd4  488f              LDR      r0,|L1.4628|
000fd6  f7fffffe          BL       uart_putchar
000fda  210a              MOVS     r1,#0xa
000fdc  488d              LDR      r0,|L1.4628|
000fde  f7fffffe          BL       uart_putchar
000fe2  210a              MOVS     r1,#0xa
000fe4  488b              LDR      r0,|L1.4628|
000fe6  f7fffffe          BL       uart_putchar
000fea  e000              B        |L1.4078|
                  |L1.4076|
000fec  e0be              B        |L1.4460|
                  |L1.4078|
000fee  210a              MOVS     r1,#0xa
000ff0  4888              LDR      r0,|L1.4628|
000ff2  f7fffffe          BL       uart_putchar
000ff6  210a              MOVS     r1,#0xa
000ff8  4886              LDR      r0,|L1.4628|
000ffa  f7fffffe          BL       uart_putchar
000ffe  210a              MOVS     r1,#0xa
001000  4884              LDR      r0,|L1.4628|
001002  f7fffffe          BL       uart_putchar
001006  210a              MOVS     r1,#0xa
001008  4882              LDR      r0,|L1.4628|
00100a  f7fffffe          BL       uart_putchar
00100e  210a              MOVS     r1,#0xa
001010  4880              LDR      r0,|L1.4628|
001012  f7fffffe          BL       uart_putchar
001016  210a              MOVS     r1,#0xa
001018  487e              LDR      r0,|L1.4628|
00101a  f7fffffe          BL       uart_putchar
00101e  210a              MOVS     r1,#0xa
001020  487c              LDR      r0,|L1.4628|
001022  f7fffffe          BL       uart_putchar
001026  210a              MOVS     r1,#0xa
001028  487a              LDR      r0,|L1.4628|
00102a  f7fffffe          BL       uart_putchar
00102e  210a              MOVS     r1,#0xa
001030  4878              LDR      r0,|L1.4628|
001032  f7fffffe          BL       uart_putchar
001036  210a              MOVS     r1,#0xa
001038  4876              LDR      r0,|L1.4628|
00103a  f7fffffe          BL       uart_putchar
00103e  210a              MOVS     r1,#0xa
001040  4874              LDR      r0,|L1.4628|
001042  f7fffffe          BL       uart_putchar
001046  210a              MOVS     r1,#0xa
001048  4872              LDR      r0,|L1.4628|
00104a  f7fffffe          BL       uart_putchar
00104e  210a              MOVS     r1,#0xa
001050  4870              LDR      r0,|L1.4628|
001052  f7fffffe          BL       uart_putchar
001056  210a              MOVS     r1,#0xa
001058  486e              LDR      r0,|L1.4628|
00105a  f7fffffe          BL       uart_putchar
00105e  210a              MOVS     r1,#0xa
001060  486c              LDR      r0,|L1.4628|
001062  f7fffffe          BL       uart_putchar
001066  210a              MOVS     r1,#0xa
001068  486a              LDR      r0,|L1.4628|
00106a  f7fffffe          BL       uart_putchar
00106e  210a              MOVS     r1,#0xa
001070  4868              LDR      r0,|L1.4628|
001072  f7fffffe          BL       uart_putchar
001076  210a              MOVS     r1,#0xa
001078  4866              LDR      r0,|L1.4628|
00107a  f7fffffe          BL       uart_putchar
00107e  210a              MOVS     r1,#0xa
001080  4864              LDR      r0,|L1.4628|
001082  f7fffffe          BL       uart_putchar
001086  210a              MOVS     r1,#0xa
001088  4862              LDR      r0,|L1.4628|
00108a  f7fffffe          BL       uart_putchar
00108e  210a              MOVS     r1,#0xa
001090  4860              LDR      r0,|L1.4628|
001092  f7fffffe          BL       uart_putchar
001096  210a              MOVS     r1,#0xa
001098  485e              LDR      r0,|L1.4628|
00109a  f7fffffe          BL       uart_putchar
00109e  210a              MOVS     r1,#0xa
0010a0  485c              LDR      r0,|L1.4628|
0010a2  f7fffffe          BL       uart_putchar
0010a6  210a              MOVS     r1,#0xa
0010a8  485a              LDR      r0,|L1.4628|
0010aa  f7fffffe          BL       uart_putchar
0010ae  210a              MOVS     r1,#0xa
0010b0  4858              LDR      r0,|L1.4628|
0010b2  f7fffffe          BL       uart_putchar
0010b6  210a              MOVS     r1,#0xa
0010b8  4856              LDR      r0,|L1.4628|
0010ba  f7fffffe          BL       uart_putchar
0010be  210a              MOVS     r1,#0xa
0010c0  4854              LDR      r0,|L1.4628|
0010c2  f7fffffe          BL       uart_putchar
0010c6  210a              MOVS     r1,#0xa
0010c8  4852              LDR      r0,|L1.4628|
0010ca  f7fffffe          BL       uart_putchar
0010ce  210a              MOVS     r1,#0xa
0010d0  4850              LDR      r0,|L1.4628|
0010d2  f7fffffe          BL       uart_putchar
0010d6  210a              MOVS     r1,#0xa
0010d8  484e              LDR      r0,|L1.4628|
0010da  f7fffffe          BL       uart_putchar
0010de  210a              MOVS     r1,#0xa
0010e0  484c              LDR      r0,|L1.4628|
0010e2  f7fffffe          BL       uart_putchar
0010e6  210a              MOVS     r1,#0xa
0010e8  484a              LDR      r0,|L1.4628|
0010ea  f7fffffe          BL       uart_putchar
0010ee  210a              MOVS     r1,#0xa
0010f0  4848              LDR      r0,|L1.4628|
0010f2  f7fffffe          BL       uart_putchar
0010f6  210a              MOVS     r1,#0xa
0010f8  4846              LDR      r0,|L1.4628|
0010fa  f7fffffe          BL       uart_putchar
0010fe  210a              MOVS     r1,#0xa
001100  4844              LDR      r0,|L1.4628|
001102  f7fffffe          BL       uart_putchar
001106  210a              MOVS     r1,#0xa
001108  4842              LDR      r0,|L1.4628|
00110a  f7fffffe          BL       uart_putchar
00110e  210a              MOVS     r1,#0xa
001110  4840              LDR      r0,|L1.4628|
001112  f7fffffe          BL       uart_putchar
001116  210a              MOVS     r1,#0xa
001118  483e              LDR      r0,|L1.4628|
00111a  f7fffffe          BL       uart_putchar
00111e  210a              MOVS     r1,#0xa
001120  483c              LDR      r0,|L1.4628|
001122  f7fffffe          BL       uart_putchar
001126  210a              MOVS     r1,#0xa
001128  483a              LDR      r0,|L1.4628|
00112a  f7fffffe          BL       uart_putchar
;;;351    									//memset(data,0,1000);
;;;352    														//timer counts to wait for characters in uart 1 									
;;;353    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00112e  bf00              NOP      
                  |L1.4400|
001130  493d              LDR      r1,|L1.4648|
001132  3190              ADDS     r1,r1,#0x90
001134  483a              LDR      r0,|L1.4640|
001136  f7fffffe          BL       strstr
00113a  2800              CMP      r0,#0
00113c  d109              BNE      |L1.4434|
00113e  493a              LDR      r1,|L1.4648|
001140  4837              LDR      r0,|L1.4640|
001142  f7fffffe          BL       strstr
001146  2800              CMP      r0,#0
001148  d103              BNE      |L1.4434|
00114a  483c              LDR      r0,|L1.4668|
00114c  6800              LDR      r0,[r0,#0]  ; tout
00114e  2805              CMP      r0,#5
001150  ddee              BLE      |L1.4400|
                  |L1.4434|
;;;354    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;355    									}
;;;356    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001152  f7fffffe          BL       clear
;;;357    									//clear();
;;;358    									memset(data,0,strlen(data));
001156  482d              LDR      r0,|L1.4620|
001158  f7fffffe          BL       strlen
00115c  4604              MOV      r4,r0
00115e  4621              MOV      r1,r4
001160  482a              LDR      r0,|L1.4620|
001162  f7fffffe          BL       __aeabi_memclr
;;;359    									clear();
001166  f7fffffe          BL       clear
00116a  e166              B        |L1.5178|
                  |L1.4460|
;;;360    
;;;361    								
;;;362    								//								log_it();								
;;;363    																}else{send_chunk();}													
00116c  f7fffffe          BL       send_chunk
001170  e163              B        |L1.5178|
                  |L1.4466|
;;;364    								//checks for the sd_data available
;;;365    								}
;;;366    								//con1d=strstr(uart_string_gsm,"OK");
;;;367    								else
;;;368    								{
;;;369    									
;;;370    									
;;;371    	delay(100);
001172  2064              MOVS     r0,#0x64
001174  f7fffffe          BL       delay
;;;372    		clear();//memset(uart_string_gsm,0,5000);
001178  f7fffffe          BL       clear
;;;373    	
;;;374    	memset(at_,0,100);
00117c  2164              MOVS     r1,#0x64
00117e  4831              LDR      r0,|L1.4676|
001180  f7fffffe          BL       __aeabi_memclr
;;;375    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001184  4821              LDR      r0,|L1.4620|
001186  f7fffffe          BL       strlen
00118a  1c44              ADDS     r4,r0,#1
00118c  4623              MOV      r3,r4
00118e  4a2e              LDR      r2,|L1.4680|
001190  4925              LDR      r1,|L1.4648|
001192  3158              ADDS     r1,r1,#0x58
001194  482b              LDR      r0,|L1.4676|
001196  f7fffffe          BL       __2sprintf
;;;376    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00119a  2005              MOVS     r0,#5
00119c  4b22              LDR      r3,|L1.4648|
00119e  461a              MOV      r2,r3
0011a0  327c              ADDS     r2,r2,#0x7c
0011a2  a12a              ADR      r1,|L1.4684|
0011a4  9000              STR      r0,[sp,#0]
0011a6  4827              LDR      r0,|L1.4676|
0011a8  f7fffffe          BL       send_SD
;;;377    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;378    //	if(strstr(uart_string_gsm,"ERROR")){
;;;379    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;380    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;381    //	}
;;;382    	
;;;383    clear();	
0011ac  f7fffffe          BL       clear
;;;384    									k2=0;									//string array counter for uart 1
0011b0  2000              MOVS     r0,#0
0011b2  4927              LDR      r1,|L1.4688|
0011b4  6008              STR      r0,[r1,#0]  ; k2
;;;385    									tout=0;	
0011b6  4921              LDR      r1,|L1.4668|
0011b8  6008              STR      r0,[r1,#0]  ; tout
;;;386    		for(k=0;k<strlen(data);k++)
0011ba  4915              LDR      r1,|L1.4624|
0011bc  6008              STR      r0,[r1,#0]  ; k
0011be  e00b              B        |L1.4568|
                  |L1.4544|
;;;387    		{
;;;388    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0011c0  4812              LDR      r0,|L1.4620|
0011c2  4a13              LDR      r2,|L1.4624|
0011c4  6812              LDR      r2,[r2,#0]  ; k
0011c6  5c81              LDRB     r1,[r0,r2]
0011c8  4812              LDR      r0,|L1.4628|
0011ca  f7fffffe          BL       uart_putchar
0011ce  4810              LDR      r0,|L1.4624|
0011d0  6800              LDR      r0,[r0,#0]            ;386  ; k
0011d2  1c40              ADDS     r0,r0,#1              ;386
0011d4  490e              LDR      r1,|L1.4624|
0011d6  6008              STR      r0,[r1,#0]            ;386  ; k
                  |L1.4568|
0011d8  480c              LDR      r0,|L1.4620|
0011da  f7fffffe          BL       strlen
0011de  490c              LDR      r1,|L1.4624|
0011e0  6809              LDR      r1,[r1,#0]            ;386  ; k
0011e2  4288              CMP      r0,r1                 ;386
0011e4  d8ec              BHI      |L1.4544|
;;;389    		}	
;;;390    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0011e6  210a              MOVS     r1,#0xa
0011e8  480a              LDR      r0,|L1.4628|
0011ea  f7fffffe          BL       uart_putchar
0011ee  210a              MOVS     r1,#0xa
0011f0  4808              LDR      r0,|L1.4628|
0011f2  f7fffffe          BL       uart_putchar
0011f6  210a              MOVS     r1,#0xa
0011f8  4806              LDR      r0,|L1.4628|
0011fa  f7fffffe          BL       uart_putchar
0011fe  210a              MOVS     r1,#0xa
001200  4804              LDR      r0,|L1.4628|
001202  f7fffffe          BL       uart_putchar
001206  210a              MOVS     r1,#0xa
001208  4802              LDR      r0,|L1.4628|
00120a  e023              B        |L1.4692|
                  |L1.4620|
                          DCD      data
                  |L1.4624|
                          DCD      k
                  |L1.4628|
                          DCD      0x4006b000
                  |L1.4632|
                          DCD      len
                  |L1.4636|
                          DCD      ||.text||+0x474
                  |L1.4640|
                          DCD      uart_string_gsm
                  |L1.4644|
                          DCD      stcond1
                  |L1.4648|
                          DCD      ||.text||+0x870
                  |L1.4652|
                          DCD      stcond2
                  |L1.4656|
                          DCD      ||.text||+0xdf0
                  |L1.4660|
                          DCD      stcond3
                  |L1.4664|
                          DCD      stcond4
                  |L1.4668|
                          DCD      tout
                  |L1.4672|
                          DCD      con1d
                  |L1.4676|
                          DCD      at_
                  |L1.4680|
                          DCD      drive
                  |L1.4684|
00124c  3e00              DCB      ">",0
00124e  00                DCB      0
00124f  00                DCB      0
                  |L1.4688|
                          DCD      ||k2||
                  |L1.4692|
001254  f7fffffe          BL       uart_putchar
001258  210a              MOVS     r1,#0xa
00125a  48fe              LDR      r0,|L1.5716|
00125c  f7fffffe          BL       uart_putchar
001260  210a              MOVS     r1,#0xa
001262  48fc              LDR      r0,|L1.5716|
001264  f7fffffe          BL       uart_putchar
001268  210a              MOVS     r1,#0xa
00126a  48fa              LDR      r0,|L1.5716|
00126c  f7fffffe          BL       uart_putchar
001270  210a              MOVS     r1,#0xa
001272  48f8              LDR      r0,|L1.5716|
001274  f7fffffe          BL       uart_putchar
001278  210a              MOVS     r1,#0xa
00127a  48f6              LDR      r0,|L1.5716|
00127c  f7fffffe          BL       uart_putchar
001280  210a              MOVS     r1,#0xa
001282  48f4              LDR      r0,|L1.5716|
001284  f7fffffe          BL       uart_putchar
001288  210a              MOVS     r1,#0xa
00128a  48f2              LDR      r0,|L1.5716|
00128c  f7fffffe          BL       uart_putchar
001290  210a              MOVS     r1,#0xa
001292  48f0              LDR      r0,|L1.5716|
001294  f7fffffe          BL       uart_putchar
001298  210a              MOVS     r1,#0xa
00129a  48ee              LDR      r0,|L1.5716|
00129c  f7fffffe          BL       uart_putchar
0012a0  210a              MOVS     r1,#0xa
0012a2  48ec              LDR      r0,|L1.5716|
0012a4  f7fffffe          BL       uart_putchar
0012a8  210a              MOVS     r1,#0xa
0012aa  48ea              LDR      r0,|L1.5716|
0012ac  f7fffffe          BL       uart_putchar
0012b0  210a              MOVS     r1,#0xa
0012b2  48e8              LDR      r0,|L1.5716|
0012b4  f7fffffe          BL       uart_putchar
0012b8  210a              MOVS     r1,#0xa
0012ba  48e6              LDR      r0,|L1.5716|
0012bc  f7fffffe          BL       uart_putchar
0012c0  210a              MOVS     r1,#0xa
0012c2  48e4              LDR      r0,|L1.5716|
0012c4  f7fffffe          BL       uart_putchar
0012c8  210a              MOVS     r1,#0xa
0012ca  48e2              LDR      r0,|L1.5716|
0012cc  f7fffffe          BL       uart_putchar
0012d0  210a              MOVS     r1,#0xa
0012d2  48e0              LDR      r0,|L1.5716|
0012d4  f7fffffe          BL       uart_putchar
0012d8  210a              MOVS     r1,#0xa
0012da  48de              LDR      r0,|L1.5716|
0012dc  f7fffffe          BL       uart_putchar
0012e0  210a              MOVS     r1,#0xa
0012e2  48dc              LDR      r0,|L1.5716|
0012e4  f7fffffe          BL       uart_putchar
0012e8  210a              MOVS     r1,#0xa
0012ea  48da              LDR      r0,|L1.5716|
0012ec  f7fffffe          BL       uart_putchar
0012f0  210a              MOVS     r1,#0xa
0012f2  48d8              LDR      r0,|L1.5716|
0012f4  f7fffffe          BL       uart_putchar
0012f8  210a              MOVS     r1,#0xa
0012fa  48d6              LDR      r0,|L1.5716|
0012fc  f7fffffe          BL       uart_putchar
001300  210a              MOVS     r1,#0xa
001302  48d4              LDR      r0,|L1.5716|
001304  f7fffffe          BL       uart_putchar
001308  210a              MOVS     r1,#0xa
00130a  48d2              LDR      r0,|L1.5716|
00130c  f7fffffe          BL       uart_putchar
001310  210a              MOVS     r1,#0xa
001312  48d0              LDR      r0,|L1.5716|
001314  f7fffffe          BL       uart_putchar
001318  210a              MOVS     r1,#0xa
00131a  48ce              LDR      r0,|L1.5716|
00131c  f7fffffe          BL       uart_putchar
001320  210a              MOVS     r1,#0xa
001322  48cc              LDR      r0,|L1.5716|
001324  f7fffffe          BL       uart_putchar
001328  210a              MOVS     r1,#0xa
00132a  48ca              LDR      r0,|L1.5716|
00132c  f7fffffe          BL       uart_putchar
001330  210a              MOVS     r1,#0xa
001332  48c8              LDR      r0,|L1.5716|
001334  f7fffffe          BL       uart_putchar
001338  210a              MOVS     r1,#0xa
00133a  48c6              LDR      r0,|L1.5716|
00133c  f7fffffe          BL       uart_putchar
001340  210a              MOVS     r1,#0xa
001342  48c4              LDR      r0,|L1.5716|
001344  f7fffffe          BL       uart_putchar
001348  210a              MOVS     r1,#0xa
00134a  48c2              LDR      r0,|L1.5716|
00134c  f7fffffe          BL       uart_putchar
001350  210a              MOVS     r1,#0xa
001352  48c0              LDR      r0,|L1.5716|
001354  f7fffffe          BL       uart_putchar
001358  210a              MOVS     r1,#0xa
00135a  48be              LDR      r0,|L1.5716|
00135c  f7fffffe          BL       uart_putchar
001360  210a              MOVS     r1,#0xa
001362  48bc              LDR      r0,|L1.5716|
001364  f7fffffe          BL       uart_putchar
001368  210a              MOVS     r1,#0xa
00136a  48ba              LDR      r0,|L1.5716|
00136c  f7fffffe          BL       uart_putchar
001370  210a              MOVS     r1,#0xa
001372  48b8              LDR      r0,|L1.5716|
001374  f7fffffe          BL       uart_putchar
001378  210a              MOVS     r1,#0xa
00137a  48b6              LDR      r0,|L1.5716|
00137c  f7fffffe          BL       uart_putchar
001380  210a              MOVS     r1,#0xa
001382  48b4              LDR      r0,|L1.5716|
001384  f7fffffe          BL       uart_putchar
001388  210a              MOVS     r1,#0xa
00138a  48b2              LDR      r0,|L1.5716|
00138c  f7fffffe          BL       uart_putchar
001390  210a              MOVS     r1,#0xa
001392  48b0              LDR      r0,|L1.5716|
001394  f7fffffe          BL       uart_putchar
001398  210a              MOVS     r1,#0xa
00139a  48ae              LDR      r0,|L1.5716|
00139c  f7fffffe          BL       uart_putchar
0013a0  210a              MOVS     r1,#0xa
0013a2  48ac              LDR      r0,|L1.5716|
0013a4  f7fffffe          BL       uart_putchar
0013a8  210a              MOVS     r1,#0xa
0013aa  48aa              LDR      r0,|L1.5716|
0013ac  f7fffffe          BL       uart_putchar
0013b0  210a              MOVS     r1,#0xa
0013b2  48a8              LDR      r0,|L1.5716|
0013b4  f7fffffe          BL       uart_putchar
0013b8  210a              MOVS     r1,#0xa
0013ba  48a6              LDR      r0,|L1.5716|
0013bc  f7fffffe          BL       uart_putchar
0013c0  210a              MOVS     r1,#0xa
0013c2  48a4              LDR      r0,|L1.5716|
0013c4  f7fffffe          BL       uart_putchar
0013c8  210a              MOVS     r1,#0xa
0013ca  48a2              LDR      r0,|L1.5716|
0013cc  f7fffffe          BL       uart_putchar
0013d0  210a              MOVS     r1,#0xa
0013d2  48a0              LDR      r0,|L1.5716|
0013d4  f7fffffe          BL       uart_putchar
0013d8  210a              MOVS     r1,#0xa
0013da  489e              LDR      r0,|L1.5716|
0013dc  f7fffffe          BL       uart_putchar
0013e0  210a              MOVS     r1,#0xa
0013e2  489c              LDR      r0,|L1.5716|
0013e4  f7fffffe          BL       uart_putchar
0013e8  210a              MOVS     r1,#0xa
0013ea  489a              LDR      r0,|L1.5716|
0013ec  f7fffffe          BL       uart_putchar
0013f0  210a              MOVS     r1,#0xa
0013f2  4898              LDR      r0,|L1.5716|
0013f4  f7fffffe          BL       uart_putchar
;;;391    									//memset(data,0,1000);
;;;392    														//timer counts to wait for characters in uart 1 									
;;;393    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0013f8  bf00              NOP      
                  |L1.5114|
0013fa  4997              LDR      r1,|L1.5720|
0013fc  4897              LDR      r0,|L1.5724|
0013fe  f7fffffe          BL       strstr
001402  2800              CMP      r0,#0
001404  d10a              BNE      |L1.5148|
001406  4994              LDR      r1,|L1.5720|
001408  3990              SUBS     r1,r1,#0x90
00140a  4894              LDR      r0,|L1.5724|
00140c  f7fffffe          BL       strstr
001410  2800              CMP      r0,#0
001412  d103              BNE      |L1.5148|
001414  4892              LDR      r0,|L1.5728|
001416  6800              LDR      r0,[r0,#0]  ; tout
001418  2805              CMP      r0,#5
00141a  ddee              BLE      |L1.5114|
                  |L1.5148|
;;;394    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;395    									}
;;;396    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00141c  f7fffffe          BL       clear
;;;397    									//clear();
;;;398    									memset(data,0,strlen(data));
001420  4890              LDR      r0,|L1.5732|
001422  f7fffffe          BL       strlen
001426  4604              MOV      r4,r0
001428  4621              MOV      r1,r4
00142a  488e              LDR      r0,|L1.5732|
00142c  f7fffffe          BL       __aeabi_memclr
;;;399    									clear();
001430  f7fffffe          BL       clear
001434  e001              B        |L1.5178|
                  |L1.5174|
;;;400    
;;;401    								
;;;402    									
;;;403    									
;;;404    									//log_it();			//otherwize log it					
;;;405    								}
;;;406    
;;;407    																
;;;408    //delay(50);
;;;409    
;;;410    //else{
;;;411    //log_it();}
;;;412    								
;;;413    								
;;;414    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;415    	else
;;;416    	{
;;;417    		send_chunk();
001436  f7fffffe          BL       send_chunk
                  |L1.5178|
;;;418    	}		
;;;419    								
;;;420    								
;;;421    								
;;;422    	memset(data,0,strlen(data));	
00143a  488a              LDR      r0,|L1.5732|
00143c  f7fffffe          BL       strlen
001440  4604              MOV      r4,r0
001442  4621              MOV      r1,r4
001444  4887              LDR      r0,|L1.5732|
001446  f7fffffe          BL       __aeabi_memclr
;;;423    	uart_putchar(UART1_BASE_PTR, 0x1A);
00144a  211a              MOVS     r1,#0x1a
00144c  4881              LDR      r0,|L1.5716|
00144e  f7fffffe          BL       uart_putchar
;;;424    	
;;;425    }
001452  bd38              POP      {r3-r5,pc}
;;;426    	
                          ENDP

                  send_tcp_bal PROC
;;;438    
;;;439    void send_tcp_bal()
001454  b538              PUSH     {r3-r5,lr}
;;;440    {	
;;;441    memset(stcond1,0,strlen(stcond1));	
001456  4884              LDR      r0,|L1.5736|
001458  6800              LDR      r0,[r0,#0]  ; stcond1
00145a  f7fffffe          BL       strlen
00145e  4604              MOV      r4,r0
001460  4621              MOV      r1,r4
001462  4881              LDR      r0,|L1.5736|
001464  6800              LDR      r0,[r0,#0]  ; stcond1
001466  f7fffffe          BL       __aeabi_memclr
;;;442    memset(con1d,0,strlen(con1d));	
00146a  4880              LDR      r0,|L1.5740|
00146c  6800              LDR      r0,[r0,#0]  ; con1d
00146e  f7fffffe          BL       strlen
001472  4604              MOV      r4,r0
001474  4621              MOV      r1,r4
001476  487d              LDR      r0,|L1.5740|
001478  6800              LDR      r0,[r0,#0]  ; con1d
00147a  f7fffffe          BL       __aeabi_memclr
;;;443    	
;;;444    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;445    
;;;446    								cond=mystrstr(uart_string_gsm,'>');
00147e  213e              MOVS     r1,#0x3e
001480  4876              LDR      r0,|L1.5724|
001482  f7fffffe          BL       mystrstr
001486  497a              LDR      r1,|L1.5744|
001488  7008              STRB     r0,[r1,#0]
;;;447    								if(cond)	
00148a  4608              MOV      r0,r1
00148c  7800              LDRB     r0,[r0,#0]  ; cond
00148e  2800              CMP      r0,#0
001490  d07e              BEQ      |L1.5520|
;;;448    								{
;;;449    									
;;;450    									clear();
001492  f7fffffe          BL       clear
;;;451    									memset(uart_string_gsm,0,5000);
001496  4977              LDR      r1,|L1.5748|
001498  4870              LDR      r0,|L1.5724|
00149a  f7fffffe          BL       __aeabi_memclr
;;;452    									strcat(data,"\n\n");
00149e  a176              ADR      r1,|L1.5752|
0014a0  4870              LDR      r0,|L1.5732|
0014a2  f7fffffe          BL       strcat
;;;453    									len=strlen(data);
0014a6  486f              LDR      r0,|L1.5732|
0014a8  f7fffffe          BL       strlen
0014ac  4973              LDR      r1,|L1.5756|
0014ae  6008              STR      r0,[r1,#0]  ; len
;;;454    									tout=0;
0014b0  2000              MOVS     r0,#0
0014b2  496b              LDR      r1,|L1.5728|
0014b4  6008              STR      r0,[r1,#0]  ; tout
;;;455    									k2=0;
0014b6  4972              LDR      r1,|L1.5760|
0014b8  6008              STR      r0,[r1,#0]  ; k2
;;;456    									for(k=0;k<len;k++)
0014ba  4972              LDR      r1,|L1.5764|
0014bc  6008              STR      r0,[r1,#0]  ; k
0014be  e00b              B        |L1.5336|
                  |L1.5312|
;;;457    									{
;;;458    										uart_putchar(UART1_BASE_PTR, data[k]);
0014c0  4868              LDR      r0,|L1.5732|
0014c2  4a70              LDR      r2,|L1.5764|
0014c4  6812              LDR      r2,[r2,#0]  ; k
0014c6  5c81              LDRB     r1,[r0,r2]
0014c8  4862              LDR      r0,|L1.5716|
0014ca  f7fffffe          BL       uart_putchar
0014ce  486d              LDR      r0,|L1.5764|
0014d0  6800              LDR      r0,[r0,#0]            ;456  ; k
0014d2  1c40              ADDS     r0,r0,#1              ;456
0014d4  496b              LDR      r1,|L1.5764|
0014d6  6008              STR      r0,[r1,#0]            ;456  ; k
                  |L1.5336|
0014d8  486a              LDR      r0,|L1.5764|
0014da  6800              LDR      r0,[r0,#0]            ;456  ; k
0014dc  4967              LDR      r1,|L1.5756|
0014de  6809              LDR      r1,[r1,#0]            ;456  ; len
0014e0  4288              CMP      r0,r1                 ;456
0014e2  dbed              BLT      |L1.5312|
;;;459    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0014e4  211a              MOVS     r1,#0x1a
0014e6  485b              LDR      r0,|L1.5716|
0014e8  f7fffffe          BL       uart_putchar
0014ec  211a              MOVS     r1,#0x1a
0014ee  4859              LDR      r0,|L1.5716|
0014f0  f7fffffe          BL       uart_putchar
;;;460    									do
0014f4  bf00              NOP      
                  |L1.5366|
;;;461    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0014f6  4964              LDR      r1,|L1.5768|
0014f8  4858              LDR      r0,|L1.5724|
0014fa  f7fffffe          BL       strstr
0014fe  495a              LDR      r1,|L1.5736|
001500  6008              STR      r0,[r1,#0]  ; stcond1
;;;462    																	stcond2=strstr(uart_string_gsm, "ERROR");
001502  4955              LDR      r1,|L1.5720|
001504  3990              SUBS     r1,r1,#0x90
001506  4855              LDR      r0,|L1.5724|
001508  f7fffffe          BL       strstr
00150c  495f              LDR      r1,|L1.5772|
00150e  6008              STR      r0,[r1,#0]  ; stcond2
;;;463    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001510  495f              LDR      r1,|L1.5776|
001512  4852              LDR      r0,|L1.5724|
001514  f7fffffe          BL       strstr
001518  495e              LDR      r1,|L1.5780|
00151a  6008              STR      r0,[r1,#0]  ; stcond3
;;;464    																			stcond4=strstr(uart_string_gsm, "DEACT");	
00151c  494e              LDR      r1,|L1.5720|
00151e  3974              SUBS     r1,r1,#0x74
001520  484e              LDR      r0,|L1.5724|
001522  f7fffffe          BL       strstr
001526  495c              LDR      r1,|L1.5784|
001528  6008              STR      r0,[r1,#0]  ; stcond4
;;;465    																	
;;;466    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
00152a  4858              LDR      r0,|L1.5772|
00152c  6800              LDR      r0,[r0,#0]  ; stcond2
00152e  2800              CMP      r0,#0
001530  d10f              BNE      |L1.5458|
001532  4858              LDR      r0,|L1.5780|
001534  6800              LDR      r0,[r0,#0]  ; stcond3
001536  2800              CMP      r0,#0
001538  d10b              BNE      |L1.5458|
00153a  4608              MOV      r0,r1
00153c  6800              LDR      r0,[r0,#0]  ; stcond4
00153e  2800              CMP      r0,#0
001540  d107              BNE      |L1.5458|
001542  4849              LDR      r0,|L1.5736|
001544  6800              LDR      r0,[r0,#0]  ; stcond1
001546  2800              CMP      r0,#0
001548  d103              BNE      |L1.5458|
00154a  4845              LDR      r0,|L1.5728|
00154c  6800              LDR      r0,[r0,#0]  ; tout
00154e  2805              CMP      r0,#5
001550  ddd1              BLE      |L1.5366|
                  |L1.5458|
;;;467    																//delay(10);clear();
;;;468    														uart_putchar(UART1_BASE_PTR,0x1A);
001552  211a              MOVS     r1,#0x1a
001554  483f              LDR      r0,|L1.5716|
001556  f7fffffe          BL       uart_putchar
;;;469    												//delay(10);
;;;470    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00155a  211a              MOVS     r1,#0x1a
00155c  483d              LDR      r0,|L1.5716|
00155e  f7fffffe          BL       uart_putchar
001562  211a              MOVS     r1,#0x1a
001564  483b              LDR      r0,|L1.5716|
001566  f7fffffe          BL       uart_putchar
00156a  211a              MOVS     r1,#0x1a
00156c  4839              LDR      r0,|L1.5716|
00156e  f7fffffe          BL       uart_putchar
;;;471    						
;;;472    									
;;;473    									
;;;474    									
;;;475    									if(flagch==1){		int_erval=temp;flagch=0;	}
001572  484a              LDR      r0,|L1.5788|
001574  6800              LDR      r0,[r0,#0]  ; flagch
001576  2801              CMP      r0,#1
001578  d106              BNE      |L1.5512|
00157a  4849              LDR      r0,|L1.5792|
00157c  6800              LDR      r0,[r0,#0]  ; temp
00157e  4949              LDR      r1,|L1.5796|
001580  6008              STR      r0,[r1,#0]  ; int_erval
001582  2000              MOVS     r0,#0
001584  4945              LDR      r1,|L1.5788|
001586  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.5512|
;;;476    									
;;;477    									
;;;478    									
;;;479    
;;;480    //									for(k=0;k<len;k++)
;;;481    //									{
;;;482    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;483    //									}
;;;484    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;485    
;;;486    //									
;;;487    //													k2=0;									//string array counter for uart 1
;;;488    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;489    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;490    //																{
;;;491    //																	timeout--;
;;;492    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;493    //
;;;494    									delay(20);															
001588  2014              MOVS     r0,#0x14
00158a  f7fffffe          BL       delay
;;;495    stcond1=strstr(uart_string_gsm,"SEND OK"); 
00158e  e000              B        |L1.5522|
                  |L1.5520|
001590  e005              B        |L1.5534|
                  |L1.5522|
001592  493d              LDR      r1,|L1.5768|
001594  4831              LDR      r0,|L1.5724|
001596  f7fffffe          BL       strstr
00159a  4933              LDR      r1,|L1.5736|
00159c  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.5534|
;;;496    
;;;497    								}
;;;498    
;;;499      //checks for send ok
;;;500    if(!stcond1) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
00159e  4832              LDR      r0,|L1.5736|
0015a0  6800              LDR      r0,[r0,#0]  ; stcond1
0015a2  2800              CMP      r0,#0
0015a4  d001              BEQ      |L1.5546|
0015a6  f000ff35          BL       |L1.9236|
                  |L1.5546|
;;;501    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015aa  211a              MOVS     r1,#0x1a
0015ac  4829              LDR      r0,|L1.5716|
0015ae  f7fffffe          BL       uart_putchar
0015b2  f7fffffe          BL       clear
0015b6  200a              MOVS     r0,#0xa
0015b8  f7fffffe          BL       delay
;;;502    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015bc  211a              MOVS     r1,#0x1a
0015be  4825              LDR      r0,|L1.5716|
0015c0  f7fffffe          BL       uart_putchar
0015c4  f7fffffe          BL       clear
0015c8  200a              MOVS     r0,#0xa
0015ca  f7fffffe          BL       delay
;;;503    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0015ce  211a              MOVS     r1,#0x1a
0015d0  4820              LDR      r0,|L1.5716|
0015d2  f7fffffe          BL       uart_putchar
0015d6  f7fffffe          BL       clear
0015da  200a              MOVS     r0,#0xa
0015dc  f7fffffe          BL       delay
;;;504    							//remove_all_chars(data, '\n', '\n');
;;;505    	
;;;506    		//strreplace(data, ",L,", ",H,");	
;;;507    		
;;;508    	
;;;509    	
;;;510    	delay(100);
0015e0  2064              MOVS     r0,#0x64
0015e2  f7fffffe          BL       delay
;;;511    		clear();//memset(uart_string_gsm,0,5000);
0015e6  f7fffffe          BL       clear
;;;512    	
;;;513    	memset(at_,0,100);
0015ea  2164              MOVS     r1,#0x64
0015ec  482e              LDR      r0,|L1.5800|
0015ee  f7fffffe          BL       __aeabi_memclr
;;;514    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0015f2  481c              LDR      r0,|L1.5732|
0015f4  f7fffffe          BL       strlen
0015f8  1c44              ADDS     r4,r0,#1
0015fa  4623              MOV      r3,r4
0015fc  4a2b              LDR      r2,|L1.5804|
0015fe  4916              LDR      r1,|L1.5720|
001600  3938              SUBS     r1,r1,#0x38
001602  4829              LDR      r0,|L1.5800|
001604  f7fffffe          BL       __2sprintf
;;;515    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001608  2005              MOVS     r0,#5
00160a  4b13              LDR      r3,|L1.5720|
00160c  3b90              SUBS     r3,r3,#0x90
00160e  461a              MOV      r2,r3
001610  327c              ADDS     r2,r2,#0x7c
001612  a127              ADR      r1,|L1.5808|
001614  9000              STR      r0,[sp,#0]
001616  4824              LDR      r0,|L1.5800|
001618  f7fffffe          BL       send_SD
;;;516    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;517    //	if(strstr(uart_string_gsm,"ERROR")){
;;;518    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;519    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;520    //	}
;;;521    	
;;;522    clear();	
00161c  f7fffffe          BL       clear
;;;523    									k2=0;									//string array counter for uart 1
001620  2000              MOVS     r0,#0
001622  4917              LDR      r1,|L1.5760|
001624  6008              STR      r0,[r1,#0]  ; k2
;;;524    									tout=0;	
001626  490e              LDR      r1,|L1.5728|
001628  6008              STR      r0,[r1,#0]  ; tout
;;;525    		for(k=0;k<strlen(data);k++)
00162a  4916              LDR      r1,|L1.5764|
00162c  6008              STR      r0,[r1,#0]  ; k
00162e  e00b              B        |L1.5704|
                  |L1.5680|
;;;526    		{
;;;527    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001630  480c              LDR      r0,|L1.5732|
001632  4a14              LDR      r2,|L1.5764|
001634  6812              LDR      r2,[r2,#0]  ; k
001636  5c81              LDRB     r1,[r0,r2]
001638  4806              LDR      r0,|L1.5716|
00163a  f7fffffe          BL       uart_putchar
00163e  4811              LDR      r0,|L1.5764|
001640  6800              LDR      r0,[r0,#0]            ;525  ; k
001642  1c40              ADDS     r0,r0,#1              ;525
001644  490f              LDR      r1,|L1.5764|
001646  6008              STR      r0,[r1,#0]            ;525  ; k
                  |L1.5704|
001648  4806              LDR      r0,|L1.5732|
00164a  f7fffffe          BL       strlen
00164e  490d              LDR      r1,|L1.5764|
001650  6809              LDR      r1,[r1,#0]            ;525  ; k
001652  e02f              B        |L1.5812|
                  |L1.5716|
                          DCD      0x4006b000
                  |L1.5720|
                          DCD      ||.text||+0x900
                  |L1.5724|
                          DCD      uart_string_gsm
                  |L1.5728|
                          DCD      tout
                  |L1.5732|
                          DCD      data
                  |L1.5736|
                          DCD      stcond1
                  |L1.5740|
                          DCD      con1d
                  |L1.5744|
                          DCD      cond
                  |L1.5748|
                          DCD      0x00001388
                  |L1.5752|
001678  0a0a00            DCB      "\n\n",0
00167b  00                DCB      0
                  |L1.5756|
                          DCD      len
                  |L1.5760|
                          DCD      ||k2||
                  |L1.5764|
                          DCD      k
                  |L1.5768|
                          DCD      ||.text||+0x474
                  |L1.5772|
                          DCD      stcond2
                  |L1.5776|
                          DCD      ||.text||+0xdf0
                  |L1.5780|
                          DCD      stcond3
                  |L1.5784|
                          DCD      stcond4
                  |L1.5788|
                          DCD      flagch
                  |L1.5792|
                          DCD      temp
                  |L1.5796|
                          DCD      int_erval
                  |L1.5800|
                          DCD      at_
                  |L1.5804|
                          DCD      drive
                  |L1.5808|
0016b0  3e00              DCB      ">",0
0016b2  00                DCB      0
0016b3  00                DCB      0
                  |L1.5812|
0016b4  4288              CMP      r0,r1                 ;525
0016b6  d8bb              BHI      |L1.5680|
;;;528    		}	
;;;529    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0016b8  210a              MOVS     r1,#0xa
0016ba  48fe              LDR      r0,|L1.6836|
0016bc  f7fffffe          BL       uart_putchar
0016c0  210a              MOVS     r1,#0xa
0016c2  48fc              LDR      r0,|L1.6836|
0016c4  f7fffffe          BL       uart_putchar
0016c8  210a              MOVS     r1,#0xa
0016ca  48fa              LDR      r0,|L1.6836|
0016cc  f7fffffe          BL       uart_putchar
0016d0  210a              MOVS     r1,#0xa
0016d2  48f8              LDR      r0,|L1.6836|
0016d4  f7fffffe          BL       uart_putchar
0016d8  210a              MOVS     r1,#0xa
0016da  48f6              LDR      r0,|L1.6836|
0016dc  f7fffffe          BL       uart_putchar
0016e0  210a              MOVS     r1,#0xa
0016e2  48f4              LDR      r0,|L1.6836|
0016e4  f7fffffe          BL       uart_putchar
0016e8  210a              MOVS     r1,#0xa
0016ea  48f2              LDR      r0,|L1.6836|
0016ec  f7fffffe          BL       uart_putchar
0016f0  210a              MOVS     r1,#0xa
0016f2  48f0              LDR      r0,|L1.6836|
0016f4  f7fffffe          BL       uart_putchar
0016f8  210a              MOVS     r1,#0xa
0016fa  48ee              LDR      r0,|L1.6836|
0016fc  f7fffffe          BL       uart_putchar
001700  210a              MOVS     r1,#0xa
001702  48ec              LDR      r0,|L1.6836|
001704  f7fffffe          BL       uart_putchar
001708  210a              MOVS     r1,#0xa
00170a  48ea              LDR      r0,|L1.6836|
00170c  f7fffffe          BL       uart_putchar
001710  210a              MOVS     r1,#0xa
001712  48e8              LDR      r0,|L1.6836|
001714  f7fffffe          BL       uart_putchar
001718  210a              MOVS     r1,#0xa
00171a  48e6              LDR      r0,|L1.6836|
00171c  f7fffffe          BL       uart_putchar
001720  210a              MOVS     r1,#0xa
001722  48e4              LDR      r0,|L1.6836|
001724  f7fffffe          BL       uart_putchar
001728  210a              MOVS     r1,#0xa
00172a  48e2              LDR      r0,|L1.6836|
00172c  f7fffffe          BL       uart_putchar
001730  210a              MOVS     r1,#0xa
001732  48e0              LDR      r0,|L1.6836|
001734  f7fffffe          BL       uart_putchar
001738  210a              MOVS     r1,#0xa
00173a  48de              LDR      r0,|L1.6836|
00173c  f7fffffe          BL       uart_putchar
001740  210a              MOVS     r1,#0xa
001742  48dc              LDR      r0,|L1.6836|
001744  f7fffffe          BL       uart_putchar
001748  210a              MOVS     r1,#0xa
00174a  48da              LDR      r0,|L1.6836|
00174c  f7fffffe          BL       uart_putchar
001750  210a              MOVS     r1,#0xa
001752  48d8              LDR      r0,|L1.6836|
001754  f7fffffe          BL       uart_putchar
001758  210a              MOVS     r1,#0xa
00175a  48d6              LDR      r0,|L1.6836|
00175c  f7fffffe          BL       uart_putchar
001760  210a              MOVS     r1,#0xa
001762  48d4              LDR      r0,|L1.6836|
001764  f7fffffe          BL       uart_putchar
001768  210a              MOVS     r1,#0xa
00176a  48d2              LDR      r0,|L1.6836|
00176c  f7fffffe          BL       uart_putchar
001770  210a              MOVS     r1,#0xa
001772  48d0              LDR      r0,|L1.6836|
001774  f7fffffe          BL       uart_putchar
001778  210a              MOVS     r1,#0xa
00177a  48ce              LDR      r0,|L1.6836|
00177c  f7fffffe          BL       uart_putchar
001780  210a              MOVS     r1,#0xa
001782  48cc              LDR      r0,|L1.6836|
001784  f7fffffe          BL       uart_putchar
001788  210a              MOVS     r1,#0xa
00178a  48ca              LDR      r0,|L1.6836|
00178c  f7fffffe          BL       uart_putchar
001790  210a              MOVS     r1,#0xa
001792  48c8              LDR      r0,|L1.6836|
001794  f7fffffe          BL       uart_putchar
001798  210a              MOVS     r1,#0xa
00179a  48c6              LDR      r0,|L1.6836|
00179c  f7fffffe          BL       uart_putchar
0017a0  210a              MOVS     r1,#0xa
0017a2  48c4              LDR      r0,|L1.6836|
0017a4  f7fffffe          BL       uart_putchar
0017a8  210a              MOVS     r1,#0xa
0017aa  48c2              LDR      r0,|L1.6836|
0017ac  f7fffffe          BL       uart_putchar
0017b0  210a              MOVS     r1,#0xa
0017b2  48c0              LDR      r0,|L1.6836|
0017b4  f7fffffe          BL       uart_putchar
0017b8  210a              MOVS     r1,#0xa
0017ba  48be              LDR      r0,|L1.6836|
0017bc  f7fffffe          BL       uart_putchar
0017c0  210a              MOVS     r1,#0xa
0017c2  48bc              LDR      r0,|L1.6836|
0017c4  f7fffffe          BL       uart_putchar
0017c8  210a              MOVS     r1,#0xa
0017ca  48ba              LDR      r0,|L1.6836|
0017cc  f7fffffe          BL       uart_putchar
0017d0  210a              MOVS     r1,#0xa
0017d2  48b8              LDR      r0,|L1.6836|
0017d4  f7fffffe          BL       uart_putchar
0017d8  210a              MOVS     r1,#0xa
0017da  48b6              LDR      r0,|L1.6836|
0017dc  f7fffffe          BL       uart_putchar
0017e0  210a              MOVS     r1,#0xa
0017e2  48b4              LDR      r0,|L1.6836|
0017e4  f7fffffe          BL       uart_putchar
0017e8  210a              MOVS     r1,#0xa
0017ea  48b2              LDR      r0,|L1.6836|
0017ec  f7fffffe          BL       uart_putchar
0017f0  210a              MOVS     r1,#0xa
0017f2  48b0              LDR      r0,|L1.6836|
0017f4  f7fffffe          BL       uart_putchar
0017f8  210a              MOVS     r1,#0xa
0017fa  48ae              LDR      r0,|L1.6836|
0017fc  f7fffffe          BL       uart_putchar
001800  210a              MOVS     r1,#0xa
001802  48ac              LDR      r0,|L1.6836|
001804  f7fffffe          BL       uart_putchar
001808  210a              MOVS     r1,#0xa
00180a  48aa              LDR      r0,|L1.6836|
00180c  f7fffffe          BL       uart_putchar
001810  210a              MOVS     r1,#0xa
001812  48a8              LDR      r0,|L1.6836|
001814  f7fffffe          BL       uart_putchar
001818  210a              MOVS     r1,#0xa
00181a  48a6              LDR      r0,|L1.6836|
00181c  f7fffffe          BL       uart_putchar
001820  210a              MOVS     r1,#0xa
001822  48a4              LDR      r0,|L1.6836|
001824  f7fffffe          BL       uart_putchar
001828  210a              MOVS     r1,#0xa
00182a  48a2              LDR      r0,|L1.6836|
00182c  f7fffffe          BL       uart_putchar
001830  210a              MOVS     r1,#0xa
001832  48a0              LDR      r0,|L1.6836|
001834  f7fffffe          BL       uart_putchar
001838  210a              MOVS     r1,#0xa
00183a  489e              LDR      r0,|L1.6836|
00183c  f7fffffe          BL       uart_putchar
001840  210a              MOVS     r1,#0xa
001842  489c              LDR      r0,|L1.6836|
001844  f7fffffe          BL       uart_putchar
001848  210a              MOVS     r1,#0xa
00184a  489a              LDR      r0,|L1.6836|
00184c  f7fffffe          BL       uart_putchar
001850  210a              MOVS     r1,#0xa
001852  4898              LDR      r0,|L1.6836|
001854  f7fffffe          BL       uart_putchar
001858  210a              MOVS     r1,#0xa
00185a  4896              LDR      r0,|L1.6836|
00185c  f7fffffe          BL       uart_putchar
001860  210a              MOVS     r1,#0xa
001862  4894              LDR      r0,|L1.6836|
001864  f7fffffe          BL       uart_putchar
001868  210a              MOVS     r1,#0xa
00186a  4892              LDR      r0,|L1.6836|
00186c  f7fffffe          BL       uart_putchar
001870  210a              MOVS     r1,#0xa
001872  4890              LDR      r0,|L1.6836|
001874  f7fffffe          BL       uart_putchar
001878  210a              MOVS     r1,#0xa
00187a  488e              LDR      r0,|L1.6836|
00187c  f7fffffe          BL       uart_putchar
;;;530    									//memset(data,0,1000);
;;;531    														//timer counts to wait for characters in uart 1 									
;;;532    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001880  bf00              NOP      
                  |L1.6274|
001882  498d              LDR      r1,|L1.6840|
001884  488d              LDR      r0,|L1.6844|
001886  f7fffffe          BL       strstr
00188a  2800              CMP      r0,#0
00188c  d10a              BNE      |L1.6308|
00188e  498a              LDR      r1,|L1.6840|
001890  3990              SUBS     r1,r1,#0x90
001892  488a              LDR      r0,|L1.6844|
001894  f7fffffe          BL       strstr
001898  2800              CMP      r0,#0
00189a  d103              BNE      |L1.6308|
00189c  4888              LDR      r0,|L1.6848|
00189e  6800              LDR      r0,[r0,#0]  ; tout
0018a0  2805              CMP      r0,#5
0018a2  ddee              BLE      |L1.6274|
                  |L1.6308|
;;;533    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;534    									}
;;;535    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0018a4  f7fffffe          BL       clear
;;;536    									//clear();
;;;537    									memset(data,0,strlen(data));
0018a8  4886              LDR      r0,|L1.6852|
0018aa  f7fffffe          BL       strlen
0018ae  4604              MOV      r4,r0
0018b0  4621              MOV      r1,r4
0018b2  4884              LDR      r0,|L1.6852|
0018b4  f7fffffe          BL       __aeabi_memclr
;;;538    									clear();
0018b8  f7fffffe          BL       clear
;;;539    
;;;540    								
;;;541    	
;;;542    	
;;;543    	//log_it();		                         //logging
;;;544    		memset(data,0,strlen(data));	
0018bc  4881              LDR      r0,|L1.6852|
0018be  f7fffffe          BL       strlen
0018c2  4604              MOV      r4,r0
0018c4  4621              MOV      r1,r4
0018c6  487f              LDR      r0,|L1.6852|
0018c8  f7fffffe          BL       __aeabi_memclr
;;;545    
;;;546    					   	if(flagch!=1){
0018cc  487e              LDR      r0,|L1.6856|
0018ce  6800              LDR      r0,[r0,#0]  ; flagch
0018d0  2801              CMP      r0,#1
0018d2  d009              BEQ      |L1.6376|
;;;547    							temp=int_erval;				
0018d4  487d              LDR      r0,|L1.6860|
0018d6  6800              LDR      r0,[r0,#0]  ; int_erval
0018d8  497d              LDR      r1,|L1.6864|
0018da  6008              STR      r0,[r1,#0]  ; temp
;;;548    							int_erval=4;
0018dc  2004              MOVS     r0,#4
0018de  497b              LDR      r1,|L1.6860|
0018e0  6008              STR      r0,[r1,#0]  ; int_erval
;;;549    							flagch=1;}
0018e2  2001              MOVS     r0,#1
0018e4  4978              LDR      r1,|L1.6856|
0018e6  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.6376|
;;;550    							clear();	
0018e8  f7fffffe          BL       clear
;;;551    									GPS_COLLECT();
0018ec  f7fffffe          BL       GPS_COLLECT
;;;552    									strreplace(data, ",L,", ",H,");	
0018f0  4a71              LDR      r2,|L1.6840|
0018f2  3a48              SUBS     r2,r2,#0x48
0018f4  1d11              ADDS     r1,r2,#4
0018f6  4873              LDR      r0,|L1.6852|
0018f8  f7fffffe          BL       strreplace
;;;553    
;;;554    //*************************************tcp_initialization();//reinitialization************************//
;;;555    
;;;556    	
;;;557    msg_sim800(); 
0018fc  f7fffffe          BL       msg_sim800
;;;558    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
001900  2005              MOVS     r0,#5
001902  4b6d              LDR      r3,|L1.6840|
001904  3b90              SUBS     r3,r3,#0x90
001906  461a              MOV      r2,r3
001908  327c              ADDS     r2,r2,#0x7c
00190a  a172              ADR      r1,|L1.6868|
00190c  9000              STR      r0,[sp,#0]
00190e  4610              MOV      r0,r2
001910  3020              ADDS     r0,r0,#0x20
001912  f7fffffe          BL       send_GSM
;;;559    delay(100);
001916  2064              MOVS     r0,#0x64
001918  f7fffffe          BL       delay
;;;560    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00191c  2004              MOVS     r0,#4
00191e  4b66              LDR      r3,|L1.6840|
001920  3b90              SUBS     r3,r3,#0x90
001922  461a              MOV      r2,r3
001924  32ac              ADDS     r2,r2,#0xac
001926  a16b              ADR      r1,|L1.6868|
001928  9000              STR      r0,[sp,#0]
00192a  4610              MOV      r0,r2
00192c  3014              ADDS     r0,r0,#0x14
00192e  f7fffffe          BL       send_GSM
;;;561    GPS_COLLECT2();
001932  f7fffffe          BL       GPS_COLLECT2
;;;562    strreplace(data, ",L,", ",H,");		
001936  4a60              LDR      r2,|L1.6840|
001938  3a48              SUBS     r2,r2,#0x48
00193a  1d11              ADDS     r1,r2,#4
00193c  4861              LDR      r0,|L1.6852|
00193e  f7fffffe          BL       strreplace
;;;563    GPS_COLLECT2();
001942  f7fffffe          BL       GPS_COLLECT2
;;;564    strreplace(data, ",L,", ",H,");	
001946  4a5c              LDR      r2,|L1.6840|
001948  3a48              SUBS     r2,r2,#0x48
00194a  1d11              ADDS     r1,r2,#4
00194c  485d              LDR      r0,|L1.6852|
00194e  f7fffffe          BL       strreplace
;;;565    GPS_COLLECT2();
001952  f7fffffe          BL       GPS_COLLECT2
;;;566    strreplace(data, ",L,", ",H,");
001956  4a58              LDR      r2,|L1.6840|
001958  3a48              SUBS     r2,r2,#0x48
00195a  1d11              ADDS     r1,r2,#4
00195c  4859              LDR      r0,|L1.6852|
00195e  f7fffffe          BL       strreplace
;;;567    cond201=(strstr(uart_string_gsm, "OK"));
001962  a15c              ADR      r1,|L1.6868|
001964  4855              LDR      r0,|L1.6844|
001966  f7fffffe          BL       strstr
00196a  495b              LDR      r1,|L1.6872|
00196c  6008              STR      r0,[r1,#0]  ; cond201
;;;568    cond200=(strstr(uart_string_gsm, "ERROR"));
00196e  4952              LDR      r1,|L1.6840|
001970  3990              SUBS     r1,r1,#0x90
001972  4852              LDR      r0,|L1.6844|
001974  f7fffffe          BL       strstr
001978  4958              LDR      r1,|L1.6876|
00197a  6008              STR      r0,[r1,#0]  ; cond200
;;;569    if((!(cond201|| cond200 ))  && sleep_flag != 1)
00197c  4856              LDR      r0,|L1.6872|
00197e  6800              LDR      r0,[r0,#0]  ; cond201
001980  2800              CMP      r0,#0
                  |L1.6530|
001982  d17d              BNE      |L1.6784|
001984  4608              MOV      r0,r1
001986  6800              LDR      r0,[r0,#0]  ; cond200
001988  2800              CMP      r0,#0
00198a  d1fa              BNE      |L1.6530|
00198c  4854              LDR      r0,|L1.6880|
00198e  6800              LDR      r0,[r0,#0]  ; sleep_flag
001990  2801              CMP      r0,#1
001992  d075              BEQ      |L1.6784|
;;;570    {
;;;571    delay(100);
001994  2064              MOVS     r0,#0x64
001996  f7fffffe          BL       delay
;;;572    clear();//memset(uart_string_gsm,0,5000);
00199a  f7fffffe          BL       clear
;;;573    memset(at_,0,100);
00199e  2164              MOVS     r1,#0x64
0019a0  4850              LDR      r0,|L1.6884|
0019a2  f7fffffe          BL       __aeabi_memclr
;;;574    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0019a6  4847              LDR      r0,|L1.6852|
0019a8  f7fffffe          BL       strlen
0019ac  1c44              ADDS     r4,r0,#1
0019ae  4623              MOV      r3,r4
0019b0  4a4d              LDR      r2,|L1.6888|
0019b2  4941              LDR      r1,|L1.6840|
0019b4  3938              SUBS     r1,r1,#0x38
0019b6  484b              LDR      r0,|L1.6884|
0019b8  f7fffffe          BL       __2sprintf
;;;575    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0019bc  2005              MOVS     r0,#5
0019be  4b3e              LDR      r3,|L1.6840|
0019c0  3b90              SUBS     r3,r3,#0x90
0019c2  461a              MOV      r2,r3
0019c4  327c              ADDS     r2,r2,#0x7c
0019c6  a149              ADR      r1,|L1.6892|
0019c8  9000              STR      r0,[sp,#0]
0019ca  4846              LDR      r0,|L1.6884|
0019cc  f7fffffe          BL       send_SD
;;;576    clear();	
0019d0  f7fffffe          BL       clear
;;;577    k2=0;									//string array counter for uart 1
0019d4  2000              MOVS     r0,#0
0019d6  4946              LDR      r1,|L1.6896|
0019d8  6008              STR      r0,[r1,#0]  ; k2
;;;578    tout=0;	
0019da  4939              LDR      r1,|L1.6848|
0019dc  6008              STR      r0,[r1,#0]  ; tout
;;;579    for(k=0;k<strlen(data);k++)
0019de  4945              LDR      r1,|L1.6900|
0019e0  6008              STR      r0,[r1,#0]  ; k
0019e2  e00b              B        |L1.6652|
                  |L1.6628|
;;;580    {
;;;581    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0019e4  4837              LDR      r0,|L1.6852|
0019e6  4a43              LDR      r2,|L1.6900|
0019e8  6812              LDR      r2,[r2,#0]  ; k
0019ea  5c81              LDRB     r1,[r0,r2]
0019ec  4831              LDR      r0,|L1.6836|
0019ee  f7fffffe          BL       uart_putchar
0019f2  4840              LDR      r0,|L1.6900|
0019f4  6800              LDR      r0,[r0,#0]            ;579  ; k
0019f6  1c40              ADDS     r0,r0,#1              ;579
0019f8  493e              LDR      r1,|L1.6900|
0019fa  6008              STR      r0,[r1,#0]            ;579  ; k
                  |L1.6652|
0019fc  4831              LDR      r0,|L1.6852|
0019fe  f7fffffe          BL       strlen
001a02  493c              LDR      r1,|L1.6900|
001a04  6809              LDR      r1,[r1,#0]            ;579  ; k
001a06  4288              CMP      r0,r1                 ;579
001a08  d8ec              BHI      |L1.6628|
;;;582    }	
;;;583    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001a0a  210a              MOVS     r1,#0xa
001a0c  4829              LDR      r0,|L1.6836|
001a0e  f7fffffe          BL       uart_putchar
001a12  210a              MOVS     r1,#0xa
001a14  4827              LDR      r0,|L1.6836|
001a16  f7fffffe          BL       uart_putchar
001a1a  210a              MOVS     r1,#0xa
001a1c  4825              LDR      r0,|L1.6836|
001a1e  f7fffffe          BL       uart_putchar
001a22  210a              MOVS     r1,#0xa
001a24  4823              LDR      r0,|L1.6836|
001a26  f7fffffe          BL       uart_putchar
001a2a  210a              MOVS     r1,#0xa
001a2c  4821              LDR      r0,|L1.6836|
001a2e  f7fffffe          BL       uart_putchar
001a32  210a              MOVS     r1,#0xa
001a34  481f              LDR      r0,|L1.6836|
001a36  f7fffffe          BL       uart_putchar
001a3a  210a              MOVS     r1,#0xa
001a3c  481d              LDR      r0,|L1.6836|
001a3e  f7fffffe          BL       uart_putchar
001a42  210a              MOVS     r1,#0xa
001a44  481b              LDR      r0,|L1.6836|
001a46  f7fffffe          BL       uart_putchar
001a4a  210a              MOVS     r1,#0xa
001a4c  4819              LDR      r0,|L1.6836|
001a4e  f7fffffe          BL       uart_putchar
001a52  210a              MOVS     r1,#0xa
001a54  4817              LDR      r0,|L1.6836|
001a56  f7fffffe          BL       uart_putchar
001a5a  210a              MOVS     r1,#0xa
001a5c  4815              LDR      r0,|L1.6836|
001a5e  f7fffffe          BL       uart_putchar
001a62  210a              MOVS     r1,#0xa
001a64  4813              LDR      r0,|L1.6836|
001a66  f7fffffe          BL       uart_putchar
001a6a  210a              MOVS     r1,#0xa
001a6c  4811              LDR      r0,|L1.6836|
001a6e  f7fffffe          BL       uart_putchar
001a72  210a              MOVS     r1,#0xa
001a74  480f              LDR      r0,|L1.6836|
001a76  f7fffffe          BL       uart_putchar
001a7a  210a              MOVS     r1,#0xa
001a7c  480d              LDR      r0,|L1.6836|
001a7e  e000              B        |L1.6786|
                  |L1.6784|
001a80  e0f6              B        |L1.7280|
                  |L1.6786|
001a82  f7fffffe          BL       uart_putchar
001a86  210a              MOVS     r1,#0xa
001a88  480a              LDR      r0,|L1.6836|
001a8a  f7fffffe          BL       uart_putchar
001a8e  210a              MOVS     r1,#0xa
001a90  4808              LDR      r0,|L1.6836|
001a92  f7fffffe          BL       uart_putchar
001a96  210a              MOVS     r1,#0xa
001a98  4806              LDR      r0,|L1.6836|
001a9a  f7fffffe          BL       uart_putchar
001a9e  210a              MOVS     r1,#0xa
001aa0  4804              LDR      r0,|L1.6836|
001aa2  f7fffffe          BL       uart_putchar
001aa6  210a              MOVS     r1,#0xa
001aa8  4802              LDR      r0,|L1.6836|
001aaa  f7fffffe          BL       uart_putchar
001aae  210a              MOVS     r1,#0xa
001ab0  4800              LDR      r0,|L1.6836|
001ab2  e021              B        |L1.6904|
                  |L1.6836|
                          DCD      0x4006b000
                  |L1.6840|
                          DCD      ||.text||+0x900
                  |L1.6844|
                          DCD      uart_string_gsm
                  |L1.6848|
                          DCD      tout
                  |L1.6852|
                          DCD      data
                  |L1.6856|
                          DCD      flagch
                  |L1.6860|
                          DCD      int_erval
                  |L1.6864|
                          DCD      temp
                  |L1.6868|
001ad4  4f4b00            DCB      "OK",0
001ad7  00                DCB      0
                  |L1.6872|
                          DCD      cond201
                  |L1.6876|
                          DCD      cond200
                  |L1.6880|
                          DCD      sleep_flag
                  |L1.6884|
                          DCD      at_
                  |L1.6888|
                          DCD      drive
                  |L1.6892|
001aec  3e00              DCB      ">",0
001aee  00                DCB      0
001aef  00                DCB      0
                  |L1.6896|
                          DCD      ||k2||
                  |L1.6900|
                          DCD      k
                  |L1.6904|
001af8  f7fffffe          BL       uart_putchar
001afc  210a              MOVS     r1,#0xa
001afe  48fe              LDR      r0,|L1.7928|
001b00  f7fffffe          BL       uart_putchar
001b04  210a              MOVS     r1,#0xa
001b06  48fc              LDR      r0,|L1.7928|
001b08  f7fffffe          BL       uart_putchar
001b0c  210a              MOVS     r1,#0xa
001b0e  48fa              LDR      r0,|L1.7928|
001b10  f7fffffe          BL       uart_putchar
001b14  210a              MOVS     r1,#0xa
001b16  48f8              LDR      r0,|L1.7928|
001b18  f7fffffe          BL       uart_putchar
001b1c  210a              MOVS     r1,#0xa
001b1e  48f6              LDR      r0,|L1.7928|
001b20  f7fffffe          BL       uart_putchar
001b24  210a              MOVS     r1,#0xa
001b26  48f4              LDR      r0,|L1.7928|
001b28  f7fffffe          BL       uart_putchar
001b2c  210a              MOVS     r1,#0xa
001b2e  48f2              LDR      r0,|L1.7928|
001b30  f7fffffe          BL       uart_putchar
001b34  210a              MOVS     r1,#0xa
001b36  48f0              LDR      r0,|L1.7928|
001b38  f7fffffe          BL       uart_putchar
001b3c  210a              MOVS     r1,#0xa
001b3e  48ee              LDR      r0,|L1.7928|
001b40  f7fffffe          BL       uart_putchar
001b44  210a              MOVS     r1,#0xa
001b46  48ec              LDR      r0,|L1.7928|
001b48  f7fffffe          BL       uart_putchar
001b4c  210a              MOVS     r1,#0xa
001b4e  48ea              LDR      r0,|L1.7928|
001b50  f7fffffe          BL       uart_putchar
001b54  210a              MOVS     r1,#0xa
001b56  48e8              LDR      r0,|L1.7928|
001b58  f7fffffe          BL       uart_putchar
001b5c  210a              MOVS     r1,#0xa
001b5e  48e6              LDR      r0,|L1.7928|
001b60  f7fffffe          BL       uart_putchar
001b64  210a              MOVS     r1,#0xa
001b66  48e4              LDR      r0,|L1.7928|
001b68  f7fffffe          BL       uart_putchar
001b6c  210a              MOVS     r1,#0xa
001b6e  48e2              LDR      r0,|L1.7928|
001b70  f7fffffe          BL       uart_putchar
001b74  210a              MOVS     r1,#0xa
001b76  48e0              LDR      r0,|L1.7928|
001b78  f7fffffe          BL       uart_putchar
001b7c  210a              MOVS     r1,#0xa
001b7e  48de              LDR      r0,|L1.7928|
001b80  f7fffffe          BL       uart_putchar
001b84  210a              MOVS     r1,#0xa
001b86  48dc              LDR      r0,|L1.7928|
001b88  f7fffffe          BL       uart_putchar
001b8c  210a              MOVS     r1,#0xa
001b8e  48da              LDR      r0,|L1.7928|
001b90  f7fffffe          BL       uart_putchar
001b94  210a              MOVS     r1,#0xa
001b96  48d8              LDR      r0,|L1.7928|
001b98  f7fffffe          BL       uart_putchar
001b9c  210a              MOVS     r1,#0xa
001b9e  48d6              LDR      r0,|L1.7928|
001ba0  f7fffffe          BL       uart_putchar
001ba4  210a              MOVS     r1,#0xa
001ba6  48d4              LDR      r0,|L1.7928|
001ba8  f7fffffe          BL       uart_putchar
001bac  210a              MOVS     r1,#0xa
001bae  48d2              LDR      r0,|L1.7928|
001bb0  f7fffffe          BL       uart_putchar
001bb4  210a              MOVS     r1,#0xa
001bb6  48d0              LDR      r0,|L1.7928|
001bb8  f7fffffe          BL       uart_putchar
001bbc  210a              MOVS     r1,#0xa
001bbe  48ce              LDR      r0,|L1.7928|
001bc0  f7fffffe          BL       uart_putchar
001bc4  210a              MOVS     r1,#0xa
001bc6  48cc              LDR      r0,|L1.7928|
001bc8  f7fffffe          BL       uart_putchar
001bcc  210a              MOVS     r1,#0xa
001bce  48ca              LDR      r0,|L1.7928|
001bd0  f7fffffe          BL       uart_putchar
001bd4  210a              MOVS     r1,#0xa
001bd6  48c8              LDR      r0,|L1.7928|
001bd8  f7fffffe          BL       uart_putchar
001bdc  210a              MOVS     r1,#0xa
001bde  48c6              LDR      r0,|L1.7928|
001be0  f7fffffe          BL       uart_putchar
001be4  210a              MOVS     r1,#0xa
001be6  48c4              LDR      r0,|L1.7928|
001be8  f7fffffe          BL       uart_putchar
001bec  210a              MOVS     r1,#0xa
001bee  48c2              LDR      r0,|L1.7928|
001bf0  f7fffffe          BL       uart_putchar
001bf4  210a              MOVS     r1,#0xa
001bf6  48c0              LDR      r0,|L1.7928|
001bf8  f7fffffe          BL       uart_putchar
001bfc  210a              MOVS     r1,#0xa
001bfe  48be              LDR      r0,|L1.7928|
001c00  f7fffffe          BL       uart_putchar
001c04  210a              MOVS     r1,#0xa
001c06  48bc              LDR      r0,|L1.7928|
001c08  f7fffffe          BL       uart_putchar
001c0c  210a              MOVS     r1,#0xa
001c0e  48ba              LDR      r0,|L1.7928|
001c10  f7fffffe          BL       uart_putchar
001c14  210a              MOVS     r1,#0xa
001c16  48b8              LDR      r0,|L1.7928|
001c18  f7fffffe          BL       uart_putchar
;;;584    									//memset(data,0,1000);
;;;585    														//timer counts to wait for characters in uart 1 									
;;;586    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001c1c  bf00              NOP      
                  |L1.7198|
001c1e  49b7              LDR      r1,|L1.7932|
001c20  48b7              LDR      r0,|L1.7936|
001c22  f7fffffe          BL       strstr
001c26  2800              CMP      r0,#0
001c28  d10a              BNE      |L1.7232|
001c2a  49b4              LDR      r1,|L1.7932|
001c2c  3990              SUBS     r1,r1,#0x90
001c2e  48b4              LDR      r0,|L1.7936|
001c30  f7fffffe          BL       strstr
001c34  2800              CMP      r0,#0
001c36  d103              BNE      |L1.7232|
001c38  48b2              LDR      r0,|L1.7940|
001c3a  6800              LDR      r0,[r0,#0]  ; tout
001c3c  2805              CMP      r0,#5
001c3e  ddee              BLE      |L1.7198|
                  |L1.7232|
;;;587    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;588    									}
;;;589    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001c40  f7fffffe          BL       clear
;;;590    									//clear();
;;;591    									memset(data,0,strlen(data));
001c44  48b0              LDR      r0,|L1.7944|
001c46  f7fffffe          BL       strlen
001c4a  4604              MOV      r4,r0
001c4c  4621              MOV      r1,r4
001c4e  48ae              LDR      r0,|L1.7944|
001c50  f7fffffe          BL       __aeabi_memclr
;;;592    									clear();
001c54  f7fffffe          BL       clear
;;;593    									RESET_OFF;delay(100);
001c58  2020              MOVS     r0,#0x20
001c5a  49ac              LDR      r1,|L1.7948|
001c5c  6088              STR      r0,[r1,#8]
001c5e  2064              MOVS     r0,#0x64
001c60  f7fffffe          BL       delay
;;;594    									RESET_ON;delay(100);		
001c64  2020              MOVS     r0,#0x20
001c66  49a9              LDR      r1,|L1.7948|
001c68  6048              STR      r0,[r1,#4]
001c6a  2064              MOVS     r0,#0x64
001c6c  f7fffffe          BL       delay
                  |L1.7280|
;;;595    }
;;;596    	
;;;597    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
001c70  2004              MOVS     r0,#4
001c72  4ba7              LDR      r3,|L1.7952|
001c74  4aa1              LDR      r2,|L1.7932|
001c76  3a14              SUBS     r2,r2,#0x14
001c78  a1a6              ADR      r1,|L1.7956|
001c7a  9000              STR      r0,[sp,#0]
001c7c  4618              MOV      r0,r3
001c7e  300c              ADDS     r0,r0,#0xc
001c80  f7fffffe          BL       send_GSM
;;;598    GPS_COLLECT2();
001c84  f7fffffe          BL       GPS_COLLECT2
;;;599    strreplace(data, ",L,", ",H,");	
001c88  4a9c              LDR      r2,|L1.7932|
001c8a  3a48              SUBS     r2,r2,#0x48
001c8c  1d11              ADDS     r1,r2,#4
001c8e  489e              LDR      r0,|L1.7944|
001c90  f7fffffe          BL       strreplace
;;;600    memset(at_,0,100);
001c94  2164              MOVS     r1,#0x64
001c96  48a0              LDR      r0,|L1.7960|
001c98  f7fffffe          BL       __aeabi_memclr
;;;601    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
001c9c  4a9f              LDR      r2,|L1.7964|
001c9e  499c              LDR      r1,|L1.7952|
001ca0  3120              ADDS     r1,r1,#0x20
001ca2  489d              LDR      r0,|L1.7960|
001ca4  f7fffffe          BL       __2sprintf
;;;602    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
001ca8  489d              LDR      r0,|L1.7968|
001caa  6800              LDR      r0,[r0,#0]  ; tmeout
001cac  4b98              LDR      r3,|L1.7952|
001cae  4a93              LDR      r2,|L1.7932|
001cb0  3a14              SUBS     r2,r2,#0x14
001cb2  a198              ADR      r1,|L1.7956|
001cb4  9000              STR      r0,[sp,#0]
001cb6  4898              LDR      r0,|L1.7960|
001cb8  f7fffffe          BL       send_GSM
;;;603    msg_sim800(); 
001cbc  f7fffffe          BL       msg_sim800
;;;604    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
001cc0  2004              MOVS     r0,#4
001cc2  4b8e              LDR      r3,|L1.7932|
001cc4  3b74              SUBS     r3,r3,#0x74
001cc6  461a              MOV      r2,r3
001cc8  3260              ADDS     r2,r2,#0x60
001cca  a192              ADR      r1,|L1.7956|
001ccc  9000              STR      r0,[sp,#0]
001cce  4890              LDR      r0,|L1.7952|
001cd0  3038              ADDS     r0,r0,#0x38
001cd2  f7fffffe          BL       send_GSM
;;;605    GPS_COLLECT2();
001cd6  f7fffffe          BL       GPS_COLLECT2
;;;606    strreplace(data, ",L,", ",H,");	
001cda  4a88              LDR      r2,|L1.7932|
001cdc  3a48              SUBS     r2,r2,#0x48
001cde  1d11              ADDS     r1,r2,#4
001ce0  4889              LDR      r0,|L1.7944|
001ce2  f7fffffe          BL       strreplace
;;;607    GPS_COLLECT2();
001ce6  f7fffffe          BL       GPS_COLLECT2
;;;608    strreplace(data, ",L,", ",H,");	
001cea  4a84              LDR      r2,|L1.7932|
001cec  3a48              SUBS     r2,r2,#0x48
001cee  1d11              ADDS     r1,r2,#4
001cf0  4885              LDR      r0,|L1.7944|
001cf2  f7fffffe          BL       strreplace
;;;609    
;;;610    
;;;611    msg_sim800(); 
001cf6  f7fffffe          BL       msg_sim800
;;;612    GPS_COLLECT2();
001cfa  f7fffffe          BL       GPS_COLLECT2
;;;613    strreplace(data, ",L,", ",H,");	
001cfe  4a7f              LDR      r2,|L1.7932|
001d00  3a48              SUBS     r2,r2,#0x48
001d02  1d11              ADDS     r1,r2,#4
001d04  4880              LDR      r0,|L1.7944|
001d06  f7fffffe          BL       strreplace
;;;614    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR" , "DEACT",1);		
001d0a  2001              MOVS     r0,#1
001d0c  4b7b              LDR      r3,|L1.7932|
001d0e  3b74              SUBS     r3,r3,#0x74
001d10  461a              MOV      r2,r3
001d12  3a1c              SUBS     r2,r2,#0x1c
001d14  a17f              ADR      r1,|L1.7956|
001d16  9000              STR      r0,[sp,#0]
001d18  487d              LDR      r0,|L1.7952|
001d1a  3048              ADDS     r0,r0,#0x48
001d1c  f7fffffe          BL       send_GSM
;;;615    
;;;616    //delay(20);
;;;617    
;;;618    
;;;619    msg_sim800(); 
001d20  f7fffffe          BL       msg_sim800
;;;620    
;;;621    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001d24  4b7f              LDR      r3,|L1.7972|
001d26  4a80              LDR      r2,|L1.7976|
001d28  4979              LDR      r1,|L1.7952|
001d2a  3160              ADDS     r1,r1,#0x60
001d2c  487a              LDR      r0,|L1.7960|
001d2e  f7fffffe          BL       __2sprintf
;;;622    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001d32  487b              LDR      r0,|L1.7968|
001d34  6800              LDR      r0,[r0,#0]  ; tmeout
001d36  4b76              LDR      r3,|L1.7952|
001d38  4a70              LDR      r2,|L1.7932|
001d3a  3a90              SUBS     r2,r2,#0x90
001d3c  4619              MOV      r1,r3
001d3e  3180              ADDS     r1,r1,#0x80
001d40  9000              STR      r0,[sp,#0]
001d42  4875              LDR      r0,|L1.7960|
001d44  f7fffffe          BL       send_GSM
;;;623    						clear();
001d48  f7fffffe          BL       clear
;;;624    						
;;;625    						
;;;626    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
001d4c  4874              LDR      r0,|L1.7968|
001d4e  6800              LDR      r0,[r0,#0]  ; tmeout
001d50  4b6f              LDR      r3,|L1.7952|
001d52  3388              ADDS     r3,r3,#0x88
001d54  4a69              LDR      r2,|L1.7932|
001d56  3a90              SUBS     r2,r2,#0x90
001d58  a174              ADR      r1,|L1.7980|
001d5a  9000              STR      r0,[sp,#0]
001d5c  4618              MOV      r0,r3
001d5e  3010              ADDS     r0,r0,#0x10
001d60  f7fffffe          BL       send_GSM
;;;627    //*************************************tcp_initialization_ends****************************************//							
;;;628    									
;;;629    						clear();		
001d64  f7fffffe          BL       clear
;;;630    						cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
001d68  213e              MOVS     r1,#0x3e
001d6a  4865              LDR      r0,|L1.7936|
001d6c  f7fffffe          BL       mystrstr
001d70  496f              LDR      r1,|L1.7984|
001d72  7008              STRB     r0,[r1,#0]
;;;631    								if(cond)	
001d74  4608              MOV      r0,r1
001d76  7800              LDRB     r0,[r0,#0]  ; cond
001d78  2800              CMP      r0,#0
001d7a  d07d              BEQ      |L1.7800|
;;;632    								{	
;;;633    
;;;634    									clear();
001d7c  f7fffffe          BL       clear
;;;635    									memset(uart_string_gsm,0,5000);
001d80  496c              LDR      r1,|L1.7988|
001d82  485f              LDR      r0,|L1.7936|
001d84  f7fffffe          BL       __aeabi_memclr
;;;636    									strcat(data,"\n");
001d88  a16b              ADR      r1,|L1.7992|
001d8a  485f              LDR      r0,|L1.7944|
001d8c  f7fffffe          BL       strcat
;;;637    									len=strlen(data);
001d90  485d              LDR      r0,|L1.7944|
001d92  f7fffffe          BL       strlen
001d96  4969              LDR      r1,|L1.7996|
001d98  6008              STR      r0,[r1,#0]  ; len
;;;638    									tout=0;
001d9a  2000              MOVS     r0,#0
001d9c  4959              LDR      r1,|L1.7940|
001d9e  6008              STR      r0,[r1,#0]  ; tout
;;;639    									k2=0;
001da0  4967              LDR      r1,|L1.8000|
001da2  6008              STR      r0,[r1,#0]  ; k2
;;;640    									for(k=0;k<len;k++)
001da4  4967              LDR      r1,|L1.8004|
001da6  6008              STR      r0,[r1,#0]  ; k
001da8  e00b              B        |L1.7618|
                  |L1.7594|
;;;641    									{
;;;642    										uart_putchar(UART1_BASE_PTR, data[k]);
001daa  4857              LDR      r0,|L1.7944|
001dac  4a65              LDR      r2,|L1.8004|
001dae  6812              LDR      r2,[r2,#0]  ; k
001db0  5c81              LDRB     r1,[r0,r2]
001db2  4851              LDR      r0,|L1.7928|
001db4  f7fffffe          BL       uart_putchar
001db8  4862              LDR      r0,|L1.8004|
001dba  6800              LDR      r0,[r0,#0]            ;640  ; k
001dbc  1c40              ADDS     r0,r0,#1              ;640
001dbe  4961              LDR      r1,|L1.8004|
001dc0  6008              STR      r0,[r1,#0]            ;640  ; k
                  |L1.7618|
001dc2  4860              LDR      r0,|L1.8004|
001dc4  6800              LDR      r0,[r0,#0]            ;640  ; k
001dc6  495d              LDR      r1,|L1.7996|
001dc8  6809              LDR      r1,[r1,#0]            ;640  ; len
001dca  4288              CMP      r0,r1                 ;640
001dcc  dbed              BLT      |L1.7594|
;;;643    									}uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001dce  211a              MOVS     r1,#0x1a
001dd0  4849              LDR      r0,|L1.7928|
001dd2  f7fffffe          BL       uart_putchar
001dd6  211a              MOVS     r1,#0x1a
001dd8  4847              LDR      r0,|L1.7928|
001dda  f7fffffe          BL       uart_putchar
;;;644    									do
001dde  bf00              NOP      
                  |L1.7648|
;;;645    																{stcond1=strstr(uart_string_gsm,"SEND OK");
001de0  4959              LDR      r1,|L1.8008|
001de2  4847              LDR      r0,|L1.7936|
001de4  f7fffffe          BL       strstr
001de8  4958              LDR      r1,|L1.8012|
001dea  6008              STR      r0,[r1,#0]  ; stcond1
;;;646    																	stcond2=strstr(uart_string_gsm, "ERROR");
001dec  4943              LDR      r1,|L1.7932|
001dee  3990              SUBS     r1,r1,#0x90
001df0  4843              LDR      r0,|L1.7936|
001df2  f7fffffe          BL       strstr
001df6  4956              LDR      r1,|L1.8016|
001df8  6008              STR      r0,[r1,#0]  ; stcond2
;;;647    																		stcond3=strstr(uart_string_gsm, "FAIL");	
001dfa  4945              LDR      r1,|L1.7952|
001dfc  3190              ADDS     r1,r1,#0x90
001dfe  4840              LDR      r0,|L1.7936|
001e00  f7fffffe          BL       strstr
001e04  4953              LDR      r1,|L1.8020|
001e06  6008              STR      r0,[r1,#0]  ; stcond3
;;;648    																			stcond4=strstr(uart_string_gsm, "DEACT");	
001e08  493c              LDR      r1,|L1.7932|
001e0a  3974              SUBS     r1,r1,#0x74
001e0c  483c              LDR      r0,|L1.7936|
001e0e  f7fffffe          BL       strstr
001e12  4951              LDR      r1,|L1.8024|
001e14  6008              STR      r0,[r1,#0]  ; stcond4
;;;649    																	
;;;650    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 5) ) ); //|| (timeout < 1)   
001e16  484e              LDR      r0,|L1.8016|
001e18  6800              LDR      r0,[r0,#0]  ; stcond2
001e1a  2800              CMP      r0,#0
001e1c  d10f              BNE      |L1.7742|
001e1e  484d              LDR      r0,|L1.8020|
001e20  6800              LDR      r0,[r0,#0]  ; stcond3
001e22  2800              CMP      r0,#0
001e24  d10b              BNE      |L1.7742|
001e26  4608              MOV      r0,r1
001e28  6800              LDR      r0,[r0,#0]  ; stcond4
001e2a  2800              CMP      r0,#0
001e2c  d107              BNE      |L1.7742|
001e2e  4847              LDR      r0,|L1.8012|
001e30  6800              LDR      r0,[r0,#0]  ; stcond1
001e32  2800              CMP      r0,#0
001e34  d103              BNE      |L1.7742|
001e36  4833              LDR      r0,|L1.7940|
001e38  6800              LDR      r0,[r0,#0]  ; tout
001e3a  2805              CMP      r0,#5
001e3c  ddd0              BLE      |L1.7648|
                  |L1.7742|
;;;651    															//	delay(10);clear();
;;;652    														uart_putchar(UART1_BASE_PTR,0x1A);
001e3e  211a              MOVS     r1,#0x1a
001e40  482d              LDR      r0,|L1.7928|
001e42  f7fffffe          BL       uart_putchar
;;;653    											//	delay(10);
;;;654    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001e46  211a              MOVS     r1,#0x1a
001e48  482b              LDR      r0,|L1.7928|
001e4a  f7fffffe          BL       uart_putchar
001e4e  211a              MOVS     r1,#0x1a
001e50  4829              LDR      r0,|L1.7928|
001e52  f7fffffe          BL       uart_putchar
001e56  211a              MOVS     r1,#0x1a
001e58  4827              LDR      r0,|L1.7928|
001e5a  f7fffffe          BL       uart_putchar
;;;655    						
;;;656    
;;;657    
;;;658    									
;;;659    															
;;;660    															
;;;661    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;662    //															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;663    															
;;;664    														//qwe=strlen(uart_string_gsm);
;;;665    													//	uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
;;;666    															delay(20);
001e5e  2014              MOVS     r0,#0x14
001e60  f7fffffe          BL       delay
;;;667    															con1d=	(strstr(uart_string_gsm,"SEND OK"));
001e64  4938              LDR      r1,|L1.8008|
001e66  4826              LDR      r0,|L1.7936|
001e68  f7fffffe          BL       strstr
001e6c  493b              LDR      r1,|L1.8028|
001e6e  6008              STR      r0,[r1,#0]  ; con1d
;;;668    																if(!con1d)
001e70  4608              MOV      r0,r1
001e72  6800              LDR      r0,[r0,#0]  ; con1d
001e74  2800              CMP      r0,#0
001e76  e000              B        |L1.7802|
                  |L1.7800|
001e78  e179              B        |L1.8558|
                  |L1.7802|
001e7a  d173              BNE      |L1.8036|
;;;669    																{
;;;670    																	
;;;671    																	
;;;672    	delay(100);
001e7c  2064              MOVS     r0,#0x64
001e7e  f7fffffe          BL       delay
;;;673    		clear();//memset(uart_string_gsm,0,5000);
001e82  f7fffffe          BL       clear
;;;674    	
;;;675    	memset(at_,0,100);
001e86  2164              MOVS     r1,#0x64
001e88  4823              LDR      r0,|L1.7960|
001e8a  f7fffffe          BL       __aeabi_memclr
;;;676    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001e8e  481e              LDR      r0,|L1.7944|
001e90  f7fffffe          BL       strlen
001e94  1c44              ADDS     r4,r0,#1
001e96  4623              MOV      r3,r4
001e98  4a31              LDR      r2,|L1.8032|
001e9a  4918              LDR      r1,|L1.7932|
001e9c  3938              SUBS     r1,r1,#0x38
001e9e  481e              LDR      r0,|L1.7960|
001ea0  f7fffffe          BL       __2sprintf
;;;677    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001ea4  2005              MOVS     r0,#5
001ea6  4b15              LDR      r3,|L1.7932|
001ea8  3b90              SUBS     r3,r3,#0x90
001eaa  461a              MOV      r2,r3
001eac  327c              ADDS     r2,r2,#0x7c
001eae  a11f              ADR      r1,|L1.7980|
001eb0  9000              STR      r0,[sp,#0]
001eb2  4819              LDR      r0,|L1.7960|
001eb4  f7fffffe          BL       send_SD
;;;678    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;679    //	if(strstr(uart_string_gsm,"ERROR")){
;;;680    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;681    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;682    //	}
;;;683    	
;;;684    clear();	
001eb8  f7fffffe          BL       clear
;;;685    									k2=0;									//string array counter for uart 1
001ebc  2000              MOVS     r0,#0
001ebe  4920              LDR      r1,|L1.8000|
001ec0  6008              STR      r0,[r1,#0]  ; k2
;;;686    									tout=0;	
001ec2  4910              LDR      r1,|L1.7940|
001ec4  6008              STR      r0,[r1,#0]  ; tout
;;;687    		for(k=0;k<strlen(data);k++)
001ec6  491f              LDR      r1,|L1.8004|
001ec8  6008              STR      r0,[r1,#0]  ; k
001eca  e00b              B        |L1.7908|
                  |L1.7884|
;;;688    		{
;;;689    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001ecc  480e              LDR      r0,|L1.7944|
001ece  4a1d              LDR      r2,|L1.8004|
001ed0  6812              LDR      r2,[r2,#0]  ; k
001ed2  5c81              LDRB     r1,[r0,r2]
001ed4  4808              LDR      r0,|L1.7928|
001ed6  f7fffffe          BL       uart_putchar
001eda  481a              LDR      r0,|L1.8004|
001edc  6800              LDR      r0,[r0,#0]            ;687  ; k
001ede  1c40              ADDS     r0,r0,#1              ;687
001ee0  4918              LDR      r1,|L1.8004|
001ee2  6008              STR      r0,[r1,#0]            ;687  ; k
                  |L1.7908|
001ee4  4808              LDR      r0,|L1.7944|
001ee6  f7fffffe          BL       strlen
001eea  4916              LDR      r1,|L1.8004|
001eec  6809              LDR      r1,[r1,#0]            ;687  ; k
001eee  4288              CMP      r0,r1                 ;687
001ef0  d8ec              BHI      |L1.7884|
;;;690    		}	
;;;691    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001ef2  210a              MOVS     r1,#0xa
001ef4  4800              LDR      r0,|L1.7928|
001ef6  e036              B        |L1.8038|
                  |L1.7928|
                          DCD      0x4006b000
                  |L1.7932|
                          DCD      ||.text||+0x900
                  |L1.7936|
                          DCD      uart_string_gsm
                  |L1.7940|
                          DCD      tout
                  |L1.7944|
                          DCD      data
                  |L1.7948|
                          DCD      0x400ff080
                  |L1.7952|
                          DCD      ||.text||+0xd60
                  |L1.7956|
001f14  4f4b00            DCB      "OK",0
001f17  00                DCB      0
                  |L1.7960|
                          DCD      at_
                  |L1.7964|
                          DCD      apn
                  |L1.7968|
                          DCD      tmeout
                  |L1.7972|
                          DCD      port
                  |L1.7976|
                          DCD      ||ip||
                  |L1.7980|
001f2c  3e00              DCB      ">",0
001f2e  00                DCB      0
001f2f  00                DCB      0
                  |L1.7984|
                          DCD      cond
                  |L1.7988|
                          DCD      0x00001388
                  |L1.7992|
001f38  0a00              DCB      "\n",0
001f3a  00                DCB      0
001f3b  00                DCB      0
                  |L1.7996|
                          DCD      len
                  |L1.8000|
                          DCD      ||k2||
                  |L1.8004|
                          DCD      k
                  |L1.8008|
                          DCD      ||.text||+0x474
                  |L1.8012|
                          DCD      stcond1
                  |L1.8016|
                          DCD      stcond2
                  |L1.8020|
                          DCD      stcond3
                  |L1.8024|
                          DCD      stcond4
                  |L1.8028|
                          DCD      con1d
                  |L1.8032|
                          DCD      drive
                  |L1.8036|
001f64  e100              B        |L1.8552|
                  |L1.8038|
001f66  f7fffffe          BL       uart_putchar
001f6a  210a              MOVS     r1,#0xa
001f6c  48fe              LDR      r0,|L1.9064|
001f6e  f7fffffe          BL       uart_putchar
001f72  210a              MOVS     r1,#0xa
001f74  48fc              LDR      r0,|L1.9064|
001f76  f7fffffe          BL       uart_putchar
001f7a  210a              MOVS     r1,#0xa
001f7c  48fa              LDR      r0,|L1.9064|
001f7e  f7fffffe          BL       uart_putchar
001f82  210a              MOVS     r1,#0xa
001f84  48f8              LDR      r0,|L1.9064|
001f86  f7fffffe          BL       uart_putchar
001f8a  210a              MOVS     r1,#0xa
001f8c  48f6              LDR      r0,|L1.9064|
001f8e  f7fffffe          BL       uart_putchar
001f92  210a              MOVS     r1,#0xa
001f94  48f4              LDR      r0,|L1.9064|
001f96  f7fffffe          BL       uart_putchar
001f9a  210a              MOVS     r1,#0xa
001f9c  48f2              LDR      r0,|L1.9064|
001f9e  f7fffffe          BL       uart_putchar
001fa2  210a              MOVS     r1,#0xa
001fa4  48f0              LDR      r0,|L1.9064|
001fa6  f7fffffe          BL       uart_putchar
001faa  210a              MOVS     r1,#0xa
001fac  48ee              LDR      r0,|L1.9064|
001fae  f7fffffe          BL       uart_putchar
001fb2  210a              MOVS     r1,#0xa
001fb4  48ec              LDR      r0,|L1.9064|
001fb6  f7fffffe          BL       uart_putchar
001fba  210a              MOVS     r1,#0xa
001fbc  48ea              LDR      r0,|L1.9064|
001fbe  f7fffffe          BL       uart_putchar
001fc2  210a              MOVS     r1,#0xa
001fc4  48e8              LDR      r0,|L1.9064|
001fc6  f7fffffe          BL       uart_putchar
001fca  210a              MOVS     r1,#0xa
001fcc  48e6              LDR      r0,|L1.9064|
001fce  f7fffffe          BL       uart_putchar
001fd2  210a              MOVS     r1,#0xa
001fd4  48e4              LDR      r0,|L1.9064|
001fd6  f7fffffe          BL       uart_putchar
001fda  210a              MOVS     r1,#0xa
001fdc  48e2              LDR      r0,|L1.9064|
001fde  f7fffffe          BL       uart_putchar
001fe2  210a              MOVS     r1,#0xa
001fe4  48e0              LDR      r0,|L1.9064|
001fe6  f7fffffe          BL       uart_putchar
001fea  210a              MOVS     r1,#0xa
001fec  48de              LDR      r0,|L1.9064|
001fee  f7fffffe          BL       uart_putchar
001ff2  210a              MOVS     r1,#0xa
001ff4  48dc              LDR      r0,|L1.9064|
001ff6  f7fffffe          BL       uart_putchar
001ffa  210a              MOVS     r1,#0xa
001ffc  48da              LDR      r0,|L1.9064|
001ffe  f7fffffe          BL       uart_putchar
002002  210a              MOVS     r1,#0xa
002004  48d8              LDR      r0,|L1.9064|
002006  f7fffffe          BL       uart_putchar
00200a  210a              MOVS     r1,#0xa
00200c  48d6              LDR      r0,|L1.9064|
00200e  f7fffffe          BL       uart_putchar
002012  210a              MOVS     r1,#0xa
002014  48d4              LDR      r0,|L1.9064|
002016  f7fffffe          BL       uart_putchar
00201a  210a              MOVS     r1,#0xa
00201c  48d2              LDR      r0,|L1.9064|
00201e  f7fffffe          BL       uart_putchar
002022  210a              MOVS     r1,#0xa
002024  48d0              LDR      r0,|L1.9064|
002026  f7fffffe          BL       uart_putchar
00202a  210a              MOVS     r1,#0xa
00202c  48ce              LDR      r0,|L1.9064|
00202e  f7fffffe          BL       uart_putchar
002032  210a              MOVS     r1,#0xa
002034  48cc              LDR      r0,|L1.9064|
002036  f7fffffe          BL       uart_putchar
00203a  210a              MOVS     r1,#0xa
00203c  48ca              LDR      r0,|L1.9064|
00203e  f7fffffe          BL       uart_putchar
002042  210a              MOVS     r1,#0xa
002044  48c8              LDR      r0,|L1.9064|
002046  f7fffffe          BL       uart_putchar
00204a  210a              MOVS     r1,#0xa
00204c  48c6              LDR      r0,|L1.9064|
00204e  f7fffffe          BL       uart_putchar
002052  210a              MOVS     r1,#0xa
002054  48c4              LDR      r0,|L1.9064|
002056  f7fffffe          BL       uart_putchar
00205a  210a              MOVS     r1,#0xa
00205c  48c2              LDR      r0,|L1.9064|
00205e  f7fffffe          BL       uart_putchar
002062  210a              MOVS     r1,#0xa
002064  48c0              LDR      r0,|L1.9064|
002066  f7fffffe          BL       uart_putchar
00206a  210a              MOVS     r1,#0xa
00206c  48be              LDR      r0,|L1.9064|
00206e  f7fffffe          BL       uart_putchar
002072  210a              MOVS     r1,#0xa
002074  48bc              LDR      r0,|L1.9064|
002076  f7fffffe          BL       uart_putchar
00207a  210a              MOVS     r1,#0xa
00207c  48ba              LDR      r0,|L1.9064|
00207e  f7fffffe          BL       uart_putchar
002082  210a              MOVS     r1,#0xa
002084  48b8              LDR      r0,|L1.9064|
002086  f7fffffe          BL       uart_putchar
00208a  210a              MOVS     r1,#0xa
00208c  48b6              LDR      r0,|L1.9064|
00208e  f7fffffe          BL       uart_putchar
002092  210a              MOVS     r1,#0xa
002094  48b4              LDR      r0,|L1.9064|
002096  f7fffffe          BL       uart_putchar
00209a  210a              MOVS     r1,#0xa
00209c  48b2              LDR      r0,|L1.9064|
00209e  f7fffffe          BL       uart_putchar
0020a2  210a              MOVS     r1,#0xa
0020a4  48b0              LDR      r0,|L1.9064|
0020a6  f7fffffe          BL       uart_putchar
0020aa  210a              MOVS     r1,#0xa
0020ac  48ae              LDR      r0,|L1.9064|
0020ae  f7fffffe          BL       uart_putchar
0020b2  210a              MOVS     r1,#0xa
0020b4  48ac              LDR      r0,|L1.9064|
0020b6  f7fffffe          BL       uart_putchar
0020ba  210a              MOVS     r1,#0xa
0020bc  48aa              LDR      r0,|L1.9064|
0020be  f7fffffe          BL       uart_putchar
0020c2  210a              MOVS     r1,#0xa
0020c4  48a8              LDR      r0,|L1.9064|
0020c6  f7fffffe          BL       uart_putchar
0020ca  210a              MOVS     r1,#0xa
0020cc  48a6              LDR      r0,|L1.9064|
0020ce  f7fffffe          BL       uart_putchar
0020d2  210a              MOVS     r1,#0xa
0020d4  48a4              LDR      r0,|L1.9064|
0020d6  f7fffffe          BL       uart_putchar
0020da  210a              MOVS     r1,#0xa
0020dc  48a2              LDR      r0,|L1.9064|
0020de  f7fffffe          BL       uart_putchar
0020e2  210a              MOVS     r1,#0xa
0020e4  48a0              LDR      r0,|L1.9064|
0020e6  f7fffffe          BL       uart_putchar
0020ea  210a              MOVS     r1,#0xa
0020ec  489e              LDR      r0,|L1.9064|
0020ee  f7fffffe          BL       uart_putchar
0020f2  210a              MOVS     r1,#0xa
0020f4  489c              LDR      r0,|L1.9064|
0020f6  f7fffffe          BL       uart_putchar
0020fa  210a              MOVS     r1,#0xa
0020fc  489a              LDR      r0,|L1.9064|
0020fe  f7fffffe          BL       uart_putchar
002102  210a              MOVS     r1,#0xa
002104  4898              LDR      r0,|L1.9064|
002106  f7fffffe          BL       uart_putchar
00210a  210a              MOVS     r1,#0xa
00210c  4896              LDR      r0,|L1.9064|
00210e  f7fffffe          BL       uart_putchar
002112  210a              MOVS     r1,#0xa
002114  4894              LDR      r0,|L1.9064|
002116  f7fffffe          BL       uart_putchar
00211a  210a              MOVS     r1,#0xa
00211c  4892              LDR      r0,|L1.9064|
00211e  f7fffffe          BL       uart_putchar
002122  210a              MOVS     r1,#0xa
002124  4890              LDR      r0,|L1.9064|
002126  f7fffffe          BL       uart_putchar
;;;692    									//memset(data,0,1000);
;;;693    														//timer counts to wait for characters in uart 1 									
;;;694    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00212a  bf00              NOP      
                  |L1.8492|
00212c  498f              LDR      r1,|L1.9068|
00212e  4890              LDR      r0,|L1.9072|
002130  f7fffffe          BL       strstr
002134  2800              CMP      r0,#0
002136  d10a              BNE      |L1.8526|
002138  498c              LDR      r1,|L1.9068|
00213a  3990              SUBS     r1,r1,#0x90
00213c  488c              LDR      r0,|L1.9072|
00213e  f7fffffe          BL       strstr
002142  2800              CMP      r0,#0
002144  d103              BNE      |L1.8526|
002146  488b              LDR      r0,|L1.9076|
002148  6800              LDR      r0,[r0,#0]  ; tout
00214a  2805              CMP      r0,#5
00214c  ddee              BLE      |L1.8492|
                  |L1.8526|
;;;695    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;696    									}
;;;697    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00214e  f7fffffe          BL       clear
;;;698    									//clear();
;;;699    									memset(data,0,strlen(data));
002152  4889              LDR      r0,|L1.9080|
002154  f7fffffe          BL       strlen
002158  4604              MOV      r4,r0
00215a  4621              MOV      r1,r4
00215c  4886              LDR      r0,|L1.9080|
00215e  f7fffffe          BL       __aeabi_memclr
;;;700    									clear();
002162  f7fffffe          BL       clear
002166  e157              B        |L1.9240|
                  |L1.8552|
;;;701    
;;;702    								
;;;703    																	
;;;704    																	
;;;705    								//								log_it();								
;;;706    																}else{send_chunk();}													
002168  f7fffffe          BL       send_chunk
00216c  e154              B        |L1.9240|
                  |L1.8558|
;;;707    								//checks for the sd_data available
;;;708    								}
;;;709    								//con1d=strstr(uart_string_gsm,"OK");
;;;710    								else
;;;711    								{
;;;712    									
;;;713    									
;;;714    									
;;;715    	delay(100);
00216e  2064              MOVS     r0,#0x64
002170  f7fffffe          BL       delay
;;;716    		clear();//memset(uart_string_gsm,0,5000);
002174  f7fffffe          BL       clear
;;;717    	
;;;718    	memset(at_,0,100);
002178  2164              MOVS     r1,#0x64
00217a  4880              LDR      r0,|L1.9084|
00217c  f7fffffe          BL       __aeabi_memclr
;;;719    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002180  487d              LDR      r0,|L1.9080|
002182  f7fffffe          BL       strlen
002186  1c44              ADDS     r4,r0,#1
002188  4623              MOV      r3,r4
00218a  4a7d              LDR      r2,|L1.9088|
00218c  4977              LDR      r1,|L1.9068|
00218e  3938              SUBS     r1,r1,#0x38
002190  487a              LDR      r0,|L1.9084|
002192  f7fffffe          BL       __2sprintf
;;;720    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002196  2005              MOVS     r0,#5
002198  4b74              LDR      r3,|L1.9068|
00219a  3b90              SUBS     r3,r3,#0x90
00219c  461a              MOV      r2,r3
00219e  327c              ADDS     r2,r2,#0x7c
0021a0  a178              ADR      r1,|L1.9092|
0021a2  9000              STR      r0,[sp,#0]
0021a4  4875              LDR      r0,|L1.9084|
0021a6  f7fffffe          BL       send_SD
;;;721    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;722    //	if(strstr(uart_string_gsm,"ERROR")){
;;;723    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;724    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;725    //	}
;;;726    	
;;;727    clear();	
0021aa  f7fffffe          BL       clear
;;;728    									k2=0;									//string array counter for uart 1
0021ae  2000              MOVS     r0,#0
0021b0  4975              LDR      r1,|L1.9096|
0021b2  6008              STR      r0,[r1,#0]  ; k2
;;;729    									tout=0;	
0021b4  496f              LDR      r1,|L1.9076|
0021b6  6008              STR      r0,[r1,#0]  ; tout
;;;730    		for(k=0;k<strlen(data);k++)
0021b8  4974              LDR      r1,|L1.9100|
0021ba  6008              STR      r0,[r1,#0]  ; k
0021bc  e00b              B        |L1.8662|
                  |L1.8638|
;;;731    		{
;;;732    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0021be  486e              LDR      r0,|L1.9080|
0021c0  4a72              LDR      r2,|L1.9100|
0021c2  6812              LDR      r2,[r2,#0]  ; k
0021c4  5c81              LDRB     r1,[r0,r2]
0021c6  4868              LDR      r0,|L1.9064|
0021c8  f7fffffe          BL       uart_putchar
0021cc  486f              LDR      r0,|L1.9100|
0021ce  6800              LDR      r0,[r0,#0]            ;730  ; k
0021d0  1c40              ADDS     r0,r0,#1              ;730
0021d2  496e              LDR      r1,|L1.9100|
0021d4  6008              STR      r0,[r1,#0]            ;730  ; k
                  |L1.8662|
0021d6  4868              LDR      r0,|L1.9080|
0021d8  f7fffffe          BL       strlen
0021dc  496b              LDR      r1,|L1.9100|
0021de  6809              LDR      r1,[r1,#0]            ;730  ; k
0021e0  4288              CMP      r0,r1                 ;730
0021e2  d8ec              BHI      |L1.8638|
;;;733    		}	
;;;734    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0021e4  210a              MOVS     r1,#0xa
0021e6  4860              LDR      r0,|L1.9064|
0021e8  f7fffffe          BL       uart_putchar
0021ec  210a              MOVS     r1,#0xa
0021ee  485e              LDR      r0,|L1.9064|
0021f0  f7fffffe          BL       uart_putchar
0021f4  210a              MOVS     r1,#0xa
0021f6  485c              LDR      r0,|L1.9064|
0021f8  f7fffffe          BL       uart_putchar
0021fc  210a              MOVS     r1,#0xa
0021fe  485a              LDR      r0,|L1.9064|
002200  f7fffffe          BL       uart_putchar
002204  210a              MOVS     r1,#0xa
002206  4858              LDR      r0,|L1.9064|
002208  f7fffffe          BL       uart_putchar
00220c  210a              MOVS     r1,#0xa
00220e  4856              LDR      r0,|L1.9064|
002210  f7fffffe          BL       uart_putchar
002214  210a              MOVS     r1,#0xa
002216  4854              LDR      r0,|L1.9064|
002218  f7fffffe          BL       uart_putchar
00221c  210a              MOVS     r1,#0xa
00221e  4852              LDR      r0,|L1.9064|
002220  f7fffffe          BL       uart_putchar
002224  210a              MOVS     r1,#0xa
002226  4850              LDR      r0,|L1.9064|
002228  f7fffffe          BL       uart_putchar
00222c  210a              MOVS     r1,#0xa
00222e  484e              LDR      r0,|L1.9064|
002230  f7fffffe          BL       uart_putchar
002234  210a              MOVS     r1,#0xa
002236  484c              LDR      r0,|L1.9064|
002238  f7fffffe          BL       uart_putchar
00223c  210a              MOVS     r1,#0xa
00223e  484a              LDR      r0,|L1.9064|
002240  f7fffffe          BL       uart_putchar
002244  210a              MOVS     r1,#0xa
002246  4848              LDR      r0,|L1.9064|
002248  f7fffffe          BL       uart_putchar
00224c  210a              MOVS     r1,#0xa
00224e  4846              LDR      r0,|L1.9064|
002250  f7fffffe          BL       uart_putchar
002254  210a              MOVS     r1,#0xa
002256  4844              LDR      r0,|L1.9064|
002258  f7fffffe          BL       uart_putchar
00225c  210a              MOVS     r1,#0xa
00225e  4842              LDR      r0,|L1.9064|
002260  f7fffffe          BL       uart_putchar
002264  210a              MOVS     r1,#0xa
002266  4840              LDR      r0,|L1.9064|
002268  f7fffffe          BL       uart_putchar
00226c  210a              MOVS     r1,#0xa
00226e  483e              LDR      r0,|L1.9064|
002270  f7fffffe          BL       uart_putchar
002274  210a              MOVS     r1,#0xa
002276  483c              LDR      r0,|L1.9064|
002278  f7fffffe          BL       uart_putchar
00227c  210a              MOVS     r1,#0xa
00227e  483a              LDR      r0,|L1.9064|
002280  f7fffffe          BL       uart_putchar
002284  210a              MOVS     r1,#0xa
002286  4838              LDR      r0,|L1.9064|
002288  f7fffffe          BL       uart_putchar
00228c  210a              MOVS     r1,#0xa
00228e  4836              LDR      r0,|L1.9064|
002290  f7fffffe          BL       uart_putchar
002294  210a              MOVS     r1,#0xa
002296  4834              LDR      r0,|L1.9064|
002298  f7fffffe          BL       uart_putchar
00229c  210a              MOVS     r1,#0xa
00229e  4832              LDR      r0,|L1.9064|
0022a0  f7fffffe          BL       uart_putchar
0022a4  210a              MOVS     r1,#0xa
0022a6  4830              LDR      r0,|L1.9064|
0022a8  f7fffffe          BL       uart_putchar
0022ac  210a              MOVS     r1,#0xa
0022ae  482e              LDR      r0,|L1.9064|
0022b0  f7fffffe          BL       uart_putchar
0022b4  210a              MOVS     r1,#0xa
0022b6  482c              LDR      r0,|L1.9064|
0022b8  f7fffffe          BL       uart_putchar
0022bc  210a              MOVS     r1,#0xa
0022be  482a              LDR      r0,|L1.9064|
0022c0  f7fffffe          BL       uart_putchar
0022c4  210a              MOVS     r1,#0xa
0022c6  4828              LDR      r0,|L1.9064|
0022c8  f7fffffe          BL       uart_putchar
0022cc  210a              MOVS     r1,#0xa
0022ce  4826              LDR      r0,|L1.9064|
0022d0  f7fffffe          BL       uart_putchar
0022d4  210a              MOVS     r1,#0xa
0022d6  4824              LDR      r0,|L1.9064|
0022d8  f7fffffe          BL       uart_putchar
0022dc  210a              MOVS     r1,#0xa
0022de  4822              LDR      r0,|L1.9064|
0022e0  f7fffffe          BL       uart_putchar
0022e4  210a              MOVS     r1,#0xa
0022e6  4820              LDR      r0,|L1.9064|
0022e8  f7fffffe          BL       uart_putchar
0022ec  210a              MOVS     r1,#0xa
0022ee  481e              LDR      r0,|L1.9064|
0022f0  f7fffffe          BL       uart_putchar
0022f4  210a              MOVS     r1,#0xa
0022f6  481c              LDR      r0,|L1.9064|
0022f8  f7fffffe          BL       uart_putchar
0022fc  210a              MOVS     r1,#0xa
0022fe  481a              LDR      r0,|L1.9064|
002300  f7fffffe          BL       uart_putchar
002304  210a              MOVS     r1,#0xa
002306  4818              LDR      r0,|L1.9064|
002308  f7fffffe          BL       uart_putchar
00230c  210a              MOVS     r1,#0xa
00230e  4816              LDR      r0,|L1.9064|
002310  f7fffffe          BL       uart_putchar
002314  210a              MOVS     r1,#0xa
002316  4814              LDR      r0,|L1.9064|
002318  f7fffffe          BL       uart_putchar
00231c  210a              MOVS     r1,#0xa
00231e  4812              LDR      r0,|L1.9064|
002320  f7fffffe          BL       uart_putchar
002324  210a              MOVS     r1,#0xa
002326  4810              LDR      r0,|L1.9064|
002328  f7fffffe          BL       uart_putchar
00232c  210a              MOVS     r1,#0xa
00232e  480e              LDR      r0,|L1.9064|
002330  f7fffffe          BL       uart_putchar
002334  210a              MOVS     r1,#0xa
002336  480c              LDR      r0,|L1.9064|
002338  f7fffffe          BL       uart_putchar
00233c  210a              MOVS     r1,#0xa
00233e  480a              LDR      r0,|L1.9064|
002340  f7fffffe          BL       uart_putchar
002344  210a              MOVS     r1,#0xa
002346  4808              LDR      r0,|L1.9064|
002348  f7fffffe          BL       uart_putchar
00234c  210a              MOVS     r1,#0xa
00234e  4806              LDR      r0,|L1.9064|
002350  f7fffffe          BL       uart_putchar
002354  210a              MOVS     r1,#0xa
002356  4804              LDR      r0,|L1.9064|
002358  f7fffffe          BL       uart_putchar
00235c  210a              MOVS     r1,#0xa
00235e  4802              LDR      r0,|L1.9064|
002360  f7fffffe          BL       uart_putchar
002364  210a              MOVS     r1,#0xa
002366  e013              B        |L1.9104|
                  |L1.9064|
                          DCD      0x4006b000
                  |L1.9068|
                          DCD      ||.text||+0x900
                  |L1.9072|
                          DCD      uart_string_gsm
                  |L1.9076|
                          DCD      tout
                  |L1.9080|
                          DCD      data
                  |L1.9084|
                          DCD      at_
                  |L1.9088|
                          DCD      drive
                  |L1.9092|
002384  3e00              DCB      ">",0
002386  00                DCB      0
002387  00                DCB      0
                  |L1.9096|
                          DCD      ||k2||
                  |L1.9100|
                          DCD      k
                  |L1.9104|
002390  48fe              LDR      r0,|L1.10124|
002392  f7fffffe          BL       uart_putchar
002396  210a              MOVS     r1,#0xa
002398  48fc              LDR      r0,|L1.10124|
00239a  f7fffffe          BL       uart_putchar
00239e  210a              MOVS     r1,#0xa
0023a0  48fa              LDR      r0,|L1.10124|
0023a2  f7fffffe          BL       uart_putchar
0023a6  210a              MOVS     r1,#0xa
0023a8  48f8              LDR      r0,|L1.10124|
0023aa  f7fffffe          BL       uart_putchar
0023ae  210a              MOVS     r1,#0xa
0023b0  48f6              LDR      r0,|L1.10124|
0023b2  f7fffffe          BL       uart_putchar
0023b6  210a              MOVS     r1,#0xa
0023b8  48f4              LDR      r0,|L1.10124|
0023ba  f7fffffe          BL       uart_putchar
0023be  210a              MOVS     r1,#0xa
0023c0  48f2              LDR      r0,|L1.10124|
0023c2  f7fffffe          BL       uart_putchar
0023c6  210a              MOVS     r1,#0xa
0023c8  48f0              LDR      r0,|L1.10124|
0023ca  f7fffffe          BL       uart_putchar
0023ce  210a              MOVS     r1,#0xa
0023d0  48ee              LDR      r0,|L1.10124|
0023d2  f7fffffe          BL       uart_putchar
;;;735    									//memset(data,0,1000);
;;;736    														//timer counts to wait for characters in uart 1 									
;;;737    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0023d6  bf00              NOP      
                  |L1.9176|
0023d8  49ed              LDR      r1,|L1.10128|
0023da  48ee              LDR      r0,|L1.10132|
0023dc  f7fffffe          BL       strstr
0023e0  2800              CMP      r0,#0
0023e2  d10a              BNE      |L1.9210|
0023e4  49ea              LDR      r1,|L1.10128|
0023e6  3990              SUBS     r1,r1,#0x90
0023e8  48ea              LDR      r0,|L1.10132|
0023ea  f7fffffe          BL       strstr
0023ee  2800              CMP      r0,#0
0023f0  d103              BNE      |L1.9210|
0023f2  48e9              LDR      r0,|L1.10136|
0023f4  6800              LDR      r0,[r0,#0]  ; tout
0023f6  2805              CMP      r0,#5
0023f8  ddee              BLE      |L1.9176|
                  |L1.9210|
;;;738    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;739    									}
;;;740    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0023fa  f7fffffe          BL       clear
;;;741    									//clear();
;;;742    									memset(data,0,strlen(data));
0023fe  48e7              LDR      r0,|L1.10140|
002400  f7fffffe          BL       strlen
002404  4604              MOV      r4,r0
002406  4621              MOV      r1,r4
002408  48e4              LDR      r0,|L1.10140|
00240a  f7fffffe          BL       __aeabi_memclr
;;;743    									clear();
00240e  f7fffffe          BL       clear
002412  e001              B        |L1.9240|
                  |L1.9236|
;;;744    
;;;745    								
;;;746    									
;;;747    									
;;;748    									
;;;749    								//	log_it();			//otherwize log it					
;;;750    								}
;;;751    
;;;752    																
;;;753    //delay(50);
;;;754    
;;;755    //else{
;;;756    //log_it();}
;;;757    								
;;;758    								
;;;759    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;760    	else
;;;761    	{
;;;762    		send_chunk();
002414  f7fffffe          BL       send_chunk
                  |L1.9240|
;;;763    	}		
;;;764    								
;;;765    								
;;;766    								
;;;767    	memset(data,0,strlen(data));	
002418  48e0              LDR      r0,|L1.10140|
00241a  f7fffffe          BL       strlen
00241e  4604              MOV      r4,r0
002420  4621              MOV      r1,r4
002422  48de              LDR      r0,|L1.10140|
002424  f7fffffe          BL       __aeabi_memclr
;;;768    	uart_putchar(UART1_BASE_PTR, 0x1A);
002428  211a              MOVS     r1,#0x1a
00242a  48d8              LDR      r0,|L1.10124|
00242c  f7fffffe          BL       uart_putchar
;;;769    	
;;;770    }
002430  bd38              POP      {r3-r5,pc}
;;;771    	
                          ENDP

                  send_tcp2 PROC
;;;786    
;;;787    void send_tcp2()
002432  b538              PUSH     {r3-r5,lr}
;;;788    {	
;;;789    memset(stcond1,0,strlen(stcond1));	
002434  48da              LDR      r0,|L1.10144|
002436  6800              LDR      r0,[r0,#0]  ; stcond1
002438  f7fffffe          BL       strlen
00243c  4604              MOV      r4,r0
00243e  4621              MOV      r1,r4
002440  48d7              LDR      r0,|L1.10144|
002442  6800              LDR      r0,[r0,#0]  ; stcond1
002444  f7fffffe          BL       __aeabi_memclr
;;;790    memset(con1d,0,strlen(con1d));	
002448  48d6              LDR      r0,|L1.10148|
00244a  6800              LDR      r0,[r0,#0]  ; con1d
00244c  f7fffffe          BL       strlen
002450  4604              MOV      r4,r0
002452  4621              MOV      r1,r4
002454  48d3              LDR      r0,|L1.10148|
002456  6800              LDR      r0,[r0,#0]  ; con1d
002458  f7fffffe          BL       __aeabi_memclr
;;;791    	
;;;792    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;793    						
;;;794    								cond=mystrstr(uart_string_gsm,'>');
00245c  213e              MOVS     r1,#0x3e
00245e  48cd              LDR      r0,|L1.10132|
002460  f7fffffe          BL       mystrstr
002464  49d0              LDR      r1,|L1.10152|
002466  7008              STRB     r0,[r1,#0]
;;;795    								if(cond)	
002468  4608              MOV      r0,r1
00246a  7800              LDRB     r0,[r0,#0]  ; cond
00246c  2800              CMP      r0,#0
00246e  d07c              BEQ      |L1.9578|
;;;796    								{
;;;797    									
;;;798    									clear();
002470  f7fffffe          BL       clear
;;;799    									memset(uart_string_gsm,0,5000);
002474  49cd              LDR      r1,|L1.10156|
002476  48c7              LDR      r0,|L1.10132|
002478  f7fffffe          BL       __aeabi_memclr
;;;800    									strcat(data,"\n");
00247c  a1cc              ADR      r1,|L1.10160|
00247e  48c7              LDR      r0,|L1.10140|
002480  f7fffffe          BL       strcat
;;;801    									len=strlen(data);
002484  48c5              LDR      r0,|L1.10140|
002486  f7fffffe          BL       strlen
00248a  49ca              LDR      r1,|L1.10164|
00248c  6008              STR      r0,[r1,#0]  ; len
;;;802    									tout=0;
00248e  2000              MOVS     r0,#0
002490  49c1              LDR      r1,|L1.10136|
002492  6008              STR      r0,[r1,#0]  ; tout
;;;803    									k2=0;
002494  49c8              LDR      r1,|L1.10168|
002496  6008              STR      r0,[r1,#0]  ; k2
;;;804    									for(k=0;k<len;k++)
002498  49c8              LDR      r1,|L1.10172|
00249a  6008              STR      r0,[r1,#0]  ; k
00249c  e00b              B        |L1.9398|
                  |L1.9374|
;;;805    									{
;;;806    										uart_putchar(UART1_BASE_PTR, data[k]);
00249e  48bf              LDR      r0,|L1.10140|
0024a0  4ac6              LDR      r2,|L1.10172|
0024a2  6812              LDR      r2,[r2,#0]  ; k
0024a4  5c81              LDRB     r1,[r0,r2]
0024a6  48b9              LDR      r0,|L1.10124|
0024a8  f7fffffe          BL       uart_putchar
0024ac  48c3              LDR      r0,|L1.10172|
0024ae  6800              LDR      r0,[r0,#0]            ;804  ; k
0024b0  1c40              ADDS     r0,r0,#1              ;804
0024b2  49c2              LDR      r1,|L1.10172|
0024b4  6008              STR      r0,[r1,#0]            ;804  ; k
                  |L1.9398|
0024b6  48c1              LDR      r0,|L1.10172|
0024b8  6800              LDR      r0,[r0,#0]            ;804  ; k
0024ba  49be              LDR      r1,|L1.10164|
0024bc  6809              LDR      r1,[r1,#0]            ;804  ; len
0024be  4288              CMP      r0,r1                 ;804
0024c0  dbed              BLT      |L1.9374|
;;;807    									}uart_putchar(UART1_BASE_PTR, 0x1A);
0024c2  211a              MOVS     r1,#0x1a
0024c4  48b1              LDR      r0,|L1.10124|
0024c6  f7fffffe          BL       uart_putchar
;;;808    									do
0024ca  bf00              NOP      
                  |L1.9420|
;;;809    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0024cc  49bc              LDR      r1,|L1.10176|
0024ce  48b1              LDR      r0,|L1.10132|
0024d0  f7fffffe          BL       strstr
0024d4  49b2              LDR      r1,|L1.10144|
0024d6  6008              STR      r0,[r1,#0]  ; stcond1
;;;810    																	stcond2=strstr(uart_string_gsm, "ERROR");
0024d8  49ad              LDR      r1,|L1.10128|
0024da  3990              SUBS     r1,r1,#0x90
0024dc  48ad              LDR      r0,|L1.10132|
0024de  f7fffffe          BL       strstr
0024e2  49b8              LDR      r1,|L1.10180|
0024e4  6008              STR      r0,[r1,#0]  ; stcond2
;;;811    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0024e6  49b8              LDR      r1,|L1.10184|
0024e8  48aa              LDR      r0,|L1.10132|
0024ea  f7fffffe          BL       strstr
0024ee  49b7              LDR      r1,|L1.10188|
0024f0  6008              STR      r0,[r1,#0]  ; stcond3
;;;812    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0024f2  49a7              LDR      r1,|L1.10128|
0024f4  3974              SUBS     r1,r1,#0x74
0024f6  48a7              LDR      r0,|L1.10132|
0024f8  f7fffffe          BL       strstr
0024fc  49b4              LDR      r1,|L1.10192|
0024fe  6008              STR      r0,[r1,#0]  ; stcond4
;;;813    																	
;;;814    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
002500  48b0              LDR      r0,|L1.10180|
002502  6800              LDR      r0,[r0,#0]  ; stcond2
002504  2800              CMP      r0,#0
002506  d10f              BNE      |L1.9512|
002508  48b0              LDR      r0,|L1.10188|
00250a  6800              LDR      r0,[r0,#0]  ; stcond3
00250c  2800              CMP      r0,#0
00250e  d10b              BNE      |L1.9512|
002510  4608              MOV      r0,r1
002512  6800              LDR      r0,[r0,#0]  ; stcond4
002514  2800              CMP      r0,#0
002516  d107              BNE      |L1.9512|
002518  48a1              LDR      r0,|L1.10144|
00251a  6800              LDR      r0,[r0,#0]  ; stcond1
00251c  2800              CMP      r0,#0
00251e  d103              BNE      |L1.9512|
002520  489d              LDR      r0,|L1.10136|
002522  6800              LDR      r0,[r0,#0]  ; tout
002524  2804              CMP      r0,#4
002526  ddd1              BLE      |L1.9420|
                  |L1.9512|
;;;815    																//delay(10);clear();
;;;816    														uart_putchar(UART1_BASE_PTR,0x1A);
002528  211a              MOVS     r1,#0x1a
00252a  4898              LDR      r0,|L1.10124|
00252c  f7fffffe          BL       uart_putchar
;;;817    												//delay(10);
;;;818    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002530  211a              MOVS     r1,#0x1a
002532  4896              LDR      r0,|L1.10124|
002534  f7fffffe          BL       uart_putchar
002538  211a              MOVS     r1,#0x1a
00253a  4894              LDR      r0,|L1.10124|
00253c  f7fffffe          BL       uart_putchar
002540  211a              MOVS     r1,#0x1a
002542  4892              LDR      r0,|L1.10124|
002544  f7fffffe          BL       uart_putchar
;;;819    						
;;;820    									
;;;821    									
;;;822    									
;;;823    									
;;;824    									
;;;825    									
;;;826    									
;;;827    
;;;828    //									for(k=0;k<len;k++)
;;;829    //									{
;;;830    //										uart_putchar(UART1_BASE_PTR, data[k]);//clear();// uart0_putchar(UART0_BASE_PTR, data[k]);
;;;831    //									}
;;;832    //  								uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0x1A);
;;;833    
;;;834    //									
;;;835    //													k2=0;									//string array counter for uart 1
;;;836    //													 timeout=99001;						//timer counts to wait for characters in uart 1 									
;;;837    //													while(!(  strstr(uart_string_gsm,"OK")  || strstr(uart_string_gsm,"FAIL")  || strstr(uart_string_gsm,"ERROR") || strstr(uart_string_gsm,"DEACT") ||  (timeout <= 1)))       
;;;838    //																{
;;;839    //																	timeout--;
;;;840    //																//	if(timeout%10000 == 0){uart_putchar(UART1_BASE_PTR,0x1A);delay(10);}
;;;841    //																}
;;;842    																if(flagch==1){		int_erval=temp;flagch=0;	}
002548  48a2              LDR      r0,|L1.10196|
00254a  6800              LDR      r0,[r0,#0]  ; flagch
00254c  2801              CMP      r0,#1
00254e  d106              BNE      |L1.9566|
002550  48a1              LDR      r0,|L1.10200|
002552  6800              LDR      r0,[r0,#0]  ; temp
002554  49a1              LDR      r1,|L1.10204|
002556  6008              STR      r0,[r1,#0]  ; int_erval
002558  2000              MOVS     r0,#0
00255a  499e              LDR      r1,|L1.10196|
00255c  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.9566|
;;;843    delay(50);
00255e  2032              MOVS     r0,#0x32
002560  f7fffffe          BL       delay
;;;844    stcond1=strstr(uart_string_gsm,"SEND OK");								
002564  4996              LDR      r1,|L1.10176|
002566  488b              LDR      r0,|L1.10132|
002568  e000              B        |L1.9580|
                  |L1.9578|
00256a  e003              B        |L1.9588|
                  |L1.9580|
00256c  f7fffffe          BL       strstr
002570  498b              LDR      r1,|L1.10144|
002572  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.9588|
;;;845    								}
;;;846    //else{
;;;847    //log_it();
;;;848    //}
;;;849    
;;;850    
;;;851    if(!stcond1) // if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
002574  488a              LDR      r0,|L1.10144|
002576  6800              LDR      r0,[r0,#0]  ; stcond1
002578  2800              CMP      r0,#0
00257a  d001              BEQ      |L1.9600|
00257c  f000ff3f          BL       |L1.13310|
                  |L1.9600|
;;;852    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002580  211a              MOVS     r1,#0x1a
002582  4882              LDR      r0,|L1.10124|
002584  f7fffffe          BL       uart_putchar
002588  f7fffffe          BL       clear
00258c  200a              MOVS     r0,#0xa
00258e  f7fffffe          BL       delay
;;;853    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
002592  211a              MOVS     r1,#0x1a
002594  487d              LDR      r0,|L1.10124|
002596  f7fffffe          BL       uart_putchar
00259a  f7fffffe          BL       clear
00259e  200a              MOVS     r0,#0xa
0025a0  f7fffffe          BL       delay
;;;854    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0025a4  211a              MOVS     r1,#0x1a
0025a6  4879              LDR      r0,|L1.10124|
0025a8  f7fffffe          BL       uart_putchar
0025ac  f7fffffe          BL       clear
0025b0  200a              MOVS     r0,#0xa
0025b2  f7fffffe          BL       delay
;;;855    						//	remove_all_chars(data, '\n', '\n');
;;;856    	
;;;857    	//	strreplace(data, ",L,", ",H,");	
;;;858    	
;;;859    	
;;;860    	delay(100);
0025b6  2064              MOVS     r0,#0x64
0025b8  f7fffffe          BL       delay
;;;861    		clear();//memset(uart_string_gsm,0,5000);
0025bc  f7fffffe          BL       clear
;;;862    	
;;;863    	memset(at_,0,100);
0025c0  2164              MOVS     r1,#0x64
0025c2  4887              LDR      r0,|L1.10208|
0025c4  f7fffffe          BL       __aeabi_memclr
;;;864    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0025c8  4874              LDR      r0,|L1.10140|
0025ca  f7fffffe          BL       strlen
0025ce  1c44              ADDS     r4,r0,#1
0025d0  4623              MOV      r3,r4
0025d2  4a84              LDR      r2,|L1.10212|
0025d4  496e              LDR      r1,|L1.10128|
0025d6  3938              SUBS     r1,r1,#0x38
0025d8  4881              LDR      r0,|L1.10208|
0025da  f7fffffe          BL       __2sprintf
;;;865    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0025de  2005              MOVS     r0,#5
0025e0  4b6b              LDR      r3,|L1.10128|
0025e2  3b90              SUBS     r3,r3,#0x90
0025e4  461a              MOV      r2,r3
0025e6  327c              ADDS     r2,r2,#0x7c
0025e8  a17f              ADR      r1,|L1.10216|
0025ea  9000              STR      r0,[sp,#0]
0025ec  487c              LDR      r0,|L1.10208|
0025ee  f7fffffe          BL       send_SD
;;;866    //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;867    //	if(strstr(uart_string_gsm,"ERROR")){
;;;868    //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;869    //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;870    //	}
;;;871    	
;;;872    clear();	
0025f2  f7fffffe          BL       clear
;;;873    									k2=0;									//string array counter for uart 1
0025f6  2000              MOVS     r0,#0
0025f8  496f              LDR      r1,|L1.10168|
0025fa  6008              STR      r0,[r1,#0]  ; k2
;;;874    									tout=0;	
0025fc  4966              LDR      r1,|L1.10136|
0025fe  6008              STR      r0,[r1,#0]  ; tout
;;;875    		for(k=0;k<strlen(data);k++)
002600  496e              LDR      r1,|L1.10172|
002602  6008              STR      r0,[r1,#0]  ; k
002604  e00b              B        |L1.9758|
                  |L1.9734|
;;;876    		{
;;;877    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002606  4865              LDR      r0,|L1.10140|
002608  4a6c              LDR      r2,|L1.10172|
00260a  6812              LDR      r2,[r2,#0]  ; k
00260c  5c81              LDRB     r1,[r0,r2]
00260e  485f              LDR      r0,|L1.10124|
002610  f7fffffe          BL       uart_putchar
002614  4869              LDR      r0,|L1.10172|
002616  6800              LDR      r0,[r0,#0]            ;875  ; k
002618  1c40              ADDS     r0,r0,#1              ;875
00261a  4968              LDR      r1,|L1.10172|
00261c  6008              STR      r0,[r1,#0]            ;875  ; k
                  |L1.9758|
00261e  485f              LDR      r0,|L1.10140|
002620  f7fffffe          BL       strlen
002624  4965              LDR      r1,|L1.10172|
002626  6809              LDR      r1,[r1,#0]            ;875  ; k
002628  4288              CMP      r0,r1                 ;875
00262a  d8ec              BHI      |L1.9734|
;;;878    		}	
;;;879    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00262c  210a              MOVS     r1,#0xa
00262e  4857              LDR      r0,|L1.10124|
002630  f7fffffe          BL       uart_putchar
002634  210a              MOVS     r1,#0xa
002636  4855              LDR      r0,|L1.10124|
002638  f7fffffe          BL       uart_putchar
00263c  210a              MOVS     r1,#0xa
00263e  4853              LDR      r0,|L1.10124|
002640  f7fffffe          BL       uart_putchar
002644  210a              MOVS     r1,#0xa
002646  4851              LDR      r0,|L1.10124|
002648  f7fffffe          BL       uart_putchar
00264c  210a              MOVS     r1,#0xa
00264e  484f              LDR      r0,|L1.10124|
002650  f7fffffe          BL       uart_putchar
002654  210a              MOVS     r1,#0xa
002656  484d              LDR      r0,|L1.10124|
002658  f7fffffe          BL       uart_putchar
00265c  210a              MOVS     r1,#0xa
00265e  484b              LDR      r0,|L1.10124|
002660  f7fffffe          BL       uart_putchar
002664  210a              MOVS     r1,#0xa
002666  4849              LDR      r0,|L1.10124|
002668  f7fffffe          BL       uart_putchar
00266c  210a              MOVS     r1,#0xa
00266e  4847              LDR      r0,|L1.10124|
002670  f7fffffe          BL       uart_putchar
002674  210a              MOVS     r1,#0xa
002676  4845              LDR      r0,|L1.10124|
002678  f7fffffe          BL       uart_putchar
00267c  210a              MOVS     r1,#0xa
00267e  4843              LDR      r0,|L1.10124|
002680  f7fffffe          BL       uart_putchar
002684  210a              MOVS     r1,#0xa
002686  4841              LDR      r0,|L1.10124|
002688  f7fffffe          BL       uart_putchar
00268c  210a              MOVS     r1,#0xa
00268e  483f              LDR      r0,|L1.10124|
002690  f7fffffe          BL       uart_putchar
002694  210a              MOVS     r1,#0xa
002696  483d              LDR      r0,|L1.10124|
002698  f7fffffe          BL       uart_putchar
00269c  210a              MOVS     r1,#0xa
00269e  483b              LDR      r0,|L1.10124|
0026a0  f7fffffe          BL       uart_putchar
0026a4  210a              MOVS     r1,#0xa
0026a6  4839              LDR      r0,|L1.10124|
0026a8  f7fffffe          BL       uart_putchar
0026ac  210a              MOVS     r1,#0xa
0026ae  4837              LDR      r0,|L1.10124|
0026b0  f7fffffe          BL       uart_putchar
0026b4  210a              MOVS     r1,#0xa
0026b6  4835              LDR      r0,|L1.10124|
0026b8  f7fffffe          BL       uart_putchar
0026bc  210a              MOVS     r1,#0xa
0026be  4833              LDR      r0,|L1.10124|
0026c0  f7fffffe          BL       uart_putchar
0026c4  210a              MOVS     r1,#0xa
0026c6  4831              LDR      r0,|L1.10124|
0026c8  f7fffffe          BL       uart_putchar
0026cc  210a              MOVS     r1,#0xa
0026ce  482f              LDR      r0,|L1.10124|
0026d0  f7fffffe          BL       uart_putchar
0026d4  210a              MOVS     r1,#0xa
0026d6  482d              LDR      r0,|L1.10124|
0026d8  f7fffffe          BL       uart_putchar
0026dc  210a              MOVS     r1,#0xa
0026de  482b              LDR      r0,|L1.10124|
0026e0  f7fffffe          BL       uart_putchar
0026e4  210a              MOVS     r1,#0xa
0026e6  4829              LDR      r0,|L1.10124|
0026e8  f7fffffe          BL       uart_putchar
0026ec  210a              MOVS     r1,#0xa
0026ee  4827              LDR      r0,|L1.10124|
0026f0  f7fffffe          BL       uart_putchar
0026f4  210a              MOVS     r1,#0xa
0026f6  4825              LDR      r0,|L1.10124|
0026f8  f7fffffe          BL       uart_putchar
0026fc  210a              MOVS     r1,#0xa
0026fe  4823              LDR      r0,|L1.10124|
002700  f7fffffe          BL       uart_putchar
002704  210a              MOVS     r1,#0xa
002706  4821              LDR      r0,|L1.10124|
002708  f7fffffe          BL       uart_putchar
00270c  210a              MOVS     r1,#0xa
00270e  481f              LDR      r0,|L1.10124|
002710  f7fffffe          BL       uart_putchar
002714  210a              MOVS     r1,#0xa
002716  481d              LDR      r0,|L1.10124|
002718  f7fffffe          BL       uart_putchar
00271c  210a              MOVS     r1,#0xa
00271e  481b              LDR      r0,|L1.10124|
002720  f7fffffe          BL       uart_putchar
002724  210a              MOVS     r1,#0xa
002726  4819              LDR      r0,|L1.10124|
002728  f7fffffe          BL       uart_putchar
00272c  210a              MOVS     r1,#0xa
00272e  4817              LDR      r0,|L1.10124|
002730  f7fffffe          BL       uart_putchar
002734  210a              MOVS     r1,#0xa
002736  4815              LDR      r0,|L1.10124|
002738  f7fffffe          BL       uart_putchar
00273c  210a              MOVS     r1,#0xa
00273e  4813              LDR      r0,|L1.10124|
002740  f7fffffe          BL       uart_putchar
002744  210a              MOVS     r1,#0xa
002746  4811              LDR      r0,|L1.10124|
002748  f7fffffe          BL       uart_putchar
00274c  210a              MOVS     r1,#0xa
00274e  480f              LDR      r0,|L1.10124|
002750  f7fffffe          BL       uart_putchar
002754  210a              MOVS     r1,#0xa
002756  480d              LDR      r0,|L1.10124|
002758  f7fffffe          BL       uart_putchar
00275c  210a              MOVS     r1,#0xa
00275e  480b              LDR      r0,|L1.10124|
002760  f7fffffe          BL       uart_putchar
002764  210a              MOVS     r1,#0xa
002766  4809              LDR      r0,|L1.10124|
002768  f7fffffe          BL       uart_putchar
00276c  210a              MOVS     r1,#0xa
00276e  4807              LDR      r0,|L1.10124|
002770  f7fffffe          BL       uart_putchar
002774  210a              MOVS     r1,#0xa
002776  4805              LDR      r0,|L1.10124|
002778  f7fffffe          BL       uart_putchar
00277c  210a              MOVS     r1,#0xa
00277e  4803              LDR      r0,|L1.10124|
002780  f7fffffe          BL       uart_putchar
002784  210a              MOVS     r1,#0xa
002786  4801              LDR      r0,|L1.10124|
002788  e030              B        |L1.10220|
00278a  0000              DCW      0x0000
                  |L1.10124|
                          DCD      0x4006b000
                  |L1.10128|
                          DCD      ||.text||+0x900
                  |L1.10132|
                          DCD      uart_string_gsm
                  |L1.10136|
                          DCD      tout
                  |L1.10140|
                          DCD      data
                  |L1.10144|
                          DCD      stcond1
                  |L1.10148|
                          DCD      con1d
                  |L1.10152|
                          DCD      cond
                  |L1.10156|
                          DCD      0x00001388
                  |L1.10160|
0027b0  0a00              DCB      "\n",0
0027b2  00                DCB      0
0027b3  00                DCB      0
                  |L1.10164|
                          DCD      len
                  |L1.10168|
                          DCD      ||k2||
                  |L1.10172|
                          DCD      k
                  |L1.10176|
                          DCD      ||.text||+0x474
                  |L1.10180|
                          DCD      stcond2
                  |L1.10184|
                          DCD      ||.text||+0xdf0
                  |L1.10188|
                          DCD      stcond3
                  |L1.10192|
                          DCD      stcond4
                  |L1.10196|
                          DCD      flagch
                  |L1.10200|
                          DCD      temp
                  |L1.10204|
                          DCD      int_erval
                  |L1.10208|
                          DCD      at_
                  |L1.10212|
                          DCD      drive
                  |L1.10216|
0027e8  3e00              DCB      ">",0
0027ea  00                DCB      0
0027eb  00                DCB      0
                  |L1.10220|
0027ec  f7fffffe          BL       uart_putchar
0027f0  210a              MOVS     r1,#0xa
0027f2  48fe              LDR      r0,|L1.11244|
0027f4  f7fffffe          BL       uart_putchar
0027f8  210a              MOVS     r1,#0xa
0027fa  48fc              LDR      r0,|L1.11244|
0027fc  f7fffffe          BL       uart_putchar
002800  210a              MOVS     r1,#0xa
002802  48fa              LDR      r0,|L1.11244|
002804  f7fffffe          BL       uart_putchar
002808  210a              MOVS     r1,#0xa
00280a  48f8              LDR      r0,|L1.11244|
00280c  f7fffffe          BL       uart_putchar
002810  210a              MOVS     r1,#0xa
002812  48f6              LDR      r0,|L1.11244|
002814  f7fffffe          BL       uart_putchar
002818  210a              MOVS     r1,#0xa
00281a  48f4              LDR      r0,|L1.11244|
00281c  f7fffffe          BL       uart_putchar
002820  210a              MOVS     r1,#0xa
002822  48f2              LDR      r0,|L1.11244|
002824  f7fffffe          BL       uart_putchar
002828  210a              MOVS     r1,#0xa
00282a  48f0              LDR      r0,|L1.11244|
00282c  f7fffffe          BL       uart_putchar
002830  210a              MOVS     r1,#0xa
002832  48ee              LDR      r0,|L1.11244|
002834  f7fffffe          BL       uart_putchar
002838  210a              MOVS     r1,#0xa
00283a  48ec              LDR      r0,|L1.11244|
00283c  f7fffffe          BL       uart_putchar
002840  210a              MOVS     r1,#0xa
002842  48ea              LDR      r0,|L1.11244|
002844  f7fffffe          BL       uart_putchar
002848  210a              MOVS     r1,#0xa
00284a  48e8              LDR      r0,|L1.11244|
00284c  f7fffffe          BL       uart_putchar
002850  210a              MOVS     r1,#0xa
002852  48e6              LDR      r0,|L1.11244|
002854  f7fffffe          BL       uart_putchar
;;;880    									//memset(data,0,1000);
;;;881    														//timer counts to wait for characters in uart 1 									
;;;882    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002858  bf00              NOP      
                  |L1.10330|
00285a  49e5              LDR      r1,|L1.11248|
00285c  48e5              LDR      r0,|L1.11252|
00285e  f7fffffe          BL       strstr
002862  2800              CMP      r0,#0
002864  d10a              BNE      |L1.10364|
002866  49e2              LDR      r1,|L1.11248|
002868  3990              SUBS     r1,r1,#0x90
00286a  48e2              LDR      r0,|L1.11252|
00286c  f7fffffe          BL       strstr
002870  2800              CMP      r0,#0
002872  d103              BNE      |L1.10364|
002874  48e0              LDR      r0,|L1.11256|
002876  6800              LDR      r0,[r0,#0]  ; tout
002878  2805              CMP      r0,#5
00287a  ddee              BLE      |L1.10330|
                  |L1.10364|
;;;883    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;884    									}
;;;885    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00287c  f7fffffe          BL       clear
;;;886    									//clear();
;;;887    									memset(data,0,strlen(data));
002880  48de              LDR      r0,|L1.11260|
002882  f7fffffe          BL       strlen
002886  4604              MOV      r4,r0
002888  4621              MOV      r1,r4
00288a  48dc              LDR      r0,|L1.11260|
00288c  f7fffffe          BL       __aeabi_memclr
;;;888    									clear();
002890  f7fffffe          BL       clear
;;;889    
;;;890    								
;;;891    	
;;;892    	
;;;893    	
;;;894    	//	log_it();		
;;;895    		memset(data,0,strlen(data));	
002894  48d9              LDR      r0,|L1.11260|
002896  f7fffffe          BL       strlen
00289a  4604              MOV      r4,r0
00289c  4621              MOV      r1,r4
00289e  48d7              LDR      r0,|L1.11260|
0028a0  f7fffffe          BL       __aeabi_memclr
;;;896    									GPS_COLLECT();
0028a4  f7fffffe          BL       GPS_COLLECT
;;;897    									strreplace(data, ",L,", ",H,");	
0028a8  4ad1              LDR      r2,|L1.11248|
0028aa  3a48              SUBS     r2,r2,#0x48
0028ac  1d11              ADDS     r1,r2,#4
0028ae  48d3              LDR      r0,|L1.11260|
0028b0  f7fffffe          BL       strreplace
;;;898    				
;;;899    					   	if(flagch!=1){
0028b4  48d2              LDR      r0,|L1.11264|
0028b6  6800              LDR      r0,[r0,#0]  ; flagch
0028b8  2801              CMP      r0,#1
0028ba  d009              BEQ      |L1.10448|
;;;900    							temp=int_erval;				
0028bc  48d1              LDR      r0,|L1.11268|
0028be  6800              LDR      r0,[r0,#0]  ; int_erval
0028c0  49d1              LDR      r1,|L1.11272|
0028c2  6008              STR      r0,[r1,#0]  ; temp
;;;901    							int_erval=4;
0028c4  2004              MOVS     r0,#4
0028c6  49cf              LDR      r1,|L1.11268|
0028c8  6008              STR      r0,[r1,#0]  ; int_erval
;;;902    							flagch=1;}
0028ca  2001              MOVS     r0,#1
0028cc  49cc              LDR      r1,|L1.11264|
0028ce  6008              STR      r0,[r1,#0]  ; flagch
                  |L1.10448|
;;;903    							clear();	
0028d0  f7fffffe          BL       clear
;;;904    
;;;905    
;;;906    //**************************************tcp_initialization();********************************//
;;;907    
;;;908    	
;;;909    msg_sim800(); 
0028d4  f7fffffe          BL       msg_sim800
;;;910    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
0028d8  2005              MOVS     r0,#5
0028da  4bc5              LDR      r3,|L1.11248|
0028dc  3b90              SUBS     r3,r3,#0x90
0028de  461a              MOV      r2,r3
0028e0  327c              ADDS     r2,r2,#0x7c
0028e2  a1ca              ADR      r1,|L1.11276|
0028e4  9000              STR      r0,[sp,#0]
0028e6  4610              MOV      r0,r2
0028e8  3020              ADDS     r0,r0,#0x20
0028ea  f7fffffe          BL       send_GSM
;;;911    delay(100);
0028ee  2064              MOVS     r0,#0x64
0028f0  f7fffffe          BL       delay
;;;912    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
0028f4  2004              MOVS     r0,#4
0028f6  4bbe              LDR      r3,|L1.11248|
0028f8  3b90              SUBS     r3,r3,#0x90
0028fa  461a              MOV      r2,r3
0028fc  32ac              ADDS     r2,r2,#0xac
0028fe  a1c3              ADR      r1,|L1.11276|
002900  9000              STR      r0,[sp,#0]
002902  4610              MOV      r0,r2
002904  3014              ADDS     r0,r0,#0x14
002906  f7fffffe          BL       send_GSM
;;;913    GPS_COLLECT2();
00290a  f7fffffe          BL       GPS_COLLECT2
;;;914    strreplace(data, ",L,", ",H,");		
00290e  4ab8              LDR      r2,|L1.11248|
002910  3a48              SUBS     r2,r2,#0x48
002912  1d11              ADDS     r1,r2,#4
002914  48b9              LDR      r0,|L1.11260|
002916  f7fffffe          BL       strreplace
;;;915    GPS_COLLECT2();
00291a  f7fffffe          BL       GPS_COLLECT2
;;;916    strreplace(data, ",L,", ",H,");	
00291e  4ab4              LDR      r2,|L1.11248|
002920  3a48              SUBS     r2,r2,#0x48
002922  1d11              ADDS     r1,r2,#4
002924  48b5              LDR      r0,|L1.11260|
002926  f7fffffe          BL       strreplace
;;;917    GPS_COLLECT2();
00292a  f7fffffe          BL       GPS_COLLECT2
;;;918    strreplace(data, ",L,", ",H,");
00292e  4ab0              LDR      r2,|L1.11248|
002930  3a48              SUBS     r2,r2,#0x48
002932  1d11              ADDS     r1,r2,#4
002934  48b1              LDR      r0,|L1.11260|
002936  f7fffffe          BL       strreplace
;;;919    cond201=(strstr(uart_string_gsm, "OK"));
00293a  a1b4              ADR      r1,|L1.11276|
00293c  48ad              LDR      r0,|L1.11252|
00293e  f7fffffe          BL       strstr
002942  49b3              LDR      r1,|L1.11280|
002944  6008              STR      r0,[r1,#0]  ; cond201
;;;920    cond200=(strstr(uart_string_gsm, "ERROR"));
002946  49aa              LDR      r1,|L1.11248|
002948  3990              SUBS     r1,r1,#0x90
00294a  48aa              LDR      r0,|L1.11252|
00294c  f7fffffe          BL       strstr
002950  49b0              LDR      r1,|L1.11284|
002952  6008              STR      r0,[r1,#0]  ; cond200
;;;921    if((!(cond201|| cond200 ))  && sleep_flag != 1)
002954  48ae              LDR      r0,|L1.11280|
002956  6800              LDR      r0,[r0,#0]  ; cond201
002958  2800              CMP      r0,#0
                  |L1.10586|
00295a  d17d              BNE      |L1.10840|
00295c  4608              MOV      r0,r1
00295e  6800              LDR      r0,[r0,#0]  ; cond200
002960  2800              CMP      r0,#0
002962  d1fa              BNE      |L1.10586|
002964  48ac              LDR      r0,|L1.11288|
002966  6800              LDR      r0,[r0,#0]  ; sleep_flag
002968  2801              CMP      r0,#1
00296a  d075              BEQ      |L1.10840|
;;;922    {
;;;923    delay(100);
00296c  2064              MOVS     r0,#0x64
00296e  f7fffffe          BL       delay
;;;924    clear();//memset(uart_string_gsm,0,5000);
002972  f7fffffe          BL       clear
;;;925    memset(at_,0,100);
002976  2164              MOVS     r1,#0x64
002978  48a8              LDR      r0,|L1.11292|
00297a  f7fffffe          BL       __aeabi_memclr
;;;926    sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00297e  489f              LDR      r0,|L1.11260|
002980  f7fffffe          BL       strlen
002984  1c44              ADDS     r4,r0,#1
002986  4623              MOV      r3,r4
002988  4aa5              LDR      r2,|L1.11296|
00298a  4999              LDR      r1,|L1.11248|
00298c  3938              SUBS     r1,r1,#0x38
00298e  48a3              LDR      r0,|L1.11292|
002990  f7fffffe          BL       __2sprintf
;;;927    send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002994  2005              MOVS     r0,#5
002996  4b96              LDR      r3,|L1.11248|
002998  3b90              SUBS     r3,r3,#0x90
00299a  461a              MOV      r2,r3
00299c  327c              ADDS     r2,r2,#0x7c
00299e  a1a1              ADR      r1,|L1.11300|
0029a0  9000              STR      r0,[sp,#0]
0029a2  489e              LDR      r0,|L1.11292|
0029a4  f7fffffe          BL       send_SD
;;;928    clear();	
0029a8  f7fffffe          BL       clear
;;;929    k2=0;									//string array counter for uart 1
0029ac  2000              MOVS     r0,#0
0029ae  499e              LDR      r1,|L1.11304|
0029b0  6008              STR      r0,[r1,#0]  ; k2
;;;930    tout=0;	
0029b2  4991              LDR      r1,|L1.11256|
0029b4  6008              STR      r0,[r1,#0]  ; tout
;;;931    for(k=0;k<strlen(data);k++)
0029b6  499d              LDR      r1,|L1.11308|
0029b8  6008              STR      r0,[r1,#0]  ; k
0029ba  e00b              B        |L1.10708|
                  |L1.10684|
;;;932    {
;;;933    uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0029bc  488f              LDR      r0,|L1.11260|
0029be  4a9b              LDR      r2,|L1.11308|
0029c0  6812              LDR      r2,[r2,#0]  ; k
0029c2  5c81              LDRB     r1,[r0,r2]
0029c4  4889              LDR      r0,|L1.11244|
0029c6  f7fffffe          BL       uart_putchar
0029ca  4898              LDR      r0,|L1.11308|
0029cc  6800              LDR      r0,[r0,#0]            ;931  ; k
0029ce  1c40              ADDS     r0,r0,#1              ;931
0029d0  4996              LDR      r1,|L1.11308|
0029d2  6008              STR      r0,[r1,#0]            ;931  ; k
                  |L1.10708|
0029d4  4889              LDR      r0,|L1.11260|
0029d6  f7fffffe          BL       strlen
0029da  4994              LDR      r1,|L1.11308|
0029dc  6809              LDR      r1,[r1,#0]            ;931  ; k
0029de  4288              CMP      r0,r1                 ;931
0029e0  d8ec              BHI      |L1.10684|
;;;934    }	
;;;935    uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0029e2  210a              MOVS     r1,#0xa
0029e4  4881              LDR      r0,|L1.11244|
0029e6  f7fffffe          BL       uart_putchar
0029ea  210a              MOVS     r1,#0xa
0029ec  487f              LDR      r0,|L1.11244|
0029ee  f7fffffe          BL       uart_putchar
0029f2  210a              MOVS     r1,#0xa
0029f4  487d              LDR      r0,|L1.11244|
0029f6  f7fffffe          BL       uart_putchar
0029fa  210a              MOVS     r1,#0xa
0029fc  487b              LDR      r0,|L1.11244|
0029fe  f7fffffe          BL       uart_putchar
002a02  210a              MOVS     r1,#0xa
002a04  4879              LDR      r0,|L1.11244|
002a06  f7fffffe          BL       uart_putchar
002a0a  210a              MOVS     r1,#0xa
002a0c  4877              LDR      r0,|L1.11244|
002a0e  f7fffffe          BL       uart_putchar
002a12  210a              MOVS     r1,#0xa
002a14  4875              LDR      r0,|L1.11244|
002a16  f7fffffe          BL       uart_putchar
002a1a  210a              MOVS     r1,#0xa
002a1c  4873              LDR      r0,|L1.11244|
002a1e  f7fffffe          BL       uart_putchar
002a22  210a              MOVS     r1,#0xa
002a24  4871              LDR      r0,|L1.11244|
002a26  f7fffffe          BL       uart_putchar
002a2a  210a              MOVS     r1,#0xa
002a2c  486f              LDR      r0,|L1.11244|
002a2e  f7fffffe          BL       uart_putchar
002a32  210a              MOVS     r1,#0xa
002a34  486d              LDR      r0,|L1.11244|
002a36  f7fffffe          BL       uart_putchar
002a3a  210a              MOVS     r1,#0xa
002a3c  486b              LDR      r0,|L1.11244|
002a3e  f7fffffe          BL       uart_putchar
002a42  210a              MOVS     r1,#0xa
002a44  4869              LDR      r0,|L1.11244|
002a46  f7fffffe          BL       uart_putchar
002a4a  210a              MOVS     r1,#0xa
002a4c  4867              LDR      r0,|L1.11244|
002a4e  f7fffffe          BL       uart_putchar
002a52  210a              MOVS     r1,#0xa
002a54  4865              LDR      r0,|L1.11244|
002a56  e000              B        |L1.10842|
                  |L1.10840|
002a58  e0f6              B        |L1.11336|
                  |L1.10842|
002a5a  f7fffffe          BL       uart_putchar
002a5e  210a              MOVS     r1,#0xa
002a60  4862              LDR      r0,|L1.11244|
002a62  f7fffffe          BL       uart_putchar
002a66  210a              MOVS     r1,#0xa
002a68  4860              LDR      r0,|L1.11244|
002a6a  f7fffffe          BL       uart_putchar
002a6e  210a              MOVS     r1,#0xa
002a70  485e              LDR      r0,|L1.11244|
002a72  f7fffffe          BL       uart_putchar
002a76  210a              MOVS     r1,#0xa
002a78  485c              LDR      r0,|L1.11244|
002a7a  f7fffffe          BL       uart_putchar
002a7e  210a              MOVS     r1,#0xa
002a80  485a              LDR      r0,|L1.11244|
002a82  f7fffffe          BL       uart_putchar
002a86  210a              MOVS     r1,#0xa
002a88  4858              LDR      r0,|L1.11244|
002a8a  f7fffffe          BL       uart_putchar
002a8e  210a              MOVS     r1,#0xa
002a90  4856              LDR      r0,|L1.11244|
002a92  f7fffffe          BL       uart_putchar
002a96  210a              MOVS     r1,#0xa
002a98  4854              LDR      r0,|L1.11244|
002a9a  f7fffffe          BL       uart_putchar
002a9e  210a              MOVS     r1,#0xa
002aa0  4852              LDR      r0,|L1.11244|
002aa2  f7fffffe          BL       uart_putchar
002aa6  210a              MOVS     r1,#0xa
002aa8  4850              LDR      r0,|L1.11244|
002aaa  f7fffffe          BL       uart_putchar
002aae  210a              MOVS     r1,#0xa
002ab0  484e              LDR      r0,|L1.11244|
002ab2  f7fffffe          BL       uart_putchar
002ab6  210a              MOVS     r1,#0xa
002ab8  484c              LDR      r0,|L1.11244|
002aba  f7fffffe          BL       uart_putchar
002abe  210a              MOVS     r1,#0xa
002ac0  484a              LDR      r0,|L1.11244|
002ac2  f7fffffe          BL       uart_putchar
002ac6  210a              MOVS     r1,#0xa
002ac8  4848              LDR      r0,|L1.11244|
002aca  f7fffffe          BL       uart_putchar
002ace  210a              MOVS     r1,#0xa
002ad0  4846              LDR      r0,|L1.11244|
002ad2  f7fffffe          BL       uart_putchar
002ad6  210a              MOVS     r1,#0xa
002ad8  4844              LDR      r0,|L1.11244|
002ada  f7fffffe          BL       uart_putchar
002ade  210a              MOVS     r1,#0xa
002ae0  4842              LDR      r0,|L1.11244|
002ae2  f7fffffe          BL       uart_putchar
002ae6  210a              MOVS     r1,#0xa
002ae8  4840              LDR      r0,|L1.11244|
002aea  f7fffffe          BL       uart_putchar
002aee  210a              MOVS     r1,#0xa
002af0  483e              LDR      r0,|L1.11244|
002af2  f7fffffe          BL       uart_putchar
002af6  210a              MOVS     r1,#0xa
002af8  483c              LDR      r0,|L1.11244|
002afa  f7fffffe          BL       uart_putchar
002afe  210a              MOVS     r1,#0xa
002b00  483a              LDR      r0,|L1.11244|
002b02  f7fffffe          BL       uart_putchar
002b06  210a              MOVS     r1,#0xa
002b08  4838              LDR      r0,|L1.11244|
002b0a  f7fffffe          BL       uart_putchar
002b0e  210a              MOVS     r1,#0xa
002b10  4836              LDR      r0,|L1.11244|
002b12  f7fffffe          BL       uart_putchar
002b16  210a              MOVS     r1,#0xa
002b18  4834              LDR      r0,|L1.11244|
002b1a  f7fffffe          BL       uart_putchar
002b1e  210a              MOVS     r1,#0xa
002b20  4832              LDR      r0,|L1.11244|
002b22  f7fffffe          BL       uart_putchar
002b26  210a              MOVS     r1,#0xa
002b28  4830              LDR      r0,|L1.11244|
002b2a  f7fffffe          BL       uart_putchar
002b2e  210a              MOVS     r1,#0xa
002b30  482e              LDR      r0,|L1.11244|
002b32  f7fffffe          BL       uart_putchar
002b36  210a              MOVS     r1,#0xa
002b38  482c              LDR      r0,|L1.11244|
002b3a  f7fffffe          BL       uart_putchar
002b3e  210a              MOVS     r1,#0xa
002b40  482a              LDR      r0,|L1.11244|
002b42  f7fffffe          BL       uart_putchar
002b46  210a              MOVS     r1,#0xa
002b48  4828              LDR      r0,|L1.11244|
002b4a  f7fffffe          BL       uart_putchar
002b4e  210a              MOVS     r1,#0xa
002b50  4826              LDR      r0,|L1.11244|
002b52  f7fffffe          BL       uart_putchar
002b56  210a              MOVS     r1,#0xa
002b58  4824              LDR      r0,|L1.11244|
002b5a  f7fffffe          BL       uart_putchar
002b5e  210a              MOVS     r1,#0xa
002b60  4822              LDR      r0,|L1.11244|
002b62  f7fffffe          BL       uart_putchar
002b66  210a              MOVS     r1,#0xa
002b68  4820              LDR      r0,|L1.11244|
002b6a  f7fffffe          BL       uart_putchar
002b6e  210a              MOVS     r1,#0xa
002b70  481e              LDR      r0,|L1.11244|
002b72  f7fffffe          BL       uart_putchar
002b76  210a              MOVS     r1,#0xa
002b78  481c              LDR      r0,|L1.11244|
002b7a  f7fffffe          BL       uart_putchar
002b7e  210a              MOVS     r1,#0xa
002b80  481a              LDR      r0,|L1.11244|
002b82  f7fffffe          BL       uart_putchar
002b86  210a              MOVS     r1,#0xa
002b88  4818              LDR      r0,|L1.11244|
002b8a  f7fffffe          BL       uart_putchar
002b8e  210a              MOVS     r1,#0xa
002b90  4816              LDR      r0,|L1.11244|
002b92  f7fffffe          BL       uart_putchar
002b96  210a              MOVS     r1,#0xa
002b98  4814              LDR      r0,|L1.11244|
002b9a  f7fffffe          BL       uart_putchar
002b9e  210a              MOVS     r1,#0xa
002ba0  4812              LDR      r0,|L1.11244|
002ba2  f7fffffe          BL       uart_putchar
002ba6  210a              MOVS     r1,#0xa
002ba8  4810              LDR      r0,|L1.11244|
002baa  f7fffffe          BL       uart_putchar
;;;936    									//memset(data,0,1000);
;;;937    														//timer counts to wait for characters in uart 1 									
;;;938    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002bae  bf00              NOP      
                  |L1.11184|
002bb0  490f              LDR      r1,|L1.11248|
002bb2  4810              LDR      r0,|L1.11252|
002bb4  f7fffffe          BL       strstr
002bb8  2800              CMP      r0,#0
002bba  d10a              BNE      |L1.11218|
002bbc  490c              LDR      r1,|L1.11248|
002bbe  3990              SUBS     r1,r1,#0x90
002bc0  480c              LDR      r0,|L1.11252|
002bc2  f7fffffe          BL       strstr
002bc6  2800              CMP      r0,#0
002bc8  d103              BNE      |L1.11218|
002bca  480b              LDR      r0,|L1.11256|
002bcc  6800              LDR      r0,[r0,#0]  ; tout
002bce  2805              CMP      r0,#5
002bd0  ddee              BLE      |L1.11184|
                  |L1.11218|
;;;939    									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;940    									}
;;;941    	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
002bd2  f7fffffe          BL       clear
;;;942    									//clear();
;;;943    									memset(data,0,strlen(data));
002bd6  4809              LDR      r0,|L1.11260|
002bd8  f7fffffe          BL       strlen
002bdc  4604              MOV      r4,r0
002bde  4621              MOV      r1,r4
002be0  4806              LDR      r0,|L1.11260|
002be2  f7fffffe          BL       __aeabi_memclr
;;;944    									clear();
002be6  f7fffffe          BL       clear
;;;945    									RESET_OFF;delay(100);
002bea  e021              B        |L1.11312|
                  |L1.11244|
                          DCD      0x4006b000
                  |L1.11248|
                          DCD      ||.text||+0x900
                  |L1.11252|
                          DCD      uart_string_gsm
                  |L1.11256|
                          DCD      tout
                  |L1.11260|
                          DCD      data
                  |L1.11264|
                          DCD      flagch
                  |L1.11268|
                          DCD      int_erval
                  |L1.11272|
                          DCD      temp
                  |L1.11276|
002c0c  4f4b00            DCB      "OK",0
002c0f  00                DCB      0
                  |L1.11280|
                          DCD      cond201
                  |L1.11284|
                          DCD      cond200
                  |L1.11288|
                          DCD      sleep_flag
                  |L1.11292|
                          DCD      at_
                  |L1.11296|
                          DCD      drive
                  |L1.11300|
002c24  3e00              DCB      ">",0
002c26  00                DCB      0
002c27  00                DCB      0
                  |L1.11304|
                          DCD      ||k2||
                  |L1.11308|
                          DCD      k
                  |L1.11312|
002c30  2020              MOVS     r0,#0x20
002c32  49fe              LDR      r1,|L1.12332|
002c34  6088              STR      r0,[r1,#8]
002c36  2064              MOVS     r0,#0x64
002c38  f7fffffe          BL       delay
;;;946    									RESET_ON;delay(100);		
002c3c  2020              MOVS     r0,#0x20
002c3e  49fb              LDR      r1,|L1.12332|
002c40  6048              STR      r0,[r1,#4]
002c42  2064              MOVS     r0,#0x64
002c44  f7fffffe          BL       delay
                  |L1.11336|
;;;947    }
;;;948    	
;;;949    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
002c48  2004              MOVS     r0,#4
002c4a  4bf9              LDR      r3,|L1.12336|
002c4c  4af9              LDR      r2,|L1.12340|
002c4e  a1fa              ADR      r1,|L1.12344|
002c50  9000              STR      r0,[sp,#0]
002c52  4618              MOV      r0,r3
002c54  300c              ADDS     r0,r0,#0xc
002c56  f7fffffe          BL       send_GSM
;;;950    GPS_COLLECT2();
002c5a  f7fffffe          BL       GPS_COLLECT2
;;;951    strreplace(data, ",L,", ",H,");	
002c5e  4af5              LDR      r2,|L1.12340|
002c60  3a34              SUBS     r2,r2,#0x34
002c62  1d11              ADDS     r1,r2,#4
002c64  48f5              LDR      r0,|L1.12348|
002c66  f7fffffe          BL       strreplace
;;;952    memset(at_,0,100);
002c6a  2164              MOVS     r1,#0x64
002c6c  48f4              LDR      r0,|L1.12352|
002c6e  f7fffffe          BL       __aeabi_memclr
;;;953    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
002c72  4af4              LDR      r2,|L1.12356|
002c74  49ee              LDR      r1,|L1.12336|
002c76  3120              ADDS     r1,r1,#0x20
002c78  48f1              LDR      r0,|L1.12352|
002c7a  f7fffffe          BL       __2sprintf
;;;954    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
002c7e  48f2              LDR      r0,|L1.12360|
002c80  6800              LDR      r0,[r0,#0]  ; tmeout
002c82  4beb              LDR      r3,|L1.12336|
002c84  4aeb              LDR      r2,|L1.12340|
002c86  a1ec              ADR      r1,|L1.12344|
002c88  9000              STR      r0,[sp,#0]
002c8a  48ed              LDR      r0,|L1.12352|
002c8c  f7fffffe          BL       send_GSM
;;;955    msg_sim800(); 
002c90  f7fffffe          BL       msg_sim800
;;;956    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
002c94  2004              MOVS     r0,#4
002c96  4be7              LDR      r3,|L1.12340|
002c98  3b60              SUBS     r3,r3,#0x60
002c9a  4ae6              LDR      r2,|L1.12340|
002c9c  a1e6              ADR      r1,|L1.12344|
002c9e  9000              STR      r0,[sp,#0]
002ca0  48e3              LDR      r0,|L1.12336|
002ca2  3038              ADDS     r0,r0,#0x38
002ca4  f7fffffe          BL       send_GSM
;;;957    GPS_COLLECT2();
002ca8  f7fffffe          BL       GPS_COLLECT2
;;;958    strreplace(data, ",L,", ",H,");	
002cac  4ae1              LDR      r2,|L1.12340|
002cae  3a34              SUBS     r2,r2,#0x34
002cb0  1d11              ADDS     r1,r2,#4
002cb2  48e2              LDR      r0,|L1.12348|
002cb4  f7fffffe          BL       strreplace
;;;959    GPS_COLLECT2();
002cb8  f7fffffe          BL       GPS_COLLECT2
;;;960    strreplace(data, ",L,", ",H,");	
002cbc  4add              LDR      r2,|L1.12340|
002cbe  3a34              SUBS     r2,r2,#0x34
002cc0  1d11              ADDS     r1,r2,#4
002cc2  48de              LDR      r0,|L1.12348|
002cc4  f7fffffe          BL       strreplace
;;;961    
;;;962    
;;;963    msg_sim800(); 
002cc8  f7fffffe          BL       msg_sim800
;;;964    GPS_COLLECT2();
002ccc  f7fffffe          BL       GPS_COLLECT2
;;;965    strreplace(data, ",L,", ",H,");	
002cd0  4ad8              LDR      r2,|L1.12340|
002cd2  3a34              SUBS     r2,r2,#0x34
002cd4  1d11              ADDS     r1,r2,#4
002cd6  48d9              LDR      r0,|L1.12348|
002cd8  f7fffffe          BL       strreplace
;;;966    					clear();
002cdc  f7fffffe          BL       clear
;;;967    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR" , "DEACT",1);		
002ce0  2001              MOVS     r0,#1
002ce2  4bd4              LDR      r3,|L1.12340|
002ce4  3b60              SUBS     r3,r3,#0x60
002ce6  461a              MOV      r2,r3
002ce8  3a1c              SUBS     r2,r2,#0x1c
002cea  a1d3              ADR      r1,|L1.12344|
002cec  9000              STR      r0,[sp,#0]
002cee  48d0              LDR      r0,|L1.12336|
002cf0  3048              ADDS     r0,r0,#0x48
002cf2  f7fffffe          BL       send_GSM
;;;968    //					delay(20);
;;;969    
;;;970    
;;;971    msg_sim800(); 
002cf6  f7fffffe          BL       msg_sim800
;;;972    
;;;973    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
002cfa  4bd4              LDR      r3,|L1.12364|
002cfc  4ad4              LDR      r2,|L1.12368|
002cfe  49cc              LDR      r1,|L1.12336|
002d00  3160              ADDS     r1,r1,#0x60
002d02  48cf              LDR      r0,|L1.12352|
002d04  f7fffffe          BL       __2sprintf
;;;974    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
002d08  48cf              LDR      r0,|L1.12360|
002d0a  6800              LDR      r0,[r0,#0]  ; tmeout
002d0c  4bc8              LDR      r3,|L1.12336|
002d0e  4ac9              LDR      r2,|L1.12340|
002d10  3a7c              SUBS     r2,r2,#0x7c
002d12  4619              MOV      r1,r3
002d14  3180              ADDS     r1,r1,#0x80
002d16  9000              STR      r0,[sp,#0]
002d18  48c9              LDR      r0,|L1.12352|
002d1a  f7fffffe          BL       send_GSM
;;;975    						clear();
002d1e  f7fffffe          BL       clear
;;;976    						
;;;977    						
;;;978    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);									
002d22  48c9              LDR      r0,|L1.12360|
002d24  6800              LDR      r0,[r0,#0]  ; tmeout
002d26  4bc2              LDR      r3,|L1.12336|
002d28  3388              ADDS     r3,r3,#0x88
002d2a  4ac2              LDR      r2,|L1.12340|
002d2c  3a7c              SUBS     r2,r2,#0x7c
002d2e  a1c9              ADR      r1,|L1.12372|
002d30  9000              STR      r0,[sp,#0]
002d32  4618              MOV      r0,r3
002d34  3010              ADDS     r0,r0,#0x10
002d36  f7fffffe          BL       send_GSM
;;;979    //**************************************tcp_initialization ends******************************//							
;;;980    									
;;;981    						clear();		
002d3a  f7fffffe          BL       clear
;;;982    						cond=mystrstr(uart_string_gsm,'>');
002d3e  213e              MOVS     r1,#0x3e
002d40  48c5              LDR      r0,|L1.12376|
002d42  f7fffffe          BL       mystrstr
002d46  49c5              LDR      r1,|L1.12380|
002d48  7008              STRB     r0,[r1,#0]
;;;983    								if(cond)	
002d4a  4608              MOV      r0,r1
002d4c  7800              LDRB     r0,[r0,#0]  ; cond
002d4e  2800              CMP      r0,#0
002d50  d07e              BEQ      |L1.11856|
;;;984    								{	
;;;985    
;;;986    									clear();
002d52  f7fffffe          BL       clear
;;;987    									memset(uart_string_gsm,0,5000);
002d56  49c2              LDR      r1,|L1.12384|
002d58  48bf              LDR      r0,|L1.12376|
002d5a  f7fffffe          BL       __aeabi_memclr
;;;988    									strcat(data,"\n");
002d5e  a1c1              ADR      r1,|L1.12388|
002d60  48b6              LDR      r0,|L1.12348|
002d62  f7fffffe          BL       strcat
;;;989    									len=strlen(data);
002d66  48b5              LDR      r0,|L1.12348|
002d68  f7fffffe          BL       strlen
002d6c  49be              LDR      r1,|L1.12392|
002d6e  6008              STR      r0,[r1,#0]  ; len
;;;990    									tout=0;
002d70  2000              MOVS     r0,#0
002d72  49be              LDR      r1,|L1.12396|
002d74  6008              STR      r0,[r1,#0]  ; tout
;;;991    									k2=0;
002d76  49be              LDR      r1,|L1.12400|
002d78  6008              STR      r0,[r1,#0]  ; k2
;;;992    									for(k=0;k<len;k++)
002d7a  49be              LDR      r1,|L1.12404|
002d7c  6008              STR      r0,[r1,#0]  ; k
002d7e  e00b              B        |L1.11672|
                  |L1.11648|
;;;993    									{
;;;994    										uart_putchar(UART1_BASE_PTR, data[k]);
002d80  48ae              LDR      r0,|L1.12348|
002d82  4abc              LDR      r2,|L1.12404|
002d84  6812              LDR      r2,[r2,#0]  ; k
002d86  5c81              LDRB     r1,[r0,r2]
002d88  48bb              LDR      r0,|L1.12408|
002d8a  f7fffffe          BL       uart_putchar
002d8e  48b9              LDR      r0,|L1.12404|
002d90  6800              LDR      r0,[r0,#0]            ;992  ; k
002d92  1c40              ADDS     r0,r0,#1              ;992
002d94  49b7              LDR      r1,|L1.12404|
002d96  6008              STR      r0,[r1,#0]            ;992  ; k
                  |L1.11672|
002d98  48b6              LDR      r0,|L1.12404|
002d9a  6800              LDR      r0,[r0,#0]            ;992  ; k
002d9c  49b2              LDR      r1,|L1.12392|
002d9e  6809              LDR      r1,[r1,#0]            ;992  ; len
002da0  4288              CMP      r0,r1                 ;992
002da2  dbed              BLT      |L1.11648|
;;;995    									}uart_putchar(UART1_BASE_PTR, 0x1A);
002da4  211a              MOVS     r1,#0x1a
002da6  48b4              LDR      r0,|L1.12408|
002da8  f7fffffe          BL       uart_putchar
;;;996    									do
002dac  bf00              NOP      
                  |L1.11694|
;;;997    																{stcond1=strstr(uart_string_gsm,"SEND OK");
002dae  49b3              LDR      r1,|L1.12412|
002db0  48a9              LDR      r0,|L1.12376|
002db2  f7fffffe          BL       strstr
002db6  49b2              LDR      r1,|L1.12416|
002db8  6008              STR      r0,[r1,#0]  ; stcond1
;;;998    																	stcond2=strstr(uart_string_gsm, "ERROR");
002dba  499e              LDR      r1,|L1.12340|
002dbc  397c              SUBS     r1,r1,#0x7c
002dbe  48a6              LDR      r0,|L1.12376|
002dc0  f7fffffe          BL       strstr
002dc4  49af              LDR      r1,|L1.12420|
002dc6  6008              STR      r0,[r1,#0]  ; stcond2
;;;999    																		stcond3=strstr(uart_string_gsm, "FAIL");	
002dc8  4999              LDR      r1,|L1.12336|
002dca  3190              ADDS     r1,r1,#0x90
002dcc  48a2              LDR      r0,|L1.12376|
002dce  f7fffffe          BL       strstr
002dd2  49ad              LDR      r1,|L1.12424|
002dd4  6008              STR      r0,[r1,#0]  ; stcond3
;;;1000   																			stcond4=strstr(uart_string_gsm, "DEACT");	
002dd6  4997              LDR      r1,|L1.12340|
002dd8  3960              SUBS     r1,r1,#0x60
002dda  489f              LDR      r0,|L1.12376|
002ddc  f7fffffe          BL       strstr
002de0  49aa              LDR      r1,|L1.12428|
002de2  6008              STR      r0,[r1,#0]  ; stcond4
;;;1001   																	
;;;1002   																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 4) ) ); //|| (timeout < 1)   
002de4  48a7              LDR      r0,|L1.12420|
002de6  6800              LDR      r0,[r0,#0]  ; stcond2
002de8  2800              CMP      r0,#0
002dea  d10f              BNE      |L1.11788|
002dec  48a6              LDR      r0,|L1.12424|
002dee  6800              LDR      r0,[r0,#0]  ; stcond3
002df0  2800              CMP      r0,#0
002df2  d10b              BNE      |L1.11788|
002df4  4608              MOV      r0,r1
002df6  6800              LDR      r0,[r0,#0]  ; stcond4
002df8  2800              CMP      r0,#0
002dfa  d107              BNE      |L1.11788|
002dfc  48a0              LDR      r0,|L1.12416|
002dfe  6800              LDR      r0,[r0,#0]  ; stcond1
002e00  2800              CMP      r0,#0
002e02  d103              BNE      |L1.11788|
002e04  4899              LDR      r0,|L1.12396|
002e06  6800              LDR      r0,[r0,#0]  ; tout
002e08  2804              CMP      r0,#4
002e0a  ddd0              BLE      |L1.11694|
                  |L1.11788|
;;;1003   																delay(10);clear();
002e0c  200a              MOVS     r0,#0xa
002e0e  f7fffffe          BL       delay
002e12  f7fffffe          BL       clear
;;;1004   														uart_putchar(UART1_BASE_PTR,0x1A);
002e16  211a              MOVS     r1,#0x1a
002e18  4897              LDR      r0,|L1.12408|
002e1a  f7fffffe          BL       uart_putchar
;;;1005   												delay(10);
002e1e  200a              MOVS     r0,#0xa
002e20  f7fffffe          BL       delay
;;;1006   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
002e24  211a              MOVS     r1,#0x1a
002e26  4894              LDR      r0,|L1.12408|
002e28  f7fffffe          BL       uart_putchar
002e2c  211a              MOVS     r1,#0x1a
002e2e  4892              LDR      r0,|L1.12408|
002e30  f7fffffe          BL       uart_putchar
002e34  211a              MOVS     r1,#0x1a
002e36  4890              LDR      r0,|L1.12408|
002e38  f7fffffe          BL       uart_putchar
;;;1007   						
;;;1008   
;;;1009   
;;;1010   									
;;;1011   															
;;;1012   															
;;;1013   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e3c  211a              MOVS     r1,#0x1a
002e3e  488e              LDR      r0,|L1.12408|
002e40  f7fffffe          BL       uart_putchar
002e44  f7fffffe          BL       clear
002e48  200a              MOVS     r0,#0xa
002e4a  f7fffffe          BL       delay
;;;1014   															uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e4e  e000              B        |L1.11858|
                  |L1.11856|
002e50  e197              B        |L1.12674|
                  |L1.11858|
002e52  211a              MOVS     r1,#0x1a
002e54  4888              LDR      r0,|L1.12408|
002e56  f7fffffe          BL       uart_putchar
002e5a  f7fffffe          BL       clear
002e5e  200a              MOVS     r0,#0xa
002e60  f7fffffe          BL       delay
;;;1015   															
;;;1016   														//qwe=strlen(uart_string_gsm);
;;;1017   														uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
002e64  211a              MOVS     r1,#0x1a
002e66  4884              LDR      r0,|L1.12408|
002e68  f7fffffe          BL       uart_putchar
002e6c  f7fffffe          BL       clear
002e70  200a              MOVS     r0,#0xa
002e72  f7fffffe          BL       delay
;;;1018   								delay(50);
002e76  2032              MOVS     r0,#0x32
002e78  f7fffffe          BL       delay
;;;1019   								con1d=strstr(uart_string_gsm,"SEND OK");
002e7c  497f              LDR      r1,|L1.12412|
002e7e  4876              LDR      r0,|L1.12376|
002e80  f7fffffe          BL       strstr
002e84  4982              LDR      r1,|L1.12432|
002e86  6008              STR      r0,[r1,#0]  ; con1d
;;;1020   								if(!con1d)
002e88  4608              MOV      r0,r1
002e8a  6800              LDR      r0,[r0,#0]  ; con1d
002e8c  2800              CMP      r0,#0
002e8e  d17c              BNE      |L1.12170|
;;;1021   								{
;;;1022   									
;;;1023   									
;;;1024   	delay(100);
002e90  2064              MOVS     r0,#0x64
002e92  f7fffffe          BL       delay
;;;1025   		clear();//memset(uart_string_gsm,0,5000);
002e96  f7fffffe          BL       clear
;;;1026   	
;;;1027   	memset(at_,0,100);
002e9a  2164              MOVS     r1,#0x64
002e9c  4868              LDR      r0,|L1.12352|
002e9e  f7fffffe          BL       __aeabi_memclr
;;;1028   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
002ea2  4866              LDR      r0,|L1.12348|
002ea4  f7fffffe          BL       strlen
002ea8  1c44              ADDS     r4,r0,#1
002eaa  4623              MOV      r3,r4
002eac  4a79              LDR      r2,|L1.12436|
002eae  4961              LDR      r1,|L1.12340|
002eb0  3924              SUBS     r1,r1,#0x24
002eb2  4863              LDR      r0,|L1.12352|
002eb4  f7fffffe          BL       __2sprintf
;;;1029   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
002eb8  2005              MOVS     r0,#5
002eba  4b5e              LDR      r3,|L1.12340|
002ebc  3b7c              SUBS     r3,r3,#0x7c
002ebe  4a5d              LDR      r2,|L1.12340|
002ec0  a164              ADR      r1,|L1.12372|
002ec2  9000              STR      r0,[sp,#0]
002ec4  485e              LDR      r0,|L1.12352|
002ec6  f7fffffe          BL       send_SD
;;;1030   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1031   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1032   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1033   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1034   //	}
;;;1035   	
;;;1036   clear();	
002eca  f7fffffe          BL       clear
;;;1037   									k2=0;									//string array counter for uart 1
002ece  2000              MOVS     r0,#0
002ed0  4967              LDR      r1,|L1.12400|
002ed2  6008              STR      r0,[r1,#0]  ; k2
;;;1038   									tout=0;	
002ed4  4965              LDR      r1,|L1.12396|
002ed6  6008              STR      r0,[r1,#0]  ; tout
;;;1039   		for(k=0;k<strlen(data);k++)
002ed8  4966              LDR      r1,|L1.12404|
002eda  6008              STR      r0,[r1,#0]  ; k
002edc  e00b              B        |L1.12022|
                  |L1.11998|
;;;1040   		{
;;;1041   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
002ede  4857              LDR      r0,|L1.12348|
002ee0  4a64              LDR      r2,|L1.12404|
002ee2  6812              LDR      r2,[r2,#0]  ; k
002ee4  5c81              LDRB     r1,[r0,r2]
002ee6  4864              LDR      r0,|L1.12408|
002ee8  f7fffffe          BL       uart_putchar
002eec  4861              LDR      r0,|L1.12404|
002eee  6800              LDR      r0,[r0,#0]            ;1039  ; k
002ef0  1c40              ADDS     r0,r0,#1              ;1039
002ef2  4960              LDR      r1,|L1.12404|
002ef4  6008              STR      r0,[r1,#0]            ;1039  ; k
                  |L1.12022|
002ef6  4851              LDR      r0,|L1.12348|
002ef8  f7fffffe          BL       strlen
002efc  495d              LDR      r1,|L1.12404|
002efe  6809              LDR      r1,[r1,#0]            ;1039  ; k
002f00  4288              CMP      r0,r1                 ;1039
002f02  d8ec              BHI      |L1.11998|
;;;1042   		}	
;;;1043   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
002f04  210a              MOVS     r1,#0xa
002f06  485c              LDR      r0,|L1.12408|
002f08  f7fffffe          BL       uart_putchar
002f0c  210a              MOVS     r1,#0xa
002f0e  485a              LDR      r0,|L1.12408|
002f10  f7fffffe          BL       uart_putchar
002f14  210a              MOVS     r1,#0xa
002f16  4858              LDR      r0,|L1.12408|
002f18  f7fffffe          BL       uart_putchar
002f1c  210a              MOVS     r1,#0xa
002f1e  4856              LDR      r0,|L1.12408|
002f20  f7fffffe          BL       uart_putchar
002f24  210a              MOVS     r1,#0xa
002f26  4854              LDR      r0,|L1.12408|
002f28  f7fffffe          BL       uart_putchar
002f2c  210a              MOVS     r1,#0xa
002f2e  4852              LDR      r0,|L1.12408|
002f30  f7fffffe          BL       uart_putchar
002f34  210a              MOVS     r1,#0xa
002f36  4850              LDR      r0,|L1.12408|
002f38  f7fffffe          BL       uart_putchar
002f3c  210a              MOVS     r1,#0xa
002f3e  484e              LDR      r0,|L1.12408|
002f40  f7fffffe          BL       uart_putchar
002f44  210a              MOVS     r1,#0xa
002f46  484c              LDR      r0,|L1.12408|
002f48  f7fffffe          BL       uart_putchar
002f4c  210a              MOVS     r1,#0xa
002f4e  484a              LDR      r0,|L1.12408|
002f50  f7fffffe          BL       uart_putchar
002f54  210a              MOVS     r1,#0xa
002f56  4848              LDR      r0,|L1.12408|
002f58  f7fffffe          BL       uart_putchar
002f5c  210a              MOVS     r1,#0xa
002f5e  4846              LDR      r0,|L1.12408|
002f60  f7fffffe          BL       uart_putchar
002f64  210a              MOVS     r1,#0xa
002f66  4844              LDR      r0,|L1.12408|
002f68  f7fffffe          BL       uart_putchar
002f6c  210a              MOVS     r1,#0xa
002f6e  4842              LDR      r0,|L1.12408|
002f70  f7fffffe          BL       uart_putchar
002f74  210a              MOVS     r1,#0xa
002f76  4840              LDR      r0,|L1.12408|
002f78  f7fffffe          BL       uart_putchar
002f7c  210a              MOVS     r1,#0xa
002f7e  483e              LDR      r0,|L1.12408|
002f80  f7fffffe          BL       uart_putchar
002f84  210a              MOVS     r1,#0xa
002f86  483c              LDR      r0,|L1.12408|
002f88  e000              B        |L1.12172|
                  |L1.12170|
002f8a  e0f7              B        |L1.12668|
                  |L1.12172|
002f8c  f7fffffe          BL       uart_putchar
002f90  210a              MOVS     r1,#0xa
002f92  4839              LDR      r0,|L1.12408|
002f94  f7fffffe          BL       uart_putchar
002f98  210a              MOVS     r1,#0xa
002f9a  4837              LDR      r0,|L1.12408|
002f9c  f7fffffe          BL       uart_putchar
002fa0  210a              MOVS     r1,#0xa
002fa2  4835              LDR      r0,|L1.12408|
002fa4  f7fffffe          BL       uart_putchar
002fa8  210a              MOVS     r1,#0xa
002faa  4833              LDR      r0,|L1.12408|
002fac  f7fffffe          BL       uart_putchar
002fb0  210a              MOVS     r1,#0xa
002fb2  4831              LDR      r0,|L1.12408|
002fb4  f7fffffe          BL       uart_putchar
002fb8  210a              MOVS     r1,#0xa
002fba  482f              LDR      r0,|L1.12408|
002fbc  f7fffffe          BL       uart_putchar
002fc0  210a              MOVS     r1,#0xa
002fc2  482d              LDR      r0,|L1.12408|
002fc4  f7fffffe          BL       uart_putchar
002fc8  210a              MOVS     r1,#0xa
002fca  482b              LDR      r0,|L1.12408|
002fcc  f7fffffe          BL       uart_putchar
002fd0  210a              MOVS     r1,#0xa
002fd2  4829              LDR      r0,|L1.12408|
002fd4  f7fffffe          BL       uart_putchar
002fd8  210a              MOVS     r1,#0xa
002fda  4827              LDR      r0,|L1.12408|
002fdc  f7fffffe          BL       uart_putchar
002fe0  210a              MOVS     r1,#0xa
002fe2  4825              LDR      r0,|L1.12408|
002fe4  f7fffffe          BL       uart_putchar
002fe8  210a              MOVS     r1,#0xa
002fea  4823              LDR      r0,|L1.12408|
002fec  f7fffffe          BL       uart_putchar
002ff0  210a              MOVS     r1,#0xa
002ff2  4821              LDR      r0,|L1.12408|
002ff4  f7fffffe          BL       uart_putchar
002ff8  210a              MOVS     r1,#0xa
002ffa  481f              LDR      r0,|L1.12408|
002ffc  f7fffffe          BL       uart_putchar
003000  210a              MOVS     r1,#0xa
003002  481d              LDR      r0,|L1.12408|
003004  f7fffffe          BL       uart_putchar
003008  210a              MOVS     r1,#0xa
00300a  481b              LDR      r0,|L1.12408|
00300c  f7fffffe          BL       uart_putchar
003010  210a              MOVS     r1,#0xa
003012  4819              LDR      r0,|L1.12408|
003014  f7fffffe          BL       uart_putchar
003018  210a              MOVS     r1,#0xa
00301a  4817              LDR      r0,|L1.12408|
00301c  f7fffffe          BL       uart_putchar
003020  210a              MOVS     r1,#0xa
003022  4815              LDR      r0,|L1.12408|
003024  f7fffffe          BL       uart_putchar
003028  210a              MOVS     r1,#0xa
00302a  e035              B        |L1.12440|
                  |L1.12332|
                          DCD      0x400ff080
                  |L1.12336|
                          DCD      ||.text||+0xd60
                  |L1.12340|
                          DCD      ||.text||+0x8ec
                  |L1.12344|
003038  4f4b00            DCB      "OK",0
00303b  00                DCB      0
                  |L1.12348|
                          DCD      data
                  |L1.12352|
                          DCD      at_
                  |L1.12356|
                          DCD      apn
                  |L1.12360|
                          DCD      tmeout
                  |L1.12364|
                          DCD      port
                  |L1.12368|
                          DCD      ||ip||
                  |L1.12372|
003054  3e00              DCB      ">",0
003056  00                DCB      0
003057  00                DCB      0
                  |L1.12376|
                          DCD      uart_string_gsm
                  |L1.12380|
                          DCD      cond
                  |L1.12384|
                          DCD      0x00001388
                  |L1.12388|
003064  0a00              DCB      "\n",0
003066  00                DCB      0
003067  00                DCB      0
                  |L1.12392|
                          DCD      len
                  |L1.12396|
                          DCD      tout
                  |L1.12400|
                          DCD      ||k2||
                  |L1.12404|
                          DCD      k
                  |L1.12408|
                          DCD      0x4006b000
                  |L1.12412|
                          DCD      ||.text||+0x474
                  |L1.12416|
                          DCD      stcond1
                  |L1.12420|
                          DCD      stcond2
                  |L1.12424|
                          DCD      stcond3
                  |L1.12428|
                          DCD      stcond4
                  |L1.12432|
                          DCD      con1d
                  |L1.12436|
                          DCD      drive
                  |L1.12440|
003098  48fe              LDR      r0,|L1.13460|
00309a  f7fffffe          BL       uart_putchar
00309e  210a              MOVS     r1,#0xa
0030a0  48fc              LDR      r0,|L1.13460|
0030a2  f7fffffe          BL       uart_putchar
0030a6  210a              MOVS     r1,#0xa
0030a8  48fa              LDR      r0,|L1.13460|
0030aa  f7fffffe          BL       uart_putchar
0030ae  210a              MOVS     r1,#0xa
0030b0  48f8              LDR      r0,|L1.13460|
0030b2  f7fffffe          BL       uart_putchar
0030b6  210a              MOVS     r1,#0xa
0030b8  48f6              LDR      r0,|L1.13460|
0030ba  f7fffffe          BL       uart_putchar
0030be  210a              MOVS     r1,#0xa
0030c0  48f4              LDR      r0,|L1.13460|
0030c2  f7fffffe          BL       uart_putchar
0030c6  210a              MOVS     r1,#0xa
0030c8  48f2              LDR      r0,|L1.13460|
0030ca  f7fffffe          BL       uart_putchar
0030ce  210a              MOVS     r1,#0xa
0030d0  48f0              LDR      r0,|L1.13460|
0030d2  f7fffffe          BL       uart_putchar
0030d6  210a              MOVS     r1,#0xa
0030d8  48ee              LDR      r0,|L1.13460|
0030da  f7fffffe          BL       uart_putchar
0030de  210a              MOVS     r1,#0xa
0030e0  48ec              LDR      r0,|L1.13460|
0030e2  f7fffffe          BL       uart_putchar
0030e6  210a              MOVS     r1,#0xa
0030e8  48ea              LDR      r0,|L1.13460|
0030ea  f7fffffe          BL       uart_putchar
0030ee  210a              MOVS     r1,#0xa
0030f0  48e8              LDR      r0,|L1.13460|
0030f2  f7fffffe          BL       uart_putchar
0030f6  210a              MOVS     r1,#0xa
0030f8  48e6              LDR      r0,|L1.13460|
0030fa  f7fffffe          BL       uart_putchar
0030fe  210a              MOVS     r1,#0xa
003100  48e4              LDR      r0,|L1.13460|
003102  f7fffffe          BL       uart_putchar
003106  210a              MOVS     r1,#0xa
003108  48e2              LDR      r0,|L1.13460|
00310a  f7fffffe          BL       uart_putchar
00310e  210a              MOVS     r1,#0xa
003110  48e0              LDR      r0,|L1.13460|
003112  f7fffffe          BL       uart_putchar
003116  210a              MOVS     r1,#0xa
003118  48de              LDR      r0,|L1.13460|
00311a  f7fffffe          BL       uart_putchar
00311e  210a              MOVS     r1,#0xa
003120  48dc              LDR      r0,|L1.13460|
003122  f7fffffe          BL       uart_putchar
003126  210a              MOVS     r1,#0xa
003128  48da              LDR      r0,|L1.13460|
00312a  f7fffffe          BL       uart_putchar
00312e  210a              MOVS     r1,#0xa
003130  48d8              LDR      r0,|L1.13460|
003132  f7fffffe          BL       uart_putchar
003136  210a              MOVS     r1,#0xa
003138  48d6              LDR      r0,|L1.13460|
00313a  f7fffffe          BL       uart_putchar
;;;1044   									//memset(data,0,1000);
;;;1045   														//timer counts to wait for characters in uart 1 									
;;;1046   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00313e  bf00              NOP      
                  |L1.12608|
003140  49d5              LDR      r1,|L1.13464|
003142  48d6              LDR      r0,|L1.13468|
003144  f7fffffe          BL       strstr
003148  2800              CMP      r0,#0
00314a  d10a              BNE      |L1.12642|
00314c  49d2              LDR      r1,|L1.13464|
00314e  3990              SUBS     r1,r1,#0x90
003150  48d2              LDR      r0,|L1.13468|
003152  f7fffffe          BL       strstr
003156  2800              CMP      r0,#0
003158  d103              BNE      |L1.12642|
00315a  48d1              LDR      r0,|L1.13472|
00315c  6800              LDR      r0,[r0,#0]  ; tout
00315e  2805              CMP      r0,#5
003160  ddee              BLE      |L1.12608|
                  |L1.12642|
;;;1047   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1048   									}
;;;1049   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
003162  f7fffffe          BL       clear
;;;1050   									//clear();
;;;1051   									memset(data,0,strlen(data));
003166  48cf              LDR      r0,|L1.13476|
003168  f7fffffe          BL       strlen
00316c  4604              MOV      r4,r0
00316e  4621              MOV      r1,r4
003170  48cc              LDR      r0,|L1.13476|
003172  f7fffffe          BL       __aeabi_memclr
;;;1052   									clear();
003176  f7fffffe          BL       clear
00317a  e142              B        |L1.13314|
                  |L1.12668|
;;;1053   
;;;1054   								
;;;1055   									
;;;1056   									
;;;1057   									
;;;1058   								//	log_it();								
;;;1059   								}else{send_chunk();}	
00317c  f7fffffe          BL       send_chunk
003180  e13f              B        |L1.13314|
                  |L1.12674|
;;;1060   
;;;1061   																
;;;1062   								}else{
;;;1063   								
;;;1064   								
;;;1065   	delay(100);
003182  2064              MOVS     r0,#0x64
003184  f7fffffe          BL       delay
;;;1066   		clear();//memset(uart_string_gsm,0,5000);
003188  f7fffffe          BL       clear
;;;1067   	
;;;1068   	memset(at_,0,100);
00318c  2164              MOVS     r1,#0x64
00318e  48c6              LDR      r0,|L1.13480|
003190  f7fffffe          BL       __aeabi_memclr
;;;1069   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003194  48c3              LDR      r0,|L1.13476|
003196  f7fffffe          BL       strlen
00319a  1c44              ADDS     r4,r0,#1
00319c  4623              MOV      r3,r4
00319e  4ac3              LDR      r2,|L1.13484|
0031a0  49bd              LDR      r1,|L1.13464|
0031a2  3938              SUBS     r1,r1,#0x38
0031a4  48c0              LDR      r0,|L1.13480|
0031a6  f7fffffe          BL       __2sprintf
;;;1070   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0031aa  2005              MOVS     r0,#5
0031ac  4bba              LDR      r3,|L1.13464|
0031ae  3b90              SUBS     r3,r3,#0x90
0031b0  461a              MOV      r2,r3
0031b2  327c              ADDS     r2,r2,#0x7c
0031b4  a1be              ADR      r1,|L1.13488|
0031b6  9000              STR      r0,[sp,#0]
0031b8  48bb              LDR      r0,|L1.13480|
0031ba  f7fffffe          BL       send_SD
;;;1071   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1072   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1073   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1074   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1075   //	}
;;;1076   	
;;;1077   clear();	
0031be  f7fffffe          BL       clear
;;;1078   									k2=0;									//string array counter for uart 1
0031c2  2000              MOVS     r0,#0
0031c4  49bb              LDR      r1,|L1.13492|
0031c6  6008              STR      r0,[r1,#0]  ; k2
;;;1079   									tout=0;	
0031c8  49b5              LDR      r1,|L1.13472|
0031ca  6008              STR      r0,[r1,#0]  ; tout
;;;1080   		for(k=0;k<strlen(data);k++)
0031cc  49ba              LDR      r1,|L1.13496|
0031ce  6008              STR      r0,[r1,#0]  ; k
0031d0  e00b              B        |L1.12778|
                  |L1.12754|
;;;1081   		{
;;;1082   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0031d2  48b4              LDR      r0,|L1.13476|
0031d4  4ab8              LDR      r2,|L1.13496|
0031d6  6812              LDR      r2,[r2,#0]  ; k
0031d8  5c81              LDRB     r1,[r0,r2]
0031da  48ae              LDR      r0,|L1.13460|
0031dc  f7fffffe          BL       uart_putchar
0031e0  48b5              LDR      r0,|L1.13496|
0031e2  6800              LDR      r0,[r0,#0]            ;1080  ; k
0031e4  1c40              ADDS     r0,r0,#1              ;1080
0031e6  49b4              LDR      r1,|L1.13496|
0031e8  6008              STR      r0,[r1,#0]            ;1080  ; k
                  |L1.12778|
0031ea  48ae              LDR      r0,|L1.13476|
0031ec  f7fffffe          BL       strlen
0031f0  49b1              LDR      r1,|L1.13496|
0031f2  6809              LDR      r1,[r1,#0]            ;1080  ; k
0031f4  4288              CMP      r0,r1                 ;1080
0031f6  d8ec              BHI      |L1.12754|
;;;1083   		}	
;;;1084   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0031f8  210a              MOVS     r1,#0xa
0031fa  48a6              LDR      r0,|L1.13460|
0031fc  f7fffffe          BL       uart_putchar
003200  210a              MOVS     r1,#0xa
003202  48a4              LDR      r0,|L1.13460|
003204  f7fffffe          BL       uart_putchar
003208  210a              MOVS     r1,#0xa
00320a  48a2              LDR      r0,|L1.13460|
00320c  f7fffffe          BL       uart_putchar
003210  210a              MOVS     r1,#0xa
003212  48a0              LDR      r0,|L1.13460|
003214  f7fffffe          BL       uart_putchar
003218  210a              MOVS     r1,#0xa
00321a  489e              LDR      r0,|L1.13460|
00321c  f7fffffe          BL       uart_putchar
003220  210a              MOVS     r1,#0xa
003222  489c              LDR      r0,|L1.13460|
003224  f7fffffe          BL       uart_putchar
003228  210a              MOVS     r1,#0xa
00322a  489a              LDR      r0,|L1.13460|
00322c  f7fffffe          BL       uart_putchar
003230  210a              MOVS     r1,#0xa
003232  4898              LDR      r0,|L1.13460|
003234  f7fffffe          BL       uart_putchar
003238  210a              MOVS     r1,#0xa
00323a  4896              LDR      r0,|L1.13460|
00323c  f7fffffe          BL       uart_putchar
003240  210a              MOVS     r1,#0xa
003242  4894              LDR      r0,|L1.13460|
003244  f7fffffe          BL       uart_putchar
003248  210a              MOVS     r1,#0xa
00324a  4892              LDR      r0,|L1.13460|
00324c  f7fffffe          BL       uart_putchar
003250  210a              MOVS     r1,#0xa
003252  4890              LDR      r0,|L1.13460|
003254  f7fffffe          BL       uart_putchar
003258  210a              MOVS     r1,#0xa
00325a  488e              LDR      r0,|L1.13460|
00325c  f7fffffe          BL       uart_putchar
003260  210a              MOVS     r1,#0xa
003262  488c              LDR      r0,|L1.13460|
003264  f7fffffe          BL       uart_putchar
003268  210a              MOVS     r1,#0xa
00326a  488a              LDR      r0,|L1.13460|
00326c  f7fffffe          BL       uart_putchar
003270  210a              MOVS     r1,#0xa
003272  4888              LDR      r0,|L1.13460|
003274  f7fffffe          BL       uart_putchar
003278  210a              MOVS     r1,#0xa
00327a  4886              LDR      r0,|L1.13460|
00327c  f7fffffe          BL       uart_putchar
003280  210a              MOVS     r1,#0xa
003282  4884              LDR      r0,|L1.13460|
003284  f7fffffe          BL       uart_putchar
003288  210a              MOVS     r1,#0xa
00328a  4882              LDR      r0,|L1.13460|
00328c  f7fffffe          BL       uart_putchar
003290  210a              MOVS     r1,#0xa
003292  4880              LDR      r0,|L1.13460|
003294  f7fffffe          BL       uart_putchar
003298  210a              MOVS     r1,#0xa
00329a  487e              LDR      r0,|L1.13460|
00329c  f7fffffe          BL       uart_putchar
0032a0  210a              MOVS     r1,#0xa
0032a2  487c              LDR      r0,|L1.13460|
0032a4  f7fffffe          BL       uart_putchar
0032a8  210a              MOVS     r1,#0xa
0032aa  487a              LDR      r0,|L1.13460|
0032ac  f7fffffe          BL       uart_putchar
0032b0  210a              MOVS     r1,#0xa
0032b2  4878              LDR      r0,|L1.13460|
0032b4  f7fffffe          BL       uart_putchar
0032b8  210a              MOVS     r1,#0xa
0032ba  4876              LDR      r0,|L1.13460|
0032bc  f7fffffe          BL       uart_putchar
0032c0  210a              MOVS     r1,#0xa
0032c2  4874              LDR      r0,|L1.13460|
0032c4  f7fffffe          BL       uart_putchar
0032c8  210a              MOVS     r1,#0xa
0032ca  4872              LDR      r0,|L1.13460|
0032cc  f7fffffe          BL       uart_putchar
0032d0  210a              MOVS     r1,#0xa
0032d2  4870              LDR      r0,|L1.13460|
0032d4  f7fffffe          BL       uart_putchar
0032d8  210a              MOVS     r1,#0xa
0032da  486e              LDR      r0,|L1.13460|
0032dc  f7fffffe          BL       uart_putchar
0032e0  210a              MOVS     r1,#0xa
0032e2  486c              LDR      r0,|L1.13460|
0032e4  f7fffffe          BL       uart_putchar
0032e8  210a              MOVS     r1,#0xa
0032ea  486a              LDR      r0,|L1.13460|
0032ec  f7fffffe          BL       uart_putchar
0032f0  210a              MOVS     r1,#0xa
0032f2  4868              LDR      r0,|L1.13460|
0032f4  f7fffffe          BL       uart_putchar
0032f8  210a              MOVS     r1,#0xa
0032fa  4866              LDR      r0,|L1.13460|
0032fc  f7fffffe          BL       uart_putchar
003300  210a              MOVS     r1,#0xa
003302  4864              LDR      r0,|L1.13460|
003304  f7fffffe          BL       uart_putchar
003308  210a              MOVS     r1,#0xa
00330a  4862              LDR      r0,|L1.13460|
00330c  f7fffffe          BL       uart_putchar
003310  210a              MOVS     r1,#0xa
003312  4860              LDR      r0,|L1.13460|
003314  f7fffffe          BL       uart_putchar
003318  210a              MOVS     r1,#0xa
00331a  485e              LDR      r0,|L1.13460|
00331c  f7fffffe          BL       uart_putchar
003320  210a              MOVS     r1,#0xa
003322  485c              LDR      r0,|L1.13460|
003324  f7fffffe          BL       uart_putchar
003328  210a              MOVS     r1,#0xa
00332a  485a              LDR      r0,|L1.13460|
00332c  f7fffffe          BL       uart_putchar
003330  210a              MOVS     r1,#0xa
003332  4858              LDR      r0,|L1.13460|
003334  f7fffffe          BL       uart_putchar
003338  210a              MOVS     r1,#0xa
00333a  4856              LDR      r0,|L1.13460|
00333c  f7fffffe          BL       uart_putchar
003340  210a              MOVS     r1,#0xa
003342  4854              LDR      r0,|L1.13460|
003344  f7fffffe          BL       uart_putchar
003348  210a              MOVS     r1,#0xa
00334a  4852              LDR      r0,|L1.13460|
00334c  f7fffffe          BL       uart_putchar
003350  210a              MOVS     r1,#0xa
003352  4850              LDR      r0,|L1.13460|
003354  f7fffffe          BL       uart_putchar
003358  210a              MOVS     r1,#0xa
00335a  484e              LDR      r0,|L1.13460|
00335c  f7fffffe          BL       uart_putchar
003360  210a              MOVS     r1,#0xa
003362  484c              LDR      r0,|L1.13460|
003364  f7fffffe          BL       uart_putchar
003368  210a              MOVS     r1,#0xa
00336a  484a              LDR      r0,|L1.13460|
00336c  f7fffffe          BL       uart_putchar
003370  210a              MOVS     r1,#0xa
003372  4848              LDR      r0,|L1.13460|
003374  f7fffffe          BL       uart_putchar
003378  210a              MOVS     r1,#0xa
00337a  4846              LDR      r0,|L1.13460|
00337c  f7fffffe          BL       uart_putchar
003380  210a              MOVS     r1,#0xa
003382  4844              LDR      r0,|L1.13460|
003384  f7fffffe          BL       uart_putchar
003388  210a              MOVS     r1,#0xa
00338a  4842              LDR      r0,|L1.13460|
00338c  f7fffffe          BL       uart_putchar
003390  210a              MOVS     r1,#0xa
003392  4840              LDR      r0,|L1.13460|
003394  f7fffffe          BL       uart_putchar
003398  210a              MOVS     r1,#0xa
00339a  483e              LDR      r0,|L1.13460|
00339c  f7fffffe          BL       uart_putchar
0033a0  210a              MOVS     r1,#0xa
0033a2  483c              LDR      r0,|L1.13460|
0033a4  f7fffffe          BL       uart_putchar
0033a8  210a              MOVS     r1,#0xa
0033aa  483a              LDR      r0,|L1.13460|
0033ac  f7fffffe          BL       uart_putchar
0033b0  210a              MOVS     r1,#0xa
0033b2  4838              LDR      r0,|L1.13460|
0033b4  f7fffffe          BL       uart_putchar
0033b8  210a              MOVS     r1,#0xa
0033ba  4836              LDR      r0,|L1.13460|
0033bc  f7fffffe          BL       uart_putchar
;;;1085   									//memset(data,0,1000);
;;;1086   														//timer counts to wait for characters in uart 1 									
;;;1087   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0033c0  bf00              NOP      
                  |L1.13250|
0033c2  4935              LDR      r1,|L1.13464|
0033c4  4835              LDR      r0,|L1.13468|
0033c6  f7fffffe          BL       strstr
0033ca  2800              CMP      r0,#0
0033cc  d10a              BNE      |L1.13284|
0033ce  4932              LDR      r1,|L1.13464|
0033d0  3990              SUBS     r1,r1,#0x90
0033d2  4832              LDR      r0,|L1.13468|
0033d4  f7fffffe          BL       strstr
0033d8  2800              CMP      r0,#0
0033da  d103              BNE      |L1.13284|
0033dc  4830              LDR      r0,|L1.13472|
0033de  6800              LDR      r0,[r0,#0]  ; tout
0033e0  2805              CMP      r0,#5
0033e2  ddee              BLE      |L1.13250|
                  |L1.13284|
;;;1088   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1089   									}
;;;1090   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0033e4  f7fffffe          BL       clear
;;;1091   									//clear();
;;;1092   									memset(data,0,strlen(data));
0033e8  482e              LDR      r0,|L1.13476|
0033ea  f7fffffe          BL       strlen
0033ee  4604              MOV      r4,r0
0033f0  4621              MOV      r1,r4
0033f2  482c              LDR      r0,|L1.13476|
0033f4  f7fffffe          BL       __aeabi_memclr
;;;1093   									clear();
0033f8  f7fffffe          BL       clear
0033fc  e001              B        |L1.13314|
                  |L1.13310|
;;;1094   
;;;1095   								
;;;1096   								
;;;1097   								//log_it();
;;;1098   									}			//
;;;1099   
;;;1100   							
;;;1101   
;;;1102   	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;1103   	else
;;;1104   	{
;;;1105   		send_chunk();
0033fe  f7fffffe          BL       send_chunk
                  |L1.13314|
;;;1106   	}		
;;;1107   								
;;;1108   								
;;;1109   								
;;;1110   	memset(data,0,strlen(data));	
003402  4828              LDR      r0,|L1.13476|
003404  f7fffffe          BL       strlen
003408  4604              MOV      r4,r0
00340a  4621              MOV      r1,r4
00340c  4825              LDR      r0,|L1.13476|
00340e  f7fffffe          BL       __aeabi_memclr
;;;1111   	uart_putchar(UART1_BASE_PTR, 0x1A);
003412  211a              MOVS     r1,#0x1a
003414  481f              LDR      r0,|L1.13460|
003416  f7fffffe          BL       uart_putchar
;;;1112   	
;;;1113   }
00341a  bd38              POP      {r3-r5,pc}
;;;1114   
                          ENDP

                  log_it PROC
;;;1117   
;;;1118   void log_it()
00341c  b538              PUSH     {r3-r5,lr}
;;;1119   {
;;;1120   	delay(100);
00341e  2064              MOVS     r0,#0x64
003420  f7fffffe          BL       delay
;;;1121   		clear();//memset(uart_string_gsm,0,5000);
003424  f7fffffe          BL       clear
;;;1122   	
;;;1123   	memset(at_,0,100);
003428  2164              MOVS     r1,#0x64
00342a  481f              LDR      r0,|L1.13480|
00342c  f7fffffe          BL       __aeabi_memclr
;;;1124   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
003430  481c              LDR      r0,|L1.13476|
003432  f7fffffe          BL       strlen
003436  1c44              ADDS     r4,r0,#1
003438  4623              MOV      r3,r4
00343a  4a1c              LDR      r2,|L1.13484|
00343c  4916              LDR      r1,|L1.13464|
00343e  3938              SUBS     r1,r1,#0x38
003440  4819              LDR      r0,|L1.13480|
003442  f7fffffe          BL       __2sprintf
;;;1125   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
003446  2005              MOVS     r0,#5
003448  4b13              LDR      r3,|L1.13464|
00344a  3b90              SUBS     r3,r3,#0x90
00344c  461a              MOV      r2,r3
00344e  327c              ADDS     r2,r2,#0x7c
003450  a117              ADR      r1,|L1.13488|
003452  9000              STR      r0,[sp,#0]
003454  4814              LDR      r0,|L1.13480|
003456  f7fffffe          BL       send_SD
;;;1126   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;1127   //	if(strstr(uart_string_gsm,"ERROR")){
;;;1128   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;1129   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;1130   //	}
;;;1131   	
;;;1132   clear();	
00345a  f7fffffe          BL       clear
;;;1133   									k2=0;									//string array counter for uart 1
00345e  2000              MOVS     r0,#0
003460  4914              LDR      r1,|L1.13492|
003462  6008              STR      r0,[r1,#0]  ; k2
;;;1134   									tout=0;	
003464  490e              LDR      r1,|L1.13472|
003466  6008              STR      r0,[r1,#0]  ; tout
;;;1135   		for(k=0;k<strlen(data);k++)
003468  4913              LDR      r1,|L1.13496|
00346a  6008              STR      r0,[r1,#0]  ; k
00346c  e00b              B        |L1.13446|
                  |L1.13422|
;;;1136   		{
;;;1137   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00346e  480d              LDR      r0,|L1.13476|
003470  4a11              LDR      r2,|L1.13496|
003472  6812              LDR      r2,[r2,#0]  ; k
003474  5c81              LDRB     r1,[r0,r2]
003476  4807              LDR      r0,|L1.13460|
003478  f7fffffe          BL       uart_putchar
00347c  480e              LDR      r0,|L1.13496|
00347e  6800              LDR      r0,[r0,#0]            ;1135  ; k
003480  1c40              ADDS     r0,r0,#1              ;1135
003482  490d              LDR      r1,|L1.13496|
003484  6008              STR      r0,[r1,#0]            ;1135  ; k
                  |L1.13446|
003486  4807              LDR      r0,|L1.13476|
003488  f7fffffe          BL       strlen
00348c  490a              LDR      r1,|L1.13496|
00348e  6809              LDR      r1,[r1,#0]            ;1135  ; k
003490  4288              CMP      r0,r1                 ;1135
003492  e013              B        |L1.13500|
                  |L1.13460|
                          DCD      0x4006b000
                  |L1.13464|
                          DCD      ||.text||+0x900
                  |L1.13468|
                          DCD      uart_string_gsm
                  |L1.13472|
                          DCD      tout
                  |L1.13476|
                          DCD      data
                  |L1.13480|
                          DCD      at_
                  |L1.13484|
                          DCD      drive
                  |L1.13488|
0034b0  3e00              DCB      ">",0
0034b2  00                DCB      0
0034b3  00                DCB      0
                  |L1.13492|
                          DCD      ||k2||
                  |L1.13496|
                          DCD      k
                  |L1.13500|
0034bc  d8d7              BHI      |L1.13422|
;;;1138   		}	
;;;1139   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0034be  210a              MOVS     r1,#0xa
0034c0  48f9              LDR      r0,|L1.14504|
0034c2  f7fffffe          BL       uart_putchar
0034c6  210a              MOVS     r1,#0xa
0034c8  48f7              LDR      r0,|L1.14504|
0034ca  f7fffffe          BL       uart_putchar
0034ce  210a              MOVS     r1,#0xa
0034d0  48f5              LDR      r0,|L1.14504|
0034d2  f7fffffe          BL       uart_putchar
0034d6  210a              MOVS     r1,#0xa
0034d8  48f3              LDR      r0,|L1.14504|
0034da  f7fffffe          BL       uart_putchar
0034de  210a              MOVS     r1,#0xa
0034e0  48f1              LDR      r0,|L1.14504|
0034e2  f7fffffe          BL       uart_putchar
0034e6  210a              MOVS     r1,#0xa
0034e8  48ef              LDR      r0,|L1.14504|
0034ea  f7fffffe          BL       uart_putchar
0034ee  210a              MOVS     r1,#0xa
0034f0  48ed              LDR      r0,|L1.14504|
0034f2  f7fffffe          BL       uart_putchar
0034f6  210a              MOVS     r1,#0xa
0034f8  48eb              LDR      r0,|L1.14504|
0034fa  f7fffffe          BL       uart_putchar
0034fe  210a              MOVS     r1,#0xa
003500  48e9              LDR      r0,|L1.14504|
003502  f7fffffe          BL       uart_putchar
003506  210a              MOVS     r1,#0xa
003508  48e7              LDR      r0,|L1.14504|
00350a  f7fffffe          BL       uart_putchar
00350e  210a              MOVS     r1,#0xa
003510  48e5              LDR      r0,|L1.14504|
003512  f7fffffe          BL       uart_putchar
003516  210a              MOVS     r1,#0xa
003518  48e3              LDR      r0,|L1.14504|
00351a  f7fffffe          BL       uart_putchar
00351e  210a              MOVS     r1,#0xa
003520  48e1              LDR      r0,|L1.14504|
003522  f7fffffe          BL       uart_putchar
003526  210a              MOVS     r1,#0xa
003528  48df              LDR      r0,|L1.14504|
00352a  f7fffffe          BL       uart_putchar
00352e  210a              MOVS     r1,#0xa
003530  48dd              LDR      r0,|L1.14504|
003532  f7fffffe          BL       uart_putchar
003536  210a              MOVS     r1,#0xa
003538  48db              LDR      r0,|L1.14504|
00353a  f7fffffe          BL       uart_putchar
00353e  210a              MOVS     r1,#0xa
003540  48d9              LDR      r0,|L1.14504|
003542  f7fffffe          BL       uart_putchar
003546  210a              MOVS     r1,#0xa
003548  48d7              LDR      r0,|L1.14504|
00354a  f7fffffe          BL       uart_putchar
00354e  210a              MOVS     r1,#0xa
003550  48d5              LDR      r0,|L1.14504|
003552  f7fffffe          BL       uart_putchar
003556  210a              MOVS     r1,#0xa
003558  48d3              LDR      r0,|L1.14504|
00355a  f7fffffe          BL       uart_putchar
00355e  210a              MOVS     r1,#0xa
003560  48d1              LDR      r0,|L1.14504|
003562  f7fffffe          BL       uart_putchar
003566  210a              MOVS     r1,#0xa
003568  48cf              LDR      r0,|L1.14504|
00356a  f7fffffe          BL       uart_putchar
00356e  210a              MOVS     r1,#0xa
003570  48cd              LDR      r0,|L1.14504|
003572  f7fffffe          BL       uart_putchar
003576  210a              MOVS     r1,#0xa
003578  48cb              LDR      r0,|L1.14504|
00357a  f7fffffe          BL       uart_putchar
00357e  210a              MOVS     r1,#0xa
003580  48c9              LDR      r0,|L1.14504|
003582  f7fffffe          BL       uart_putchar
003586  210a              MOVS     r1,#0xa
003588  48c7              LDR      r0,|L1.14504|
00358a  f7fffffe          BL       uart_putchar
00358e  210a              MOVS     r1,#0xa
003590  48c5              LDR      r0,|L1.14504|
003592  f7fffffe          BL       uart_putchar
003596  210a              MOVS     r1,#0xa
003598  48c3              LDR      r0,|L1.14504|
00359a  f7fffffe          BL       uart_putchar
00359e  210a              MOVS     r1,#0xa
0035a0  48c1              LDR      r0,|L1.14504|
0035a2  f7fffffe          BL       uart_putchar
0035a6  210a              MOVS     r1,#0xa
0035a8  48bf              LDR      r0,|L1.14504|
0035aa  f7fffffe          BL       uart_putchar
0035ae  210a              MOVS     r1,#0xa
0035b0  48bd              LDR      r0,|L1.14504|
0035b2  f7fffffe          BL       uart_putchar
0035b6  210a              MOVS     r1,#0xa
0035b8  48bb              LDR      r0,|L1.14504|
0035ba  f7fffffe          BL       uart_putchar
0035be  210a              MOVS     r1,#0xa
0035c0  48b9              LDR      r0,|L1.14504|
0035c2  f7fffffe          BL       uart_putchar
0035c6  210a              MOVS     r1,#0xa
0035c8  48b7              LDR      r0,|L1.14504|
0035ca  f7fffffe          BL       uart_putchar
0035ce  210a              MOVS     r1,#0xa
0035d0  48b5              LDR      r0,|L1.14504|
0035d2  f7fffffe          BL       uart_putchar
0035d6  210a              MOVS     r1,#0xa
0035d8  48b3              LDR      r0,|L1.14504|
0035da  f7fffffe          BL       uart_putchar
0035de  210a              MOVS     r1,#0xa
0035e0  48b1              LDR      r0,|L1.14504|
0035e2  f7fffffe          BL       uart_putchar
0035e6  210a              MOVS     r1,#0xa
0035e8  48af              LDR      r0,|L1.14504|
0035ea  f7fffffe          BL       uart_putchar
0035ee  210a              MOVS     r1,#0xa
0035f0  48ad              LDR      r0,|L1.14504|
0035f2  f7fffffe          BL       uart_putchar
0035f6  210a              MOVS     r1,#0xa
0035f8  48ab              LDR      r0,|L1.14504|
0035fa  f7fffffe          BL       uart_putchar
0035fe  210a              MOVS     r1,#0xa
003600  48a9              LDR      r0,|L1.14504|
003602  f7fffffe          BL       uart_putchar
003606  210a              MOVS     r1,#0xa
003608  48a7              LDR      r0,|L1.14504|
00360a  f7fffffe          BL       uart_putchar
00360e  210a              MOVS     r1,#0xa
003610  48a5              LDR      r0,|L1.14504|
003612  f7fffffe          BL       uart_putchar
003616  210a              MOVS     r1,#0xa
003618  48a3              LDR      r0,|L1.14504|
00361a  f7fffffe          BL       uart_putchar
00361e  210a              MOVS     r1,#0xa
003620  48a1              LDR      r0,|L1.14504|
003622  f7fffffe          BL       uart_putchar
003626  210a              MOVS     r1,#0xa
003628  489f              LDR      r0,|L1.14504|
00362a  f7fffffe          BL       uart_putchar
00362e  210a              MOVS     r1,#0xa
003630  489d              LDR      r0,|L1.14504|
003632  f7fffffe          BL       uart_putchar
003636  210a              MOVS     r1,#0xa
003638  489b              LDR      r0,|L1.14504|
00363a  f7fffffe          BL       uart_putchar
00363e  210a              MOVS     r1,#0xa
003640  4899              LDR      r0,|L1.14504|
003642  f7fffffe          BL       uart_putchar
003646  210a              MOVS     r1,#0xa
003648  4897              LDR      r0,|L1.14504|
00364a  f7fffffe          BL       uart_putchar
00364e  210a              MOVS     r1,#0xa
003650  4895              LDR      r0,|L1.14504|
003652  f7fffffe          BL       uart_putchar
003656  210a              MOVS     r1,#0xa
003658  4893              LDR      r0,|L1.14504|
00365a  f7fffffe          BL       uart_putchar
00365e  210a              MOVS     r1,#0xa
003660  4891              LDR      r0,|L1.14504|
003662  f7fffffe          BL       uart_putchar
003666  210a              MOVS     r1,#0xa
003668  488f              LDR      r0,|L1.14504|
00366a  f7fffffe          BL       uart_putchar
00366e  210a              MOVS     r1,#0xa
003670  488d              LDR      r0,|L1.14504|
003672  f7fffffe          BL       uart_putchar
003676  210a              MOVS     r1,#0xa
003678  488b              LDR      r0,|L1.14504|
00367a  f7fffffe          BL       uart_putchar
00367e  210a              MOVS     r1,#0xa
003680  4889              LDR      r0,|L1.14504|
003682  f7fffffe          BL       uart_putchar
;;;1140   									//memset(data,0,1000);
;;;1141   														//timer counts to wait for characters in uart 1 									
;;;1142   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
003686  bf00              NOP      
                  |L1.13960|
003688  4988              LDR      r1,|L1.14508|
00368a  4889              LDR      r0,|L1.14512|
00368c  f7fffffe          BL       strstr
003690  2800              CMP      r0,#0
003692  d10a              BNE      |L1.13994|
003694  4985              LDR      r1,|L1.14508|
003696  3990              SUBS     r1,r1,#0x90
003698  4885              LDR      r0,|L1.14512|
00369a  f7fffffe          BL       strstr
00369e  2800              CMP      r0,#0
0036a0  d103              BNE      |L1.13994|
0036a2  4884              LDR      r0,|L1.14516|
0036a4  6800              LDR      r0,[r0,#0]  ; tout
0036a6  2805              CMP      r0,#5
0036a8  ddee              BLE      |L1.13960|
                  |L1.13994|
;;;1143   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1144   									}
;;;1145   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0036aa  f7fffffe          BL       clear
;;;1146   									//clear();
;;;1147   									memset(data,0,strlen(data));
0036ae  4882              LDR      r0,|L1.14520|
0036b0  f7fffffe          BL       strlen
0036b4  4604              MOV      r4,r0
0036b6  4621              MOV      r1,r4
0036b8  487f              LDR      r0,|L1.14520|
0036ba  f7fffffe          BL       __aeabi_memclr
;;;1148   									clear();
0036be  f7fffffe          BL       clear
;;;1149   
;;;1150   								
;;;1151   						//		
;;;1152   }
0036c2  bd38              POP      {r3-r5,pc}
;;;1153   
                          ENDP

                  read PROC
;;;1408   
;;;1409   void read(char * A,char * B,char * C)
0036c4  b570              PUSH     {r4-r6,lr}
;;;1410   {k=0;l=time;
0036c6  4604              MOV      r4,r0
0036c8  460d              MOV      r5,r1
0036ca  4616              MOV      r6,r2
0036cc  2000              MOVS     r0,#0
0036ce  497b              LDR      r1,|L1.14524|
0036d0  6008              STR      r0,[r1,#0]  ; k
0036d2  487b              LDR      r0,|L1.14528|
0036d4  6800              LDR      r0,[r0,#0]  ; time
0036d6  497b              LDR      r1,|L1.14532|
0036d8  6008              STR      r0,[r1,#0]  ; l
;;;1411   			do{
0036da  bf00              NOP      
                  |L1.14044|
;;;1412   			if( uart_getchar_present (UART1_BASE_PTR))	
0036dc  4872              LDR      r0,|L1.14504|
0036de  f7fffffe          BL       uart_getchar_present
0036e2  2800              CMP      r0,#0
0036e4  d018              BEQ      |L1.14104|
;;;1413   			{uart_string_gps[k]=UART_D_REG(UART1_BASE_PTR);k++;l=time;if(k>298){k=0;}}
0036e6  4870              LDR      r0,|L1.14504|
0036e8  79c0              LDRB     r0,[r0,#7]
0036ea  4977              LDR      r1,|L1.14536|
0036ec  4a73              LDR      r2,|L1.14524|
0036ee  6812              LDR      r2,[r2,#0]  ; k
0036f0  5488              STRB     r0,[r1,r2]
0036f2  4872              LDR      r0,|L1.14524|
0036f4  6800              LDR      r0,[r0,#0]  ; k
0036f6  1c40              ADDS     r0,r0,#1
0036f8  4970              LDR      r1,|L1.14524|
0036fa  6008              STR      r0,[r1,#0]  ; k
0036fc  4870              LDR      r0,|L1.14528|
0036fe  6800              LDR      r0,[r0,#0]  ; time
003700  4970              LDR      r1,|L1.14532|
003702  6008              STR      r0,[r1,#0]  ; l
003704  486d              LDR      r0,|L1.14524|
003706  6800              LDR      r0,[r0,#0]  ; k
003708  21ff              MOVS     r1,#0xff
00370a  312b              ADDS     r1,r1,#0x2b
00370c  4288              CMP      r0,r1
00370e  dd09              BLE      |L1.14116|
003710  2000              MOVS     r0,#0
003712  496a              LDR      r1,|L1.14524|
003714  6008              STR      r0,[r1,#0]  ; k
003716  e005              B        |L1.14116|
                  |L1.14104|
;;;1414   				else{
;;;1415   							l--;if(l==10){}
003718  486a              LDR      r0,|L1.14532|
00371a  6800              LDR      r0,[r0,#0]  ; l
00371c  1e40              SUBS     r0,r0,#1
00371e  4969              LDR      r1,|L1.14532|
003720  6008              STR      r0,[r1,#0]  ; l
003722  bf00              NOP      
                  |L1.14116|
;;;1416   						}
;;;1417   			}while(!((strstr(uart_string_gps, "OK\r\n"))
003724  4961              LDR      r1,|L1.14508|
003726  4868              LDR      r0,|L1.14536|
003728  f7fffffe          BL       strstr
00372c  2800              CMP      r0,#0
00372e  d110              BNE      |L1.14162|
003730  495e              LDR      r1,|L1.14508|
003732  3914              SUBS     r1,r1,#0x14
003734  4864              LDR      r0,|L1.14536|
003736  f7fffffe          BL       strstr
00373a  2800              CMP      r0,#0
00373c  d109              BNE      |L1.14162|
00373e  4861              LDR      r0,|L1.14532|
003740  6800              LDR      r0,[r0,#0]  ; l
003742  2800              CMP      r0,#0
003744  dd05              BLE      |L1.14162|
003746  4961              LDR      r1,|L1.14540|
003748  485f              LDR      r0,|L1.14536|
00374a  f7fffffe          BL       strstr
00374e  2800              CMP      r0,#0
003750  d0c4              BEQ      |L1.14044|
                  |L1.14162|
;;;1418   							||(strstr(uart_string_gps, "ERROR\r\n"))  || (l<=0)
;;;1419   				        	||(strstr(uart_string_gps, "ERROR:"))
;;;1420   							));
;;;1421   //		clear();
;;;1422   }	
003752  bd70              POP      {r4-r6,pc}
;;;1423   void read2(char * respA,char * respB,char * respC, int timeout)
                          ENDP

                  read2 PROC
003754  b5f8              PUSH     {r3-r7,lr}
;;;1424   {k=0;l=time;
003756  4604              MOV      r4,r0
003758  460e              MOV      r6,r1
00375a  4615              MOV      r5,r2
00375c  461f              MOV      r7,r3
00375e  2000              MOVS     r0,#0
003760  4956              LDR      r1,|L1.14524|
003762  6008              STR      r0,[r1,#0]  ; k
003764  4856              LDR      r0,|L1.14528|
003766  6800              LDR      r0,[r0,#0]  ; time
003768  4956              LDR      r1,|L1.14532|
00376a  6008              STR      r0,[r1,#0]  ; l
;;;1425   			do{
00376c  bf00              NOP      
                  |L1.14190|
;;;1426   			if( uart_getchar_present (UART2_BASE_PTR))	
00376e  4858              LDR      r0,|L1.14544|
003770  f7fffffe          BL       uart_getchar_present
003774  2800              CMP      r0,#0
003776  d018              BEQ      |L1.14250|
;;;1427   			{uart_string_gps[k]=UART_D_REG(UART2_BASE_PTR);k++;l=time;if(k>298){k=0;}}
003778  4855              LDR      r0,|L1.14544|
00377a  79c0              LDRB     r0,[r0,#7]
00377c  4952              LDR      r1,|L1.14536|
00377e  4a4f              LDR      r2,|L1.14524|
003780  6812              LDR      r2,[r2,#0]  ; k
003782  5488              STRB     r0,[r1,r2]
003784  484d              LDR      r0,|L1.14524|
003786  6800              LDR      r0,[r0,#0]  ; k
003788  1c40              ADDS     r0,r0,#1
00378a  494c              LDR      r1,|L1.14524|
00378c  6008              STR      r0,[r1,#0]  ; k
00378e  484c              LDR      r0,|L1.14528|
003790  6800              LDR      r0,[r0,#0]  ; time
003792  494c              LDR      r1,|L1.14532|
003794  6008              STR      r0,[r1,#0]  ; l
003796  4849              LDR      r0,|L1.14524|
003798  6800              LDR      r0,[r0,#0]  ; k
00379a  21ff              MOVS     r1,#0xff
00379c  312b              ADDS     r1,r1,#0x2b
00379e  4288              CMP      r0,r1
0037a0  dd08              BLE      |L1.14260|
0037a2  2000              MOVS     r0,#0
0037a4  4945              LDR      r1,|L1.14524|
0037a6  6008              STR      r0,[r1,#0]  ; k
0037a8  e004              B        |L1.14260|
                  |L1.14250|
;;;1428   				else{				
;;;1429   								l--;
0037aa  4846              LDR      r0,|L1.14532|
0037ac  6800              LDR      r0,[r0,#0]  ; l
0037ae  1e40              SUBS     r0,r0,#1
0037b0  4944              LDR      r1,|L1.14532|
0037b2  6008              STR      r0,[r1,#0]  ; l
                  |L1.14260|
;;;1430   						}
;;;1431   			}while(!((strstr(uart_string_gps, respA))
0037b4  4621              MOV      r1,r4
0037b6  4844              LDR      r0,|L1.14536|
0037b8  f7fffffe          BL       strstr
0037bc  2800              CMP      r0,#0
0037be  d10f              BNE      |L1.14304|
0037c0  4631              MOV      r1,r6
0037c2  4841              LDR      r0,|L1.14536|
0037c4  f7fffffe          BL       strstr
0037c8  2800              CMP      r0,#0
0037ca  d109              BNE      |L1.14304|
0037cc  483d              LDR      r0,|L1.14532|
0037ce  6800              LDR      r0,[r0,#0]  ; l
0037d0  2800              CMP      r0,#0
0037d2  dd05              BLE      |L1.14304|
0037d4  4629              MOV      r1,r5
0037d6  483c              LDR      r0,|L1.14536|
0037d8  f7fffffe          BL       strstr
0037dc  2800              CMP      r0,#0
0037de  d0c6              BEQ      |L1.14190|
                  |L1.14304|
;;;1432   							||(strstr(uart_string_gps, respB))  || (l<=0) 
;;;1433   				        	||(strstr(uart_string_gps, respC))
;;;1434   							));
;;;1435   //		clear();
;;;1436   }	
0037e0  bdf8              POP      {r3-r7,pc}
;;;1437   
                          ENDP

                  send_modem2 PROC
;;;1448   	
;;;1449   void send_modem2(char ch[])
0037e2  b570              PUSH     {r4-r6,lr}
;;;1450   	{	
0037e4  4604              MOV      r4,r0
;;;1451   						unsigned char i21;
;;;1452   						i21=0;
0037e6  2500              MOVS     r5,#0
;;;1453   						while ((*(ch+i21)) != '\0') // NULL
0037e8  e005              B        |L1.14326|
                  |L1.14314|
;;;1454   						{	
;;;1455   						// delay(1);
;;;1456   						 uart_putchar(UART2_BASE_PTR, (*(ch+i21)));
0037ea  5d61              LDRB     r1,[r4,r5]
0037ec  4838              LDR      r0,|L1.14544|
0037ee  f7fffffe          BL       uart_putchar
;;;1457   						 i21++;
0037f2  1c68              ADDS     r0,r5,#1
0037f4  b2c5              UXTB     r5,r0
                  |L1.14326|
0037f6  5d60              LDRB     r0,[r4,r5]            ;1453
0037f8  2800              CMP      r0,#0                 ;1453
0037fa  d1f6              BNE      |L1.14314|
;;;1458   						}
;;;1459   		
;;;1460   	}	
0037fc  bd70              POP      {r4-r6,pc}
;;;1461   	
                          ENDP

                  gsm_gps_sleep PROC
;;;1684   
;;;1685   void gsm_gps_sleep()
0037fe  b508              PUSH     {r3,lr}
;;;1686   {
;;;1687   	
;;;1688   sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
003800  4b34              LDR      r3,|L1.14548|
003802  4a35              LDR      r2,|L1.14552|
003804  4931              LDR      r1,|L1.14540|
003806  3160              ADDS     r1,r1,#0x60
003808  4834              LDR      r0,|L1.14556|
00380a  f7fffffe          BL       __2sprintf
;;;1689   send_GSM( at_ , "CONNECT", "ERROR" , "CONNECT",tmeout);										
00380e  4834              LDR      r0,|L1.14560|
003810  6800              LDR      r0,[r0,#0]  ; tmeout
003812  4b2e              LDR      r3,|L1.14540|
003814  3380              ADDS     r3,r3,#0x80
003816  4a25              LDR      r2,|L1.14508|
003818  3a90              SUBS     r2,r2,#0x90
00381a  4619              MOV      r1,r3
00381c  9000              STR      r0,[sp,#0]
00381e  482f              LDR      r0,|L1.14556|
003820  f7fffffe          BL       send_GSM
;;;1690   send_chunk();
003824  f7fffffe          BL       send_chunk
;;;1691   	//sleep modules;
;;;1692   //	do{
;;;1693   //				accel_read();
;;;1694   //				motion_samples = 0;
;;;1695   //				detect_motion();
;;;1696   //				
;;;1697   //	}while(motion != 1);
;;;1698   //	motion_samples = 0;
;;;1699   //wakeup modules;
;;;1700   
;;;1701   
;;;1702   
;;;1703   
;;;1704   }
003828  bd08              POP      {r3,pc}
;;;1705   
                          ENDP

                  SW1_init PROC
;;;86     
;;;87     void SW1_init(void){
00382a  482e              LDR      r0,|L1.14564|
;;;88     
;;;89     #ifdef CMSIS
;;;90     	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
00382c  6b80              LDR      r0,[r0,#0x38]
00382e  2101              MOVS     r1,#1
003830  02c9              LSLS     r1,r1,#11
003832  4308              ORRS     r0,r0,r1
003834  492b              LDR      r1,|L1.14564|
003836  6388              STR      r0,[r1,#0x38]
;;;91     	
;;;92     	PORTC_PCR3 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003838  482b              LDR      r0,|L1.14568|
00383a  492c              LDR      r1,|L1.14572|
00383c  60c8              STR      r0,[r1,#0xc]
;;;93     	
;;;94     	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;	//Turn on clock to PORTD module
00383e  4829              LDR      r0,|L1.14564|
003840  6b80              LDR      r0,[r0,#0x38]
003842  2101              MOVS     r1,#1
003844  0309              LSLS     r1,r1,#12
003846  4308              ORRS     r0,r0,r1
003848  4926              LDR      r1,|L1.14564|
00384a  6388              STR      r0,[r1,#0x38]
;;;95     	
;;;96     	PORTD_PCR6 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
00384c  4826              LDR      r0,|L1.14568|
00384e  1c40              ADDS     r0,r0,#1
003850  4927              LDR      r1,|L1.14576|
003852  6188              STR      r0,[r1,#0x18]
;;;97     	
;;;98     	PORTD_PCR0 = PORT_PCR_IRQC(10)|PORT_PCR_PE_MASK|PORT_PCR_PS_SHIFT|PORT_PCR_MUX(0x1);	//Configure SW1 for GPIO w/interrupt
003854  1e40              SUBS     r0,r0,#1
003856  6008              STR      r0,[r1,#0]
;;;99     	
;;;100    	
;;;101    	enable_irq(PORTD_IRQn);		//PORTD & PORTC share interrupt vector
003858  201f              MOVS     r0,#0x1f
00385a  2101              MOVS     r1,#1
00385c  4081              LSLS     r1,r1,r0
00385e  4a25              LDR      r2,|L1.14580|
003860  6011              STR      r1,[r2,#0]
003862  bf00              NOP      
;;;102    #else
;;;103               
;;;104            enable_irq(31);
;;;105            set_irq_priority(31, 1);
;;;106            
;;;107            SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;	//Turn on clock to PORTC module
;;;108            
;;;109            PORTC_PCR3 = PORT_PCR_ISF_MASK |PORT_PCR_MUX(0x1)| PORT_PCR_PS_MASK| PORT_PCR_PE_MASK| PORT_PCR_PFE_MASK| PORT_PCR_IRQC(10);
;;;110            
;;;111    #endif
;;;112    }
003864  4770              BX       lr
;;;113    
                          ENDP

                  LED_state PROC
;;;182    
;;;183    void LED_state(void){
003866  b500              PUSH     {lr}
;;;184    if(sleep_flag == 1)
003868  4823              LDR      r0,|L1.14584|
00386a  6800              LDR      r0,[r0,#0]  ; sleep_flag
00386c  2801              CMP      r0,#1
00386e  d102              BNE      |L1.14454|
;;;185    {stateCount=99;
003870  2063              MOVS     r0,#0x63
003872  4922              LDR      r1,|L1.14588|
003874  7008              STRB     r0,[r1,#0]
                  |L1.14454|
;;;186    }	
;;;187    			
;;;188    	switch(stateCount){
003876  4821              LDR      r0,|L1.14588|
003878  7800              LDRB     r0,[r0,#0]  ; stateCount
00387a  0003              MOVS     r3,r0
00387c  f7fffffe          BL       __ARM_common_switch8
003880  06040c42          DCB      0x06,0x04,0x0c,0x42
003884  4a525a62          DCB      0x4a,0x52,0x5a,0x62
;;;189    
;;;190    		
;;;191                case 0:     //Red
;;;192                       REDBAT_ON;
003888  2040              MOVS     r0,#0x40
00388a  491d              LDR      r1,|L1.14592|
00388c  6088              STR      r0,[r1,#8]
;;;193                       GREENBAT_OFF;
00388e  2080              MOVS     r0,#0x80
003890  6048              STR      r0,[r1,#4]
;;;194                       BLUEBAT_OFF;
003892  0040              LSLS     r0,r0,#1
003894  6048              STR      r0,[r1,#4]
;;;195                       break;
003896  e060              B        |L1.14682|
;;;196    
;;;197                case 1:	//Yellow
;;;198    		               REDBAT_ON;
003898  2040              MOVS     r0,#0x40
00389a  4919              LDR      r1,|L1.14592|
00389c  6088              STR      r0,[r1,#8]
;;;199    		               GREENBAT_ON;
00389e  2080              MOVS     r0,#0x80
0038a0  6088              STR      r0,[r1,#8]
;;;200    		               BLUEBAT_OFF;
0038a2  0040              LSLS     r0,r0,#1
0038a4  6048              STR      r0,[r1,#4]
;;;201    		               break;
0038a6  e058              B        |L1.14682|
                  |L1.14504|
                          DCD      0x4006b000
                  |L1.14508|
                          DCD      ||.text||+0x900
                  |L1.14512|
                          DCD      uart_string_gsm
                  |L1.14516|
                          DCD      tout
                  |L1.14520|
                          DCD      data
                  |L1.14524|
                          DCD      k
                  |L1.14528|
                          DCD      time
                  |L1.14532|
                          DCD      l
                  |L1.14536|
                          DCD      uart_string_gps
                  |L1.14540|
                          DCD      ||.text||+0xd60
                  |L1.14544|
                          DCD      0x4006c000
                  |L1.14548|
                          DCD      port
                  |L1.14552|
                          DCD      ||ip||
                  |L1.14556|
                          DCD      at_
                  |L1.14560|
                          DCD      tmeout
                  |L1.14564|
                          DCD      0x40048000
                  |L1.14568|
                          DCD      0x000a0102
                  |L1.14572|
                          DCD      0x4004b000
                  |L1.14576|
                          DCD      0x4004c000
                  |L1.14580|
                          DCD      0xe000e100
                  |L1.14584|
                          DCD      sleep_flag
                  |L1.14588|
                          DCD      stateCount
                  |L1.14592|
                          DCD      0x400ff080
;;;202    				
;;;203                case 2:	//Green
;;;204    		               REDBAT_OFF;
003904  2040              MOVS     r0,#0x40
003906  49fe              LDR      r1,|L1.15616|
003908  6048              STR      r0,[r1,#4]
;;;205    		               GREENBAT_ON;
00390a  2080              MOVS     r0,#0x80
00390c  6088              STR      r0,[r1,#8]
;;;206    		               BLUEBAT_OFF;
00390e  0040              LSLS     r0,r0,#1
003910  6048              STR      r0,[r1,#4]
;;;207    		               break;
003912  e022              B        |L1.14682|
;;;208    				
;;;209                case 3:	//Blue
;;;210    		               REDBAT_OFF;
003914  2040              MOVS     r0,#0x40
003916  49fa              LDR      r1,|L1.15616|
003918  6048              STR      r0,[r1,#4]
;;;211    		               GREENBAT_OFF;
00391a  2080              MOVS     r0,#0x80
00391c  6048              STR      r0,[r1,#4]
;;;212    		               BLUEBAT_ON;
00391e  0040              LSLS     r0,r0,#1
003920  6088              STR      r0,[r1,#8]
;;;213    		               break;
003922  e01a              B        |L1.14682|
;;;214    				
;;;215                case 4:	//Violet
;;;216    		               REDBAT_ON;
003924  2040              MOVS     r0,#0x40
003926  49f6              LDR      r1,|L1.15616|
003928  6088              STR      r0,[r1,#8]
;;;217    		               GREENBAT_OFF;
00392a  2080              MOVS     r0,#0x80
00392c  6048              STR      r0,[r1,#4]
;;;218    		               BLUEBAT_ON;
00392e  0040              LSLS     r0,r0,#1
003930  6088              STR      r0,[r1,#8]
;;;219    		               break;
003932  e012              B        |L1.14682|
;;;220    				
;;;221                case 5:	//White
;;;222    		              REDBAT_ON;
003934  2040              MOVS     r0,#0x40
003936  49f2              LDR      r1,|L1.15616|
003938  6088              STR      r0,[r1,#8]
;;;223    		              GREENBAT_ON;
00393a  2080              MOVS     r0,#0x80
00393c  6088              STR      r0,[r1,#8]
;;;224    		              BLUEBAT_ON;
00393e  0040              LSLS     r0,r0,#1
003940  6088              STR      r0,[r1,#8]
;;;225    		              break;
003942  e00a              B        |L1.14682|
;;;226    				
;;;227                default:	//Red
;;;228    							
;;;229    
;;;230    		              REDBAT_OFF;
003944  2040              MOVS     r0,#0x40
003946  49ee              LDR      r1,|L1.15616|
003948  6048              STR      r0,[r1,#4]
;;;231    		              GREENBAT_OFF;
00394a  2080              MOVS     r0,#0x80
00394c  6048              STR      r0,[r1,#4]
;;;232    		              BLUEBAT_OFF;
00394e  0040              LSLS     r0,r0,#1
003950  6048              STR      r0,[r1,#4]
;;;233    		              stateCount = 0;	//Reset state counter
003952  2000              MOVS     r0,#0
003954  49eb              LDR      r1,|L1.15620|
003956  7008              STRB     r0,[r1,#0]
;;;234    			      break;
003958  bf00              NOP      
                  |L1.14682|
00395a  bf00              NOP                            ;195
;;;235    
;;;236        }
;;;237    	
;;;238    }
00395c  bd00              POP      {pc}
;;;239    
                          ENDP

                  PORTD_IRQHandler PROC
;;;114    #ifdef CMSIS
;;;115    void PORTD_IRQHandler(void){
00395e  b510              PUSH     {r4,lr}
;;;116      
;;;117    	if(PORTC_ISFR & (1 << SW_PIN))		//Check for interrupt on PORTC Pin 3
003960  48e9              LDR      r0,|L1.15624|
003962  6a00              LDR      r0,[r0,#0x20]
003964  2108              MOVS     r1,#8
003966  4008              ANDS     r0,r0,r1
003968  2800              CMP      r0,#0
00396a  d014              BEQ      |L1.14742|
;;;118    	{
;;;119    		PORTC_ISFR |= (1 << SW_PIN);
00396c  48e6              LDR      r0,|L1.15624|
00396e  6a00              LDR      r0,[r0,#0x20]
003970  4308              ORRS     r0,r0,r1
003972  49e5              LDR      r1,|L1.15624|
003974  6208              STR      r0,[r1,#0x20]
;;;120    		gu32PortStatus |= (1 << PORTC_EVENT);	//Update port status variable
003976  48e5              LDR      r0,|L1.15628|
003978  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
00397a  2101              MOVS     r1,#1
00397c  4308              ORRS     r0,r0,r1
00397e  49e3              LDR      r1,|L1.15628|
003980  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;121    ringflag=1;
003982  2001              MOVS     r0,#1
003984  49e2              LDR      r1,|L1.15632|
003986  7008              STRB     r0,[r1,#0]
;;;122    send_SOS=1;	
003988  49e2              LDR      r1,|L1.15636|
00398a  6008              STR      r0,[r1,#0]  ; send_SOS
;;;123    /**************ISR follows******/	
;;;124     stateCount++;
00398c  48dd              LDR      r0,|L1.15620|
00398e  7800              LDRB     r0,[r0,#0]  ; stateCount
003990  1c40              ADDS     r0,r0,#1
003992  49dc              LDR      r1,|L1.15620|
003994  7008              STRB     r0,[r1,#0]
                  |L1.14742|
;;;125    	}
;;;126    	
;;;127    	if(PORTD_ISFR & (1 << 0))		//Check for interrupt on PORTD Pin 6
003996  48e0              LDR      r0,|L1.15640|
003998  6a00              LDR      r0,[r0,#0x20]
00399a  07c0              LSLS     r0,r0,#31
00399c  0fc0              LSRS     r0,r0,#31
00399e  2800              CMP      r0,#0
0039a0  d012              BEQ      |L1.14792|
;;;128    	{
;;;129    		PORTD_ISFR |= (1 << 0);
0039a2  48dd              LDR      r0,|L1.15640|
0039a4  6a00              LDR      r0,[r0,#0x20]
0039a6  2101              MOVS     r1,#1
0039a8  4308              ORRS     r0,r0,r1
0039aa  49db              LDR      r1,|L1.15640|
0039ac  6208              STR      r0,[r1,#0x20]
;;;130    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
0039ae  48d7              LDR      r0,|L1.15628|
0039b0  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
0039b2  2101              MOVS     r1,#1
0039b4  4308              ORRS     r0,r0,r1
0039b6  49d5              LDR      r1,|L1.15628|
0039b8  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;131    	
;;;132    /**************ISR follows******/	
;;;133    // stateCount++;
;;;134    ringflag=1;
0039ba  2001              MOVS     r0,#1
0039bc  49d4              LDR      r1,|L1.15632|
0039be  7008              STRB     r0,[r1,#0]
;;;135    send_SOS=1;		
0039c0  49d4              LDR      r1,|L1.15636|
0039c2  6008              STR      r0,[r1,#0]  ; send_SOS
;;;136    
;;;137    	// wakeup and reset
;;;138    	
;;;139    clear();	
0039c4  f7fffffe          BL       clear
                  |L1.14792|
;;;140    	}	
;;;141    	
;;;142    	
;;;143    	
;;;144    	
;;;145    	if(PORTD_ISFR & (1 << 6))		//Check for interrupt on PORTD Pin 6
0039c8  48d3              LDR      r0,|L1.15640|
0039ca  6a00              LDR      r0,[r0,#0x20]
0039cc  2140              MOVS     r1,#0x40
0039ce  4008              ANDS     r0,r0,r1
0039d0  2800              CMP      r0,#0
0039d2  d00f              BEQ      |L1.14836|
;;;146    	{
;;;147    		PORTD_ISFR |= (1 << 6);
0039d4  48d0              LDR      r0,|L1.15640|
0039d6  6a00              LDR      r0,[r0,#0x20]
0039d8  4308              ORRS     r0,r0,r1
0039da  49cf              LDR      r1,|L1.15640|
0039dc  6208              STR      r0,[r1,#0x20]
;;;148    		gu32PortStatus |= (1 << PORTD_EVENT);	//Update port status variable
0039de  48cb              LDR      r0,|L1.15628|
0039e0  6800              LDR      r0,[r0,#0]  ; gu32PortStatus
0039e2  2101              MOVS     r1,#1
0039e4  4308              ORRS     r0,r0,r1
0039e6  49c9              LDR      r1,|L1.15628|
0039e8  6008              STR      r0,[r1,#0]  ; gu32PortStatus
;;;149    	
;;;150    /**************ISR follows******/	
;;;151    // stateCount++;
;;;152    		
;;;153    ringflag=1;
0039ea  2001              MOVS     r0,#1
0039ec  49c8              LDR      r1,|L1.15632|
0039ee  7008              STRB     r0,[r1,#0]
;;;154    	// wakeup and reset
;;;155    	
;;;156    clear();	
0039f0  f7fffffe          BL       clear
                  |L1.14836|
;;;157    	}
;;;158    	
;;;159    	LED_state();
0039f4  f7fffffe          BL       LED_state
;;;160    }
0039f8  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  PORTC_action PROC
;;;162    void PORTC_action(void){
0039fa  4770              BX       lr
;;;163    }
;;;164    
                          ENDP

                  systick_init PROC
;;;7      
;;;8      void systick_init(void)
0039fc  2000              MOVS     r0,#0
;;;9      {
;;;10     		SYST_CVR = 0x0;	//clear current timer value
0039fe  49c7              LDR      r1,|L1.15644|
003a00  6188              STR      r0,[r1,#0x18]
;;;11         SYST_RVR = (8000000/200)-1;
003a02  48c7              LDR      r0,|L1.15648|
003a04  6148              STR      r0,[r1,#0x14]
;;;12         SYST_CSR = SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_ENABLE_MASK;   
003a06  2005              MOVS     r0,#5
003a08  6108              STR      r0,[r1,#0x10]
;;;13     	
;;;14     }
003a0a  4770              BX       lr
;;;15     
                          ENDP

                  systick_disable PROC
;;;16     void systick_disable(void)
003a0c  48c3              LDR      r0,|L1.15644|
;;;17     {
;;;18         SYST_CSR &= ~SysTick_CSR_ENABLE_MASK;
003a0e  6900              LDR      r0,[r0,#0x10]
003a10  0840              LSRS     r0,r0,#1
003a12  0040              LSLS     r0,r0,#1
003a14  49c1              LDR      r1,|L1.15644|
003a16  6108              STR      r0,[r1,#0x10]
;;;19     }
003a18  4770              BX       lr
;;;20     
                          ENDP

                  cal_systick_read_overhead PROC
;;;21     void cal_systick_read_overhead(void)
003a1a  b570              PUSH     {r4-r6,lr}
;;;22     {
;;;23       	uint32_t cnt_start_value;
;;;24         uint32_t cnt_end_value;
;;;25     	
;;;26     	cnt_start_value = SYST_CVR;
003a1c  48bf              LDR      r0,|L1.15644|
003a1e  6985              LDR      r5,[r0,#0x18]
;;;27       
;;;28         cnt_end_value = SYST_CVR;
003a20  6984              LDR      r4,[r0,#0x18]
;;;29     	
;;;30     	overhead = cnt_start_value - cnt_end_value;
003a22  1b28              SUBS     r0,r5,r4
003a24  49bf              LDR      r1,|L1.15652|
003a26  6008              STR      r0,[r1,#0]  ; overhead
;;;31     	
;;;32     #ifdef DEBUG_PRINT
;;;33     	printf("systick start value: 0x%x\n\r", cnt_start_value);
003a28  4629              MOV      r1,r5
003a2a  a0bf              ADR      r0,|L1.15656|
003a2c  f7fffffe          BL       __2printf
;;;34     	printf("systick end value: 0x%x\n\r", cnt_end_value);
003a30  4621              MOV      r1,r4
003a32  a0c4              ADR      r0,|L1.15684|
003a34  f7fffffe          BL       __2printf
;;;35     	printf("systick current value read overhead: 0x%x\n\r", overhead);
003a38  48ba              LDR      r0,|L1.15652|
003a3a  6801              LDR      r1,[r0,#0]  ; overhead
003a3c  a0c8              ADR      r0,|L1.15712|
003a3e  f7fffffe          BL       __2printf
;;;36     #endif
;;;37     
;;;38     }
003a42  bd70              POP      {r4-r6,pc}
;;;14     #include "stdlib.h"
                          ENDP

                  delay2 PROC
;;;91     }
;;;92      void delay2(int delaytime)
003a44  e00c              B        |L1.14944|
                  |L1.14918|
;;;93     {
;;;94      while(delaytime--)
;;;95         {for(i=5000;i>0;i--);  // about 1 ms
003a46  49d1              LDR      r1,|L1.15756|
003a48  4ad1              LDR      r2,|L1.15760|
003a4a  6011              STR      r1,[r2,#0]  ; i
003a4c  e004              B        |L1.14936|
                  |L1.14926|
003a4e  49d0              LDR      r1,|L1.15760|
003a50  6809              LDR      r1,[r1,#0]  ; i
003a52  1e49              SUBS     r1,r1,#1
003a54  4ace              LDR      r2,|L1.15760|
003a56  6011              STR      r1,[r2,#0]  ; i
                  |L1.14936|
003a58  49cd              LDR      r1,|L1.15760|
003a5a  6809              LDR      r1,[r1,#0]  ; i
003a5c  2900              CMP      r1,#0
003a5e  dcf6              BGT      |L1.14926|
                  |L1.14944|
003a60  4601              MOV      r1,r0                 ;94
003a62  1e40              SUBS     r0,r0,#1              ;94
003a64  2900              CMP      r1,#0                 ;94
003a66  d1ee              BNE      |L1.14918|
;;;96         }
;;;97     }
003a68  4770              BX       lr
;;;98             
                          ENDP

                  main PROC
;;;137    /********************************************************************/
;;;138    int main (void)
003a6a  b51c              PUSH     {r2-r4,lr}
;;;139    {
;;;140    
;;;141    
;;;142    
;;;143    //int_erval=10;
;;;144    		memset(data,0,strlen(data));
003a6c  48c9              LDR      r0,|L1.15764|
003a6e  f7fffffe          BL       strlen
003a72  4601              MOV      r1,r0
003a74  9001              STR      r0,[sp,#4]
003a76  48c7              LDR      r0,|L1.15764|
003a78  f7fffffe          BL       __aeabi_memclr
;;;145    		memset(data2,0,strlen(data2));
003a7c  48c6              LDR      r0,|L1.15768|
003a7e  f7fffffe          BL       strlen
003a82  4601              MOV      r1,r0
003a84  9001              STR      r0,[sp,#4]
003a86  48c4              LDR      r0,|L1.15768|
003a88  f7fffffe          BL       __aeabi_memclr
;;;146    		memset(ip,0,strlen(ip));
003a8c  48c3              LDR      r0,|L1.15772|
003a8e  f7fffffe          BL       strlen
003a92  4601              MOV      r1,r0
003a94  9001              STR      r0,[sp,#4]
003a96  48c1              LDR      r0,|L1.15772|
003a98  f7fffffe          BL       __aeabi_memclr
;;;147    		memset(port,0,strlen(ip));
003a9c  48bf              LDR      r0,|L1.15772|
003a9e  f7fffffe          BL       strlen
003aa2  4601              MOV      r1,r0
003aa4  9001              STR      r0,[sp,#4]
003aa6  48be              LDR      r0,|L1.15776|
003aa8  f7fffffe          BL       __aeabi_memclr
;;;148    
;;;149    	
;;;150    start();
003aac  f7fffffe          BL       start
;;;151    systick_init();	
003ab0  f7fffffe          BL       systick_init
;;;152    #ifdef CMSIS  // If we are conforming to CMSIS, we need to call start here
;;;153    
;;;154    #endif
;;;155    
;;;156    int_erval=5;
003ab4  2005              MOVS     r0,#5
003ab6  49bb              LDR      r1,|L1.15780|
003ab8  6008              STR      r0,[r1,#0]  ; int_erval
;;;157    
;;;158    
;;;159    	LED_init();		//Initialize GPIO for LEDs
003aba  f7fffffe          BL       LED_init
;;;160    	RELAY_init();		//Initialize GPIO for LEDs
003abe  bf00              NOP      
003ac0  48b9              LDR      r0,|L1.15784|
003ac2  6b80              LDR      r0,[r0,#0x38]
003ac4  2101              MOVS     r1,#1
003ac6  0249              LSLS     r1,r1,#9
003ac8  4308              ORRS     r0,r0,r1
003aca  49b7              LDR      r1,|L1.15784|
003acc  6388              STR      r0,[r1,#0x38]
003ace  1588              ASRS     r0,r1,#22
003ad0  49b6              LDR      r1,|L1.15788|
003ad2  6048              STR      r0,[r1,#4]
003ad4  6088              STR      r0,[r1,#8]
003ad6  488a              LDR      r0,|L1.15616|
003ad8  3880              SUBS     r0,r0,#0x80
003ada  6840              LDR      r0,[r0,#4]
003adc  2106              MOVS     r1,#6
003ade  4308              ORRS     r0,r0,r1
003ae0  4987              LDR      r1,|L1.15616|
003ae2  3980              SUBS     r1,r1,#0x80
003ae4  6048              STR      r0,[r1,#4]
003ae6  4608              MOV      r0,r1
003ae8  6940              LDR      r0,[r0,#0x14]
003aea  2106              MOVS     r1,#6
003aec  4308              ORRS     r0,r0,r1
003aee  4984              LDR      r1,|L1.15616|
003af0  3980              SUBS     r1,r1,#0x80
003af2  6148              STR      r0,[r1,#0x14]
003af4  2002              MOVS     r0,#2
003af6  6088              STR      r0,[r1,#8]
003af8  2004              MOVS     r0,#4
003afa  6088              STR      r0,[r1,#8]
003afc  bf00              NOP      
;;;161    	SW1_init();		//Initialize GPIO for SW1 w/ interrupt
003afe  f7fffffe          BL       SW1_init
;;;162    send_SOS=0;	
003b02  2000              MOVS     r0,#0
003b04  4983              LDR      r1,|L1.15636|
003b06  6008              STR      r0,[r1,#0]  ; send_SOS
;;;163    	//accel_init();
;;;164    	sleep_flag=0;
003b08  49a9              LDR      r1,|L1.15792|
003b0a  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;165    	DTR_OFF;	
003b0c  2080              MOVS     r0,#0x80
003b0e  497c              LDR      r1,|L1.15616|
003b10  3140              ADDS     r1,r1,#0x40
003b12  6088              STR      r0,[r1,#8]
;;;166    	lptmr_init(1000, 1);	
003b14  2101              MOVS     r1,#1
003b16  207d              MOVS     r0,#0x7d
003b18  00c0              LSLS     r0,r0,#3
003b1a  f7fffffe          BL       lptmr_init
;;;167    	ADC_Init();
003b1e  bf00              NOP      
003b20  48a1              LDR      r0,|L1.15784|
003b22  6bc0              LDR      r0,[r0,#0x3c]
003b24  2101              MOVS     r1,#1
003b26  06c9              LSLS     r1,r1,#27
003b28  4308              ORRS     r0,r0,r1
003b2a  499f              LDR      r1,|L1.15784|
003b2c  63c8              STR      r0,[r1,#0x3c]
003b2e  202d              MOVS     r0,#0x2d
003b30  49a0              LDR      r1,|L1.15796|
003b32  6088              STR      r0,[r1,#8]
003b34  2000              MOVS     r0,#0
003b36  60c8              STR      r0,[r1,#0xc]
003b38  6208              STR      r0,[r1,#0x20]
003b3a  4608              MOV      r0,r1
003b3c  6a40              LDR      r0,[r0,#0x24]
003b3e  2108              MOVS     r1,#8
003b40  4388              BICS     r0,r0,r1
003b42  499c              LDR      r1,|L1.15796|
003b44  6248              STR      r0,[r1,#0x24]
003b46  bf00              NOP      
;;;168    	
;;;169    //C0
;;;170    
;;;171    //SCB->AIRCR = 0x05fA0000;
;;;172    
;;;173    	int_erval=0;
003b48  2000              MOVS     r0,#0
003b4a  4996              LDR      r1,|L1.15780|
003b4c  6008              STR      r0,[r1,#0]  ; int_erval
;;;174    
;;;175    		uart_putchar(UART1_BASE_PTR,0xA);
003b4e  210a              MOVS     r1,#0xa
003b50  4899              LDR      r0,|L1.15800|
003b52  f7fffffe          BL       uart_putchar
;;;176    		uart_putchar(UART1_BASE_PTR,0x1A);			
003b56  211a              MOVS     r1,#0x1a
003b58  4897              LDR      r0,|L1.15800|
003b5a  f7fffffe          BL       uart_putchar
;;;177    msg_sim800();
003b5e  f7fffffe          BL       msg_sim800
;;;178    send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",2);  
003b62  2002              MOVS     r0,#2
003b64  4b95              LDR      r3,|L1.15804|
003b66  4a96              LDR      r2,|L1.15808|
003b68  4611              MOV      r1,r2
003b6a  3114              ADDS     r1,r1,#0x14
003b6c  9000              STR      r0,[sp,#0]
003b6e  a095              ADR      r0,|L1.15812|
003b70  f7fffffe          BL       send_GSM
;;;179     delay(100); 
003b74  2064              MOVS     r0,#0x64
003b76  f7fffffe          BL       delay
;;;180    
;;;181    clear();delay(100);
003b7a  f7fffffe          BL       clear
003b7e  2064              MOVS     r0,#0x64
003b80  f7fffffe          BL       delay
;;;182    msg_sim800();
003b84  f7fffffe          BL       msg_sim800
;;;183    
;;;184    GPS_COLLECT();
003b88  f7fffffe          BL       GPS_COLLECT
;;;185    strreplace(data, ",L,", ",H,");
003b8c  4a8c              LDR      r2,|L1.15808|
003b8e  3a34              SUBS     r2,r2,#0x34
003b90  1d11              ADDS     r1,r2,#4
003b92  4880              LDR      r0,|L1.15764|
003b94  f7fffffe          BL       strreplace
;;;186    delay(5000);
003b98  487c              LDR      r0,|L1.15756|
003b9a  f7fffffe          BL       delay
;;;187    
;;;188    int_erval=5;
003b9e  2005              MOVS     r0,#5
003ba0  4980              LDR      r1,|L1.15780|
003ba2  6008              STR      r0,[r1,#0]  ; int_erval
;;;189    
;;;190    //if(!(strstr(uart_string_gsm, "OK")|| strstr(uart_string_gsm, "ERROR")))
;;;191    //{HardFault_Handler();}
;;;192    ignread();
003ba4  f7fffffe          BL       ignread
;;;193    msg_sim800();
003ba8  f7fffffe          BL       msg_sim800
;;;194    
;;;195    //	saveapn();
;;;196    	
;;;197    readapn();
003bac  f7fffffe          BL       readapn
;;;198    
;;;199    //HardFault_Handler();
;;;200    
;;;201    //RESET_ON;
;;;202    
;;;203    
;;;204    //send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
;;;205    clear();	
003bb0  f7fffffe          BL       clear
;;;206    //delay(10);
;;;207    
;;;208    //send_GSM("\r\nAT+CFUN=1\r\n", "Ready", "NOT INSERTED" , "ERROR",7);	
;;;209    
;;;210    msg_sim800();
003bb4  f7fffffe          BL       msg_sim800
;;;211    	
;;;212    
;;;213    //GPS_COLLECT();
;;;214    //  strreplace(data, ",L,", ",H,");	
;;;215    //	
;;;216    
;;;217    GPS_COLLECT();
003bb8  f7fffffe          BL       GPS_COLLECT
;;;218    strreplace(data, ",L,", ",H,");
003bbc  4a80              LDR      r2,|L1.15808|
003bbe  3a34              SUBS     r2,r2,#0x34
003bc0  1d11              ADDS     r1,r2,#4
003bc2  4874              LDR      r0,|L1.15764|
003bc4  f7fffffe          BL       strreplace
;;;219    
;;;220    msg_sim800();
003bc8  f7fffffe          BL       msg_sim800
;;;221    
;;;222    stateCount=3;
003bcc  2003              MOVS     r0,#3
003bce  494d              LDR      r1,|L1.15620|
003bd0  7008              STRB     r0,[r1,#0]
;;;223    LED_state();
003bd2  f7fffffe          BL       LED_state
;;;224    
;;;225    
;;;226    
;;;227    
;;;228    
;;;229    	
;;;230    //send_modem2("$PMTK225,0*2B");
;;;231    //while(!strstr(uart_string_gsm,"OK\r\n"));
;;;232    
;;;233    //bat_cind();
;;;234    //delay(1000);
;;;235    
;;;236    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003bd6  487d              LDR      r0,|L1.15820|
003bd8  6800              LDR      r0,[r0,#0]  ; tmeout
003bda  4b78              LDR      r3,|L1.15804|
003bdc  4a78              LDR      r2,|L1.15808|
003bde  4611              MOV      r1,r2
003be0  3114              ADDS     r1,r1,#0x14
003be2  9000              STR      r0,[sp,#0]
003be4  a07a              ADR      r0,|L1.15824|
003be6  f7fffffe          BL       send_GSM
;;;237    //delay(10);
;;;238    
;;;239    send_GSM("\n\nATS0=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003bea  4878              LDR      r0,|L1.15820|
003bec  6800              LDR      r0,[r0,#0]  ; tmeout
003bee  4b73              LDR      r3,|L1.15804|
003bf0  4a73              LDR      r2,|L1.15808|
003bf2  4611              MOV      r1,r2
003bf4  3114              ADDS     r1,r1,#0x14
003bf6  9000              STR      r0,[sp,#0]
003bf8  a078              ADR      r0,|L1.15836|
003bfa  f7fffffe          BL       send_GSM
;;;240    	msg_sim800(); 
003bfe  f7fffffe          BL       msg_sim800
;;;241    
;;;242    send_GSM("\n\nAT&F\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003c02  4872              LDR      r0,|L1.15820|
003c04  6800              LDR      r0,[r0,#0]  ; tmeout
003c06  4b6d              LDR      r3,|L1.15804|
003c08  4a6d              LDR      r2,|L1.15808|
003c0a  4611              MOV      r1,r2
003c0c  3114              ADDS     r1,r1,#0x14
003c0e  9000              STR      r0,[sp,#0]
003c10  a075              ADR      r0,|L1.15848|
003c12  f7fffffe          BL       send_GSM
;;;243    
;;;244    
;;;245    send_GSM("\n\nAT&D\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout); 	
003c16  486d              LDR      r0,|L1.15820|
003c18  6800              LDR      r0,[r0,#0]  ; tmeout
003c1a  4b68              LDR      r3,|L1.15804|
003c1c  4a68              LDR      r2,|L1.15808|
003c1e  4611              MOV      r1,r2
003c20  3114              ADDS     r1,r1,#0x14
003c22  9000              STR      r0,[sp,#0]
003c24  a073              ADR      r0,|L1.15860|
003c26  f7fffffe          BL       send_GSM
;;;246    
;;;247    
;;;248    send_GSM("\n\nAT+IFC=0,0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c2a  4868              LDR      r0,|L1.15820|
003c2c  6800              LDR      r0,[r0,#0]  ; tmeout
003c2e  4b63              LDR      r3,|L1.15804|
003c30  4a63              LDR      r2,|L1.15808|
003c32  4611              MOV      r1,r2
003c34  3114              ADDS     r1,r1,#0x14
003c36  9000              STR      r0,[sp,#0]
003c38  a071              ADR      r0,|L1.15872|
003c3a  f7fffffe          BL       send_GSM
;;;249    
;;;250    	msg_sim800(); 
003c3e  f7fffffe          BL       msg_sim800
;;;251    
;;;252    send_GSM("\n\nAT+CIPQSEND?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c42  4862              LDR      r0,|L1.15820|
003c44  6800              LDR      r0,[r0,#0]  ; tmeout
003c46  4b5d              LDR      r3,|L1.15804|
003c48  4a5d              LDR      r2,|L1.15808|
003c4a  4611              MOV      r1,r2
003c4c  3114              ADDS     r1,r1,#0x14
003c4e  9000              STR      r0,[sp,#0]
003c50  a06f              ADR      r0,|L1.15888|
003c52  f7fffffe          BL       send_GSM
;;;253    
;;;254    send_GSM("\n\nAT+CIPQSEND=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c56  485d              LDR      r0,|L1.15820|
003c58  6800              LDR      r0,[r0,#0]  ; tmeout
003c5a  4b58              LDR      r3,|L1.15804|
003c5c  4a58              LDR      r2,|L1.15808|
003c5e  4611              MOV      r1,r2
003c60  3114              ADDS     r1,r1,#0x14
003c62  9000              STR      r0,[sp,#0]
003c64  a06f              ADR      r0,|L1.15908|
003c66  f7fffffe          BL       send_GSM
;;;255    
;;;256    //delay(10);
;;;257    
;;;258    
;;;259    
;;;260    
;;;261    //delay(10);
;;;262    send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c6a  4858              LDR      r0,|L1.15820|
003c6c  6800              LDR      r0,[r0,#0]  ; tmeout
003c6e  4b53              LDR      r3,|L1.15804|
003c70  4a53              LDR      r2,|L1.15808|
003c72  4611              MOV      r1,r2
003c74  3114              ADDS     r1,r1,#0x14
003c76  9000              STR      r0,[sp,#0]
003c78  a06f              ADR      r0,|L1.15928|
003c7a  f7fffffe          BL       send_GSM
;;;263    
;;;264    
;;;265    send_GSM("\n\nAT+SD2PCM=0\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c7e  4853              LDR      r0,|L1.15820|
003c80  6800              LDR      r0,[r0,#0]  ; tmeout
003c82  4b4e              LDR      r3,|L1.15804|
003c84  4a4e              LDR      r2,|L1.15808|
003c86  4611              MOV      r1,r2
003c88  3114              ADDS     r1,r1,#0x14
003c8a  9000              STR      r0,[sp,#0]
003c8c  a06f              ADR      r0,|L1.15948|
003c8e  f7fffffe          BL       send_GSM
;;;266    //delay(10);	
;;;267    
;;;268    send_GSM("\n\nAT&W\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003c92  484e              LDR      r0,|L1.15820|
003c94  6800              LDR      r0,[r0,#0]  ; tmeout
003c96  4b49              LDR      r3,|L1.15804|
003c98  4a49              LDR      r2,|L1.15808|
003c9a  4611              MOV      r1,r2
003c9c  3114              ADDS     r1,r1,#0x14
003c9e  9000              STR      r0,[sp,#0]
003ca0  a04b              ADR      r0,|L1.15824|
003ca2  f7fffffe          BL       send_GSM
;;;269    delay(10);	
003ca6  200a              MOVS     r0,#0xa
003ca8  f7fffffe          BL       delay
;;;270    send_GSM("\n\nAT+FSDRIVE=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003cac  4847              LDR      r0,|L1.15820|
003cae  6800              LDR      r0,[r0,#0]  ; tmeout
003cb0  4b42              LDR      r3,|L1.15804|
003cb2  4a43              LDR      r2,|L1.15808|
003cb4  4611              MOV      r1,r2
003cb6  3114              ADDS     r1,r1,#0x14
003cb8  9000              STR      r0,[sp,#0]
003cba  a068              ADR      r0,|L1.15964|
003cbc  f7fffffe          BL       send_GSM
;;;271    clear();
003cc0  f7fffffe          BL       clear
;;;272    delay(10);	
003cc4  200a              MOVS     r0,#0xa
003cc6  f7fffffe          BL       delay
;;;273    //;	
;;;274    //send_GSM("\n\nAT+FSCREATE=D:\\LOG.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;275    
;;;276    
;;;277    
;;;278    send_GSM("\n\nAT+FSMEM\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003cca  4840              LDR      r0,|L1.15820|
003ccc  6800              LDR      r0,[r0,#0]  ; tmeout
003cce  4b3b              LDR      r3,|L1.15804|
003cd0  4a3b              LDR      r2,|L1.15808|
003cd2  4611              MOV      r1,r2
003cd4  3114              ADDS     r1,r1,#0x14
003cd6  9000              STR      r0,[sp,#0]
003cd8  a065              ADR      r0,|L1.15984|
003cda  f7fffffe          BL       send_GSM
;;;279    	GPS_COLLECT();
003cde  f7fffffe          BL       GPS_COLLECT
;;;280    	//strreplace(data, char chr, char repl_chr);
;;;281    
;;;282    strreplace(data, ",L,", ",H,");
003ce2  4a37              LDR      r2,|L1.15808|
003ce4  3a34              SUBS     r2,r2,#0x34
003ce6  1d11              ADDS     r1,r2,#4
003ce8  482a              LDR      r0,|L1.15764|
003cea  f7fffffe          BL       strreplace
;;;283    if(strstr(uart_string_gsm,"D:")){
003cee  a164              ADR      r1,|L1.16000|
003cf0  4864              LDR      r0,|L1.16004|
003cf2  f7fffffe          BL       strstr
003cf6  2800              CMP      r0,#0
003cf8  d000              BEQ      |L1.15612|
;;;284    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003cfa  e0c5              B        |L1.16008|
                  |L1.15612|
003cfc  e0e5              B        |L1.16074|
003cfe  0000              DCW      0x0000
                  |L1.15616|
                          DCD      0x400ff080
                  |L1.15620|
                          DCD      stateCount
                  |L1.15624|
                          DCD      0x4004b080
                  |L1.15628|
                          DCD      gu32PortStatus
                  |L1.15632|
                          DCD      ringflag
                  |L1.15636|
                          DCD      send_SOS
                  |L1.15640|
                          DCD      0x4004c080
                  |L1.15644|
                          DCD      0xe000e000
                  |L1.15648|
                          DCD      0x00009c3f
                  |L1.15652|
                          DCD      overhead
                  |L1.15656|
003d28  73797374          DCB      "systick start value: 0x%x\n\r",0
003d2c  69636b20
003d30  73746172
003d34  74207661
003d38  6c75653a
003d3c  20307825
003d40  780a0d00
                  |L1.15684|
003d44  73797374          DCB      "systick end value: 0x%x\n\r",0
003d48  69636b20
003d4c  656e6420
003d50  76616c75
003d54  653a2030
003d58  7825780a
003d5c  0d00    
003d5e  00                DCB      0
003d5f  00                DCB      0
                  |L1.15712|
003d60  73797374          DCB      "systick current value read overhead: 0x%x\n\r",0
003d64  69636b20
003d68  63757272
003d6c  656e7420
003d70  76616c75
003d74  65207265
003d78  6164206f
003d7c  76657268
003d80  6561643a
003d84  20307825
003d88  780a0d00
                  |L1.15756|
                          DCD      0x00001388
                  |L1.15760|
                          DCD      i
                  |L1.15764|
                          DCD      data
                  |L1.15768|
                          DCD      data2
                  |L1.15772|
                          DCD      ||ip||
                  |L1.15776|
                          DCD      port
                  |L1.15780|
                          DCD      int_erval
                  |L1.15784|
                          DCD      0x40048000
                  |L1.15788|
                          DCD      0x40049000
                  |L1.15792|
                          DCD      sleep_flag
                  |L1.15796|
                          DCD      0x4003b000
                  |L1.15800|
                          DCD      0x4006b000
                  |L1.15804|
                          DCD      ||.text||+0xd60
                  |L1.15808|
                          DCD      ||.text||+0x8ec
                  |L1.15812|
003dc4  0a0a4154          DCB      "\n\nAT\r\n",0
003dc8  0d0a00  
003dcb  00                DCB      0
                  |L1.15820|
                          DCD      tmeout
                  |L1.15824|
003dd0  0a0a4154          DCB      "\n\nAT&W\r\n",0
003dd4  26570d0a
003dd8  00      
003dd9  00                DCB      0
003dda  00                DCB      0
003ddb  00                DCB      0
                  |L1.15836|
003ddc  0a0a4154          DCB      "\n\nATS0=2\r\n",0
003de0  53303d32
003de4  0d0a00  
003de7  00                DCB      0
                  |L1.15848|
003de8  0a0a4154          DCB      "\n\nAT&F\r\n",0
003dec  26460d0a
003df0  00      
003df1  00                DCB      0
003df2  00                DCB      0
003df3  00                DCB      0
                  |L1.15860|
003df4  0a0a4154          DCB      "\n\nAT&D\r\n",0
003df8  26440d0a
003dfc  00      
003dfd  00                DCB      0
003dfe  00                DCB      0
003dff  00                DCB      0
                  |L1.15872|
003e00  0a0a4154          DCB      "\n\nAT+IFC=0,0\r\n",0
003e04  2b494643
003e08  3d302c30
003e0c  0d0a00  
003e0f  00                DCB      0
                  |L1.15888|
003e10  0a0a4154          DCB      "\n\nAT+CIPQSEND?\r\n",0
003e14  2b434950
003e18  5153454e
003e1c  443f0d0a
003e20  00      
003e21  00                DCB      0
003e22  00                DCB      0
003e23  00                DCB      0
                  |L1.15908|
003e24  0a0a4154          DCB      "\n\nAT+CIPQSEND=0\r\n",0
003e28  2b434950
003e2c  5153454e
003e30  443d300d
003e34  0a00    
003e36  00                DCB      0
003e37  00                DCB      0
                  |L1.15928|
003e38  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
003e3c  2b435042
003e40  533d2253
003e44  4d220d0a
003e48  00      
003e49  00                DCB      0
003e4a  00                DCB      0
003e4b  00                DCB      0
                  |L1.15948|
003e4c  0a0a4154          DCB      "\n\nAT+SD2PCM=0\r\n",0
003e50  2b534432
003e54  50434d3d
003e58  300d0a00
                  |L1.15964|
003e5c  0a0a4154          DCB      "\n\nAT+FSDRIVE=1\r\n",0
003e60  2b465344
003e64  52495645
003e68  3d310d0a
003e6c  00      
003e6d  00                DCB      0
003e6e  00                DCB      0
003e6f  00                DCB      0
                  |L1.15984|
003e70  0a0a4154          DCB      "\n\nAT+FSMEM\r\n",0
003e74  2b46534d
003e78  454d0d0a
003e7c  00      
003e7d  00                DCB      0
003e7e  00                DCB      0
003e7f  00                DCB      0
                  |L1.16000|
003e80  443a00            DCB      "D:",0
003e83  00                DCB      0
                  |L1.16004|
                          DCD      uart_string_gsm
                  |L1.16008|
003e88  48f0              LDR      r0,|L1.16972|
003e8a  6800              LDR      r0,[r0,#0]  ; tmeout
003e8c  4bf0              LDR      r3,|L1.16976|
003e8e  4af1              LDR      r2,|L1.16980|
003e90  4611              MOV      r1,r2
003e92  3114              ADDS     r1,r1,#0x14
003e94  9000              STR      r0,[sp,#0]
003e96  a0f0              ADR      r0,|L1.16984|
003e98  f7fffffe          BL       send_GSM
;;;285    	
;;;286    memset(at_,0,100);
003e9c  2164              MOVS     r1,#0x64
003e9e  48f8              LDR      r0,|L1.17024|
003ea0  f7fffffe          BL       __aeabi_memclr
;;;287    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003ea4  2202              MOVS     r2,#2
003ea6  a1f7              ADR      r1,|L1.17028|
003ea8  48f5              LDR      r0,|L1.17024|
003eaa  f7fffffe          BL       __2sprintf
;;;288    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003eae  200a              MOVS     r0,#0xa
003eb0  4be7              LDR      r3,|L1.16976|
003eb2  4ae8              LDR      r2,|L1.16980|
003eb4  a1fe              ADR      r1,|L1.17072|
003eb6  9000              STR      r0,[sp,#0]
003eb8  48f1              LDR      r0,|L1.17024|
003eba  f7fffffe          BL       send_GSM
;;;289    	
;;;290    clear();
003ebe  f7fffffe          BL       clear
;;;291    send_modem("D:");	
003ec2  a0fc              ADR      r0,|L1.17076|
003ec4  f7fffffe          BL       send_modem
003ec8  e01f              B        |L1.16138|
                  |L1.16074|
;;;292    	
;;;293    }
;;;294    else{
;;;295    send_GSM("\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003eca  48e0              LDR      r0,|L1.16972|
003ecc  6800              LDR      r0,[r0,#0]  ; tmeout
003ece  4be0              LDR      r3,|L1.16976|
003ed0  4ae0              LDR      r2,|L1.16980|
003ed2  4611              MOV      r1,r2
003ed4  3114              ADDS     r1,r1,#0x14
003ed6  9000              STR      r0,[sp,#0]
003ed8  a0df              ADR      r0,|L1.16984|
003eda  f7fffffe          BL       send_GSM
;;;296    	
;;;297    memset(at_,0,100);
003ede  2164              MOVS     r1,#0x64
003ee0  48e7              LDR      r0,|L1.17024|
003ee2  f7fffffe          BL       __aeabi_memclr
;;;298    sprintf(at_,"\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",2);	
003ee6  2202              MOVS     r2,#2
003ee8  a1e6              ADR      r1,|L1.17028|
003eea  48e5              LDR      r0,|L1.17024|
003eec  f7fffffe          BL       __2sprintf
;;;299    send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
003ef0  200a              MOVS     r0,#0xa
003ef2  4bd7              LDR      r3,|L1.16976|
003ef4  4ad7              LDR      r2,|L1.16980|
003ef6  a1ee              ADR      r1,|L1.17072|
003ef8  9000              STR      r0,[sp,#0]
003efa  48e1              LDR      r0,|L1.17024|
003efc  f7fffffe          BL       send_GSM
;;;300    	
;;;301    clear();
003f00  f7fffffe          BL       clear
;;;302    send_modem("C:");		
003f04  a0ec              ADR      r0,|L1.17080|
003f06  f7fffffe          BL       send_modem
                  |L1.16138|
;;;303    	
;;;304    }	
;;;305    //delay(10);
;;;306    
;;;307    send_GSM("\n\nATS0=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f0a  48d0              LDR      r0,|L1.16972|
003f0c  6800              LDR      r0,[r0,#0]  ; tmeout
003f0e  4bd0              LDR      r3,|L1.16976|
003f10  4ad0              LDR      r2,|L1.16980|
003f12  4611              MOV      r1,r2
003f14  3114              ADDS     r1,r1,#0x14
003f16  9000              STR      r0,[sp,#0]
003f18  a0e8              ADR      r0,|L1.17084|
003f1a  f7fffffe          BL       send_GSM
;;;308    
;;;309    
;;;310    send_GSM("\n\nAT+CSCLK=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f1e  48cb              LDR      r0,|L1.16972|
003f20  6800              LDR      r0,[r0,#0]  ; tmeout
003f22  4bcb              LDR      r3,|L1.16976|
003f24  4acb              LDR      r2,|L1.16980|
003f26  4611              MOV      r1,r2
003f28  3114              ADDS     r1,r1,#0x14
003f2a  9000              STR      r0,[sp,#0]
003f2c  a0e6              ADR      r0,|L1.17096|
003f2e  f7fffffe          BL       send_GSM
;;;311    
;;;312    
;;;313    send_GSM("\r\n\r\nAT+CMGD=1,4\r\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
003f32  48c6              LDR      r0,|L1.16972|
003f34  6800              LDR      r0,[r0,#0]  ; tmeout
003f36  4bc6              LDR      r3,|L1.16976|
003f38  4ac6              LDR      r2,|L1.16980|
003f3a  4611              MOV      r1,r2
003f3c  3114              ADDS     r1,r1,#0x14
003f3e  9000              STR      r0,[sp,#0]
003f40  a0e5              ADR      r0,|L1.17112|
003f42  f7fffffe          BL       send_GSM
;;;314    
;;;315    
;;;316    //send_GSM("\n\nAT+CPBW=5,\"0\",129,\"OWNER5\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;317    
;;;318    
;;;319    //send_GSM("\n\nAT+CPBW=6,\"0\",129,\"OWNER6\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;320    
;;;321    ignread();
003f46  f7fffffe          BL       ignread
;;;322    readapn();
003f4a  f7fffffe          BL       readapn
;;;323    readcursor();
003f4e  f7fffffe          BL       readcursor
;;;324    read_licenceplate();
003f52  bf00              NOP      
003f54  2164              MOVS     r1,#0x64
003f56  48ca              LDR      r0,|L1.17024|
003f58  f7fffffe          BL       __aeabi_memclr
003f5c  49e4              LDR      r1,|L1.17136|
003f5e  48c8              LDR      r0,|L1.17024|
003f60  f7fffffe          BL       __2sprintf
003f64  200a              MOVS     r0,#0xa
003f66  4be3              LDR      r3,|L1.17140|
003f68  4ae3              LDR      r2,|L1.17144|
003f6a  49e4              LDR      r1,|L1.17148|
003f6c  9000              STR      r0,[sp,#0]
003f6e  48c4              LDR      r0,|L1.17024|
003f70  f7fffffe          BL       send_GSM
003f74  48e2              LDR      r0,|L1.17152|
003f76  217c              MOVS     r1,#0x7c
003f78  460b              MOV      r3,r1
003f7a  2203              MOVS     r2,#3
003f7c  9100              STR      r1,[sp,#0]
003f7e  9001              STR      r0,[sp,#4]
003f80  2102              MOVS     r1,#2
003f82  48e0              LDR      r0,|L1.17156|
003f84  f7fffffe          BL       parse_g
003f88  bf00              NOP      
;;;325    read_interval();
003f8a  f7fffffe          BL       read_interval
;;;326    send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
003f8e  48af              LDR      r0,|L1.16972|
003f90  6800              LDR      r0,[r0,#0]  ; tmeout
003f92  4baf              LDR      r3,|L1.16976|
003f94  4aaf              LDR      r2,|L1.16980|
003f96  4611              MOV      r1,r2
003f98  3114              ADDS     r1,r1,#0x14
003f9a  9000              STR      r0,[sp,#0]
003f9c  a0da              ADR      r0,|L1.17160|
003f9e  f7fffffe          BL       send_GSM
;;;327    //delay(10);	
;;;328    
;;;329    send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
003fa2  48aa              LDR      r0,|L1.16972|
003fa4  6800              LDR      r0,[r0,#0]  ; tmeout
003fa6  4baa              LDR      r3,|L1.16976|
003fa8  4aaa              LDR      r2,|L1.16980|
003faa  4611              MOV      r1,r2
003fac  3114              ADDS     r1,r1,#0x14
003fae  9000              STR      r0,[sp,#0]
003fb0  a0d9              ADR      r0,|L1.17176|
003fb2  f7fffffe          BL       send_GSM
;;;330    							memset(at_,0,100);
003fb6  2164              MOVS     r1,#0x64
003fb8  48b1              LDR      r0,|L1.17024|
003fba  f7fffffe          BL       __aeabi_memclr
;;;331    							memset(num_o,0,15);
003fbe  210f              MOVS     r1,#0xf
003fc0  48d9              LDR      r0,|L1.17192|
003fc2  f7fffffe          BL       __aeabi_memclr
;;;332    							parse_g(uart_string_gsm, 1, 2, '\"', '\"', num_o);
003fc6  48d8              LDR      r0,|L1.17192|
003fc8  2122              MOVS     r1,#0x22
003fca  460b              MOV      r3,r1
003fcc  2202              MOVS     r2,#2
003fce  9100              STR      r1,[sp,#0]
003fd0  9001              STR      r0,[sp,#4]
003fd2  2101              MOVS     r1,#1
003fd4  48cb              LDR      r0,|L1.17156|
003fd6  f7fffffe          BL       parse_g
;;;333    							sprintf(at_, "\r\nAT+CSCA=\"%s\"\r\n", num_o);
003fda  4ad3              LDR      r2,|L1.17192|
003fdc  a1d3              ADR      r1,|L1.17196|
003fde  48a8              LDR      r0,|L1.17024|
003fe0  f7fffffe          BL       __2sprintf
;;;334    							send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
003fe4  4899              LDR      r0,|L1.16972|
003fe6  6800              LDR      r0,[r0,#0]  ; tmeout
003fe8  4b99              LDR      r3,|L1.16976|
003fea  4a9a              LDR      r2,|L1.16980|
003fec  4611              MOV      r1,r2
003fee  3114              ADDS     r1,r1,#0x14
003ff0  9000              STR      r0,[sp,#0]
003ff2  48a3              LDR      r0,|L1.17024|
003ff4  f7fffffe          BL       send_GSM
;;;335    
;;;336    
;;;337    
;;;338    read_ip_port();
003ff8  f7fffffe          BL       read_ip_port
;;;339    		memset(at_,0,100);
003ffc  2164              MOVS     r1,#0x64
003ffe  48a0              LDR      r0,|L1.17024|
004000  f7fffffe          BL       __aeabi_memclr
;;;340    		memset(drive,0,5);
004004  2105              MOVS     r1,#5
004006  48ce              LDR      r0,|L1.17216|
004008  f7fffffe          BL       __aeabi_memclr4
;;;341    		sprintf(at_, "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n");		
00400c  a1cd              ADR      r1,|L1.17220|
00400e  489c              LDR      r0,|L1.17024|
004010  f7fffffe          BL       __2sprintf
;;;342    		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
004014  200a              MOVS     r0,#0xa
004016  4b8e              LDR      r3,|L1.16976|
004018  4a8e              LDR      r2,|L1.16980|
00401a  a1d5              ADR      r1,|L1.17264|
00401c  9000              STR      r0,[sp,#0]
00401e  4898              LDR      r0,|L1.17024|
004020  f7fffffe          BL       send_GSM
;;;343    		parse_g(uart_string_gsm, 1,3, '\n', '\r',drive);
004024  48c6              LDR      r0,|L1.17216|
004026  210d              MOVS     r1,#0xd
004028  230a              MOVS     r3,#0xa
00402a  2203              MOVS     r2,#3
00402c  9100              STR      r1,[sp,#0]
00402e  9001              STR      r0,[sp,#4]
004030  2101              MOVS     r1,#1
004032  48b4              LDR      r0,|L1.17156|
004034  f7fffffe          BL       parse_g
;;;344    	
;;;345    
;;;346    msg_sim800(); 
004038  f7fffffe          BL       msg_sim800
;;;347    
;;;348    //setting interval 4
;;;349    
;;;350    temp=int_erval;				
00403c  48cd              LDR      r0,|L1.17268|
00403e  6800              LDR      r0,[r0,#0]  ; int_erval
004040  49cd              LDR      r1,|L1.17272|
004042  6008              STR      r0,[r1,#0]  ; temp
;;;351    int_erval=4;
004044  2004              MOVS     r0,#4
004046  49cb              LDR      r1,|L1.17268|
004048  6008              STR      r0,[r1,#0]  ; int_erval
;;;352    
;;;353    
;;;354    
;;;355    								//GPS_COLLECT();
;;;356    								send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",5);	
00404a  2005              MOVS     r0,#5
00404c  4b80              LDR      r3,|L1.16976|
00404e  4a81              LDR      r2,|L1.16980|
004050  a1c7              ADR      r1,|L1.17264|
004052  9000              STR      r0,[sp,#0]
004054  4618              MOV      r0,r3
004056  300c              ADDS     r0,r0,#0xc
004058  f7fffffe          BL       send_GSM
;;;357    								//delay(20);		
;;;358    								GPS_COLLECT();
00405c  f7fffffe          BL       GPS_COLLECT
;;;359    								strreplace(data, ",L,", ",H,");
004060  4a7c              LDR      r2,|L1.16980|
004062  3a34              SUBS     r2,r2,#0x34
004064  1d11              ADDS     r1,r2,#4
004066  48c5              LDR      r0,|L1.17276|
004068  f7fffffe          BL       strreplace
;;;360    
;;;361    
;;;362    msg_sim800(); 
00406c  f7fffffe          BL       msg_sim800
;;;363    
;;;364    	memset(at_,0,100);
004070  2164              MOVS     r1,#0x64
004072  4883              LDR      r0,|L1.17024|
004074  f7fffffe          BL       __aeabi_memclr
;;;365    		sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
004078  4ac1              LDR      r2,|L1.17280|
00407a  4975              LDR      r1,|L1.16976|
00407c  3120              ADDS     r1,r1,#0x20
00407e  4880              LDR      r0,|L1.17024|
004080  f7fffffe          BL       __2sprintf
;;;366    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);	
004084  4871              LDR      r0,|L1.16972|
004086  6800              LDR      r0,[r0,#0]  ; tmeout
004088  4b71              LDR      r3,|L1.16976|
00408a  4a72              LDR      r2,|L1.16980|
00408c  a1b8              ADR      r1,|L1.17264|
00408e  9000              STR      r0,[sp,#0]
004090  487b              LDR      r0,|L1.17024|
004092  f7fffffe          BL       send_GSM
;;;367    								//delay(20);
;;;368    			//					GPS_COLLECT();
;;;369    
;;;370    msg_sim800(); 
004096  f7fffffe          BL       msg_sim800
;;;371    
;;;372    	
;;;373    								send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",5);		
00409a  2005              MOVS     r0,#5
00409c  4b6d              LDR      r3,|L1.16980|
00409e  3b60              SUBS     r3,r3,#0x60
0040a0  4a6c              LDR      r2,|L1.16980|
0040a2  a1b3              ADR      r1,|L1.17264|
0040a4  9000              STR      r0,[sp,#0]
0040a6  486a              LDR      r0,|L1.16976|
0040a8  3038              ADDS     r0,r0,#0x38
0040aa  f7fffffe          BL       send_GSM
;;;374    								//delay(20);
;;;375    								GPS_COLLECT();
0040ae  f7fffffe          BL       GPS_COLLECT
;;;376    								strreplace(data, ",L,", ",H,");
0040b2  4a68              LDR      r2,|L1.16980|
0040b4  3a34              SUBS     r2,r2,#0x34
0040b6  1d11              ADDS     r1,r2,#4
0040b8  48b0              LDR      r0,|L1.17276|
0040ba  f7fffffe          BL       strreplace
;;;377    
;;;378    
;;;379    
;;;380    								GPS_COLLECT();
0040be  f7fffffe          BL       GPS_COLLECT
;;;381    								strreplace(data, ",L,", ",H,");	
0040c2  4a64              LDR      r2,|L1.16980|
0040c4  3a34              SUBS     r2,r2,#0x34
0040c6  1d11              ADDS     r1,r2,#4
0040c8  48ac              LDR      r0,|L1.17276|
0040ca  f7fffffe          BL       strreplace
;;;382    
;;;383    msg_sim800(); 
0040ce  f7fffffe          BL       msg_sim800
;;;384    
;;;385    								
;;;386    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);	
0040d2  2001              MOVS     r0,#1
0040d4  4b5f              LDR      r3,|L1.16980|
0040d6  3b60              SUBS     r3,r3,#0x60
0040d8  4a5e              LDR      r2,|L1.16980|
0040da  a1a5              ADR      r1,|L1.17264|
0040dc  9000              STR      r0,[sp,#0]
0040de  485c              LDR      r0,|L1.16976|
0040e0  3048              ADDS     r0,r0,#0x48
0040e2  f7fffffe          BL       send_GSM
;;;387    memset(ipadd,0,16);
0040e6  2110              MOVS     r1,#0x10
0040e8  48a6              LDR      r0,|L1.17284|
0040ea  f7fffffe          BL       __aeabi_memclr
;;;388    parse_g(uart_string_gsm,1,2,'\n','\n',ipadd);
0040ee  48a5              LDR      r0,|L1.17284|
0040f0  210a              MOVS     r1,#0xa
0040f2  460b              MOV      r3,r1
0040f4  2202              MOVS     r2,#2
0040f6  9100              STR      r1,[sp,#0]
0040f8  9001              STR      r0,[sp,#4]
0040fa  2101              MOVS     r1,#1
0040fc  4881              LDR      r0,|L1.17156|
0040fe  f7fffffe          BL       parse_g
;;;389    remove_all_chars(ipadd,'\r','\n');
004102  220a              MOVS     r2,#0xa
004104  210d              MOVS     r1,#0xd
004106  489f              LDR      r0,|L1.17284|
004108  f7fffffe          BL       remove_all_chars
;;;390    if(strstr(uart_string_gsm,"0.0.0.0"))
00410c  a19e              ADR      r1,|L1.17288|
00410e  487d              LDR      r0,|L1.17156|
004110  f7fffffe          BL       strstr
004114  2800              CMP      r0,#0
004116  d001              BEQ      |L1.16668|
;;;391    {
;;;392    	reset_func();
004118  f7fffffe          BL       reset_func
                  |L1.16668|
;;;393    }	
;;;394    
;;;395    msg_sim800(); 
00411c  f7fffffe          BL       msg_sim800
;;;396    
;;;397    		
;;;398    								sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
004120  4b9b              LDR      r3,|L1.17296|
004122  4a9c              LDR      r2,|L1.17300|
004124  494a              LDR      r1,|L1.16976|
004126  3160              ADDS     r1,r1,#0x60
004128  4855              LDR      r0,|L1.17024|
00412a  f7fffffe          BL       __2sprintf
;;;399    								send_GSM( at_ , "CONNECT", "ERROR\r\n" , "ERROR",tmeout);	
00412e  4847              LDR      r0,|L1.16972|
004130  6800              LDR      r0,[r0,#0]  ; tmeout
004132  4b48              LDR      r3,|L1.16980|
004134  3b7c              SUBS     r3,r3,#0x7c
004136  4a47              LDR      r2,|L1.16980|
004138  4945              LDR      r1,|L1.16976|
00413a  3180              ADDS     r1,r1,#0x80
00413c  9000              STR      r0,[sp,#0]
00413e  4850              LDR      r0,|L1.17024|
004140  f7fffffe          BL       send_GSM
;;;400    								clear();
004144  f7fffffe          BL       clear
;;;401    
;;;402    								GPS_COLLECT();
004148  f7fffffe          BL       GPS_COLLECT
;;;403    								strreplace(data, ",L,", ",H,");	
00414c  4a41              LDR      r2,|L1.16980|
00414e  3a34              SUBS     r2,r2,#0x34
004150  1d11              ADDS     r1,r2,#4
004152  488a              LDR      r0,|L1.17276|
004154  f7fffffe          BL       strreplace
;;;404    
;;;405    		int_erval=temp;
004158  4887              LDR      r0,|L1.17272|
00415a  6800              LDR      r0,[r0,#0]  ; temp
00415c  4985              LDR      r1,|L1.17268|
00415e  6008              STR      r0,[r1,#0]  ; int_erval
;;;406    //resetting it to its value
;;;407    
;;;408    								send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
004160  483a              LDR      r0,|L1.16972|
004162  6800              LDR      r0,[r0,#0]  ; tmeout
004164  4b3a              LDR      r3,|L1.16976|
004166  3388              ADDS     r3,r3,#0x88
004168  4a3a              LDR      r2,|L1.16980|
00416a  3a7c              SUBS     r2,r2,#0x7c
00416c  a150              ADR      r1,|L1.17072|
00416e  9000              STR      r0,[sp,#0]
004170  4618              MOV      r0,r3
004172  3010              ADDS     r0,r0,#0x10
004174  f7fffffe          BL       send_GSM
;;;409    
;;;410    
;;;411    memset(stcond1,0,strlen(stcond1));	
004178  4887              LDR      r0,|L1.17304|
00417a  6800              LDR      r0,[r0,#0]  ; stcond1
00417c  f7fffffe          BL       strlen
004180  4601              MOV      r1,r0
004182  9001              STR      r0,[sp,#4]
004184  4884              LDR      r0,|L1.17304|
004186  6800              LDR      r0,[r0,#0]  ; stcond1
004188  f7fffffe          BL       __aeabi_memclr
;;;412    memset(con1d,0,strlen(con1d));	
00418c  4883              LDR      r0,|L1.17308|
00418e  6800              LDR      r0,[r0,#0]  ; con1d
004190  f7fffffe          BL       strlen
004194  4601              MOV      r1,r0
004196  9001              STR      r0,[sp,#4]
004198  4880              LDR      r0,|L1.17308|
00419a  6800              LDR      r0,[r0,#0]  ; con1d
00419c  f7fffffe          BL       __aeabi_memclr
;;;413    	
;;;414    								//sprintf(data_2,"Latitude->%s,Longitude->%s,Velocity->%skmph\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);			
;;;415    						
;;;416    								cond=mystrstr(uart_string_gsm,'>');
0041a0  213e              MOVS     r1,#0x3e
0041a2  4858              LDR      r0,|L1.17156|
0041a4  f7fffffe          BL       mystrstr
0041a8  497d              LDR      r1,|L1.17312|
0041aa  7008              STRB     r0,[r1,#0]
;;;417    								if(cond)	
0041ac  4608              MOV      r0,r1
0041ae  7800              LDRB     r0,[r0,#0]  ; cond
0041b0  2800              CMP      r0,#0
0041b2  d049              BEQ      |L1.16968|
;;;418    								{
;;;419    									
;;;420    									clear();
0041b4  f7fffffe          BL       clear
;;;421    									memset(uart_string_gsm,0,5000);
0041b8  497a              LDR      r1,|L1.17316|
0041ba  4852              LDR      r0,|L1.17156|
0041bc  f7fffffe          BL       __aeabi_memclr
;;;422    									strcat(data,"\n");
0041c0  a154              ADR      r1,|L1.17172|
0041c2  486e              LDR      r0,|L1.17276|
0041c4  f7fffffe          BL       strcat
;;;423    									len=strlen(data);
0041c8  486c              LDR      r0,|L1.17276|
0041ca  f7fffffe          BL       strlen
0041ce  4976              LDR      r1,|L1.17320|
0041d0  6008              STR      r0,[r1,#0]  ; len
;;;424    									tout=0;
0041d2  2000              MOVS     r0,#0
0041d4  4975              LDR      r1,|L1.17324|
0041d6  6008              STR      r0,[r1,#0]  ; tout
;;;425    									k2=0;
0041d8  4975              LDR      r1,|L1.17328|
0041da  6008              STR      r0,[r1,#0]  ; k2
;;;426    									for(k=0;k<len;k++)
0041dc  4975              LDR      r1,|L1.17332|
0041de  6008              STR      r0,[r1,#0]  ; k
0041e0  e00d              B        |L1.16894|
                  |L1.16866|
;;;427    									{
;;;428    										uart_putchar(UART1_BASE_PTR, data[k]);
0041e2  4866              LDR      r0,|L1.17276|
0041e4  4973              LDR      r1,|L1.17332|
0041e6  6809              LDR      r1,[r1,#0]  ; k
0041e8  5c40              LDRB     r0,[r0,r1]
0041ea  4601              MOV      r1,r0
0041ec  9001              STR      r0,[sp,#4]
0041ee  4872              LDR      r0,|L1.17336|
0041f0  f7fffffe          BL       uart_putchar
0041f4  486f              LDR      r0,|L1.17332|
0041f6  6800              LDR      r0,[r0,#0]            ;426  ; k
0041f8  1c40              ADDS     r0,r0,#1              ;426
0041fa  496e              LDR      r1,|L1.17332|
0041fc  6008              STR      r0,[r1,#0]            ;426  ; k
                  |L1.16894|
0041fe  486d              LDR      r0,|L1.17332|
004200  6800              LDR      r0,[r0,#0]            ;426  ; k
004202  4969              LDR      r1,|L1.17320|
004204  6809              LDR      r1,[r1,#0]            ;426  ; len
004206  4288              CMP      r0,r1                 ;426
004208  dbeb              BLT      |L1.16866|
;;;429    									}uart_putchar(UART1_BASE_PTR, 0x1A);
00420a  211a              MOVS     r1,#0x1a
00420c  486a              LDR      r0,|L1.17336|
00420e  f7fffffe          BL       uart_putchar
;;;430    									do
004212  bf00              NOP      
                  |L1.16916|
;;;431    																{stcond1=strstr(uart_string_gsm,"SEND OK");
004214  4969              LDR      r1,|L1.17340|
004216  483b              LDR      r0,|L1.17156|
004218  f7fffffe          BL       strstr
00421c  495e              LDR      r1,|L1.17304|
00421e  6008              STR      r0,[r1,#0]  ; stcond1
;;;432    																	stcond2=strstr(uart_string_gsm, "ERROR");
004220  490c              LDR      r1,|L1.16980|
004222  397c              SUBS     r1,r1,#0x7c
004224  4837              LDR      r0,|L1.17156|
004226  f7fffffe          BL       strstr
00422a  4965              LDR      r1,|L1.17344|
00422c  6008              STR      r0,[r1,#0]  ; stcond2
;;;433    																		stcond3=strstr(uart_string_gsm, "FAIL");	
00422e  4908              LDR      r1,|L1.16976|
004230  3190              ADDS     r1,r1,#0x90
004232  4834              LDR      r0,|L1.17156|
004234  f7fffffe          BL       strstr
004238  4962              LDR      r1,|L1.17348|
00423a  6008              STR      r0,[r1,#0]  ; stcond3
;;;434    																			stcond4=strstr(uart_string_gsm, "DEACT");	
00423c  4905              LDR      r1,|L1.16980|
00423e  3960              SUBS     r1,r1,#0x60
004240  4830              LDR      r0,|L1.17156|
004242  f7fffffe          BL       strstr
004246  e0bf              B        |L1.17352|
                  |L1.16968|
004248  e0ee              B        |L1.17448|
00424a  0000              DCW      0x0000
                  |L1.16972|
                          DCD      tmeout
                  |L1.16976|
                          DCD      ||.text||+0xd60
                  |L1.16980|
                          DCD      ||.text||+0x8ec
                  |L1.16984|
004258  0a0a4154          DCB      "\n\nAT+FSCREATE=C:\\LOGGING_DRIVE.TXT\r\n",0
00425c  2b465343
004260  52454154
004264  453d433a
004268  5c4c4f47
00426c  47494e47
004270  5f445249
004274  56452e54
004278  58540d0a
00427c  00      
00427d  00                DCB      0
00427e  00                DCB      0
00427f  00                DCB      0
                  |L1.17024|
                          DCD      at_
                  |L1.17028|
004284  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\LOGGING_DRIVE.TXT,0,%d,10\r\n",0
004288  2b465357
00428c  52495445
004290  3d433a5c
004294  4c4f4747
004298  494e475f
00429c  44524956
0042a0  452e5458
0042a4  542c302c
0042a8  25642c31
0042ac  300d0a00
                  |L1.17072|
0042b0  3e00              DCB      ">",0
0042b2  00                DCB      0
0042b3  00                DCB      0
                  |L1.17076|
0042b4  443a00            DCB      "D:",0
0042b7  00                DCB      0
                  |L1.17080|
0042b8  433a00            DCB      "C:",0
0042bb  00                DCB      0
                  |L1.17084|
0042bc  0a0a4154          DCB      "\n\nATS0=1\r\n",0
0042c0  53303d31
0042c4  0d0a00  
0042c7  00                DCB      0
                  |L1.17096|
0042c8  0a0a4154          DCB      "\n\nAT+CSCLK=1\r\n",0
0042cc  2b435343
0042d0  4c4b3d31
0042d4  0d0a00  
0042d7  00                DCB      0
                  |L1.17112|
0042d8  0d0a0d0a          DCB      "\r\n\r\nAT+CMGD=1,4\r\n\n\n\n",0
0042dc  41542b43
0042e0  4d47443d
0042e4  312c340d
0042e8  0a0a0a0a
0042ec  00      
0042ed  00                DCB      0
0042ee  00                DCB      0
0042ef  00                DCB      0
                  |L1.17136|
                          DCD      ||.conststring||+0x908
                  |L1.17140|
                          DCD      ||.conststring||+0x10
                  |L1.17144|
                          DCD      ||.conststring||+0x18
                  |L1.17148|
                          DCD      ||.conststring||+0x2c
                  |L1.17152|
                          DCD      licenceplate
                  |L1.17156|
                          DCD      uart_string_gsm
                  |L1.17160|
004308  0a0a4154          DCB      "\n\nAT+CMGF=1\n"
00430c  2b434d47
004310  463d310a
                  |L1.17172|
004314  0a00              DCB      "\n",0
004316  00                DCB      0
004317  00                DCB      0
                  |L1.17176|
004318  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
00431c  2b435343
004320  413f0d0a
004324  00      
004325  00                DCB      0
004326  00                DCB      0
004327  00                DCB      0
                  |L1.17192|
                          DCD      num_o
                  |L1.17196|
00432c  0d0a4154          DCB      "\r\nAT+CSCA=""%s""\r\n",0
004330  2b435343
004334  413d2225
004338  73220d0a
00433c  00      
00433d  00                DCB      0
00433e  00                DCB      0
00433f  00                DCB      0
                  |L1.17216|
                          DCD      drive
                  |L1.17220|
004344  0a41542b          DCB      "\nAT+FSREAD=C:\\LOGGING_DRIVE.TXT,0,100,1\r\n",0
004348  46535245
00434c  41443d43
004350  3a5c4c4f
004354  4747494e
004358  475f4452
00435c  4956452e
004360  5458542c
004364  302c3130
004368  302c310d
00436c  0a00    
00436e  00                DCB      0
00436f  00                DCB      0
                  |L1.17264|
004370  4f4b00            DCB      "OK",0
004373  00                DCB      0
                  |L1.17268|
                          DCD      int_erval
                  |L1.17272|
                          DCD      temp
                  |L1.17276|
                          DCD      data
                  |L1.17280|
                          DCD      apn
                  |L1.17284|
                          DCD      ipadd
                  |L1.17288|
004388  302e302e          DCB      "0.0.0.0",0
00438c  302e3000
                  |L1.17296|
                          DCD      port
                  |L1.17300|
                          DCD      ||ip||
                  |L1.17304|
                          DCD      stcond1
                  |L1.17308|
                          DCD      con1d
                  |L1.17312|
                          DCD      cond
                  |L1.17316|
                          DCD      0x00001388
                  |L1.17320|
                          DCD      len
                  |L1.17324|
                          DCD      tout
                  |L1.17328|
                          DCD      ||k2||
                  |L1.17332|
                          DCD      k
                  |L1.17336|
                          DCD      0x4006b000
                  |L1.17340|
                          DCD      ||.text||+0x474
                  |L1.17344|
                          DCD      stcond2
                  |L1.17348|
                          DCD      stcond3
                  |L1.17352|
0043c8  49fe              LDR      r1,|L1.18372|
0043ca  6008              STR      r0,[r1,#0]  ; stcond4
;;;435    																	
;;;436    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0043cc  48fe              LDR      r0,|L1.18376|
0043ce  6800              LDR      r0,[r0,#0]  ; stcond2
0043d0  2800              CMP      r0,#0
0043d2  d110              BNE      |L1.17398|
0043d4  48fd              LDR      r0,|L1.18380|
0043d6  6800              LDR      r0,[r0,#0]  ; stcond3
0043d8  2800              CMP      r0,#0
0043da  d10c              BNE      |L1.17398|
0043dc  4608              MOV      r0,r1
0043de  6800              LDR      r0,[r0,#0]  ; stcond4
0043e0  2800              CMP      r0,#0
0043e2  d108              BNE      |L1.17398|
0043e4  48fa              LDR      r0,|L1.18384|
0043e6  6800              LDR      r0,[r0,#0]  ; stcond1
0043e8  2800              CMP      r0,#0
0043ea  d104              BNE      |L1.17398|
0043ec  48f9              LDR      r0,|L1.18388|
0043ee  6800              LDR      r0,[r0,#0]  ; tout
0043f0  2808              CMP      r0,#8
0043f2  dc00              BGT      |L1.17398|
0043f4  e70e              B        |L1.16916|
                  |L1.17398|
;;;437    																//delay(10);clear();
;;;438    														uart_putchar(UART1_BASE_PTR,0x1A);
0043f6  211a              MOVS     r1,#0x1a
0043f8  48f7              LDR      r0,|L1.18392|
0043fa  f7fffffe          BL       uart_putchar
;;;439    												//delay(10);
;;;440    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0043fe  211a              MOVS     r1,#0x1a
004400  48f5              LDR      r0,|L1.18392|
004402  f7fffffe          BL       uart_putchar
004406  211a              MOVS     r1,#0x1a
004408  48f3              LDR      r0,|L1.18392|
00440a  f7fffffe          BL       uart_putchar
00440e  211a              MOVS     r1,#0x1a
004410  48f1              LDR      r0,|L1.18392|
004412  f7fffffe          BL       uart_putchar
;;;441    						
;;;442    									
;;;443    delay(50);
004416  2032              MOVS     r0,#0x32
004418  f7fffffe          BL       delay
;;;444    stcond1=strstr(uart_string_gsm,"SEND OK");								
00441c  49ef              LDR      r1,|L1.18396|
00441e  48f0              LDR      r0,|L1.18400|
004420  f7fffffe          BL       strstr
004424  49ea              LDR      r1,|L1.18384|
004426  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.17448|
;;;445    								}
;;;446    //else{
;;;447    //log_it();
;;;448    //}
;;;449    
;;;450    
;;;451    if(!(stcond1) == 1 )// if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
004428  48e9              LDR      r0,|L1.18384|
00442a  6800              LDR      r0,[r0,#0]  ; stcond1
00442c  2800              CMP      r0,#0
00442e  d101              BNE      |L1.17460|
004430  2001              MOVS     r0,#1
004432  e000              B        |L1.17462|
                  |L1.17460|
004434  2000              MOVS     r0,#0
                  |L1.17462|
004436  2801              CMP      r0,#1
004438  d001              BEQ      |L1.17470|
00443a  f000fdf5          BL       |L1.20520|
                  |L1.17470|
;;;452    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00443e  211a              MOVS     r1,#0x1a
004440  48e5              LDR      r0,|L1.18392|
004442  f7fffffe          BL       uart_putchar
004446  f7fffffe          BL       clear
00444a  200a              MOVS     r0,#0xa
00444c  f7fffffe          BL       delay
;;;453    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004450  211a              MOVS     r1,#0x1a
004452  48e1              LDR      r0,|L1.18392|
004454  f7fffffe          BL       uart_putchar
004458  f7fffffe          BL       clear
00445c  200a              MOVS     r0,#0xa
00445e  f7fffffe          BL       delay
;;;454    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
004462  211a              MOVS     r1,#0x1a
004464  48dc              LDR      r0,|L1.18392|
004466  f7fffffe          BL       uart_putchar
00446a  f7fffffe          BL       clear
00446e  200a              MOVS     r0,#0xa
004470  f7fffffe          BL       delay
;;;455    
;;;456    									delay(100);
004474  2064              MOVS     r0,#0x64
004476  f7fffffe          BL       delay
;;;457    									clear();//memset(uart_string_gsm,0,5000);
00447a  f7fffffe          BL       clear
;;;458    
;;;459    									memset(at_,0,100);
00447e  2164              MOVS     r1,#0x64
004480  48d8              LDR      r0,|L1.18404|
004482  f7fffffe          BL       __aeabi_memclr
;;;460    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004486  48d8              LDR      r0,|L1.18408|
004488  f7fffffe          BL       strlen
00448c  1c40              ADDS     r0,r0,#1
00448e  4603              MOV      r3,r0
004490  4ad6              LDR      r2,|L1.18412|
004492  49d7              LDR      r1,|L1.18416|
004494  9001              STR      r0,[sp,#4]
004496  48d3              LDR      r0,|L1.18404|
004498  f7fffffe          BL       __2sprintf
;;;461    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00449c  2005              MOVS     r0,#5
00449e  4bd4              LDR      r3,|L1.18416|
0044a0  3b58              SUBS     r3,r3,#0x58
0044a2  461a              MOV      r2,r3
0044a4  327c              ADDS     r2,r2,#0x7c
0044a6  a1d3              ADR      r1,|L1.18420|
0044a8  9000              STR      r0,[sp,#0]
0044aa  48ce              LDR      r0,|L1.18404|
0044ac  f7fffffe          BL       send_SD
;;;462    if(strstr(uart_string_gsm,"ERROR")){
0044b0  49cf              LDR      r1,|L1.18416|
0044b2  3958              SUBS     r1,r1,#0x58
0044b4  48ca              LDR      r0,|L1.18400|
0044b6  f7fffffe          BL       strstr
0044ba  2800              CMP      r0,#0
0044bc  d004              BEQ      |L1.17608|
;;;463    	drive[0]='C';drive[1]=':';
0044be  2043              MOVS     r0,#0x43
0044c0  49ca              LDR      r1,|L1.18412|
0044c2  7008              STRB     r0,[r1,#0]
0044c4  203a              MOVS     r0,#0x3a
0044c6  7048              STRB     r0,[r1,#1]
                  |L1.17608|
;;;464    }	
;;;465    									clear();	
0044c8  f7fffffe          BL       clear
;;;466    									k2=0;									//string array counter for uart 1
0044cc  2000              MOVS     r0,#0
0044ce  49ca              LDR      r1,|L1.18424|
0044d0  6008              STR      r0,[r1,#0]  ; k2
;;;467    									tout=0;	
0044d2  49c0              LDR      r1,|L1.18388|
0044d4  6008              STR      r0,[r1,#0]  ; tout
;;;468    									for(k=0;k<strlen(data);k++)
0044d6  49c9              LDR      r1,|L1.18428|
0044d8  6008              STR      r0,[r1,#0]  ; k
0044da  e00d              B        |L1.17656|
                  |L1.17628|
;;;469    									{
;;;470    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0044dc  48c2              LDR      r0,|L1.18408|
0044de  49c7              LDR      r1,|L1.18428|
0044e0  6809              LDR      r1,[r1,#0]  ; k
0044e2  5c40              LDRB     r0,[r0,r1]
0044e4  4601              MOV      r1,r0
0044e6  9001              STR      r0,[sp,#4]
0044e8  48bb              LDR      r0,|L1.18392|
0044ea  f7fffffe          BL       uart_putchar
0044ee  48c3              LDR      r0,|L1.18428|
0044f0  6800              LDR      r0,[r0,#0]            ;468  ; k
0044f2  1c40              ADDS     r0,r0,#1              ;468
0044f4  49c1              LDR      r1,|L1.18428|
0044f6  6008              STR      r0,[r1,#0]            ;468  ; k
                  |L1.17656|
0044f8  48bb              LDR      r0,|L1.18408|
0044fa  f7fffffe          BL       strlen
0044fe  49bf              LDR      r1,|L1.18428|
004500  6809              LDR      r1,[r1,#0]            ;468  ; k
004502  4288              CMP      r0,r1                 ;468
004504  d8ea              BHI      |L1.17628|
;;;471    									}	
;;;472    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004506  210a              MOVS     r1,#0xa
004508  48b3              LDR      r0,|L1.18392|
00450a  f7fffffe          BL       uart_putchar
00450e  210a              MOVS     r1,#0xa
004510  48b1              LDR      r0,|L1.18392|
004512  f7fffffe          BL       uart_putchar
004516  210a              MOVS     r1,#0xa
004518  48af              LDR      r0,|L1.18392|
00451a  f7fffffe          BL       uart_putchar
00451e  210a              MOVS     r1,#0xa
004520  48ad              LDR      r0,|L1.18392|
004522  f7fffffe          BL       uart_putchar
004526  210a              MOVS     r1,#0xa
004528  48ab              LDR      r0,|L1.18392|
00452a  f7fffffe          BL       uart_putchar
00452e  210a              MOVS     r1,#0xa
004530  48a9              LDR      r0,|L1.18392|
004532  f7fffffe          BL       uart_putchar
004536  210a              MOVS     r1,#0xa
004538  48a7              LDR      r0,|L1.18392|
00453a  f7fffffe          BL       uart_putchar
00453e  210a              MOVS     r1,#0xa
004540  48a5              LDR      r0,|L1.18392|
004542  f7fffffe          BL       uart_putchar
004546  210a              MOVS     r1,#0xa
004548  48a3              LDR      r0,|L1.18392|
00454a  f7fffffe          BL       uart_putchar
00454e  210a              MOVS     r1,#0xa
004550  48a1              LDR      r0,|L1.18392|
004552  f7fffffe          BL       uart_putchar
004556  210a              MOVS     r1,#0xa
004558  489f              LDR      r0,|L1.18392|
00455a  f7fffffe          BL       uart_putchar
00455e  210a              MOVS     r1,#0xa
004560  489d              LDR      r0,|L1.18392|
004562  f7fffffe          BL       uart_putchar
004566  210a              MOVS     r1,#0xa
004568  489b              LDR      r0,|L1.18392|
00456a  f7fffffe          BL       uart_putchar
00456e  210a              MOVS     r1,#0xa
004570  4899              LDR      r0,|L1.18392|
004572  f7fffffe          BL       uart_putchar
004576  210a              MOVS     r1,#0xa
004578  4897              LDR      r0,|L1.18392|
00457a  f7fffffe          BL       uart_putchar
00457e  210a              MOVS     r1,#0xa
004580  4895              LDR      r0,|L1.18392|
004582  f7fffffe          BL       uart_putchar
004586  210a              MOVS     r1,#0xa
004588  4893              LDR      r0,|L1.18392|
00458a  f7fffffe          BL       uart_putchar
00458e  210a              MOVS     r1,#0xa
004590  4891              LDR      r0,|L1.18392|
004592  f7fffffe          BL       uart_putchar
004596  210a              MOVS     r1,#0xa
004598  488f              LDR      r0,|L1.18392|
00459a  f7fffffe          BL       uart_putchar
00459e  210a              MOVS     r1,#0xa
0045a0  488d              LDR      r0,|L1.18392|
0045a2  f7fffffe          BL       uart_putchar
0045a6  210a              MOVS     r1,#0xa
0045a8  488b              LDR      r0,|L1.18392|
0045aa  f7fffffe          BL       uart_putchar
0045ae  210a              MOVS     r1,#0xa
0045b0  4889              LDR      r0,|L1.18392|
0045b2  f7fffffe          BL       uart_putchar
0045b6  210a              MOVS     r1,#0xa
0045b8  4887              LDR      r0,|L1.18392|
0045ba  f7fffffe          BL       uart_putchar
0045be  210a              MOVS     r1,#0xa
0045c0  4885              LDR      r0,|L1.18392|
0045c2  f7fffffe          BL       uart_putchar
0045c6  210a              MOVS     r1,#0xa
0045c8  4883              LDR      r0,|L1.18392|
0045ca  f7fffffe          BL       uart_putchar
0045ce  210a              MOVS     r1,#0xa
0045d0  4881              LDR      r0,|L1.18392|
0045d2  f7fffffe          BL       uart_putchar
0045d6  210a              MOVS     r1,#0xa
0045d8  487f              LDR      r0,|L1.18392|
0045da  f7fffffe          BL       uart_putchar
0045de  210a              MOVS     r1,#0xa
0045e0  487d              LDR      r0,|L1.18392|
0045e2  f7fffffe          BL       uart_putchar
0045e6  210a              MOVS     r1,#0xa
0045e8  487b              LDR      r0,|L1.18392|
0045ea  f7fffffe          BL       uart_putchar
0045ee  210a              MOVS     r1,#0xa
0045f0  4879              LDR      r0,|L1.18392|
0045f2  f7fffffe          BL       uart_putchar
0045f6  210a              MOVS     r1,#0xa
0045f8  4877              LDR      r0,|L1.18392|
0045fa  f7fffffe          BL       uart_putchar
0045fe  210a              MOVS     r1,#0xa
004600  4875              LDR      r0,|L1.18392|
004602  f7fffffe          BL       uart_putchar
004606  210a              MOVS     r1,#0xa
004608  4873              LDR      r0,|L1.18392|
00460a  f7fffffe          BL       uart_putchar
00460e  210a              MOVS     r1,#0xa
004610  4871              LDR      r0,|L1.18392|
004612  f7fffffe          BL       uart_putchar
004616  210a              MOVS     r1,#0xa
004618  486f              LDR      r0,|L1.18392|
00461a  f7fffffe          BL       uart_putchar
00461e  210a              MOVS     r1,#0xa
004620  486d              LDR      r0,|L1.18392|
004622  f7fffffe          BL       uart_putchar
004626  210a              MOVS     r1,#0xa
004628  486b              LDR      r0,|L1.18392|
00462a  f7fffffe          BL       uart_putchar
00462e  210a              MOVS     r1,#0xa
004630  4869              LDR      r0,|L1.18392|
004632  f7fffffe          BL       uart_putchar
004636  210a              MOVS     r1,#0xa
004638  4867              LDR      r0,|L1.18392|
00463a  f7fffffe          BL       uart_putchar
00463e  210a              MOVS     r1,#0xa
004640  4865              LDR      r0,|L1.18392|
004642  f7fffffe          BL       uart_putchar
004646  210a              MOVS     r1,#0xa
004648  4863              LDR      r0,|L1.18392|
00464a  f7fffffe          BL       uart_putchar
00464e  210a              MOVS     r1,#0xa
004650  4861              LDR      r0,|L1.18392|
004652  f7fffffe          BL       uart_putchar
004656  210a              MOVS     r1,#0xa
004658  485f              LDR      r0,|L1.18392|
00465a  f7fffffe          BL       uart_putchar
00465e  210a              MOVS     r1,#0xa
004660  485d              LDR      r0,|L1.18392|
004662  f7fffffe          BL       uart_putchar
004666  210a              MOVS     r1,#0xa
004668  485b              LDR      r0,|L1.18392|
00466a  f7fffffe          BL       uart_putchar
00466e  210a              MOVS     r1,#0xa
004670  4859              LDR      r0,|L1.18392|
004672  f7fffffe          BL       uart_putchar
004676  210a              MOVS     r1,#0xa
004678  4857              LDR      r0,|L1.18392|
00467a  f7fffffe          BL       uart_putchar
00467e  210a              MOVS     r1,#0xa
004680  4855              LDR      r0,|L1.18392|
004682  f7fffffe          BL       uart_putchar
004686  210a              MOVS     r1,#0xa
004688  4853              LDR      r0,|L1.18392|
00468a  f7fffffe          BL       uart_putchar
00468e  210a              MOVS     r1,#0xa
004690  4851              LDR      r0,|L1.18392|
004692  f7fffffe          BL       uart_putchar
004696  210a              MOVS     r1,#0xa
004698  484f              LDR      r0,|L1.18392|
00469a  f7fffffe          BL       uart_putchar
00469e  210a              MOVS     r1,#0xa
0046a0  484d              LDR      r0,|L1.18392|
0046a2  f7fffffe          BL       uart_putchar
0046a6  210a              MOVS     r1,#0xa
0046a8  484b              LDR      r0,|L1.18392|
0046aa  f7fffffe          BL       uart_putchar
0046ae  210a              MOVS     r1,#0xa
0046b0  4849              LDR      r0,|L1.18392|
0046b2  f7fffffe          BL       uart_putchar
0046b6  210a              MOVS     r1,#0xa
0046b8  4847              LDR      r0,|L1.18392|
0046ba  f7fffffe          BL       uart_putchar
0046be  210a              MOVS     r1,#0xa
0046c0  4845              LDR      r0,|L1.18392|
0046c2  f7fffffe          BL       uart_putchar
0046c6  210a              MOVS     r1,#0xa
0046c8  4843              LDR      r0,|L1.18392|
0046ca  f7fffffe          BL       uart_putchar
;;;473    									//memset(data,0,1000);
;;;474    									//timer counts to wait for characters in uart 1 									
;;;475    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0046ce  bf00              NOP      
                  |L1.18128|
0046d0  4947              LDR      r1,|L1.18416|
0046d2  3138              ADDS     r1,r1,#0x38
0046d4  4842              LDR      r0,|L1.18400|
0046d6  f7fffffe          BL       strstr
0046da  2800              CMP      r0,#0
0046dc  d10a              BNE      |L1.18164|
0046de  4944              LDR      r1,|L1.18416|
0046e0  3958              SUBS     r1,r1,#0x58
0046e2  483f              LDR      r0,|L1.18400|
0046e4  f7fffffe          BL       strstr
0046e8  2800              CMP      r0,#0
0046ea  d103              BNE      |L1.18164|
0046ec  4839              LDR      r0,|L1.18388|
0046ee  6800              LDR      r0,[r0,#0]  ; tout
0046f0  2805              CMP      r0,#5
0046f2  dded              BLE      |L1.18128|
                  |L1.18164|
;;;476    									{	}
;;;477    									clear();
0046f4  f7fffffe          BL       clear
;;;478    									memset(data,0,strlen(data));
0046f8  483b              LDR      r0,|L1.18408|
0046fa  f7fffffe          BL       strlen
0046fe  4601              MOV      r1,r0
004700  9001              STR      r0,[sp,#4]
004702  4839              LDR      r0,|L1.18408|
004704  f7fffffe          BL       __aeabi_memclr
;;;479    									memset(data,0,strlen(data));	
004708  4837              LDR      r0,|L1.18408|
00470a  f7fffffe          BL       strlen
00470e  4601              MOV      r1,r0
004710  9001              STR      r0,[sp,#4]
004712  4835              LDR      r0,|L1.18408|
004714  f7fffffe          BL       __aeabi_memclr
;;;480    									GPS_COLLECT();
004718  f7fffffe          BL       GPS_COLLECT
;;;481    									strreplace(data, ",L,", ",H,");	
00471c  4a34              LDR      r2,|L1.18416|
00471e  3a10              SUBS     r2,r2,#0x10
004720  1d11              ADDS     r1,r2,#4
004722  4831              LDR      r0,|L1.18408|
004724  f7fffffe          BL       strreplace
;;;482    
;;;483    
;;;484    									clear();	
004728  f7fffffe          BL       clear
;;;485    //*************************************tcp_initialization();*********************
;;;486    //setting interval 4
;;;487    temp=int_erval;				
00472c  4834              LDR      r0,|L1.18432|
00472e  6800              LDR      r0,[r0,#0]  ; int_erval
004730  4934              LDR      r1,|L1.18436|
004732  6008              STR      r0,[r1,#0]  ; temp
;;;488    int_erval=4;
004734  2004              MOVS     r0,#4
004736  4932              LDR      r1,|L1.18432|
004738  6008              STR      r0,[r1,#0]  ; int_erval
;;;489    
;;;490    	
;;;491    msg_sim800(); 
00473a  f7fffffe          BL       msg_sim800
;;;492    send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
00473e  2005              MOVS     r0,#5
004740  4b2b              LDR      r3,|L1.18416|
004742  3b58              SUBS     r3,r3,#0x58
004744  461a              MOV      r2,r3
004746  327c              ADDS     r2,r2,#0x7c
004748  a12f              ADR      r1,|L1.18440|
00474a  9000              STR      r0,[sp,#0]
00474c  4610              MOV      r0,r2
00474e  3020              ADDS     r0,r0,#0x20
004750  f7fffffe          BL       send_GSM
;;;493    delay(100);
004754  2064              MOVS     r0,#0x64
004756  f7fffffe          BL       delay
;;;494    send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00475a  2004              MOVS     r0,#4
00475c  4b24              LDR      r3,|L1.18416|
00475e  3b58              SUBS     r3,r3,#0x58
004760  461a              MOV      r2,r3
004762  32ac              ADDS     r2,r2,#0xac
004764  a128              ADR      r1,|L1.18440|
004766  9000              STR      r0,[sp,#0]
004768  4610              MOV      r0,r2
00476a  3014              ADDS     r0,r0,#0x14
00476c  f7fffffe          BL       send_GSM
;;;495    GPS_COLLECT2();
004770  f7fffffe          BL       GPS_COLLECT2
;;;496    strreplace(data, ",L,", ",H,");		
004774  4a1e              LDR      r2,|L1.18416|
004776  3a10              SUBS     r2,r2,#0x10
004778  1d11              ADDS     r1,r2,#4
00477a  481b              LDR      r0,|L1.18408|
00477c  f7fffffe          BL       strreplace
;;;497    GPS_COLLECT2();
004780  f7fffffe          BL       GPS_COLLECT2
;;;498    strreplace(data, ",L,", ",H,");	
004784  4a1a              LDR      r2,|L1.18416|
004786  3a10              SUBS     r2,r2,#0x10
004788  1d11              ADDS     r1,r2,#4
00478a  4817              LDR      r0,|L1.18408|
00478c  f7fffffe          BL       strreplace
;;;499    GPS_COLLECT2();
004790  f7fffffe          BL       GPS_COLLECT2
;;;500    strreplace(data, ",L,", ",H,");
004794  4a16              LDR      r2,|L1.18416|
004796  3a10              SUBS     r2,r2,#0x10
004798  1d11              ADDS     r1,r2,#4
00479a  4813              LDR      r0,|L1.18408|
00479c  f7fffffe          BL       strreplace
;;;501    
;;;502    send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
0047a0  2004              MOVS     r0,#4
0047a2  4b1a              LDR      r3,|L1.18444|
0047a4  4a12              LDR      r2,|L1.18416|
0047a6  3224              ADDS     r2,r2,#0x24
0047a8  a117              ADR      r1,|L1.18440|
0047aa  9000              STR      r0,[sp,#0]
0047ac  4618              MOV      r0,r3
0047ae  300c              ADDS     r0,r0,#0xc
0047b0  f7fffffe          BL       send_GSM
;;;503    
;;;504    memset(at_,0,100);
0047b4  2164              MOVS     r1,#0x64
0047b6  480b              LDR      r0,|L1.18404|
0047b8  f7fffffe          BL       __aeabi_memclr
;;;505    sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
0047bc  4a14              LDR      r2,|L1.18448|
0047be  4913              LDR      r1,|L1.18444|
0047c0  3120              ADDS     r1,r1,#0x20
0047c2  e027              B        |L1.18452|
                  |L1.18372|
                          DCD      stcond4
                  |L1.18376|
                          DCD      stcond2
                  |L1.18380|
                          DCD      stcond3
                  |L1.18384|
                          DCD      stcond1
                  |L1.18388|
                          DCD      tout
                  |L1.18392|
                          DCD      0x4006b000
                  |L1.18396|
                          DCD      ||.text||+0x474
                  |L1.18400|
                          DCD      uart_string_gsm
                  |L1.18404|
                          DCD      at_
                  |L1.18408|
                          DCD      data
                  |L1.18412|
                          DCD      drive
                  |L1.18416|
                          DCD      ||.text||+0x8c8
                  |L1.18420|
0047f4  3e00              DCB      ">",0
0047f6  00                DCB      0
0047f7  00                DCB      0
                  |L1.18424|
                          DCD      ||k2||
                  |L1.18428|
                          DCD      k
                  |L1.18432|
                          DCD      int_erval
                  |L1.18436|
                          DCD      temp
                  |L1.18440|
004808  4f4b00            DCB      "OK",0
00480b  00                DCB      0
                  |L1.18444|
                          DCD      ||.text||+0xd60
                  |L1.18448|
                          DCD      apn
                  |L1.18452|
004814  48fd              LDR      r0,|L1.19468|
004816  f7fffffe          BL       __2sprintf
;;;506    send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
00481a  48fd              LDR      r0,|L1.19472|
00481c  6800              LDR      r0,[r0,#0]  ; tmeout
00481e  4bfd              LDR      r3,|L1.19476|
004820  4afd              LDR      r2,|L1.19480|
004822  a1fe              ADR      r1,|L1.19484|
004824  9000              STR      r0,[sp,#0]
004826  48f9              LDR      r0,|L1.19468|
004828  f7fffffe          BL       send_GSM
;;;507    msg_sim800(); 
00482c  f7fffffe          BL       msg_sim800
;;;508    send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
004830  2004              MOVS     r0,#4
004832  4bf9              LDR      r3,|L1.19480|
004834  3b60              SUBS     r3,r3,#0x60
004836  4af8              LDR      r2,|L1.19480|
004838  a1f8              ADR      r1,|L1.19484|
00483a  9000              STR      r0,[sp,#0]
00483c  48f5              LDR      r0,|L1.19476|
00483e  3038              ADDS     r0,r0,#0x38
004840  f7fffffe          BL       send_GSM
;;;509    GPS_COLLECT2();
004844  f7fffffe          BL       GPS_COLLECT2
;;;510    strreplace(data, ",L,", ",H,");	
004848  4af3              LDR      r2,|L1.19480|
00484a  3a34              SUBS     r2,r2,#0x34
00484c  1d11              ADDS     r1,r2,#4
00484e  48f4              LDR      r0,|L1.19488|
004850  f7fffffe          BL       strreplace
;;;511    GPS_COLLECT2();
004854  f7fffffe          BL       GPS_COLLECT2
;;;512    strreplace(data, ",L,", ",H,");	
004858  4aef              LDR      r2,|L1.19480|
00485a  3a34              SUBS     r2,r2,#0x34
00485c  1d11              ADDS     r1,r2,#4
00485e  48f0              LDR      r0,|L1.19488|
004860  f7fffffe          BL       strreplace
;;;513    msg_sim800(); 
004864  f7fffffe          BL       msg_sim800
;;;514    GPS_COLLECT2();
004868  f7fffffe          BL       GPS_COLLECT2
;;;515    strreplace(data, ",L,", ",H,");	
00486c  4aea              LDR      r2,|L1.19480|
00486e  3a34              SUBS     r2,r2,#0x34
004870  1d11              ADDS     r1,r2,#4
004872  48eb              LDR      r0,|L1.19488|
004874  f7fffffe          BL       strreplace
;;;516    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);	
004878  2001              MOVS     r0,#1
00487a  4be7              LDR      r3,|L1.19480|
00487c  3b60              SUBS     r3,r3,#0x60
00487e  4ae6              LDR      r2,|L1.19480|
004880  a1e6              ADR      r1,|L1.19484|
004882  9000              STR      r0,[sp,#0]
004884  48e3              LDR      r0,|L1.19476|
004886  3048              ADDS     r0,r0,#0x48
004888  f7fffffe          BL       send_GSM
;;;517    memset(ipadd,0,16);
00488c  2110              MOVS     r1,#0x10
00488e  48e5              LDR      r0,|L1.19492|
004890  f7fffffe          BL       __aeabi_memclr
;;;518    parse_g(uart_string_gsm,1,2,'\n','\n',ipadd);
004894  48e3              LDR      r0,|L1.19492|
004896  210a              MOVS     r1,#0xa
004898  460b              MOV      r3,r1
00489a  2202              MOVS     r2,#2
00489c  9100              STR      r1,[sp,#0]
00489e  9001              STR      r0,[sp,#4]
0048a0  2101              MOVS     r1,#1
0048a2  48e1              LDR      r0,|L1.19496|
0048a4  f7fffffe          BL       parse_g
;;;519    remove_all_chars(ipadd,'\r','\n');
0048a8  220a              MOVS     r2,#0xa
0048aa  210d              MOVS     r1,#0xd
0048ac  48dd              LDR      r0,|L1.19492|
0048ae  f7fffffe          BL       remove_all_chars
;;;520    if(strstr(uart_string_gsm,"0.0.0.0"))
0048b2  49de              LDR      r1,|L1.19500|
0048b4  48dc              LDR      r0,|L1.19496|
0048b6  f7fffffe          BL       strstr
0048ba  2800              CMP      r0,#0
0048bc  d001              BEQ      |L1.18626|
;;;521    {
;;;522    	reset_func();
0048be  f7fffffe          BL       reset_func
                  |L1.18626|
;;;523    }	
;;;524    
;;;525    
;;;526    msg_sim800(); 
0048c2  f7fffffe          BL       msg_sim800
;;;527    int_erval=temp;
0048c6  48da              LDR      r0,|L1.19504|
0048c8  6800              LDR      r0,[r0,#0]  ; temp
0048ca  49da              LDR      r1,|L1.19508|
0048cc  6008              STR      r0,[r1,#0]  ; int_erval
;;;528    //resetting interval 
;;;529    						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0048ce  4bda              LDR      r3,|L1.19512|
0048d0  4ada              LDR      r2,|L1.19516|
0048d2  49d0              LDR      r1,|L1.19476|
0048d4  3160              ADDS     r1,r1,#0x60
0048d6  48cd              LDR      r0,|L1.19468|
0048d8  f7fffffe          BL       __2sprintf
;;;530    						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
0048dc  48cc              LDR      r0,|L1.19472|
0048de  6800              LDR      r0,[r0,#0]  ; tmeout
0048e0  4bcc              LDR      r3,|L1.19476|
0048e2  4acd              LDR      r2,|L1.19480|
0048e4  3a7c              SUBS     r2,r2,#0x7c
0048e6  4619              MOV      r1,r3
0048e8  3180              ADDS     r1,r1,#0x80
0048ea  9000              STR      r0,[sp,#0]
0048ec  48c7              LDR      r0,|L1.19468|
0048ee  f7fffffe          BL       send_GSM
;;;531    						clear();
0048f2  f7fffffe          BL       clear
;;;532    						
;;;533    						
;;;534    						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
0048f6  48c6              LDR      r0,|L1.19472|
0048f8  6800              LDR      r0,[r0,#0]  ; tmeout
0048fa  4bc6              LDR      r3,|L1.19476|
0048fc  3388              ADDS     r3,r3,#0x88
0048fe  4ac6              LDR      r2,|L1.19480|
004900  3a7c              SUBS     r2,r2,#0x7c
004902  a1cf              ADR      r1,|L1.19520|
004904  9000              STR      r0,[sp,#0]
004906  4618              MOV      r0,r3
004908  3010              ADDS     r0,r0,#0x10
00490a  f7fffffe          BL       send_GSM
;;;535    						
;;;536    //*************************************tcp initialization*******************************/
;;;537    			clear();		
00490e  f7fffffe          BL       clear
;;;538    						cond=mystrstr(uart_string_gsm,'>');
004912  213e              MOVS     r1,#0x3e
004914  48c4              LDR      r0,|L1.19496|
004916  f7fffffe          BL       mystrstr
00491a  49ca              LDR      r1,|L1.19524|
00491c  7008              STRB     r0,[r1,#0]
;;;539    								if(cond)	
00491e  4608              MOV      r0,r1
004920  7800              LDRB     r0,[r0,#0]  ; cond
004922  2800              CMP      r0,#0
004924  d07e              BEQ      |L1.18980|
;;;540    								{	
;;;541    
;;;542    									clear();
004926  f7fffffe          BL       clear
;;;543    									memset(uart_string_gsm,0,5000);
00492a  49c7              LDR      r1,|L1.19528|
00492c  48be              LDR      r0,|L1.19496|
00492e  f7fffffe          BL       __aeabi_memclr
;;;544    									strcat(data,"\n");
004932  a1c6              ADR      r1,|L1.19532|
004934  48ba              LDR      r0,|L1.19488|
004936  f7fffffe          BL       strcat
;;;545    									len=strlen(data);
00493a  48b9              LDR      r0,|L1.19488|
00493c  f7fffffe          BL       strlen
004940  49c3              LDR      r1,|L1.19536|
004942  6008              STR      r0,[r1,#0]  ; len
;;;546    									tout=0;
004944  2000              MOVS     r0,#0
004946  49c3              LDR      r1,|L1.19540|
004948  6008              STR      r0,[r1,#0]  ; tout
;;;547    									k2=0;
00494a  49c3              LDR      r1,|L1.19544|
00494c  6008              STR      r0,[r1,#0]  ; k2
;;;548    									for(k=0;k<len;k++)
00494e  49c3              LDR      r1,|L1.19548|
004950  6008              STR      r0,[r1,#0]  ; k
004952  e00d              B        |L1.18800|
                  |L1.18772|
;;;549    									{
;;;550    										uart_putchar(UART1_BASE_PTR, data[k]);
004954  48b2              LDR      r0,|L1.19488|
004956  49c1              LDR      r1,|L1.19548|
004958  6809              LDR      r1,[r1,#0]  ; k
00495a  5c40              LDRB     r0,[r0,r1]
00495c  4601              MOV      r1,r0
00495e  9001              STR      r0,[sp,#4]
004960  48bf              LDR      r0,|L1.19552|
004962  f7fffffe          BL       uart_putchar
004966  48bd              LDR      r0,|L1.19548|
004968  6800              LDR      r0,[r0,#0]            ;548  ; k
00496a  1c40              ADDS     r0,r0,#1              ;548
00496c  49bb              LDR      r1,|L1.19548|
00496e  6008              STR      r0,[r1,#0]            ;548  ; k
                  |L1.18800|
004970  48ba              LDR      r0,|L1.19548|
004972  6800              LDR      r0,[r0,#0]            ;548  ; k
004974  49b6              LDR      r1,|L1.19536|
004976  6809              LDR      r1,[r1,#0]            ;548  ; len
004978  4288              CMP      r0,r1                 ;548
00497a  dbeb              BLT      |L1.18772|
;;;551    									}uart_putchar(UART1_BASE_PTR, 0x1A);
00497c  211a              MOVS     r1,#0x1a
00497e  48b8              LDR      r0,|L1.19552|
004980  f7fffffe          BL       uart_putchar
;;;552    									do
004984  bf00              NOP      
                  |L1.18822|
;;;553    																{stcond1=strstr(uart_string_gsm,"SEND OK");
004986  49b7              LDR      r1,|L1.19556|
004988  48a7              LDR      r0,|L1.19496|
00498a  f7fffffe          BL       strstr
00498e  49b6              LDR      r1,|L1.19560|
004990  6008              STR      r0,[r1,#0]  ; stcond1
;;;554    																	stcond2=strstr(uart_string_gsm, "ERROR");
004992  49a1              LDR      r1,|L1.19480|
004994  397c              SUBS     r1,r1,#0x7c
004996  48a4              LDR      r0,|L1.19496|
004998  f7fffffe          BL       strstr
00499c  49b3              LDR      r1,|L1.19564|
00499e  6008              STR      r0,[r1,#0]  ; stcond2
;;;555    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0049a0  499c              LDR      r1,|L1.19476|
0049a2  3190              ADDS     r1,r1,#0x90
0049a4  48a0              LDR      r0,|L1.19496|
0049a6  f7fffffe          BL       strstr
0049aa  49b1              LDR      r1,|L1.19568|
0049ac  6008              STR      r0,[r1,#0]  ; stcond3
;;;556    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0049ae  499a              LDR      r1,|L1.19480|
0049b0  3960              SUBS     r1,r1,#0x60
0049b2  489d              LDR      r0,|L1.19496|
0049b4  f7fffffe          BL       strstr
0049b8  49ae              LDR      r1,|L1.19572|
0049ba  6008              STR      r0,[r1,#0]  ; stcond4
;;;557    																	
;;;558    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
0049bc  48ab              LDR      r0,|L1.19564|
0049be  6800              LDR      r0,[r0,#0]  ; stcond2
0049c0  2800              CMP      r0,#0
0049c2  d10f              BNE      |L1.18916|
0049c4  48aa              LDR      r0,|L1.19568|
0049c6  6800              LDR      r0,[r0,#0]  ; stcond3
0049c8  2800              CMP      r0,#0
0049ca  d10b              BNE      |L1.18916|
0049cc  4608              MOV      r0,r1
0049ce  6800              LDR      r0,[r0,#0]  ; stcond4
0049d0  2800              CMP      r0,#0
0049d2  d107              BNE      |L1.18916|
0049d4  48a4              LDR      r0,|L1.19560|
0049d6  6800              LDR      r0,[r0,#0]  ; stcond1
0049d8  2800              CMP      r0,#0
0049da  d103              BNE      |L1.18916|
0049dc  489d              LDR      r0,|L1.19540|
0049de  6800              LDR      r0,[r0,#0]  ; tout
0049e0  2808              CMP      r0,#8
0049e2  ddd0              BLE      |L1.18822|
                  |L1.18916|
;;;559    																delay(10);clear();
0049e4  200a              MOVS     r0,#0xa
0049e6  f7fffffe          BL       delay
0049ea  f7fffffe          BL       clear
;;;560    														uart_putchar(UART1_BASE_PTR,0x1A);
0049ee  211a              MOVS     r1,#0x1a
0049f0  489b              LDR      r0,|L1.19552|
0049f2  f7fffffe          BL       uart_putchar
;;;561    												delay(10);
0049f6  200a              MOVS     r0,#0xa
0049f8  f7fffffe          BL       delay
;;;562    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
0049fc  211a              MOVS     r1,#0x1a
0049fe  4898              LDR      r0,|L1.19552|
004a00  f7fffffe          BL       uart_putchar
004a04  211a              MOVS     r1,#0x1a
004a06  4896              LDR      r0,|L1.19552|
004a08  f7fffffe          BL       uart_putchar
004a0c  211a              MOVS     r1,#0x1a
004a0e  4894              LDR      r0,|L1.19552|
004a10  f7fffffe          BL       uart_putchar
;;;563    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004a14  211a              MOVS     r1,#0x1a
004a16  4892              LDR      r0,|L1.19552|
004a18  f7fffffe          BL       uart_putchar
004a1c  f7fffffe          BL       clear
004a20  200a              MOVS     r0,#0xa
004a22  e000              B        |L1.18982|
                  |L1.18980|
004a24  e1b3              B        |L1.19854|
                  |L1.18982|
004a26  f7fffffe          BL       delay
;;;564    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004a2a  211a              MOVS     r1,#0x1a
004a2c  488c              LDR      r0,|L1.19552|
004a2e  f7fffffe          BL       uart_putchar
004a32  f7fffffe          BL       clear
004a36  200a              MOVS     r0,#0xa
004a38  f7fffffe          BL       delay
;;;565    															
;;;566    										qwe=strlen(uart_string_gsm);
004a3c  487a              LDR      r0,|L1.19496|
004a3e  f7fffffe          BL       strlen
004a42  498d              LDR      r1,|L1.19576|
004a44  6008              STR      r0,[r1,#0]  ; qwe
;;;567    										uart_putchar(UART1_BASE_PTR,0x1A);clear();delay(10);
004a46  211a              MOVS     r1,#0x1a
004a48  4885              LDR      r0,|L1.19552|
004a4a  f7fffffe          BL       uart_putchar
004a4e  f7fffffe          BL       clear
004a52  200a              MOVS     r0,#0xa
004a54  f7fffffe          BL       delay
;;;568    								delay(50);
004a58  2032              MOVS     r0,#0x32
004a5a  f7fffffe          BL       delay
;;;569    								con1d=strstr(uart_string_gsm,"SEND OK");
004a5e  4981              LDR      r1,|L1.19556|
004a60  4871              LDR      r0,|L1.19496|
004a62  f7fffffe          BL       strstr
004a66  4985              LDR      r1,|L1.19580|
004a68  6008              STR      r0,[r1,#0]  ; con1d
;;;570    								if(!(con1d) == 1 )
004a6a  4608              MOV      r0,r1
004a6c  6800              LDR      r0,[r0,#0]  ; con1d
004a6e  2800              CMP      r0,#0
004a70  d101              BNE      |L1.19062|
004a72  2001              MOVS     r0,#1
004a74  e000              B        |L1.19064|
                  |L1.19062|
004a76  2000              MOVS     r0,#0
                  |L1.19064|
004a78  2801              CMP      r0,#1
004a7a  d17d              BNE      |L1.19320|
;;;571    								{
;;;572    									delay(100);
004a7c  2064              MOVS     r0,#0x64
004a7e  f7fffffe          BL       delay
;;;573    									clear();//memset(uart_string_gsm,0,5000);
004a82  f7fffffe          BL       clear
;;;574    									memset(at_,0,100);
004a86  2164              MOVS     r1,#0x64
004a88  4860              LDR      r0,|L1.19468|
004a8a  f7fffffe          BL       __aeabi_memclr
;;;575    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004a8e  4864              LDR      r0,|L1.19488|
004a90  f7fffffe          BL       strlen
004a94  1c40              ADDS     r0,r0,#1
004a96  4603              MOV      r3,r0
004a98  4a79              LDR      r2,|L1.19584|
004a9a  495f              LDR      r1,|L1.19480|
004a9c  3924              SUBS     r1,r1,#0x24
004a9e  9001              STR      r0,[sp,#4]
004aa0  485a              LDR      r0,|L1.19468|
004aa2  f7fffffe          BL       __2sprintf
;;;576    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004aa6  2005              MOVS     r0,#5
004aa8  4b5b              LDR      r3,|L1.19480|
004aaa  3b7c              SUBS     r3,r3,#0x7c
004aac  4a5a              LDR      r2,|L1.19480|
004aae  a164              ADR      r1,|L1.19520|
004ab0  9000              STR      r0,[sp,#0]
004ab2  4856              LDR      r0,|L1.19468|
004ab4  f7fffffe          BL       send_SD
;;;577    if(strstr(uart_string_gsm,"ERROR")){
004ab8  4957              LDR      r1,|L1.19480|
004aba  397c              SUBS     r1,r1,#0x7c
004abc  485a              LDR      r0,|L1.19496|
004abe  f7fffffe          BL       strstr
004ac2  2800              CMP      r0,#0
004ac4  d004              BEQ      |L1.19152|
;;;578    	drive[0]='C';drive[1]=':';
004ac6  2043              MOVS     r0,#0x43
004ac8  496d              LDR      r1,|L1.19584|
004aca  7008              STRB     r0,[r1,#0]
004acc  203a              MOVS     r0,#0x3a
004ace  7048              STRB     r0,[r1,#1]
                  |L1.19152|
;;;579    }	
;;;580    									clear();	
004ad0  f7fffffe          BL       clear
;;;581    									k2=0;									//string array counter for uart 1
004ad4  2000              MOVS     r0,#0
004ad6  4960              LDR      r1,|L1.19544|
004ad8  6008              STR      r0,[r1,#0]  ; k2
;;;582    									tout=0;	
004ada  495e              LDR      r1,|L1.19540|
004adc  6008              STR      r0,[r1,#0]  ; tout
;;;583    									for(k=0;k<strlen(data);k++)
004ade  495f              LDR      r1,|L1.19548|
004ae0  6008              STR      r0,[r1,#0]  ; k
004ae2  e00d              B        |L1.19200|
                  |L1.19172|
;;;584    									{
;;;585    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004ae4  484e              LDR      r0,|L1.19488|
004ae6  495d              LDR      r1,|L1.19548|
004ae8  6809              LDR      r1,[r1,#0]  ; k
004aea  5c40              LDRB     r0,[r0,r1]
004aec  4601              MOV      r1,r0
004aee  9001              STR      r0,[sp,#4]
004af0  485b              LDR      r0,|L1.19552|
004af2  f7fffffe          BL       uart_putchar
004af6  4859              LDR      r0,|L1.19548|
004af8  6800              LDR      r0,[r0,#0]            ;583  ; k
004afa  1c40              ADDS     r0,r0,#1              ;583
004afc  4957              LDR      r1,|L1.19548|
004afe  6008              STR      r0,[r1,#0]            ;583  ; k
                  |L1.19200|
004b00  4847              LDR      r0,|L1.19488|
004b02  f7fffffe          BL       strlen
004b06  4955              LDR      r1,|L1.19548|
004b08  6809              LDR      r1,[r1,#0]            ;583  ; k
004b0a  4288              CMP      r0,r1                 ;583
004b0c  d8ea              BHI      |L1.19172|
;;;586    									}	
;;;587    										uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004b0e  210a              MOVS     r1,#0xa
004b10  4853              LDR      r0,|L1.19552|
004b12  f7fffffe          BL       uart_putchar
004b16  210a              MOVS     r1,#0xa
004b18  4851              LDR      r0,|L1.19552|
004b1a  f7fffffe          BL       uart_putchar
004b1e  210a              MOVS     r1,#0xa
004b20  484f              LDR      r0,|L1.19552|
004b22  f7fffffe          BL       uart_putchar
004b26  210a              MOVS     r1,#0xa
004b28  484d              LDR      r0,|L1.19552|
004b2a  f7fffffe          BL       uart_putchar
004b2e  210a              MOVS     r1,#0xa
004b30  484b              LDR      r0,|L1.19552|
004b32  f7fffffe          BL       uart_putchar
004b36  210a              MOVS     r1,#0xa
004b38  4849              LDR      r0,|L1.19552|
004b3a  f7fffffe          BL       uart_putchar
004b3e  210a              MOVS     r1,#0xa
004b40  4847              LDR      r0,|L1.19552|
004b42  f7fffffe          BL       uart_putchar
004b46  210a              MOVS     r1,#0xa
004b48  4845              LDR      r0,|L1.19552|
004b4a  f7fffffe          BL       uart_putchar
004b4e  210a              MOVS     r1,#0xa
004b50  4843              LDR      r0,|L1.19552|
004b52  f7fffffe          BL       uart_putchar
004b56  210a              MOVS     r1,#0xa
004b58  4841              LDR      r0,|L1.19552|
004b5a  f7fffffe          BL       uart_putchar
004b5e  210a              MOVS     r1,#0xa
004b60  483f              LDR      r0,|L1.19552|
004b62  f7fffffe          BL       uart_putchar
004b66  210a              MOVS     r1,#0xa
004b68  483d              LDR      r0,|L1.19552|
004b6a  f7fffffe          BL       uart_putchar
004b6e  210a              MOVS     r1,#0xa
004b70  483b              LDR      r0,|L1.19552|
004b72  f7fffffe          BL       uart_putchar
004b76  e000              B        |L1.19322|
                  |L1.19320|
004b78  e256              B        |L1.20520|
                  |L1.19322|
004b7a  210a              MOVS     r1,#0xa
004b7c  4838              LDR      r0,|L1.19552|
004b7e  f7fffffe          BL       uart_putchar
004b82  210a              MOVS     r1,#0xa
004b84  4836              LDR      r0,|L1.19552|
004b86  f7fffffe          BL       uart_putchar
004b8a  210a              MOVS     r1,#0xa
004b8c  4834              LDR      r0,|L1.19552|
004b8e  f7fffffe          BL       uart_putchar
004b92  210a              MOVS     r1,#0xa
004b94  4832              LDR      r0,|L1.19552|
004b96  f7fffffe          BL       uart_putchar
004b9a  210a              MOVS     r1,#0xa
004b9c  4830              LDR      r0,|L1.19552|
004b9e  f7fffffe          BL       uart_putchar
004ba2  210a              MOVS     r1,#0xa
004ba4  482e              LDR      r0,|L1.19552|
004ba6  f7fffffe          BL       uart_putchar
004baa  210a              MOVS     r1,#0xa
004bac  482c              LDR      r0,|L1.19552|
004bae  f7fffffe          BL       uart_putchar
004bb2  210a              MOVS     r1,#0xa
004bb4  482a              LDR      r0,|L1.19552|
004bb6  f7fffffe          BL       uart_putchar
004bba  210a              MOVS     r1,#0xa
004bbc  4828              LDR      r0,|L1.19552|
004bbe  f7fffffe          BL       uart_putchar
004bc2  210a              MOVS     r1,#0xa
004bc4  4826              LDR      r0,|L1.19552|
004bc6  f7fffffe          BL       uart_putchar
004bca  210a              MOVS     r1,#0xa
004bcc  4824              LDR      r0,|L1.19552|
004bce  f7fffffe          BL       uart_putchar
004bd2  210a              MOVS     r1,#0xa
004bd4  4822              LDR      r0,|L1.19552|
004bd6  f7fffffe          BL       uart_putchar
004bda  210a              MOVS     r1,#0xa
004bdc  4820              LDR      r0,|L1.19552|
004bde  f7fffffe          BL       uart_putchar
004be2  210a              MOVS     r1,#0xa
004be4  481e              LDR      r0,|L1.19552|
004be6  f7fffffe          BL       uart_putchar
004bea  210a              MOVS     r1,#0xa
004bec  481c              LDR      r0,|L1.19552|
004bee  f7fffffe          BL       uart_putchar
004bf2  210a              MOVS     r1,#0xa
004bf4  481a              LDR      r0,|L1.19552|
004bf6  f7fffffe          BL       uart_putchar
004bfa  210a              MOVS     r1,#0xa
004bfc  4818              LDR      r0,|L1.19552|
004bfe  f7fffffe          BL       uart_putchar
004c02  210a              MOVS     r1,#0xa
004c04  4816              LDR      r0,|L1.19552|
004c06  f7fffffe          BL       uart_putchar
004c0a  e03b              B        |L1.19588|
                  |L1.19468|
                          DCD      at_
                  |L1.19472|
                          DCD      tmeout
                  |L1.19476|
                          DCD      ||.text||+0xd60
                  |L1.19480|
                          DCD      ||.text||+0x8ec
                  |L1.19484|
004c1c  4f4b00            DCB      "OK",0
004c1f  00                DCB      0
                  |L1.19488|
                          DCD      data
                  |L1.19492|
                          DCD      ipadd
                  |L1.19496|
                          DCD      uart_string_gsm
                  |L1.19500|
                          DCD      ||.text||+0x4388
                  |L1.19504|
                          DCD      temp
                  |L1.19508|
                          DCD      int_erval
                  |L1.19512|
                          DCD      port
                  |L1.19516|
                          DCD      ||ip||
                  |L1.19520|
004c40  3e00              DCB      ">",0
004c42  00                DCB      0
004c43  00                DCB      0
                  |L1.19524|
                          DCD      cond
                  |L1.19528|
                          DCD      0x00001388
                  |L1.19532|
004c4c  0a00              DCB      "\n",0
004c4e  00                DCB      0
004c4f  00                DCB      0
                  |L1.19536|
                          DCD      len
                  |L1.19540|
                          DCD      tout
                  |L1.19544|
                          DCD      ||k2||
                  |L1.19548|
                          DCD      k
                  |L1.19552|
                          DCD      0x4006b000
                  |L1.19556|
                          DCD      ||.text||+0x474
                  |L1.19560|
                          DCD      stcond1
                  |L1.19564|
                          DCD      stcond2
                  |L1.19568|
                          DCD      stcond3
                  |L1.19572|
                          DCD      stcond4
                  |L1.19576|
                          DCD      qwe
                  |L1.19580|
                          DCD      con1d
                  |L1.19584|
                          DCD      drive
                  |L1.19588|
004c84  210a              MOVS     r1,#0xa
004c86  48fe              LDR      r0,|L1.20608|
004c88  f7fffffe          BL       uart_putchar
004c8c  210a              MOVS     r1,#0xa
004c8e  48fc              LDR      r0,|L1.20608|
004c90  f7fffffe          BL       uart_putchar
004c94  210a              MOVS     r1,#0xa
004c96  48fa              LDR      r0,|L1.20608|
004c98  f7fffffe          BL       uart_putchar
004c9c  210a              MOVS     r1,#0xa
004c9e  48f8              LDR      r0,|L1.20608|
004ca0  f7fffffe          BL       uart_putchar
004ca4  210a              MOVS     r1,#0xa
004ca6  48f6              LDR      r0,|L1.20608|
004ca8  f7fffffe          BL       uart_putchar
004cac  210a              MOVS     r1,#0xa
004cae  48f4              LDR      r0,|L1.20608|
004cb0  f7fffffe          BL       uart_putchar
004cb4  210a              MOVS     r1,#0xa
004cb6  48f2              LDR      r0,|L1.20608|
004cb8  f7fffffe          BL       uart_putchar
004cbc  210a              MOVS     r1,#0xa
004cbe  48f0              LDR      r0,|L1.20608|
004cc0  f7fffffe          BL       uart_putchar
004cc4  210a              MOVS     r1,#0xa
004cc6  48ee              LDR      r0,|L1.20608|
004cc8  f7fffffe          BL       uart_putchar
004ccc  210a              MOVS     r1,#0xa
004cce  48ec              LDR      r0,|L1.20608|
004cd0  f7fffffe          BL       uart_putchar
004cd4  210a              MOVS     r1,#0xa
004cd6  48ea              LDR      r0,|L1.20608|
004cd8  f7fffffe          BL       uart_putchar
004cdc  210a              MOVS     r1,#0xa
004cde  48e8              LDR      r0,|L1.20608|
004ce0  f7fffffe          BL       uart_putchar
004ce4  210a              MOVS     r1,#0xa
004ce6  48e6              LDR      r0,|L1.20608|
004ce8  f7fffffe          BL       uart_putchar
004cec  210a              MOVS     r1,#0xa
004cee  48e4              LDR      r0,|L1.20608|
004cf0  f7fffffe          BL       uart_putchar
004cf4  210a              MOVS     r1,#0xa
004cf6  48e2              LDR      r0,|L1.20608|
004cf8  f7fffffe          BL       uart_putchar
004cfc  210a              MOVS     r1,#0xa
004cfe  48e0              LDR      r0,|L1.20608|
004d00  f7fffffe          BL       uart_putchar
004d04  210a              MOVS     r1,#0xa
004d06  48de              LDR      r0,|L1.20608|
004d08  f7fffffe          BL       uart_putchar
004d0c  210a              MOVS     r1,#0xa
004d0e  48dc              LDR      r0,|L1.20608|
004d10  f7fffffe          BL       uart_putchar
004d14  210a              MOVS     r1,#0xa
004d16  48da              LDR      r0,|L1.20608|
004d18  f7fffffe          BL       uart_putchar
004d1c  210a              MOVS     r1,#0xa
004d1e  48d8              LDR      r0,|L1.20608|
004d20  f7fffffe          BL       uart_putchar
004d24  210a              MOVS     r1,#0xa
004d26  48d6              LDR      r0,|L1.20608|
004d28  f7fffffe          BL       uart_putchar
004d2c  210a              MOVS     r1,#0xa
004d2e  48d4              LDR      r0,|L1.20608|
004d30  f7fffffe          BL       uart_putchar
004d34  210a              MOVS     r1,#0xa
004d36  48d2              LDR      r0,|L1.20608|
004d38  f7fffffe          BL       uart_putchar
004d3c  210a              MOVS     r1,#0xa
004d3e  48d0              LDR      r0,|L1.20608|
004d40  f7fffffe          BL       uart_putchar
004d44  210a              MOVS     r1,#0xa
004d46  48ce              LDR      r0,|L1.20608|
004d48  f7fffffe          BL       uart_putchar
004d4c  210a              MOVS     r1,#0xa
004d4e  48cc              LDR      r0,|L1.20608|
004d50  f7fffffe          BL       uart_putchar
;;;588    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004d54  bf00              NOP      
                  |L1.19798|
004d56  49cb              LDR      r1,|L1.20612|
004d58  48cb              LDR      r0,|L1.20616|
004d5a  f7fffffe          BL       strstr
004d5e  2800              CMP      r0,#0
004d60  d10a              BNE      |L1.19832|
004d62  49c8              LDR      r1,|L1.20612|
004d64  3990              SUBS     r1,r1,#0x90
004d66  48c8              LDR      r0,|L1.20616|
004d68  f7fffffe          BL       strstr
004d6c  2800              CMP      r0,#0
004d6e  d103              BNE      |L1.19832|
004d70  48c6              LDR      r0,|L1.20620|
004d72  6800              LDR      r0,[r0,#0]  ; tout
004d74  2805              CMP      r0,#5
004d76  ddee              BLE      |L1.19798|
                  |L1.19832|
;;;589    									{}
;;;590    	                memset(data,0,strlen(data));
004d78  48c5              LDR      r0,|L1.20624|
004d7a  f7fffffe          BL       strlen
004d7e  4601              MOV      r1,r0
004d80  9001              STR      r0,[sp,#4]
004d82  48c3              LDR      r0,|L1.20624|
004d84  f7fffffe          BL       __aeabi_memclr
;;;591    									clear();
004d88  f7fffffe          BL       clear
004d8c  e14c              B        |L1.20520|
                  |L1.19854|
;;;592    									}else{
;;;593    									//send_chunk();
;;;594    									}	
;;;595    						}else{
;;;596    									delay(100);
004d8e  2064              MOVS     r0,#0x64
004d90  f7fffffe          BL       delay
;;;597    									clear();//memset(uart_string_gsm,0,5000);
004d94  f7fffffe          BL       clear
;;;598    
;;;599    									memset(at_,0,100);
004d98  2164              MOVS     r1,#0x64
004d9a  48be              LDR      r0,|L1.20628|
004d9c  f7fffffe          BL       __aeabi_memclr
;;;600    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
004da0  48bb              LDR      r0,|L1.20624|
004da2  f7fffffe          BL       strlen
004da6  1c40              ADDS     r0,r0,#1
004da8  4603              MOV      r3,r0
004daa  4abb              LDR      r2,|L1.20632|
004dac  49b5              LDR      r1,|L1.20612|
004dae  3938              SUBS     r1,r1,#0x38
004db0  9001              STR      r0,[sp,#4]
004db2  48b8              LDR      r0,|L1.20628|
004db4  f7fffffe          BL       __2sprintf
;;;601    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
004db8  2005              MOVS     r0,#5
004dba  4bb2              LDR      r3,|L1.20612|
004dbc  3b90              SUBS     r3,r3,#0x90
004dbe  461a              MOV      r2,r3
004dc0  327c              ADDS     r2,r2,#0x7c
004dc2  a1b6              ADR      r1,|L1.20636|
004dc4  9000              STR      r0,[sp,#0]
004dc6  48b3              LDR      r0,|L1.20628|
004dc8  f7fffffe          BL       send_SD
;;;602    if(strstr(uart_string_gsm,"ERROR")){
004dcc  49ad              LDR      r1,|L1.20612|
004dce  3990              SUBS     r1,r1,#0x90
004dd0  48ad              LDR      r0,|L1.20616|
004dd2  f7fffffe          BL       strstr
004dd6  2800              CMP      r0,#0
004dd8  d004              BEQ      |L1.19940|
;;;603    	drive[0]='C';drive[1]=':';
004dda  2043              MOVS     r0,#0x43
004ddc  49ae              LDR      r1,|L1.20632|
004dde  7008              STRB     r0,[r1,#0]
004de0  203a              MOVS     r0,#0x3a
004de2  7048              STRB     r0,[r1,#1]
                  |L1.19940|
;;;604    }	
;;;605    									clear();	
004de4  f7fffffe          BL       clear
;;;606    									k2=0;									//string array counter for uart 1
004de8  2000              MOVS     r0,#0
004dea  49ad              LDR      r1,|L1.20640|
004dec  6008              STR      r0,[r1,#0]  ; k2
;;;607    									tout=0;	
004dee  49a7              LDR      r1,|L1.20620|
004df0  6008              STR      r0,[r1,#0]  ; tout
;;;608    		for(k=0;k<strlen(data);k++)
004df2  49ac              LDR      r1,|L1.20644|
004df4  6008              STR      r0,[r1,#0]  ; k
004df6  e00d              B        |L1.19988|
                  |L1.19960|
;;;609    		{
;;;610    			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
004df8  48a5              LDR      r0,|L1.20624|
004dfa  49aa              LDR      r1,|L1.20644|
004dfc  6809              LDR      r1,[r1,#0]  ; k
004dfe  5c40              LDRB     r0,[r0,r1]
004e00  4601              MOV      r1,r0
004e02  9001              STR      r0,[sp,#4]
004e04  489e              LDR      r0,|L1.20608|
004e06  f7fffffe          BL       uart_putchar
004e0a  48a6              LDR      r0,|L1.20644|
004e0c  6800              LDR      r0,[r0,#0]            ;608  ; k
004e0e  1c40              ADDS     r0,r0,#1              ;608
004e10  49a4              LDR      r1,|L1.20644|
004e12  6008              STR      r0,[r1,#0]            ;608  ; k
                  |L1.19988|
004e14  489e              LDR      r0,|L1.20624|
004e16  f7fffffe          BL       strlen
004e1a  49a2              LDR      r1,|L1.20644|
004e1c  6809              LDR      r1,[r1,#0]            ;608  ; k
004e1e  4288              CMP      r0,r1                 ;608
004e20  d8ea              BHI      |L1.19960|
;;;611    		}	
;;;612    		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
004e22  210a              MOVS     r1,#0xa
004e24  4896              LDR      r0,|L1.20608|
004e26  f7fffffe          BL       uart_putchar
004e2a  210a              MOVS     r1,#0xa
004e2c  4894              LDR      r0,|L1.20608|
004e2e  f7fffffe          BL       uart_putchar
004e32  210a              MOVS     r1,#0xa
004e34  4892              LDR      r0,|L1.20608|
004e36  f7fffffe          BL       uart_putchar
004e3a  210a              MOVS     r1,#0xa
004e3c  4890              LDR      r0,|L1.20608|
004e3e  f7fffffe          BL       uart_putchar
004e42  210a              MOVS     r1,#0xa
004e44  488e              LDR      r0,|L1.20608|
004e46  f7fffffe          BL       uart_putchar
004e4a  210a              MOVS     r1,#0xa
004e4c  488c              LDR      r0,|L1.20608|
004e4e  f7fffffe          BL       uart_putchar
004e52  210a              MOVS     r1,#0xa
004e54  488a              LDR      r0,|L1.20608|
004e56  f7fffffe          BL       uart_putchar
004e5a  210a              MOVS     r1,#0xa
004e5c  4888              LDR      r0,|L1.20608|
004e5e  f7fffffe          BL       uart_putchar
004e62  210a              MOVS     r1,#0xa
004e64  4886              LDR      r0,|L1.20608|
004e66  f7fffffe          BL       uart_putchar
004e6a  210a              MOVS     r1,#0xa
004e6c  4884              LDR      r0,|L1.20608|
004e6e  f7fffffe          BL       uart_putchar
004e72  210a              MOVS     r1,#0xa
004e74  4882              LDR      r0,|L1.20608|
004e76  f7fffffe          BL       uart_putchar
004e7a  210a              MOVS     r1,#0xa
004e7c  4880              LDR      r0,|L1.20608|
004e7e  f7fffffe          BL       uart_putchar
004e82  210a              MOVS     r1,#0xa
004e84  487e              LDR      r0,|L1.20608|
004e86  f7fffffe          BL       uart_putchar
004e8a  210a              MOVS     r1,#0xa
004e8c  487c              LDR      r0,|L1.20608|
004e8e  f7fffffe          BL       uart_putchar
004e92  210a              MOVS     r1,#0xa
004e94  487a              LDR      r0,|L1.20608|
004e96  f7fffffe          BL       uart_putchar
004e9a  210a              MOVS     r1,#0xa
004e9c  4878              LDR      r0,|L1.20608|
004e9e  f7fffffe          BL       uart_putchar
004ea2  210a              MOVS     r1,#0xa
004ea4  4876              LDR      r0,|L1.20608|
004ea6  f7fffffe          BL       uart_putchar
004eaa  210a              MOVS     r1,#0xa
004eac  4874              LDR      r0,|L1.20608|
004eae  f7fffffe          BL       uart_putchar
004eb2  210a              MOVS     r1,#0xa
004eb4  4872              LDR      r0,|L1.20608|
004eb6  f7fffffe          BL       uart_putchar
004eba  210a              MOVS     r1,#0xa
004ebc  4870              LDR      r0,|L1.20608|
004ebe  f7fffffe          BL       uart_putchar
004ec2  210a              MOVS     r1,#0xa
004ec4  486e              LDR      r0,|L1.20608|
004ec6  f7fffffe          BL       uart_putchar
004eca  210a              MOVS     r1,#0xa
004ecc  486c              LDR      r0,|L1.20608|
004ece  f7fffffe          BL       uart_putchar
004ed2  210a              MOVS     r1,#0xa
004ed4  486a              LDR      r0,|L1.20608|
004ed6  f7fffffe          BL       uart_putchar
004eda  210a              MOVS     r1,#0xa
004edc  4868              LDR      r0,|L1.20608|
004ede  f7fffffe          BL       uart_putchar
004ee2  210a              MOVS     r1,#0xa
004ee4  4866              LDR      r0,|L1.20608|
004ee6  f7fffffe          BL       uart_putchar
004eea  210a              MOVS     r1,#0xa
004eec  4864              LDR      r0,|L1.20608|
004eee  f7fffffe          BL       uart_putchar
004ef2  210a              MOVS     r1,#0xa
004ef4  4862              LDR      r0,|L1.20608|
004ef6  f7fffffe          BL       uart_putchar
004efa  210a              MOVS     r1,#0xa
004efc  4860              LDR      r0,|L1.20608|
004efe  f7fffffe          BL       uart_putchar
004f02  210a              MOVS     r1,#0xa
004f04  485e              LDR      r0,|L1.20608|
004f06  f7fffffe          BL       uart_putchar
004f0a  210a              MOVS     r1,#0xa
004f0c  485c              LDR      r0,|L1.20608|
004f0e  f7fffffe          BL       uart_putchar
004f12  210a              MOVS     r1,#0xa
004f14  485a              LDR      r0,|L1.20608|
004f16  f7fffffe          BL       uart_putchar
004f1a  210a              MOVS     r1,#0xa
004f1c  4858              LDR      r0,|L1.20608|
004f1e  f7fffffe          BL       uart_putchar
004f22  210a              MOVS     r1,#0xa
004f24  4856              LDR      r0,|L1.20608|
004f26  f7fffffe          BL       uart_putchar
004f2a  210a              MOVS     r1,#0xa
004f2c  4854              LDR      r0,|L1.20608|
004f2e  f7fffffe          BL       uart_putchar
004f32  210a              MOVS     r1,#0xa
004f34  4852              LDR      r0,|L1.20608|
004f36  f7fffffe          BL       uart_putchar
004f3a  210a              MOVS     r1,#0xa
004f3c  4850              LDR      r0,|L1.20608|
004f3e  f7fffffe          BL       uart_putchar
004f42  210a              MOVS     r1,#0xa
004f44  484e              LDR      r0,|L1.20608|
004f46  f7fffffe          BL       uart_putchar
004f4a  210a              MOVS     r1,#0xa
004f4c  484c              LDR      r0,|L1.20608|
004f4e  f7fffffe          BL       uart_putchar
004f52  210a              MOVS     r1,#0xa
004f54  484a              LDR      r0,|L1.20608|
004f56  f7fffffe          BL       uart_putchar
004f5a  210a              MOVS     r1,#0xa
004f5c  4848              LDR      r0,|L1.20608|
004f5e  f7fffffe          BL       uart_putchar
004f62  210a              MOVS     r1,#0xa
004f64  4846              LDR      r0,|L1.20608|
004f66  f7fffffe          BL       uart_putchar
004f6a  210a              MOVS     r1,#0xa
004f6c  4844              LDR      r0,|L1.20608|
004f6e  f7fffffe          BL       uart_putchar
004f72  210a              MOVS     r1,#0xa
004f74  4842              LDR      r0,|L1.20608|
004f76  f7fffffe          BL       uart_putchar
004f7a  210a              MOVS     r1,#0xa
004f7c  4840              LDR      r0,|L1.20608|
004f7e  f7fffffe          BL       uart_putchar
004f82  210a              MOVS     r1,#0xa
004f84  483e              LDR      r0,|L1.20608|
004f86  f7fffffe          BL       uart_putchar
004f8a  210a              MOVS     r1,#0xa
004f8c  483c              LDR      r0,|L1.20608|
004f8e  f7fffffe          BL       uart_putchar
004f92  210a              MOVS     r1,#0xa
004f94  483a              LDR      r0,|L1.20608|
004f96  f7fffffe          BL       uart_putchar
004f9a  210a              MOVS     r1,#0xa
004f9c  4838              LDR      r0,|L1.20608|
004f9e  f7fffffe          BL       uart_putchar
004fa2  210a              MOVS     r1,#0xa
004fa4  4836              LDR      r0,|L1.20608|
004fa6  f7fffffe          BL       uart_putchar
004faa  210a              MOVS     r1,#0xa
004fac  4834              LDR      r0,|L1.20608|
004fae  f7fffffe          BL       uart_putchar
004fb2  210a              MOVS     r1,#0xa
004fb4  4832              LDR      r0,|L1.20608|
004fb6  f7fffffe          BL       uart_putchar
004fba  210a              MOVS     r1,#0xa
004fbc  4830              LDR      r0,|L1.20608|
004fbe  f7fffffe          BL       uart_putchar
004fc2  210a              MOVS     r1,#0xa
004fc4  482e              LDR      r0,|L1.20608|
004fc6  f7fffffe          BL       uart_putchar
004fca  210a              MOVS     r1,#0xa
004fcc  482c              LDR      r0,|L1.20608|
004fce  f7fffffe          BL       uart_putchar
004fd2  210a              MOVS     r1,#0xa
004fd4  482a              LDR      r0,|L1.20608|
004fd6  f7fffffe          BL       uart_putchar
004fda  210a              MOVS     r1,#0xa
004fdc  4828              LDR      r0,|L1.20608|
004fde  f7fffffe          BL       uart_putchar
004fe2  210a              MOVS     r1,#0xa
004fe4  4826              LDR      r0,|L1.20608|
004fe6  f7fffffe          BL       uart_putchar
;;;613    								
;;;614    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
004fea  bf00              NOP      
                  |L1.20460|
004fec  4925              LDR      r1,|L1.20612|
004fee  4826              LDR      r0,|L1.20616|
004ff0  f7fffffe          BL       strstr
004ff4  2800              CMP      r0,#0
004ff6  d10a              BNE      |L1.20494|
004ff8  4922              LDR      r1,|L1.20612|
004ffa  3990              SUBS     r1,r1,#0x90
004ffc  4822              LDR      r0,|L1.20616|
004ffe  f7fffffe          BL       strstr
005002  2800              CMP      r0,#0
005004  d103              BNE      |L1.20494|
005006  4821              LDR      r0,|L1.20620|
005008  6800              LDR      r0,[r0,#0]  ; tout
00500a  2805              CMP      r0,#5
00500c  ddee              BLE      |L1.20460|
                  |L1.20494|
;;;615    									{}
;;;616    	                 memset(data,0,strlen(data));
00500e  4820              LDR      r0,|L1.20624|
005010  f7fffffe          BL       strlen
005014  4601              MOV      r1,r0
005016  9001              STR      r0,[sp,#4]
005018  481d              LDR      r0,|L1.20624|
00501a  f7fffffe          BL       __aeabi_memclr
;;;617    									 clear();
00501e  f7fffffe          BL       clear
;;;618      								logged=1;}			//
005022  2001              MOVS     r0,#1
005024  4920              LDR      r1,|L1.20648|
005026  6008              STR      r0,[r1,#0]  ; logged
                  |L1.20520|
;;;619    
;;;620    							
;;;621    
;;;622    	} // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;623    	else
;;;624    	{
;;;625    		//send_chunk();
;;;626    	}		
;;;627    								
;;;628    								
;;;629    								
;;;630    	memset(data,0,strlen(data));	
005028  4819              LDR      r0,|L1.20624|
00502a  f7fffffe          BL       strlen
00502e  4601              MOV      r1,r0
005030  9001              STR      r0,[sp,#4]
005032  4817              LDR      r0,|L1.20624|
005034  f7fffffe          BL       __aeabi_memclr
;;;631    	uart_putchar(UART1_BASE_PTR, 0x1A);
005038  211a              MOVS     r1,#0x1a
00503a  4811              LDR      r0,|L1.20608|
00503c  f7fffffe          BL       uart_putchar
                  |L1.20544|
;;;632    
;;;633    while(1)
005040  e3fe              B        |L1.22592|
                  |L1.20546|
;;;634    {
;;;635    LED_state();
005042  f7fffffe          BL       LED_state
;;;636    LED_state2();
005046  f7fffffe          BL       LED_state2
;;;637    RESET_ON; //not reset
00504a  2020              MOVS     r0,#0x20
00504c  4917              LDR      r1,|L1.20652|
00504e  6048              STR      r0,[r1,#4]
;;;638    msg_sim800(); 
005050  f7fffffe          BL       msg_sim800
;;;639    	DTR_OFF;		// not sleep	
005054  2080              MOVS     r0,#0x80
005056  4915              LDR      r1,|L1.20652|
005058  3140              ADDS     r1,r1,#0x40
00505a  6088              STR      r0,[r1,#8]
;;;640    	delay(200);
00505c  20c8              MOVS     r0,#0xc8
00505e  f7fffffe          BL       delay
;;;641    
;;;642    	sleep_flag=0;
005062  2000              MOVS     r0,#0
005064  4912              LDR      r1,|L1.20656|
005066  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;643    //	if(voltagecbc<4000){breach=1;}
;;;644    //	else{breach=0;}
;;;645    	if(	(GPIOC_PDIR & 0x00000001) || (GPIOB_PDIR & 0x00000001)){
005068  4810              LDR      r0,|L1.20652|
00506a  6900              LDR      r0,[r0,#0x10]
00506c  07c0              LSLS     r0,r0,#31
00506e  0fc0              LSRS     r0,r0,#31
005070  2800              CMP      r0,#0
005072  d121              BNE      |L1.20664|
005074  480d              LDR      r0,|L1.20652|
005076  3840              SUBS     r0,r0,#0x40
005078  6900              LDR      r0,[r0,#0x10]
00507a  07c0              LSLS     r0,r0,#31
00507c  0fc0              LSRS     r0,r0,#31
00507e  e019              B        |L1.20660|
                  |L1.20608|
                          DCD      0x4006b000
                  |L1.20612|
                          DCD      ||.text||+0x900
                  |L1.20616|
                          DCD      uart_string_gsm
                  |L1.20620|
                          DCD      tout
                  |L1.20624|
                          DCD      data
                  |L1.20628|
                          DCD      at_
                  |L1.20632|
                          DCD      drive
                  |L1.20636|
00509c  3e00              DCB      ">",0
00509e  00                DCB      0
00509f  00                DCB      0
                  |L1.20640|
                          DCD      ||k2||
                  |L1.20644|
                          DCD      k
                  |L1.20648|
                          DCD      logged
                  |L1.20652|
                          DCD      0x400ff080
                  |L1.20656|
                          DCD      sleep_flag
                  |L1.20660|
0050b4  2800              CMP      r0,#0
0050b6  d006              BEQ      |L1.20678|
                  |L1.20664|
;;;646    	DTR_OFF;sleep_flag = 0;
0050b8  2080              MOVS     r0,#0x80
0050ba  49fe              LDR      r1,|L1.21684|
0050bc  6088              STR      r0,[r1,#8]
0050be  2000              MOVS     r0,#0
0050c0  49fd              LDR      r1,|L1.21688|
0050c2  6008              STR      r0,[r1,#0]  ; sleep_flag
0050c4  e005              B        |L1.20690|
                  |L1.20678|
;;;647    	}
;;;648    	else{
;;;649    	DTR_ON;sleep_flag=1;
0050c6  2080              MOVS     r0,#0x80
0050c8  49fa              LDR      r1,|L1.21684|
0050ca  6048              STR      r0,[r1,#4]
0050cc  2001              MOVS     r0,#1
0050ce  49fa              LDR      r1,|L1.21688|
0050d0  6008              STR      r0,[r1,#0]  ; sleep_flag
                  |L1.20690|
;;;650    	}
;;;651    
;;;652    	
;;;653    	
;;;654    if(rtcticks2>=1500){
0050d2  48fa              LDR      r0,|L1.21692|
0050d4  6800              LDR      r0,[r0,#0]  ; rtcticks2
0050d6  49fa              LDR      r1,|L1.21696|
0050d8  4288              CMP      r0,r1
0050da  db7d              BLT      |L1.20952|
;;;655    	DTR_OFF;
0050dc  2080              MOVS     r0,#0x80
0050de  49f5              LDR      r1,|L1.21684|
0050e0  6088              STR      r0,[r1,#8]
;;;656    //	send_modem("\r\n\r\n\r\n\n\n\n\n\nDEVICE IS RESETTING.......\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\n\n");
;;;657    	clear();
0050e2  f7fffffe          BL       clear
;;;658    		delay(100);
0050e6  2064              MOVS     r0,#0x64
0050e8  f7fffffe          BL       delay
;;;659    
;;;660    	savecursor();
0050ec  f7fffffe          BL       savecursor
;;;661    	
;;;662    				memset(at_,0,100);
0050f0  2164              MOVS     r1,#0x64
0050f2  48f4              LDR      r0,|L1.21700|
0050f4  f7fffffe          BL       __aeabi_memclr
;;;663    				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0050f8  48f3              LDR      r0,|L1.21704|
0050fa  f7fffffe          BL       strlen
0050fe  1c40              ADDS     r0,r0,#1
005100  4603              MOV      r3,r0
005102  4af2              LDR      r2,|L1.21708|
005104  49f2              LDR      r1,|L1.21712|
005106  9001              STR      r0,[sp,#4]
005108  48ee              LDR      r0,|L1.21700|
00510a  f7fffffe          BL       __2sprintf
;;;664    				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00510e  2005              MOVS     r0,#5
005110  4bef              LDR      r3,|L1.21712|
005112  3b58              SUBS     r3,r3,#0x58
005114  461a              MOV      r2,r3
005116  327c              ADDS     r2,r2,#0x7c
005118  a1ee              ADR      r1,|L1.21716|
00511a  9000              STR      r0,[sp,#0]
00511c  48e9              LDR      r0,|L1.21700|
00511e  f7fffffe          BL       send_SD
;;;665    if(strstr(uart_string_gsm,"ERROR")){
005122  49eb              LDR      r1,|L1.21712|
005124  3958              SUBS     r1,r1,#0x58
005126  48ec              LDR      r0,|L1.21720|
005128  f7fffffe          BL       strstr
00512c  2800              CMP      r0,#0
00512e  d004              BEQ      |L1.20794|
;;;666    	drive[0]='C';drive[1]=':';
005130  2043              MOVS     r0,#0x43
005132  49e6              LDR      r1,|L1.21708|
005134  7008              STRB     r0,[r1,#0]
005136  203a              MOVS     r0,#0x3a
005138  7048              STRB     r0,[r1,#1]
                  |L1.20794|
;;;667    }	
;;;668    				//clear();	
;;;669    				k2=0;									//string array counter for uart 1
00513a  2000              MOVS     r0,#0
00513c  49e7              LDR      r1,|L1.21724|
00513e  6008              STR      r0,[r1,#0]  ; k2
;;;670    				tout=0;	
005140  49e7              LDR      r1,|L1.21728|
005142  6008              STR      r0,[r1,#0]  ; tout
;;;671    				for(k=0;k<strlen(data);k++)
005144  49e7              LDR      r1,|L1.21732|
005146  6008              STR      r0,[r1,#0]  ; k
005148  e00d              B        |L1.20838|
                  |L1.20810|
;;;672    				{
;;;673    					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00514a  48df              LDR      r0,|L1.21704|
00514c  49e5              LDR      r1,|L1.21732|
00514e  6809              LDR      r1,[r1,#0]  ; k
005150  5c40              LDRB     r0,[r0,r1]
005152  4601              MOV      r1,r0
005154  9001              STR      r0,[sp,#4]
005156  48e4              LDR      r0,|L1.21736|
005158  f7fffffe          BL       uart_putchar
00515c  48e1              LDR      r0,|L1.21732|
00515e  6800              LDR      r0,[r0,#0]            ;671  ; k
005160  1c40              ADDS     r0,r0,#1              ;671
005162  49e0              LDR      r1,|L1.21732|
005164  6008              STR      r0,[r1,#0]            ;671  ; k
                  |L1.20838|
005166  48d8              LDR      r0,|L1.21704|
005168  f7fffffe          BL       strlen
00516c  49dd              LDR      r1,|L1.21732|
00516e  6809              LDR      r1,[r1,#0]            ;671  ; k
005170  4288              CMP      r0,r1                 ;671
005172  d8ea              BHI      |L1.20810|
;;;674    				}	
;;;675    				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005174  210a              MOVS     r1,#0xa
005176  48dc              LDR      r0,|L1.21736|
005178  f7fffffe          BL       uart_putchar
00517c  210a              MOVS     r1,#0xa
00517e  48da              LDR      r0,|L1.21736|
005180  f7fffffe          BL       uart_putchar
005184  210a              MOVS     r1,#0xa
005186  48d8              LDR      r0,|L1.21736|
005188  f7fffffe          BL       uart_putchar
00518c  210a              MOVS     r1,#0xa
00518e  48d6              LDR      r0,|L1.21736|
005190  f7fffffe          BL       uart_putchar
005194  210a              MOVS     r1,#0xa
005196  48d4              LDR      r0,|L1.21736|
005198  f7fffffe          BL       uart_putchar
00519c  210a              MOVS     r1,#0xa
00519e  48d2              LDR      r0,|L1.21736|
0051a0  f7fffffe          BL       uart_putchar
0051a4  210a              MOVS     r1,#0xa
0051a6  48d0              LDR      r0,|L1.21736|
0051a8  f7fffffe          BL       uart_putchar
0051ac  210a              MOVS     r1,#0xa
0051ae  48ce              LDR      r0,|L1.21736|
0051b0  f7fffffe          BL       uart_putchar
0051b4  210a              MOVS     r1,#0xa
0051b6  48cc              LDR      r0,|L1.21736|
0051b8  f7fffffe          BL       uart_putchar
0051bc  210a              MOVS     r1,#0xa
0051be  48ca              LDR      r0,|L1.21736|
0051c0  f7fffffe          BL       uart_putchar
0051c4  210a              MOVS     r1,#0xa
0051c6  48c8              LDR      r0,|L1.21736|
0051c8  f7fffffe          BL       uart_putchar
0051cc  210a              MOVS     r1,#0xa
0051ce  48c6              LDR      r0,|L1.21736|
0051d0  f7fffffe          BL       uart_putchar
0051d4  210a              MOVS     r1,#0xa
0051d6  e000              B        |L1.20954|
                  |L1.20952|
0051d8  e0d8              B        |L1.21388|
                  |L1.20954|
0051da  48c3              LDR      r0,|L1.21736|
0051dc  f7fffffe          BL       uart_putchar
0051e0  210a              MOVS     r1,#0xa
0051e2  48c1              LDR      r0,|L1.21736|
0051e4  f7fffffe          BL       uart_putchar
0051e8  210a              MOVS     r1,#0xa
0051ea  48bf              LDR      r0,|L1.21736|
0051ec  f7fffffe          BL       uart_putchar
0051f0  210a              MOVS     r1,#0xa
0051f2  48bd              LDR      r0,|L1.21736|
0051f4  f7fffffe          BL       uart_putchar
0051f8  210a              MOVS     r1,#0xa
0051fa  48bb              LDR      r0,|L1.21736|
0051fc  f7fffffe          BL       uart_putchar
005200  210a              MOVS     r1,#0xa
005202  48b9              LDR      r0,|L1.21736|
005204  f7fffffe          BL       uart_putchar
005208  210a              MOVS     r1,#0xa
00520a  48b7              LDR      r0,|L1.21736|
00520c  f7fffffe          BL       uart_putchar
005210  210a              MOVS     r1,#0xa
005212  48b5              LDR      r0,|L1.21736|
005214  f7fffffe          BL       uart_putchar
005218  210a              MOVS     r1,#0xa
00521a  48b3              LDR      r0,|L1.21736|
00521c  f7fffffe          BL       uart_putchar
005220  210a              MOVS     r1,#0xa
005222  48b1              LDR      r0,|L1.21736|
005224  f7fffffe          BL       uart_putchar
005228  210a              MOVS     r1,#0xa
00522a  48af              LDR      r0,|L1.21736|
00522c  f7fffffe          BL       uart_putchar
005230  210a              MOVS     r1,#0xa
005232  48ad              LDR      r0,|L1.21736|
005234  f7fffffe          BL       uart_putchar
005238  210a              MOVS     r1,#0xa
00523a  48ab              LDR      r0,|L1.21736|
00523c  f7fffffe          BL       uart_putchar
005240  210a              MOVS     r1,#0xa
005242  48a9              LDR      r0,|L1.21736|
005244  f7fffffe          BL       uart_putchar
005248  210a              MOVS     r1,#0xa
00524a  48a7              LDR      r0,|L1.21736|
00524c  f7fffffe          BL       uart_putchar
005250  210a              MOVS     r1,#0xa
005252  48a5              LDR      r0,|L1.21736|
005254  f7fffffe          BL       uart_putchar
005258  210a              MOVS     r1,#0xa
00525a  48a3              LDR      r0,|L1.21736|
00525c  f7fffffe          BL       uart_putchar
005260  210a              MOVS     r1,#0xa
005262  48a1              LDR      r0,|L1.21736|
005264  f7fffffe          BL       uart_putchar
005268  210a              MOVS     r1,#0xa
00526a  489f              LDR      r0,|L1.21736|
00526c  f7fffffe          BL       uart_putchar
005270  210a              MOVS     r1,#0xa
005272  489d              LDR      r0,|L1.21736|
005274  f7fffffe          BL       uart_putchar
005278  210a              MOVS     r1,#0xa
00527a  489b              LDR      r0,|L1.21736|
00527c  f7fffffe          BL       uart_putchar
005280  210a              MOVS     r1,#0xa
005282  4899              LDR      r0,|L1.21736|
005284  f7fffffe          BL       uart_putchar
005288  210a              MOVS     r1,#0xa
00528a  4897              LDR      r0,|L1.21736|
00528c  f7fffffe          BL       uart_putchar
005290  210a              MOVS     r1,#0xa
005292  4895              LDR      r0,|L1.21736|
005294  f7fffffe          BL       uart_putchar
005298  210a              MOVS     r1,#0xa
00529a  4893              LDR      r0,|L1.21736|
00529c  f7fffffe          BL       uart_putchar
0052a0  210a              MOVS     r1,#0xa
0052a2  4891              LDR      r0,|L1.21736|
0052a4  f7fffffe          BL       uart_putchar
0052a8  210a              MOVS     r1,#0xa
0052aa  488f              LDR      r0,|L1.21736|
0052ac  f7fffffe          BL       uart_putchar
0052b0  210a              MOVS     r1,#0xa
0052b2  488d              LDR      r0,|L1.21736|
0052b4  f7fffffe          BL       uart_putchar
0052b8  210a              MOVS     r1,#0xa
0052ba  488b              LDR      r0,|L1.21736|
0052bc  f7fffffe          BL       uart_putchar
0052c0  210a              MOVS     r1,#0xa
0052c2  4889              LDR      r0,|L1.21736|
0052c4  f7fffffe          BL       uart_putchar
0052c8  210a              MOVS     r1,#0xa
0052ca  4887              LDR      r0,|L1.21736|
0052cc  f7fffffe          BL       uart_putchar
0052d0  210a              MOVS     r1,#0xa
0052d2  4885              LDR      r0,|L1.21736|
0052d4  f7fffffe          BL       uart_putchar
0052d8  210a              MOVS     r1,#0xa
0052da  4883              LDR      r0,|L1.21736|
0052dc  f7fffffe          BL       uart_putchar
0052e0  210a              MOVS     r1,#0xa
0052e2  4881              LDR      r0,|L1.21736|
0052e4  f7fffffe          BL       uart_putchar
0052e8  210a              MOVS     r1,#0xa
0052ea  487f              LDR      r0,|L1.21736|
0052ec  f7fffffe          BL       uart_putchar
0052f0  210a              MOVS     r1,#0xa
0052f2  487d              LDR      r0,|L1.21736|
0052f4  f7fffffe          BL       uart_putchar
0052f8  210a              MOVS     r1,#0xa
0052fa  487b              LDR      r0,|L1.21736|
0052fc  f7fffffe          BL       uart_putchar
005300  210a              MOVS     r1,#0xa
005302  4879              LDR      r0,|L1.21736|
005304  f7fffffe          BL       uart_putchar
005308  210a              MOVS     r1,#0xa
00530a  4877              LDR      r0,|L1.21736|
00530c  f7fffffe          BL       uart_putchar
005310  210a              MOVS     r1,#0xa
005312  4875              LDR      r0,|L1.21736|
005314  f7fffffe          BL       uart_putchar
005318  210a              MOVS     r1,#0xa
00531a  4873              LDR      r0,|L1.21736|
00531c  f7fffffe          BL       uart_putchar
005320  210a              MOVS     r1,#0xa
005322  4871              LDR      r0,|L1.21736|
005324  f7fffffe          BL       uart_putchar
005328  210a              MOVS     r1,#0xa
00532a  486f              LDR      r0,|L1.21736|
00532c  f7fffffe          BL       uart_putchar
005330  210a              MOVS     r1,#0xa
005332  486d              LDR      r0,|L1.21736|
005334  f7fffffe          BL       uart_putchar
005338  210a              MOVS     r1,#0xa
00533a  486b              LDR      r0,|L1.21736|
00533c  f7fffffe          BL       uart_putchar
;;;676    				//memset(data,0,1000);
;;;677    				//timer counts to wait for characters in uart 1 									
;;;678    				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005340  bf00              NOP      
                  |L1.21314|
005342  4963              LDR      r1,|L1.21712|
005344  3138              ADDS     r1,r1,#0x38
005346  4864              LDR      r0,|L1.21720|
005348  f7fffffe          BL       strstr
00534c  2800              CMP      r0,#0
00534e  d10a              BNE      |L1.21350|
005350  495f              LDR      r1,|L1.21712|
005352  3958              SUBS     r1,r1,#0x58
005354  4860              LDR      r0,|L1.21720|
005356  f7fffffe          BL       strstr
00535a  2800              CMP      r0,#0
00535c  d103              BNE      |L1.21350|
00535e  4860              LDR      r0,|L1.21728|
005360  6800              LDR      r0,[r0,#0]  ; tout
005362  2805              CMP      r0,#5
005364  dded              BLE      |L1.21314|
                  |L1.21350|
;;;679    				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;680    				}
;;;681    				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;682    				//memset(data,0,strlen(data));
;;;683    				//clear();
;;;684    	RESET_OFF;
005366  2020              MOVS     r0,#0x20
005368  4952              LDR      r1,|L1.21684|
00536a  3940              SUBS     r1,r1,#0x40
00536c  6088              STR      r0,[r1,#8]
;;;685    	RESET_OFF;
00536e  6088              STR      r0,[r1,#8]
;;;686    	delay(100);	
005370  2064              MOVS     r0,#0x64
005372  f7fffffe          BL       delay
;;;687    	RESET_ON;
005376  2020              MOVS     r0,#0x20
005378  494e              LDR      r1,|L1.21684|
00537a  3940              SUBS     r1,r1,#0x40
00537c  6048              STR      r0,[r1,#4]
;;;688    	RESET_ON;	
00537e  6048              STR      r0,[r1,#4]
;;;689    	delay(100);
005380  2064              MOVS     r0,#0x64
005382  f7fffffe          BL       delay
;;;690    	rtcticks2 =0;
005386  2000              MOVS     r0,#0
005388  494c              LDR      r1,|L1.21692|
00538a  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.21388|
;;;691    
;;;692    	}//3600	
;;;693    //memset(at_,0,100);
;;;694    //sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>         \n \n\n\r\n",aliveping,k5,rtcticks2);							
;;;695    //send_modem(at_);
;;;696    //send_modem(num2);	
;;;697    	
;;;698    	
;;;699    if	((sleep_flag != 1  || (aliveping > 5) ) )			
00538c  484a              LDR      r0,|L1.21688|
00538e  6800              LDR      r0,[r0,#0]  ; sleep_flag
005390  2801              CMP      r0,#1
005392  d104              BNE      |L1.21406|
005394  4855              LDR      r0,|L1.21740|
005396  6800              LDR      r0,[r0,#0]  ; aliveping
005398  2805              CMP      r0,#5
00539a  dc00              BGT      |L1.21406|
00539c  e650              B        |L1.20544|
                  |L1.21406|
;;;700    {
;;;701    	DTR_OFF;
00539e  2080              MOVS     r0,#0x80
0053a0  4944              LDR      r1,|L1.21684|
0053a2  6088              STR      r0,[r1,#8]
;;;702    	sleep_flag=0;
0053a4  2000              MOVS     r0,#0
0053a6  4944              LDR      r1,|L1.21688|
0053a8  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;703    	send_GSM("\r\nAT+CSQ\r\n", "OK", "ERROR" , "DEACT",tmeout);		
0053aa  4851              LDR      r0,|L1.21744|
0053ac  6800              LDR      r0,[r0,#0]  ; tmeout
0053ae  4b48              LDR      r3,|L1.21712|
0053b0  3b3c              SUBS     r3,r3,#0x3c
0053b2  461a              MOV      r2,r3
0053b4  3a1c              SUBS     r2,r2,#0x1c
0053b6  a14f              ADR      r1,|L1.21748|
0053b8  9000              STR      r0,[sp,#0]
0053ba  a04f              ADR      r0,|L1.21752|
0053bc  f7fffffe          BL       send_GSM
;;;704    	send_GSM("\r\nAT+CIPCLOSE\r\n", "CLOSE OK", "ERROR" , "ERROR:",tmeout);		
0053c0  484b              LDR      r0,|L1.21744|
0053c2  6800              LDR      r0,[r0,#0]  ; tmeout
0053c4  4b4f              LDR      r3,|L1.21764|
0053c6  4a42              LDR      r2,|L1.21712|
0053c8  3a58              SUBS     r2,r2,#0x58
0053ca  a14f              ADR      r1,|L1.21768|
0053cc  9000              STR      r0,[sp,#0]
0053ce  a051              ADR      r0,|L1.21780|
0053d0  f7fffffe          BL       send_GSM
;;;705    	memset(at_,0,100);
0053d4  2164              MOVS     r1,#0x64
0053d6  483b              LDR      r0,|L1.21700|
0053d8  f7fffffe          BL       __aeabi_memclr
;;;706    	memset(data,0,strlen(data));
0053dc  483a              LDR      r0,|L1.21704|
0053de  f7fffffe          BL       strlen
0053e2  4601              MOV      r1,r0
0053e4  9001              STR      r0,[sp,#4]
0053e6  4838              LDR      r0,|L1.21704|
0053e8  f7fffffe          BL       __aeabi_memclr
;;;707    
;;;708    	GPS_COLLECT();	
0053ec  f7fffffe          BL       GPS_COLLECT
;;;709    	
;;;710    //	if((aliveping>5))	
;;;711    //	{
;;;712    //			memset(ignstr,0,2);
;;;713    //if(GPIOB_PDIR & 0x00000001){
;;;714    //			sprintf(ignstr,"%d,%ld",1,rtcticks2);
;;;715    //}
;;;716    //else{
;;;717    //				sprintf(ignstr,"%d,%ld",0,rtcticks2);
;;;718    
;;;719    //}
;;;720    
;;;721    //	adc_read(9);							
;;;722    //	memset(fuelstr,0,5);
;;;723    //	sprintf(fuelstr,"%d,",fuel);
;;;724    //	memset(acstr,0,2); //ptb2
;;;725    //if(GPIOB_PDIR & 0x00000004){
;;;726    //			sprintf(acstr,"%d",1);
;;;727    //}
;;;728    //else{
;;;729    //				sprintf(acstr,"%d",0);
;;;730    
;;;731    //}
;;;732    
;;;733    //		
;;;734    //		aliveping=0;
;;;735    //		memset(data,0,strlen(data));	
;;;736    //		strcat(data,imei);strcat(data,",ALIVE,");strcat(data,num2);strcat(data,",F=");strcat(data,fuelstr);		strcat(data,",AC=");	
;;;737    //		strcat(data,acstr);
;;;738    //		strcat(data,",I=");	
;;;739    //		strcat(data,ignstr);strcat(data,",\n\n\n"); 
;;;740    //	}	
;;;741    
;;;742    	msg_sim800(); 
0053f0  f7fffffe          BL       msg_sim800
;;;743    	
;;;744    		sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
0053f4  4b4b              LDR      r3,|L1.21796|
0053f6  4a4c              LDR      r2,|L1.21800|
0053f8  4942              LDR      r1,|L1.21764|
0053fa  3160              ADDS     r1,r1,#0x60
0053fc  4831              LDR      r0,|L1.21700|
0053fe  f7fffffe          BL       __2sprintf
;;;745    		send_GSM( at_ , "CONNECT", "ERROR" , "ERROR\r\n",tmeout);	
005402  483b              LDR      r0,|L1.21744|
005404  6800              LDR      r0,[r0,#0]  ; tmeout
005406  4b32              LDR      r3,|L1.21712|
005408  3324              ADDS     r3,r3,#0x24
00540a  461a              MOV      r2,r3
00540c  3a7c              SUBS     r2,r2,#0x7c
00540e  493d              LDR      r1,|L1.21764|
005410  3180              ADDS     r1,r1,#0x80
005412  9000              STR      r0,[sp,#0]
005414  482b              LDR      r0,|L1.21700|
005416  f7fffffe          BL       send_GSM
;;;746    		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);	
00541a  4835              LDR      r0,|L1.21744|
00541c  6800              LDR      r0,[r0,#0]  ; tmeout
00541e  4b39              LDR      r3,|L1.21764|
005420  3388              ADDS     r3,r3,#0x88
005422  4a2b              LDR      r2,|L1.21712|
005424  3a58              SUBS     r2,r2,#0x58
005426  a12b              ADR      r1,|L1.21716|
005428  9000              STR      r0,[sp,#0]
00542a  4618              MOV      r0,r3
00542c  3010              ADDS     r0,r0,#0x10
00542e  f7fffffe          BL       send_GSM
;;;747    		memset(stcond1,0,strlen(stcond1));
005432  483e              LDR      r0,|L1.21804|
005434  6800              LDR      r0,[r0,#0]  ; stcond1
005436  f7fffffe          BL       strlen
00543a  4601              MOV      r1,r0
00543c  9001              STR      r0,[sp,#4]
00543e  483b              LDR      r0,|L1.21804|
005440  6800              LDR      r0,[r0,#0]  ; stcond1
005442  f7fffffe          BL       __aeabi_memclr
;;;748    		memset(stcond2,0,strlen(stcond2));	
005446  483a              LDR      r0,|L1.21808|
005448  6800              LDR      r0,[r0,#0]  ; stcond2
00544a  f7fffffe          BL       strlen
00544e  4601              MOV      r1,r0
005450  9001              STR      r0,[sp,#4]
005452  4837              LDR      r0,|L1.21808|
005454  6800              LDR      r0,[r0,#0]  ; stcond2
005456  f7fffffe          BL       __aeabi_memclr
;;;749    		memset(stcond3,0,strlen(stcond3));	
00545a  4836              LDR      r0,|L1.21812|
00545c  6800              LDR      r0,[r0,#0]  ; stcond3
00545e  f7fffffe          BL       strlen
005462  4601              MOV      r1,r0
005464  9001              STR      r0,[sp,#4]
005466  4833              LDR      r0,|L1.21812|
005468  6800              LDR      r0,[r0,#0]  ; stcond3
00546a  f7fffffe          BL       __aeabi_memclr
;;;750    		memset(stcond4,0,strlen(stcond4));	
00546e  4832              LDR      r0,|L1.21816|
005470  6800              LDR      r0,[r0,#0]  ; stcond4
005472  f7fffffe          BL       strlen
005476  4601              MOV      r1,r0
005478  9001              STR      r0,[sp,#4]
00547a  482f              LDR      r0,|L1.21816|
00547c  6800              LDR      r0,[r0,#0]  ; stcond4
00547e  f7fffffe          BL       __aeabi_memclr
;;;751    		memset(con1d,0,strlen(con1d));	
005482  482e              LDR      r0,|L1.21820|
005484  6800              LDR      r0,[r0,#0]  ; con1d
005486  f7fffffe          BL       strlen
00548a  4601              MOV      r1,r0
00548c  9001              STR      r0,[sp,#4]
00548e  482b              LDR      r0,|L1.21820|
005490  6800              LDR      r0,[r0,#0]  ; con1d
005492  f7fffffe          BL       __aeabi_memclr
;;;752    		cond=0;
005496  2000              MOVS     r0,#0
005498  4929              LDR      r1,|L1.21824|
00549a  7008              STRB     r0,[r1,#0]
;;;753    								cond=mystrstr(uart_string_gsm,'>');
00549c  213e              MOVS     r1,#0x3e
00549e  480e              LDR      r0,|L1.21720|
0054a0  f7fffffe          BL       mystrstr
0054a4  4926              LDR      r1,|L1.21824|
0054a6  7008              STRB     r0,[r1,#0]
;;;754    	
;;;755    								if(cond)	
0054a8  4608              MOV      r0,r1
0054aa  7800              LDRB     r0,[r0,#0]  ; cond
0054ac  2800              CMP      r0,#0
0054ae  d07d              BEQ      |L1.21932|
;;;756    								{		
;;;757    									clear();
0054b0  e048              B        |L1.21828|
0054b2  0000              DCW      0x0000
                  |L1.21684|
                          DCD      0x400ff0c0
                  |L1.21688|
                          DCD      sleep_flag
                  |L1.21692|
                          DCD      rtcticks2
                  |L1.21696|
                          DCD      0x000005dc
                  |L1.21700|
                          DCD      at_
                  |L1.21704|
                          DCD      data
                  |L1.21708|
                          DCD      drive
                  |L1.21712|
                          DCD      ||.text||+0x8c8
                  |L1.21716|
0054d4  3e00              DCB      ">",0
0054d6  00                DCB      0
0054d7  00                DCB      0
                  |L1.21720|
                          DCD      uart_string_gsm
                  |L1.21724|
                          DCD      ||k2||
                  |L1.21728|
                          DCD      tout
                  |L1.21732|
                          DCD      k
                  |L1.21736|
                          DCD      0x4006b000
                  |L1.21740|
                          DCD      aliveping
                  |L1.21744|
                          DCD      tmeout
                  |L1.21748|
0054f4  4f4b00            DCB      "OK",0
0054f7  00                DCB      0
                  |L1.21752|
0054f8  0d0a4154          DCB      "\r\nAT+CSQ\r\n",0
0054fc  2b435351
005500  0d0a00  
005503  00                DCB      0
                  |L1.21764|
                          DCD      ||.text||+0xd60
                  |L1.21768|
005508  434c4f53          DCB      "CLOSE OK",0
00550c  45204f4b
005510  00      
005511  00                DCB      0
005512  00                DCB      0
005513  00                DCB      0
                  |L1.21780|
005514  0d0a4154          DCB      "\r\nAT+CIPCLOSE\r\n",0
005518  2b434950
00551c  434c4f53
005520  450d0a00
                  |L1.21796|
                          DCD      port
                  |L1.21800|
                          DCD      ||ip||
                  |L1.21804|
                          DCD      stcond1
                  |L1.21808|
                          DCD      stcond2
                  |L1.21812|
                          DCD      stcond3
                  |L1.21816|
                          DCD      stcond4
                  |L1.21820|
                          DCD      con1d
                  |L1.21824|
                          DCD      cond
                  |L1.21828|
005544  f7fffffe          BL       clear
;;;758    									memset(uart_string_gsm,0,5000);
005548  49fd              LDR      r1,|L1.22848|
00554a  48fe              LDR      r0,|L1.22852|
00554c  f7fffffe          BL       __aeabi_memclr
;;;759    									strcat(data,"\n\n");
005550  a1fd              ADR      r1,|L1.22856|
005552  48fe              LDR      r0,|L1.22860|
005554  f7fffffe          BL       strcat
;;;760    									len=strlen(data);
005558  48fc              LDR      r0,|L1.22860|
00555a  f7fffffe          BL       strlen
00555e  49fc              LDR      r1,|L1.22864|
005560  6008              STR      r0,[r1,#0]  ; len
;;;761    									tout=0;
005562  2000              MOVS     r0,#0
005564  49fb              LDR      r1,|L1.22868|
005566  6008              STR      r0,[r1,#0]  ; tout
;;;762    									k2=0;
005568  49fb              LDR      r1,|L1.22872|
00556a  6008              STR      r0,[r1,#0]  ; k2
;;;763    									for(k=0;k<len;k++)
00556c  49fb              LDR      r1,|L1.22876|
00556e  6008              STR      r0,[r1,#0]  ; k
005570  e00d              B        |L1.21902|
                  |L1.21874|
;;;764    									{
;;;765    										uart_putchar(UART1_BASE_PTR, data[k]);
005572  48f6              LDR      r0,|L1.22860|
005574  49f9              LDR      r1,|L1.22876|
005576  6809              LDR      r1,[r1,#0]  ; k
005578  5c40              LDRB     r0,[r0,r1]
00557a  4601              MOV      r1,r0
00557c  9001              STR      r0,[sp,#4]
00557e  48f8              LDR      r0,|L1.22880|
005580  f7fffffe          BL       uart_putchar
005584  48f5              LDR      r0,|L1.22876|
005586  6800              LDR      r0,[r0,#0]            ;763  ; k
005588  1c40              ADDS     r0,r0,#1              ;763
00558a  49f4              LDR      r1,|L1.22876|
00558c  6008              STR      r0,[r1,#0]            ;763  ; k
                  |L1.21902|
00558e  48f3              LDR      r0,|L1.22876|
005590  6800              LDR      r0,[r0,#0]            ;763  ; k
005592  49ef              LDR      r1,|L1.22864|
005594  6809              LDR      r1,[r1,#0]            ;763  ; len
005596  4288              CMP      r0,r1                 ;763
005598  dbeb              BLT      |L1.21874|
;;;766    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
00559a  210a              MOVS     r1,#0xa
00559c  48f0              LDR      r0,|L1.22880|
00559e  f7fffffe          BL       uart_putchar
0055a2  211a              MOVS     r1,#0x1a
0055a4  48ee              LDR      r0,|L1.22880|
0055a6  f7fffffe          BL       uart_putchar
0055aa  e000              B        |L1.21934|
                  |L1.21932|
0055ac  e056              B        |L1.22108|
                  |L1.21934|
0055ae  211a              MOVS     r1,#0x1a
0055b0  48eb              LDR      r0,|L1.22880|
0055b2  f7fffffe          BL       uart_putchar
0055b6  211a              MOVS     r1,#0x1a
0055b8  48e9              LDR      r0,|L1.22880|
0055ba  f7fffffe          BL       uart_putchar
0055be  211a              MOVS     r1,#0x1a
0055c0  48e7              LDR      r0,|L1.22880|
0055c2  f7fffffe          BL       uart_putchar
0055c6  211a              MOVS     r1,#0x1a
0055c8  48e5              LDR      r0,|L1.22880|
0055ca  f7fffffe          BL       uart_putchar
;;;767    									do
0055ce  bf00              NOP      
                  |L1.21968|
;;;768    																{stcond1=strstr(uart_string_gsm,"SEND OK");
0055d0  49e4              LDR      r1,|L1.22884|
0055d2  48dc              LDR      r0,|L1.22852|
0055d4  f7fffffe          BL       strstr
0055d8  49e3              LDR      r1,|L1.22888|
0055da  6008              STR      r0,[r1,#0]  ; stcond1
;;;769    																	stcond2=strstr(uart_string_gsm, "ERROR");
0055dc  49e3              LDR      r1,|L1.22892|
0055de  48d9              LDR      r0,|L1.22852|
0055e0  f7fffffe          BL       strstr
0055e4  49e2              LDR      r1,|L1.22896|
0055e6  6008              STR      r0,[r1,#0]  ; stcond2
;;;770    																		stcond3=strstr(uart_string_gsm, "FAIL");	
0055e8  49e2              LDR      r1,|L1.22900|
0055ea  48d6              LDR      r0,|L1.22852|
0055ec  f7fffffe          BL       strstr
0055f0  49e1              LDR      r1,|L1.22904|
0055f2  6008              STR      r0,[r1,#0]  ; stcond3
;;;771    																			stcond4=strstr(uart_string_gsm, "DEACT");	
0055f4  49dd              LDR      r1,|L1.22892|
0055f6  311c              ADDS     r1,r1,#0x1c
0055f8  48d2              LDR      r0,|L1.22852|
0055fa  f7fffffe          BL       strstr
0055fe  49df              LDR      r1,|L1.22908|
005600  6008              STR      r0,[r1,#0]  ; stcond4
;;;772    																	
;;;773    																}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
005602  48db              LDR      r0,|L1.22896|
005604  6800              LDR      r0,[r0,#0]  ; stcond2
005606  2800              CMP      r0,#0
005608  d10f              BNE      |L1.22058|
00560a  48db              LDR      r0,|L1.22904|
00560c  6800              LDR      r0,[r0,#0]  ; stcond3
00560e  2800              CMP      r0,#0
005610  d10b              BNE      |L1.22058|
005612  4608              MOV      r0,r1
005614  6800              LDR      r0,[r0,#0]  ; stcond4
005616  2800              CMP      r0,#0
005618  d107              BNE      |L1.22058|
00561a  48d3              LDR      r0,|L1.22888|
00561c  6800              LDR      r0,[r0,#0]  ; stcond1
00561e  2800              CMP      r0,#0
005620  d103              BNE      |L1.22058|
005622  48cc              LDR      r0,|L1.22868|
005624  6800              LDR      r0,[r0,#0]  ; tout
005626  2808              CMP      r0,#8
005628  ddd2              BLE      |L1.21968|
                  |L1.22058|
;;;774    																//delay(10);clear();
;;;775    														uart_putchar(UART1_BASE_PTR,0x1A);
00562a  211a              MOVS     r1,#0x1a
00562c  48cc              LDR      r0,|L1.22880|
00562e  f7fffffe          BL       uart_putchar
;;;776    												//delay(10);
;;;777    										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005632  211a              MOVS     r1,#0x1a
005634  48ca              LDR      r0,|L1.22880|
005636  f7fffffe          BL       uart_putchar
00563a  211a              MOVS     r1,#0x1a
00563c  48c8              LDR      r0,|L1.22880|
00563e  f7fffffe          BL       uart_putchar
005642  211a              MOVS     r1,#0x1a
005644  48c6              LDR      r0,|L1.22880|
005646  f7fffffe          BL       uart_putchar
;;;778    								
;;;779    									delay(20);															
00564a  2014              MOVS     r0,#0x14
00564c  f7fffffe          BL       delay
;;;780    									stcond1=strstr(uart_string_gsm,"SEND OK"); 
005650  49c4              LDR      r1,|L1.22884|
005652  48bc              LDR      r0,|L1.22852|
005654  f7fffffe          BL       strstr
005658  49c3              LDR      r1,|L1.22888|
00565a  6008              STR      r0,[r1,#0]  ; stcond1
                  |L1.22108|
;;;781    								}else{}
;;;782    stcond1=strstr(uart_string_gsm,"SEND OK"); 
00565c  49c1              LDR      r1,|L1.22884|
00565e  48b9              LDR      r0,|L1.22852|
005660  f7fffffe          BL       strstr
005664  49c0              LDR      r1,|L1.22888|
005666  6008              STR      r0,[r1,#0]  ; stcond1
;;;783    //checks for send ok
;;;784    if(!(stcond1) == 1 ) // if not send ok  ;;;;;;;;;;;;  if no gsm connection is there ,,,... this segment reinitializes GSM, collects GPS data in RAM and attempts to send it
005668  4608              MOV      r0,r1
00566a  6800              LDR      r0,[r0,#0]  ; stcond1
00566c  2800              CMP      r0,#0
00566e  d101              BNE      |L1.22132|
005670  2001              MOVS     r0,#1
005672  e000              B        |L1.22134|
                  |L1.22132|
005674  2000              MOVS     r0,#0
                  |L1.22134|
005676  2801              CMP      r0,#1
005678  d001              BEQ      |L1.22142|
00567a  f000fe6d          BL       |L1.25432|
                  |L1.22142|
;;;785    {									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
00567e  211a              MOVS     r1,#0x1a
005680  48b7              LDR      r0,|L1.22880|
005682  f7fffffe          BL       uart_putchar
005686  f7fffffe          BL       clear
00568a  200a              MOVS     r0,#0xa
00568c  f7fffffe          BL       delay
;;;786    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
005690  211a              MOVS     r1,#0x1a
005692  48b3              LDR      r0,|L1.22880|
005694  f7fffffe          BL       uart_putchar
005698  f7fffffe          BL       clear
00569c  200a              MOVS     r0,#0xa
00569e  f7fffffe          BL       delay
;;;787    									uart_putchar(UART1_BASE_PTR, 0x1A);clear();delay(10);
0056a2  211a              MOVS     r1,#0x1a
0056a4  48ae              LDR      r0,|L1.22880|
0056a6  f7fffffe          BL       uart_putchar
0056aa  f7fffffe          BL       clear
0056ae  200a              MOVS     r0,#0xa
0056b0  f7fffffe          BL       delay
;;;788    									remove_all_chars(data, '\n', '\n');
0056b4  220a              MOVS     r2,#0xa
0056b6  4611              MOV      r1,r2
0056b8  48a4              LDR      r0,|L1.22860|
0056ba  f7fffffe          BL       remove_all_chars
;;;789    									strreplace(data, ",L,", ",H,");	
0056be  4aab              LDR      r2,|L1.22892|
0056c0  3248              ADDS     r2,r2,#0x48
0056c2  1d11              ADDS     r1,r2,#4
0056c4  48a1              LDR      r0,|L1.22860|
0056c6  f7fffffe          BL       strreplace
;;;790    									delay(100);
0056ca  2064              MOVS     r0,#0x64
0056cc  f7fffffe          BL       delay
;;;791    									clear();//memset(uart_string_gsm,0,5000);
0056d0  f7fffffe          BL       clear
;;;792    									memset(at_,0,100);
0056d4  2164              MOVS     r1,#0x64
0056d6  48aa              LDR      r0,|L1.22912|
0056d8  f7fffffe          BL       __aeabi_memclr
;;;793    									sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0056dc  489b              LDR      r0,|L1.22860|
0056de  f7fffffe          BL       strlen
0056e2  1c40              ADDS     r0,r0,#1
0056e4  4603              MOV      r3,r0
0056e6  4aa7              LDR      r2,|L1.22916|
0056e8  49a0              LDR      r1,|L1.22892|
0056ea  3158              ADDS     r1,r1,#0x58
0056ec  9001              STR      r0,[sp,#4]
0056ee  48a4              LDR      r0,|L1.22912|
0056f0  f7fffffe          BL       __2sprintf
;;;794    									send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0056f4  2005              MOVS     r0,#5
0056f6  4b9d              LDR      r3,|L1.22892|
0056f8  461a              MOV      r2,r3
0056fa  327c              ADDS     r2,r2,#0x7c
0056fc  a1a2              ADR      r1,|L1.22920|
0056fe  9000              STR      r0,[sp,#0]
005700  489f              LDR      r0,|L1.22912|
005702  f7fffffe          BL       send_SD
;;;795    if(strstr(uart_string_gsm,"ERROR")){
005706  4999              LDR      r1,|L1.22892|
005708  488e              LDR      r0,|L1.22852|
00570a  f7fffffe          BL       strstr
00570e  2800              CMP      r0,#0
005710  d004              BEQ      |L1.22300|
;;;796    	drive[0]='C';drive[1]=':';
005712  2043              MOVS     r0,#0x43
005714  499b              LDR      r1,|L1.22916|
005716  7008              STRB     r0,[r1,#0]
005718  203a              MOVS     r0,#0x3a
00571a  7048              STRB     r0,[r1,#1]
                  |L1.22300|
;;;797    }	
;;;798    									clear();	
00571c  f7fffffe          BL       clear
;;;799    									k2=0;									//string array counter for uart 1
005720  2000              MOVS     r0,#0
005722  498d              LDR      r1,|L1.22872|
005724  6008              STR      r0,[r1,#0]  ; k2
;;;800    									tout=0;	
005726  498b              LDR      r1,|L1.22868|
005728  6008              STR      r0,[r1,#0]  ; tout
;;;801    									for(k=0;k<strlen(data);k++)
00572a  498c              LDR      r1,|L1.22876|
00572c  6008              STR      r0,[r1,#0]  ; k
00572e  e00d              B        |L1.22348|
                  |L1.22320|
;;;802    									{
;;;803    										uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005730  4886              LDR      r0,|L1.22860|
005732  498a              LDR      r1,|L1.22876|
005734  6809              LDR      r1,[r1,#0]  ; k
005736  5c40              LDRB     r0,[r0,r1]
005738  4601              MOV      r1,r0
00573a  9001              STR      r0,[sp,#4]
00573c  4888              LDR      r0,|L1.22880|
00573e  f7fffffe          BL       uart_putchar
005742  4886              LDR      r0,|L1.22876|
005744  6800              LDR      r0,[r0,#0]            ;801  ; k
005746  1c40              ADDS     r0,r0,#1              ;801
005748  4984              LDR      r1,|L1.22876|
00574a  6008              STR      r0,[r1,#0]            ;801  ; k
                  |L1.22348|
00574c  487f              LDR      r0,|L1.22860|
00574e  f7fffffe          BL       strlen
005752  4982              LDR      r1,|L1.22876|
005754  6809              LDR      r1,[r1,#0]            ;801  ; k
005756  4288              CMP      r0,r1                 ;801
005758  d8ea              BHI      |L1.22320|
;;;804    									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
00575a  210a              MOVS     r1,#0xa
00575c  4880              LDR      r0,|L1.22880|
00575e  f7fffffe          BL       uart_putchar
005762  210a              MOVS     r1,#0xa
005764  487e              LDR      r0,|L1.22880|
005766  f7fffffe          BL       uart_putchar
00576a  210a              MOVS     r1,#0xa
00576c  487c              LDR      r0,|L1.22880|
00576e  f7fffffe          BL       uart_putchar
;;;805    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');
005772  210a              MOVS     r1,#0xa
005774  487a              LDR      r0,|L1.22880|
005776  f7fffffe          BL       uart_putchar
00577a  210a              MOVS     r1,#0xa
00577c  4878              LDR      r0,|L1.22880|
00577e  f7fffffe          BL       uart_putchar
005782  210a              MOVS     r1,#0xa
005784  4876              LDR      r0,|L1.22880|
005786  f7fffffe          BL       uart_putchar
;;;806    									uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00578a  210a              MOVS     r1,#0xa
00578c  4874              LDR      r0,|L1.22880|
00578e  f7fffffe          BL       uart_putchar
005792  210a              MOVS     r1,#0xa
005794  4872              LDR      r0,|L1.22880|
005796  f7fffffe          BL       uart_putchar
00579a  210a              MOVS     r1,#0xa
00579c  4870              LDR      r0,|L1.22880|
00579e  f7fffffe          BL       uart_putchar
;;;807    									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 8) )))
0057a2  bf00              NOP      
                  |L1.22436|
0057a4  4971              LDR      r1,|L1.22892|
0057a6  3190              ADDS     r1,r1,#0x90
0057a8  4866              LDR      r0,|L1.22852|
0057aa  f7fffffe          BL       strstr
0057ae  2800              CMP      r0,#0
0057b0  d109              BNE      |L1.22470|
0057b2  496e              LDR      r1,|L1.22892|
0057b4  4863              LDR      r0,|L1.22852|
0057b6  f7fffffe          BL       strstr
0057ba  2800              CMP      r0,#0
0057bc  d103              BNE      |L1.22470|
0057be  4865              LDR      r0,|L1.22868|
0057c0  6800              LDR      r0,[r0,#0]  ; tout
0057c2  2808              CMP      r0,#8
0057c4  ddee              BLE      |L1.22436|
                  |L1.22470|
;;;808    									{}
;;;809    									clear();
0057c6  f7fffffe          BL       clear
;;;810    									memset(data,0,strlen(data));
0057ca  4860              LDR      r0,|L1.22860|
0057cc  f7fffffe          BL       strlen
0057d0  4601              MOV      r1,r0
0057d2  9001              STR      r0,[sp,#4]
0057d4  485d              LDR      r0,|L1.22860|
0057d6  f7fffffe          BL       __aeabi_memclr
;;;811    									clear();
0057da  f7fffffe          BL       clear
;;;812    									//	log_it();		                         //logging
;;;813    									memset(data,0,strlen(data));	
0057de  485b              LDR      r0,|L1.22860|
0057e0  f7fffffe          BL       strlen
0057e4  4601              MOV      r1,r0
0057e6  9001              STR      r0,[sp,#4]
0057e8  4858              LDR      r0,|L1.22860|
0057ea  f7fffffe          BL       __aeabi_memclr
;;;814    temp=int_erval;				
0057ee  4867              LDR      r0,|L1.22924|
0057f0  6800              LDR      r0,[r0,#0]  ; int_erval
0057f2  4967              LDR      r1,|L1.22928|
0057f4  6008              STR      r0,[r1,#0]  ; temp
;;;815    int_erval=4;
0057f6  2004              MOVS     r0,#4
0057f8  4964              LDR      r1,|L1.22924|
0057fa  6008              STR      r0,[r1,#0]  ; int_erval
;;;816    //setting interval 4
;;;817    									GPS_COLLECT();
0057fc  f7fffffe          BL       GPS_COLLECT
;;;818    									strreplace(data, ",L,", ",H,");	
005800  4a5a              LDR      r2,|L1.22892|
005802  3248              ADDS     r2,r2,#0x48
005804  1d11              ADDS     r1,r2,#4
005806  4851              LDR      r0,|L1.22860|
005808  f7fffffe          BL       strreplace
;;;819    //**************************************tcp_initialization();//reinitialization*********************************/
;;;820    
;;;821    		
;;;822    	msg_sim800(); 
00580c  f7fffffe          BL       msg_sim800
;;;823    	send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
005810  2005              MOVS     r0,#5
005812  4b56              LDR      r3,|L1.22892|
005814  461a              MOV      r2,r3
005816  327c              ADDS     r2,r2,#0x7c
005818  a15e              ADR      r1,|L1.22932|
00581a  9000              STR      r0,[sp,#0]
00581c  4610              MOV      r0,r2
00581e  3020              ADDS     r0,r0,#0x20
005820  f7fffffe          BL       send_GSM
;;;824    	delay(100);
005824  2064              MOVS     r0,#0x64
005826  f7fffffe          BL       delay
;;;825    	send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "Ready", 5);	
00582a  2005              MOVS     r0,#5
00582c  a35a              ADR      r3,|L1.22936|
00582e  4a4f              LDR      r2,|L1.22892|
005830  32ac              ADDS     r2,r2,#0xac
005832  a158              ADR      r1,|L1.22932|
005834  9000              STR      r0,[sp,#0]
005836  4610              MOV      r0,r2
005838  3014              ADDS     r0,r0,#0x14
00583a  f7fffffe          BL       send_GSM
;;;826    	GPS_COLLECT2();
00583e  e000              B        |L1.22594|
                  |L1.22592|
005840  e3fd              B        |L1.24638|
                  |L1.22594|
005842  f7fffffe          BL       GPS_COLLECT2
;;;827    	
;;;828    	strreplace(data, ",L,", ",H,");		
005846  4a49              LDR      r2,|L1.22892|
005848  3248              ADDS     r2,r2,#0x48
00584a  1d11              ADDS     r1,r2,#4
00584c  483f              LDR      r0,|L1.22860|
00584e  f7fffffe          BL       strreplace
;;;829    	GPS_COLLECT2();
005852  f7fffffe          BL       GPS_COLLECT2
;;;830    	strreplace(data, ",L,", ",H,");	
005856  4a45              LDR      r2,|L1.22892|
005858  3248              ADDS     r2,r2,#0x48
00585a  1d11              ADDS     r1,r2,#4
00585c  483b              LDR      r0,|L1.22860|
00585e  f7fffffe          BL       strreplace
;;;831    	GPS_COLLECT2();
005862  f7fffffe          BL       GPS_COLLECT2
;;;832    	strreplace(data, ",L,", ",H,");
005866  4a41              LDR      r2,|L1.22892|
005868  3248              ADDS     r2,r2,#0x48
00586a  1d11              ADDS     r1,r2,#4
00586c  4837              LDR      r0,|L1.22860|
00586e  f7fffffe          BL       strreplace
;;;833    	cond201=(strstr(uart_string_gsm, "OK"));
005872  a148              ADR      r1,|L1.22932|
005874  4833              LDR      r0,|L1.22852|
005876  f7fffffe          BL       strstr
00587a  4949              LDR      r1,|L1.22944|
00587c  6008              STR      r0,[r1,#0]  ; cond201
;;;834    	cond200=(strstr(uart_string_gsm, "ERROR"));
00587e  493b              LDR      r1,|L1.22892|
005880  4830              LDR      r0,|L1.22852|
005882  f7fffffe          BL       strstr
005886  4947              LDR      r1,|L1.22948|
005888  6008              STR      r0,[r1,#0]  ; cond200
;;;835    	if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00588a  4845              LDR      r0,|L1.22944|
00588c  6800              LDR      r0,[r0,#0]  ; cond201
00588e  2800              CMP      r0,#0
005890  d101              BNE      |L1.22678|
005892  2001              MOVS     r0,#1
005894  e000              B        |L1.22680|
                  |L1.22678|
005896  2000              MOVS     r0,#0
                  |L1.22680|
005898  2800              CMP      r0,#0
                  |L1.22682|
00589a  d04f              BEQ      |L1.22844|
00589c  4841              LDR      r0,|L1.22948|
00589e  6800              LDR      r0,[r0,#0]  ; cond200
0058a0  2800              CMP      r0,#0
0058a2  d101              BNE      |L1.22696|
0058a4  2001              MOVS     r0,#1
0058a6  e000              B        |L1.22698|
                  |L1.22696|
0058a8  2000              MOVS     r0,#0
                  |L1.22698|
0058aa  2800              CMP      r0,#0
0058ac  d0f5              BEQ      |L1.22682|
0058ae  483e              LDR      r0,|L1.22952|
0058b0  6800              LDR      r0,[r0,#0]  ; sleep_flag
0058b2  2801              CMP      r0,#1
0058b4  d0f1              BEQ      |L1.22682|
;;;836    	{
;;;837    	delay(100);
0058b6  2064              MOVS     r0,#0x64
0058b8  f7fffffe          BL       delay
;;;838    	clear();//memset(uart_string_gsm,0,5000);
0058bc  f7fffffe          BL       clear
;;;839    	memset(at_,0,100);
0058c0  2164              MOVS     r1,#0x64
0058c2  482f              LDR      r0,|L1.22912|
0058c4  f7fffffe          BL       __aeabi_memclr
;;;840    	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0058c8  4820              LDR      r0,|L1.22860|
0058ca  f7fffffe          BL       strlen
0058ce  1c40              ADDS     r0,r0,#1
0058d0  4603              MOV      r3,r0
0058d2  4a2c              LDR      r2,|L1.22916|
0058d4  4925              LDR      r1,|L1.22892|
0058d6  3158              ADDS     r1,r1,#0x58
0058d8  9001              STR      r0,[sp,#4]
0058da  4829              LDR      r0,|L1.22912|
0058dc  f7fffffe          BL       __2sprintf
;;;841    	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0058e0  2005              MOVS     r0,#5
0058e2  4b22              LDR      r3,|L1.22892|
0058e4  461a              MOV      r2,r3
0058e6  327c              ADDS     r2,r2,#0x7c
0058e8  a127              ADR      r1,|L1.22920|
0058ea  9000              STR      r0,[sp,#0]
0058ec  4824              LDR      r0,|L1.22912|
0058ee  f7fffffe          BL       send_SD
;;;842    if(strstr(uart_string_gsm,"ERROR")){
0058f2  491e              LDR      r1,|L1.22892|
0058f4  4813              LDR      r0,|L1.22852|
0058f6  f7fffffe          BL       strstr
0058fa  2800              CMP      r0,#0
0058fc  d004              BEQ      |L1.22792|
;;;843    	drive[0]='C';drive[1]=':';
0058fe  2043              MOVS     r0,#0x43
005900  4920              LDR      r1,|L1.22916|
005902  7008              STRB     r0,[r1,#0]
005904  203a              MOVS     r0,#0x3a
005906  7048              STRB     r0,[r1,#1]
                  |L1.22792|
;;;844    }	
;;;845    	clear();	
005908  f7fffffe          BL       clear
;;;846    	k2=0;									//string array counter for uart 1
00590c  2000              MOVS     r0,#0
00590e  4912              LDR      r1,|L1.22872|
005910  6008              STR      r0,[r1,#0]  ; k2
;;;847    	tout=0;	
005912  4910              LDR      r1,|L1.22868|
005914  6008              STR      r0,[r1,#0]  ; tout
;;;848    	for(k=0;k<strlen(data);k++)
005916  4911              LDR      r1,|L1.22876|
005918  6008              STR      r0,[r1,#0]  ; k
00591a  e00d              B        |L1.22840|
                  |L1.22812|
;;;849    	{
;;;850    	uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00591c  480b              LDR      r0,|L1.22860|
00591e  490f              LDR      r1,|L1.22876|
005920  6809              LDR      r1,[r1,#0]  ; k
005922  5c40              LDRB     r0,[r0,r1]
005924  4601              MOV      r1,r0
005926  9001              STR      r0,[sp,#4]
005928  480d              LDR      r0,|L1.22880|
00592a  f7fffffe          BL       uart_putchar
00592e  480b              LDR      r0,|L1.22876|
005930  6800              LDR      r0,[r0,#0]            ;848  ; k
005932  1c40              ADDS     r0,r0,#1              ;848
005934  4909              LDR      r1,|L1.22876|
005936  6008              STR      r0,[r1,#0]            ;848  ; k
                  |L1.22840|
005938  4804              LDR      r0,|L1.22860|
00593a  e037              B        |L1.22956|
                  |L1.22844|
00593c  e0c2              B        |L1.23236|
00593e  0000              DCW      0x0000
                  |L1.22848|
                          DCD      0x00001388
                  |L1.22852|
                          DCD      uart_string_gsm
                  |L1.22856|
005948  0a0a00            DCB      "\n\n",0
00594b  00                DCB      0
                  |L1.22860|
                          DCD      data
                  |L1.22864|
                          DCD      len
                  |L1.22868|
                          DCD      tout
                  |L1.22872|
                          DCD      ||k2||
                  |L1.22876|
                          DCD      k
                  |L1.22880|
                          DCD      0x4006b000
                  |L1.22884|
                          DCD      ||.text||+0x474
                  |L1.22888|
                          DCD      stcond1
                  |L1.22892|
                          DCD      ||.text||+0x870
                  |L1.22896|
                          DCD      stcond2
                  |L1.22900|
                          DCD      ||.text||+0xdf0
                  |L1.22904|
                          DCD      stcond3
                  |L1.22908|
                          DCD      stcond4
                  |L1.22912|
                          DCD      at_
                  |L1.22916|
                          DCD      drive
                  |L1.22920|
005988  3e00              DCB      ">",0
00598a  00                DCB      0
00598b  00                DCB      0
                  |L1.22924|
                          DCD      int_erval
                  |L1.22928|
                          DCD      temp
                  |L1.22932|
005994  4f4b00            DCB      "OK",0
005997  00                DCB      0
                  |L1.22936|
005998  52656164          DCB      "Ready",0
00599c  7900    
00599e  00                DCB      0
00599f  00                DCB      0
                  |L1.22944|
                          DCD      cond201
                  |L1.22948|
                          DCD      cond200
                  |L1.22952|
                          DCD      sleep_flag
                  |L1.22956|
0059ac  f7fffffe          BL       strlen
0059b0  49fe              LDR      r1,|L1.23980|
0059b2  6809              LDR      r1,[r1,#0]            ;848  ; k
0059b4  4288              CMP      r0,r1                 ;848
0059b6  d8b1              BHI      |L1.22812|
;;;851    	}	
;;;852    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
0059b8  210a              MOVS     r1,#0xa
0059ba  48fd              LDR      r0,|L1.23984|
0059bc  f7fffffe          BL       uart_putchar
0059c0  210a              MOVS     r1,#0xa
0059c2  48fb              LDR      r0,|L1.23984|
0059c4  f7fffffe          BL       uart_putchar
0059c8  210a              MOVS     r1,#0xa
0059ca  48f9              LDR      r0,|L1.23984|
0059cc  f7fffffe          BL       uart_putchar
0059d0  210a              MOVS     r1,#0xa
0059d2  48f7              LDR      r0,|L1.23984|
0059d4  f7fffffe          BL       uart_putchar
0059d8  210a              MOVS     r1,#0xa
0059da  48f5              LDR      r0,|L1.23984|
0059dc  f7fffffe          BL       uart_putchar
0059e0  210a              MOVS     r1,#0xa
0059e2  48f3              LDR      r0,|L1.23984|
0059e4  f7fffffe          BL       uart_putchar
0059e8  210a              MOVS     r1,#0xa
0059ea  48f1              LDR      r0,|L1.23984|
0059ec  f7fffffe          BL       uart_putchar
;;;853    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
0059f0  210a              MOVS     r1,#0xa
0059f2  48ef              LDR      r0,|L1.23984|
0059f4  f7fffffe          BL       uart_putchar
0059f8  210a              MOVS     r1,#0xa
0059fa  48ed              LDR      r0,|L1.23984|
0059fc  f7fffffe          BL       uart_putchar
005a00  210a              MOVS     r1,#0xa
005a02  48eb              LDR      r0,|L1.23984|
005a04  f7fffffe          BL       uart_putchar
005a08  210a              MOVS     r1,#0xa
005a0a  48e9              LDR      r0,|L1.23984|
005a0c  f7fffffe          BL       uart_putchar
005a10  210a              MOVS     r1,#0xa
005a12  48e7              LDR      r0,|L1.23984|
005a14  f7fffffe          BL       uart_putchar
005a18  210a              MOVS     r1,#0xa
005a1a  48e5              LDR      r0,|L1.23984|
005a1c  f7fffffe          BL       uart_putchar
005a20  210a              MOVS     r1,#0xa
005a22  48e3              LDR      r0,|L1.23984|
005a24  f7fffffe          BL       uart_putchar
;;;854    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005a28  210a              MOVS     r1,#0xa
005a2a  48e1              LDR      r0,|L1.23984|
005a2c  f7fffffe          BL       uart_putchar
005a30  210a              MOVS     r1,#0xa
005a32  48df              LDR      r0,|L1.23984|
005a34  f7fffffe          BL       uart_putchar
005a38  210a              MOVS     r1,#0xa
005a3a  48dd              LDR      r0,|L1.23984|
005a3c  f7fffffe          BL       uart_putchar
005a40  210a              MOVS     r1,#0xa
005a42  48db              LDR      r0,|L1.23984|
005a44  f7fffffe          BL       uart_putchar
005a48  210a              MOVS     r1,#0xa
005a4a  48d9              LDR      r0,|L1.23984|
005a4c  f7fffffe          BL       uart_putchar
005a50  210a              MOVS     r1,#0xa
005a52  48d7              LDR      r0,|L1.23984|
005a54  f7fffffe          BL       uart_putchar
005a58  210a              MOVS     r1,#0xa
005a5a  48d5              LDR      r0,|L1.23984|
005a5c  f7fffffe          BL       uart_putchar
;;;855    	uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');
005a60  210a              MOVS     r1,#0xa
005a62  48d3              LDR      r0,|L1.23984|
005a64  f7fffffe          BL       uart_putchar
005a68  210a              MOVS     r1,#0xa
005a6a  48d1              LDR      r0,|L1.23984|
005a6c  f7fffffe          BL       uart_putchar
;;;856    										//memset(data,0,1000);
;;;857    															//timer counts to wait for characters in uart 1 									
;;;858    										while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
005a70  bf00              NOP      
                  |L1.23154|
005a72  49d0              LDR      r1,|L1.23988|
005a74  48d0              LDR      r0,|L1.23992|
005a76  f7fffffe          BL       strstr
005a7a  2800              CMP      r0,#0
005a7c  d10a              BNE      |L1.23188|
005a7e  49cd              LDR      r1,|L1.23988|
005a80  3990              SUBS     r1,r1,#0x90
005a82  48cd              LDR      r0,|L1.23992|
005a84  f7fffffe          BL       strstr
005a88  2800              CMP      r0,#0
005a8a  d103              BNE      |L1.23188|
005a8c  48cb              LDR      r0,|L1.23996|
005a8e  6800              LDR      r0,[r0,#0]  ; tout
005a90  2805              CMP      r0,#5
005a92  ddee              BLE      |L1.23154|
                  |L1.23188|
;;;859    										{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;860    										}
;;;861    										clear();//uart_putchar(UART1_BASE_PTR,0x1a);
005a94  f7fffffe          BL       clear
;;;862    										//clear();
;;;863    										memset(data,0,strlen(data));
005a98  48c9              LDR      r0,|L1.24000|
005a9a  f7fffffe          BL       strlen
005a9e  4601              MOV      r1,r0
005aa0  9001              STR      r0,[sp,#4]
005aa2  48c7              LDR      r0,|L1.24000|
005aa4  f7fffffe          BL       __aeabi_memclr
;;;864    										clear();
005aa8  f7fffffe          BL       clear
;;;865    										RESET_OFF;delay(100);
005aac  2020              MOVS     r0,#0x20
005aae  49c5              LDR      r1,|L1.24004|
005ab0  6088              STR      r0,[r1,#8]
005ab2  2064              MOVS     r0,#0x64
005ab4  f7fffffe          BL       delay
;;;866    										RESET_ON;delay(100);		
005ab8  2020              MOVS     r0,#0x20
005aba  49c2              LDR      r1,|L1.24004|
005abc  6048              STR      r0,[r1,#4]
005abe  2064              MOVS     r0,#0x64
005ac0  f7fffffe          BL       delay
                  |L1.23236|
;;;867    	}
;;;868    		
;;;869    	send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
005ac4  2004              MOVS     r0,#4
005ac6  4bc0              LDR      r3,|L1.24008|
005ac8  4aba              LDR      r2,|L1.23988|
005aca  3a14              SUBS     r2,r2,#0x14
005acc  a1bf              ADR      r1,|L1.24012|
005ace  9000              STR      r0,[sp,#0]
005ad0  4618              MOV      r0,r3
005ad2  300c              ADDS     r0,r0,#0xc
005ad4  f7fffffe          BL       send_GSM
;;;870    	GPS_COLLECT2();
005ad8  f7fffffe          BL       GPS_COLLECT2
;;;871    	strreplace(data, ",L,", ",H,");	
005adc  4ab5              LDR      r2,|L1.23988|
005ade  3a48              SUBS     r2,r2,#0x48
005ae0  1d11              ADDS     r1,r2,#4
005ae2  48b7              LDR      r0,|L1.24000|
005ae4  f7fffffe          BL       strreplace
;;;872    	memset(at_,0,100);
005ae8  2164              MOVS     r1,#0x64
005aea  48b9              LDR      r0,|L1.24016|
005aec  f7fffffe          BL       __aeabi_memclr
;;;873    	sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
005af0  4ab8              LDR      r2,|L1.24020|
005af2  49b5              LDR      r1,|L1.24008|
005af4  3120              ADDS     r1,r1,#0x20
005af6  48b6              LDR      r0,|L1.24016|
005af8  f7fffffe          BL       __2sprintf
;;;874    	send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
005afc  48b6              LDR      r0,|L1.24024|
005afe  6800              LDR      r0,[r0,#0]  ; tmeout
005b00  4bb1              LDR      r3,|L1.24008|
005b02  4aac              LDR      r2,|L1.23988|
005b04  3a14              SUBS     r2,r2,#0x14
005b06  a1b1              ADR      r1,|L1.24012|
005b08  9000              STR      r0,[sp,#0]
005b0a  48b1              LDR      r0,|L1.24016|
005b0c  f7fffffe          BL       send_GSM
;;;875    	msg_sim800(); 
005b10  f7fffffe          BL       msg_sim800
;;;876    	send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
005b14  2004              MOVS     r0,#4
005b16  4ba7              LDR      r3,|L1.23988|
005b18  3b74              SUBS     r3,r3,#0x74
005b1a  461a              MOV      r2,r3
005b1c  3260              ADDS     r2,r2,#0x60
005b1e  a1ab              ADR      r1,|L1.24012|
005b20  9000              STR      r0,[sp,#0]
005b22  48a9              LDR      r0,|L1.24008|
005b24  3038              ADDS     r0,r0,#0x38
005b26  f7fffffe          BL       send_GSM
;;;877    	GPS_COLLECT2();
005b2a  f7fffffe          BL       GPS_COLLECT2
;;;878    	strreplace(data, ",L,", ",H,");	
005b2e  4aa1              LDR      r2,|L1.23988|
005b30  3a48              SUBS     r2,r2,#0x48
005b32  1d11              ADDS     r1,r2,#4
005b34  48a2              LDR      r0,|L1.24000|
005b36  f7fffffe          BL       strreplace
;;;879    	GPS_COLLECT2();
005b3a  f7fffffe          BL       GPS_COLLECT2
;;;880    	strreplace(data, ",L,", ",H,");	
005b3e  4a9d              LDR      r2,|L1.23988|
005b40  3a48              SUBS     r2,r2,#0x48
005b42  1d11              ADDS     r1,r2,#4
005b44  489e              LDR      r0,|L1.24000|
005b46  f7fffffe          BL       strreplace
;;;881    
;;;882    
;;;883    	msg_sim800(); 
005b4a  f7fffffe          BL       msg_sim800
;;;884    	GPS_COLLECT2();
005b4e  f7fffffe          BL       GPS_COLLECT2
;;;885    	strreplace(data, ",L,", ",H,");	
005b52  4a98              LDR      r2,|L1.23988|
005b54  3a48              SUBS     r2,r2,#0x48
005b56  1d11              ADDS     r1,r2,#4
005b58  4899              LDR      r0,|L1.24000|
005b5a  f7fffffe          BL       strreplace
;;;886    send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);	
005b5e  2001              MOVS     r0,#1
005b60  4b94              LDR      r3,|L1.23988|
005b62  3b74              SUBS     r3,r3,#0x74
005b64  461a              MOV      r2,r3
005b66  3260              ADDS     r2,r2,#0x60
005b68  a198              ADR      r1,|L1.24012|
005b6a  9000              STR      r0,[sp,#0]
005b6c  4896              LDR      r0,|L1.24008|
005b6e  3048              ADDS     r0,r0,#0x48
005b70  f7fffffe          BL       send_GSM
;;;887    memset(ipadd,0,16);
005b74  2110              MOVS     r1,#0x10
005b76  4899              LDR      r0,|L1.24028|
005b78  f7fffffe          BL       __aeabi_memclr
;;;888    parse_g(uart_string_gsm,1,2,'\n','\n',ipadd);	
005b7c  4897              LDR      r0,|L1.24028|
005b7e  210a              MOVS     r1,#0xa
005b80  460b              MOV      r3,r1
005b82  2202              MOVS     r2,#2
005b84  9100              STR      r1,[sp,#0]
005b86  9001              STR      r0,[sp,#4]
005b88  2101              MOVS     r1,#1
005b8a  488b              LDR      r0,|L1.23992|
005b8c  f7fffffe          BL       parse_g
;;;889    remove_all_chars(ipadd,'\r','\n');
005b90  220a              MOVS     r2,#0xa
005b92  210d              MOVS     r1,#0xd
005b94  4891              LDR      r0,|L1.24028|
005b96  f7fffffe          BL       remove_all_chars
;;;890    if(strstr(uart_string_gsm,"0.0.0.0"))
005b9a  4991              LDR      r1,|L1.24032|
005b9c  4886              LDR      r0,|L1.23992|
005b9e  f7fffffe          BL       strstr
005ba2  2800              CMP      r0,#0
005ba4  d001              BEQ      |L1.23466|
;;;891    {
;;;892    	reset_func();
005ba6  f7fffffe          BL       reset_func
                  |L1.23466|
;;;893    }	
;;;894    
;;;895    
;;;896    	msg_sim800(); 
005baa  f7fffffe          BL       msg_sim800
;;;897    int_erval=temp;
005bae  488d              LDR      r0,|L1.24036|
005bb0  6800              LDR      r0,[r0,#0]  ; temp
005bb2  498d              LDR      r1,|L1.24040|
005bb4  6008              STR      r0,[r1,#0]  ; int_erval
;;;898    							sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
005bb6  4b8d              LDR      r3,|L1.24044|
005bb8  4a8d              LDR      r2,|L1.24048|
005bba  4983              LDR      r1,|L1.24008|
005bbc  3160              ADDS     r1,r1,#0x60
005bbe  4884              LDR      r0,|L1.24016|
005bc0  f7fffffe          BL       __2sprintf
;;;899    							send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
005bc4  4884              LDR      r0,|L1.24024|
005bc6  6800              LDR      r0,[r0,#0]  ; tmeout
005bc8  4b7f              LDR      r3,|L1.24008|
005bca  4a7a              LDR      r2,|L1.23988|
005bcc  3a90              SUBS     r2,r2,#0x90
005bce  4619              MOV      r1,r3
005bd0  3180              ADDS     r1,r1,#0x80
005bd2  9000              STR      r0,[sp,#0]
005bd4  487e              LDR      r0,|L1.24016|
005bd6  f7fffffe          BL       send_GSM
;;;900    							clear();
005bda  f7fffffe          BL       clear
;;;901    							
;;;902    							
;;;903    							send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);		
005bde  487e              LDR      r0,|L1.24024|
005be0  6800              LDR      r0,[r0,#0]  ; tmeout
005be2  4b79              LDR      r3,|L1.24008|
005be4  3388              ADDS     r3,r3,#0x88
005be6  4a73              LDR      r2,|L1.23988|
005be8  3a90              SUBS     r2,r2,#0x90
005bea  a182              ADR      r1,|L1.24052|
005bec  9000              STR      r0,[sp,#0]
005bee  4618              MOV      r0,r3
005bf0  3010              ADDS     r0,r0,#0x10
005bf2  f7fffffe          BL       send_GSM
;;;904    	//*****************************************tcp_initialization ends**************************//									
;;;905    										clear();		
005bf6  f7fffffe          BL       clear
;;;906    										memset(stcond1,0,strlen(stcond1));
005bfa  487f              LDR      r0,|L1.24056|
005bfc  6800              LDR      r0,[r0,#0]  ; stcond1
005bfe  f7fffffe          BL       strlen
005c02  4601              MOV      r1,r0
005c04  9001              STR      r0,[sp,#4]
005c06  487c              LDR      r0,|L1.24056|
005c08  6800              LDR      r0,[r0,#0]  ; stcond1
005c0a  f7fffffe          BL       __aeabi_memclr
;;;907    										memset(stcond2,0,strlen(stcond2));	
005c0e  487b              LDR      r0,|L1.24060|
005c10  6800              LDR      r0,[r0,#0]  ; stcond2
005c12  f7fffffe          BL       strlen
005c16  4601              MOV      r1,r0
005c18  9001              STR      r0,[sp,#4]
005c1a  4878              LDR      r0,|L1.24060|
005c1c  6800              LDR      r0,[r0,#0]  ; stcond2
005c1e  f7fffffe          BL       __aeabi_memclr
;;;908    										memset(stcond3,0,strlen(stcond3));	
005c22  4877              LDR      r0,|L1.24064|
005c24  6800              LDR      r0,[r0,#0]  ; stcond3
005c26  f7fffffe          BL       strlen
005c2a  4601              MOV      r1,r0
005c2c  9001              STR      r0,[sp,#4]
005c2e  4874              LDR      r0,|L1.24064|
005c30  6800              LDR      r0,[r0,#0]  ; stcond3
005c32  f7fffffe          BL       __aeabi_memclr
;;;909    										memset(stcond4,0,strlen(stcond4));								
005c36  4873              LDR      r0,|L1.24068|
005c38  6800              LDR      r0,[r0,#0]  ; stcond4
005c3a  f7fffffe          BL       strlen
005c3e  4601              MOV      r1,r0
005c40  9001              STR      r0,[sp,#4]
005c42  4870              LDR      r0,|L1.24068|
005c44  6800              LDR      r0,[r0,#0]  ; stcond4
005c46  f7fffffe          BL       __aeabi_memclr
;;;910    										cond=mystrstr(uart_string_gsm,'>');    //tries to send if yes sends it;
005c4a  213e              MOVS     r1,#0x3e
005c4c  485a              LDR      r0,|L1.23992|
005c4e  f7fffffe          BL       mystrstr
005c52  496d              LDR      r1,|L1.24072|
005c54  7008              STRB     r0,[r1,#0]
;;;911    								
;;;912    									if(cond)	
005c56  4608              MOV      r0,r1
005c58  7800              LDRB     r0,[r0,#0]  ; cond
005c5a  2800              CMP      r0,#0
005c5c  d07d              BEQ      |L1.23898|
;;;913    									{	
;;;914    										clear();
005c5e  f7fffffe          BL       clear
;;;915    										memset(uart_string_gsm,0,5000);
005c62  496a              LDR      r1,|L1.24076|
005c64  4854              LDR      r0,|L1.23992|
005c66  f7fffffe          BL       __aeabi_memclr
;;;916    										strcat(data,"\n");
005c6a  a169              ADR      r1,|L1.24080|
005c6c  4854              LDR      r0,|L1.24000|
005c6e  f7fffffe          BL       strcat
;;;917    										len=strlen(data);
005c72  4853              LDR      r0,|L1.24000|
005c74  f7fffffe          BL       strlen
005c78  4966              LDR      r1,|L1.24084|
005c7a  6008              STR      r0,[r1,#0]  ; len
;;;918    										tout=0;
005c7c  2000              MOVS     r0,#0
005c7e  494f              LDR      r1,|L1.23996|
005c80  6008              STR      r0,[r1,#0]  ; tout
;;;919    										k2=0;
005c82  4965              LDR      r1,|L1.24088|
005c84  6008              STR      r0,[r1,#0]  ; k2
;;;920    										for(k=0;k<len;k++)
005c86  4949              LDR      r1,|L1.23980|
005c88  6008              STR      r0,[r1,#0]  ; k
005c8a  e00d              B        |L1.23720|
                  |L1.23692|
;;;921    										{uart_putchar(UART1_BASE_PTR, data[k]);
005c8c  484c              LDR      r0,|L1.24000|
005c8e  4947              LDR      r1,|L1.23980|
005c90  6809              LDR      r1,[r1,#0]  ; k
005c92  5c40              LDRB     r0,[r0,r1]
005c94  4601              MOV      r1,r0
005c96  9001              STR      r0,[sp,#4]
005c98  4845              LDR      r0,|L1.23984|
005c9a  f7fffffe          BL       uart_putchar
005c9e  4843              LDR      r0,|L1.23980|
005ca0  6800              LDR      r0,[r0,#0]            ;920  ; k
005ca2  1c40              ADDS     r0,r0,#1              ;920
005ca4  4941              LDR      r1,|L1.23980|
005ca6  6008              STR      r0,[r1,#0]            ;920  ; k
                  |L1.23720|
005ca8  4840              LDR      r0,|L1.23980|
005caa  6800              LDR      r0,[r0,#0]            ;920  ; k
005cac  4959              LDR      r1,|L1.24084|
005cae  6809              LDR      r1,[r1,#0]            ;920  ; len
005cb0  4288              CMP      r0,r1                 ;920
005cb2  dbeb              BLT      |L1.23692|
;;;922    										}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005cb4  210a              MOVS     r1,#0xa
005cb6  483e              LDR      r0,|L1.23984|
005cb8  f7fffffe          BL       uart_putchar
005cbc  211a              MOVS     r1,#0x1a
005cbe  483c              LDR      r0,|L1.23984|
005cc0  f7fffffe          BL       uart_putchar
005cc4  211a              MOVS     r1,#0x1a
005cc6  483a              LDR      r0,|L1.23984|
005cc8  f7fffffe          BL       uart_putchar
005ccc  211a              MOVS     r1,#0x1a
005cce  4838              LDR      r0,|L1.23984|
005cd0  f7fffffe          BL       uart_putchar
;;;923    										do{stcond1=strstr(uart_string_gsm,"SEND OK");
005cd4  bf00              NOP      
                  |L1.23766|
005cd6  4951              LDR      r1,|L1.24092|
005cd8  4837              LDR      r0,|L1.23992|
005cda  f7fffffe          BL       strstr
005cde  4946              LDR      r1,|L1.24056|
005ce0  6008              STR      r0,[r1,#0]  ; stcond1
;;;924    												stcond2=strstr(uart_string_gsm, "ERROR");
005ce2  4934              LDR      r1,|L1.23988|
005ce4  3990              SUBS     r1,r1,#0x90
005ce6  4834              LDR      r0,|L1.23992|
005ce8  f7fffffe          BL       strstr
005cec  4943              LDR      r1,|L1.24060|
005cee  6008              STR      r0,[r1,#0]  ; stcond2
;;;925    													stcond3=strstr(uart_string_gsm, "FAIL");	
005cf0  4935              LDR      r1,|L1.24008|
005cf2  3190              ADDS     r1,r1,#0x90
005cf4  4830              LDR      r0,|L1.23992|
005cf6  f7fffffe          BL       strstr
005cfa  4941              LDR      r1,|L1.24064|
005cfc  6008              STR      r0,[r1,#0]  ; stcond3
;;;926    														stcond4=strstr(uart_string_gsm, "DEACT");	
005cfe  492d              LDR      r1,|L1.23988|
005d00  3974              SUBS     r1,r1,#0x74
005d02  482d              LDR      r0,|L1.23992|
005d04  f7fffffe          BL       strstr
005d08  493e              LDR      r1,|L1.24068|
005d0a  6008              STR      r0,[r1,#0]  ; stcond4
;;;927    											}while(!(stcond2 || stcond3 || stcond4 || stcond1 || (tout > 8) ) ); //|| (timeout < 1)   
005d0c  483b              LDR      r0,|L1.24060|
005d0e  6800              LDR      r0,[r0,#0]  ; stcond2
005d10  2800              CMP      r0,#0
005d12  d10f              BNE      |L1.23860|
005d14  483a              LDR      r0,|L1.24064|
005d16  6800              LDR      r0,[r0,#0]  ; stcond3
005d18  2800              CMP      r0,#0
005d1a  d10b              BNE      |L1.23860|
005d1c  4608              MOV      r0,r1
005d1e  6800              LDR      r0,[r0,#0]  ; stcond4
005d20  2800              CMP      r0,#0
005d22  d107              BNE      |L1.23860|
005d24  4834              LDR      r0,|L1.24056|
005d26  6800              LDR      r0,[r0,#0]  ; stcond1
005d28  2800              CMP      r0,#0
005d2a  d103              BNE      |L1.23860|
005d2c  4823              LDR      r0,|L1.23996|
005d2e  6800              LDR      r0,[r0,#0]  ; tout
005d30  2808              CMP      r0,#8
005d32  ddd0              BLE      |L1.23766|
                  |L1.23860|
;;;928    										uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
005d34  211a              MOVS     r1,#0x1a
005d36  481e              LDR      r0,|L1.23984|
005d38  f7fffffe          BL       uart_putchar
005d3c  211a              MOVS     r1,#0x1a
005d3e  481c              LDR      r0,|L1.23984|
005d40  f7fffffe          BL       uart_putchar
005d44  211a              MOVS     r1,#0x1a
005d46  481a              LDR      r0,|L1.23984|
005d48  f7fffffe          BL       uart_putchar
005d4c  211a              MOVS     r1,#0x1a
005d4e  4818              LDR      r0,|L1.23984|
005d50  f7fffffe          BL       uart_putchar
;;;929    										con1d=	(strstr(uart_string_gsm,"SEND OK"));
005d54  4931              LDR      r1,|L1.24092|
005d56  4818              LDR      r0,|L1.23992|
005d58  e000              B        |L1.23900|
                  |L1.23898|
005d5a  e19d              B        |L1.24728|
                  |L1.23900|
005d5c  f7fffffe          BL       strstr
005d60  492f              LDR      r1,|L1.24096|
005d62  6008              STR      r0,[r1,#0]  ; con1d
;;;930    																	if(!(con1d) == 1 ) 
005d64  4608              MOV      r0,r1
005d66  6800              LDR      r0,[r0,#0]  ; con1d
005d68  2800              CMP      r0,#0
005d6a  d101              BNE      |L1.23920|
005d6c  2001              MOVS     r0,#1
005d6e  e000              B        |L1.23922|
                  |L1.23920|
005d70  2000              MOVS     r0,#0
                  |L1.23922|
005d72  2801              CMP      r0,#1
005d74  d172              BNE      |L1.24156|
;;;931    																	{
;;;932    																			delay(100);
005d76  2064              MOVS     r0,#0x64
005d78  f7fffffe          BL       delay
;;;933    																			clear();//memset(uart_string_gsm,0,5000);
005d7c  f7fffffe          BL       clear
;;;934    																			memset(at_,0,100);
005d80  2164              MOVS     r1,#0x64
005d82  4813              LDR      r0,|L1.24016|
005d84  f7fffffe          BL       __aeabi_memclr
;;;935    																			sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
005d88  480d              LDR      r0,|L1.24000|
005d8a  f7fffffe          BL       strlen
005d8e  1c40              ADDS     r0,r0,#1
005d90  4603              MOV      r3,r0
005d92  4a24              LDR      r2,|L1.24100|
005d94  4907              LDR      r1,|L1.23988|
005d96  3938              SUBS     r1,r1,#0x38
005d98  9001              STR      r0,[sp,#4]
005d9a  480d              LDR      r0,|L1.24016|
005d9c  f7fffffe          BL       __2sprintf
;;;936    																			send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
005da0  2005              MOVS     r0,#5
005da2  4b04              LDR      r3,|L1.23988|
005da4  3b90              SUBS     r3,r3,#0x90
005da6  461a              MOV      r2,r3
005da8  327c              ADDS     r2,r2,#0x7c
005daa  e03d              B        |L1.24104|
                  |L1.23980|
                          DCD      k
                  |L1.23984|
                          DCD      0x4006b000
                  |L1.23988|
                          DCD      ||.text||+0x900
                  |L1.23992|
                          DCD      uart_string_gsm
                  |L1.23996|
                          DCD      tout
                  |L1.24000|
                          DCD      data
                  |L1.24004|
                          DCD      0x400ff080
                  |L1.24008|
                          DCD      ||.text||+0xd60
                  |L1.24012|
005dcc  4f4b00            DCB      "OK",0
005dcf  00                DCB      0
                  |L1.24016|
                          DCD      at_
                  |L1.24020|
                          DCD      apn
                  |L1.24024|
                          DCD      tmeout
                  |L1.24028|
                          DCD      ipadd
                  |L1.24032|
                          DCD      ||.text||+0x4388
                  |L1.24036|
                          DCD      temp
                  |L1.24040|
                          DCD      int_erval
                  |L1.24044|
                          DCD      port
                  |L1.24048|
                          DCD      ||ip||
                  |L1.24052|
005df4  3e00              DCB      ">",0
005df6  00                DCB      0
005df7  00                DCB      0
                  |L1.24056|
                          DCD      stcond1
                  |L1.24060|
                          DCD      stcond2
                  |L1.24064|
                          DCD      stcond3
                  |L1.24068|
                          DCD      stcond4
                  |L1.24072|
                          DCD      cond
                  |L1.24076|
                          DCD      0x00001388
                  |L1.24080|
005e10  0a00              DCB      "\n",0
005e12  00                DCB      0
005e13  00                DCB      0
                  |L1.24084|
                          DCD      len
                  |L1.24088|
                          DCD      ||k2||
                  |L1.24092|
                          DCD      ||.text||+0x474
                  |L1.24096|
                          DCD      con1d
                  |L1.24100|
                          DCD      drive
                  |L1.24104|
005e28  a1fe              ADR      r1,|L1.25124|
005e2a  9000              STR      r0,[sp,#0]
005e2c  48fe              LDR      r0,|L1.25128|
005e2e  f7fffffe          BL       send_SD
;;;937    if(strstr(uart_string_gsm,"ERROR")){
005e32  49fe              LDR      r1,|L1.25132|
005e34  48fe              LDR      r0,|L1.25136|
005e36  f7fffffe          BL       strstr
005e3a  2800              CMP      r0,#0
005e3c  d004              BEQ      |L1.24136|
;;;938    	drive[0]='C';drive[1]=':';
005e3e  2043              MOVS     r0,#0x43
005e40  49fc              LDR      r1,|L1.25140|
005e42  7008              STRB     r0,[r1,#0]
005e44  203a              MOVS     r0,#0x3a
005e46  7048              STRB     r0,[r1,#1]
                  |L1.24136|
;;;939    }	
;;;940    																			clear();	
005e48  f7fffffe          BL       clear
;;;941    																			k2=0;									//string array counter for uart 1
005e4c  2000              MOVS     r0,#0
005e4e  49fa              LDR      r1,|L1.25144|
005e50  6008              STR      r0,[r1,#0]  ; k2
;;;942    																			tout=0;	
005e52  49fa              LDR      r1,|L1.25148|
005e54  6008              STR      r0,[r1,#0]  ; tout
;;;943    																			for(k=0;k<strlen(data);k++)
005e56  49fa              LDR      r1,|L1.25152|
005e58  6008              STR      r0,[r1,#0]  ; k
005e5a  e00e              B        |L1.24186|
                  |L1.24156|
005e5c  e119              B        |L1.24722|
                  |L1.24158|
;;;944    																			{
;;;945    																				uart_putchar(UART1_BASE_PTR, data[k]);//clear();
005e5e  48f9              LDR      r0,|L1.25156|
005e60  49f7              LDR      r1,|L1.25152|
005e62  6809              LDR      r1,[r1,#0]  ; k
005e64  5c40              LDRB     r0,[r0,r1]
005e66  4601              MOV      r1,r0
005e68  9001              STR      r0,[sp,#4]
005e6a  48f7              LDR      r0,|L1.25160|
005e6c  f7fffffe          BL       uart_putchar
005e70  48f3              LDR      r0,|L1.25152|
005e72  6800              LDR      r0,[r0,#0]            ;943  ; k
005e74  1c40              ADDS     r0,r0,#1              ;943
005e76  49f2              LDR      r1,|L1.25152|
005e78  6008              STR      r0,[r1,#0]            ;943  ; k
                  |L1.24186|
005e7a  48f2              LDR      r0,|L1.25156|
005e7c  f7fffffe          BL       strlen
005e80  49ef              LDR      r1,|L1.25152|
005e82  6809              LDR      r1,[r1,#0]            ;943  ; k
005e84  4288              CMP      r0,r1                 ;943
005e86  d8ea              BHI      |L1.24158|
;;;946    																			}	
;;;947    																			uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
005e88  210a              MOVS     r1,#0xa
005e8a  48ef              LDR      r0,|L1.25160|
005e8c  f7fffffe          BL       uart_putchar
005e90  210a              MOVS     r1,#0xa
005e92  48ed              LDR      r0,|L1.25160|
005e94  f7fffffe          BL       uart_putchar
005e98  210a              MOVS     r1,#0xa
005e9a  48eb              LDR      r0,|L1.25160|
005e9c  f7fffffe          BL       uart_putchar
005ea0  210a              MOVS     r1,#0xa
005ea2  48e9              LDR      r0,|L1.25160|
005ea4  f7fffffe          BL       uart_putchar
005ea8  210a              MOVS     r1,#0xa
005eaa  48e7              LDR      r0,|L1.25160|
005eac  f7fffffe          BL       uart_putchar
005eb0  210a              MOVS     r1,#0xa
005eb2  48e5              LDR      r0,|L1.25160|
005eb4  f7fffffe          BL       uart_putchar
005eb8  210a              MOVS     r1,#0xa
005eba  48e3              LDR      r0,|L1.25160|
005ebc  f7fffffe          BL       uart_putchar
005ec0  210a              MOVS     r1,#0xa
005ec2  48e1              LDR      r0,|L1.25160|
005ec4  f7fffffe          BL       uart_putchar
005ec8  210a              MOVS     r1,#0xa
005eca  48df              LDR      r0,|L1.25160|
005ecc  f7fffffe          BL       uart_putchar
005ed0  210a              MOVS     r1,#0xa
005ed2  48dd              LDR      r0,|L1.25160|
005ed4  f7fffffe          BL       uart_putchar
005ed8  210a              MOVS     r1,#0xa
005eda  48db              LDR      r0,|L1.25160|
005edc  f7fffffe          BL       uart_putchar
005ee0  210a              MOVS     r1,#0xa
005ee2  48d9              LDR      r0,|L1.25160|
005ee4  f7fffffe          BL       uart_putchar
005ee8  210a              MOVS     r1,#0xa
005eea  48d7              LDR      r0,|L1.25160|
005eec  f7fffffe          BL       uart_putchar
005ef0  210a              MOVS     r1,#0xa
005ef2  48d5              LDR      r0,|L1.25160|
005ef4  f7fffffe          BL       uart_putchar
005ef8  210a              MOVS     r1,#0xa
005efa  48d3              LDR      r0,|L1.25160|
005efc  f7fffffe          BL       uart_putchar
005f00  210a              MOVS     r1,#0xa
005f02  48d1              LDR      r0,|L1.25160|
005f04  f7fffffe          BL       uart_putchar
005f08  210a              MOVS     r1,#0xa
005f0a  48cf              LDR      r0,|L1.25160|
005f0c  f7fffffe          BL       uart_putchar
005f10  210a              MOVS     r1,#0xa
005f12  48cd              LDR      r0,|L1.25160|
005f14  f7fffffe          BL       uart_putchar
005f18  210a              MOVS     r1,#0xa
005f1a  48cb              LDR      r0,|L1.25160|
005f1c  f7fffffe          BL       uart_putchar
005f20  210a              MOVS     r1,#0xa
005f22  48c9              LDR      r0,|L1.25160|
005f24  f7fffffe          BL       uart_putchar
005f28  210a              MOVS     r1,#0xa
005f2a  48c7              LDR      r0,|L1.25160|
005f2c  f7fffffe          BL       uart_putchar
005f30  210a              MOVS     r1,#0xa
005f32  48c5              LDR      r0,|L1.25160|
005f34  f7fffffe          BL       uart_putchar
005f38  210a              MOVS     r1,#0xa
005f3a  48c3              LDR      r0,|L1.25160|
005f3c  f7fffffe          BL       uart_putchar
005f40  210a              MOVS     r1,#0xa
005f42  48c1              LDR      r0,|L1.25160|
005f44  f7fffffe          BL       uart_putchar
005f48  210a              MOVS     r1,#0xa
005f4a  48bf              LDR      r0,|L1.25160|
005f4c  f7fffffe          BL       uart_putchar
005f50  210a              MOVS     r1,#0xa
005f52  48bd              LDR      r0,|L1.25160|
005f54  f7fffffe          BL       uart_putchar
005f58  210a              MOVS     r1,#0xa
005f5a  48bb              LDR      r0,|L1.25160|
005f5c  f7fffffe          BL       uart_putchar
005f60  210a              MOVS     r1,#0xa
005f62  48b9              LDR      r0,|L1.25160|
005f64  f7fffffe          BL       uart_putchar
005f68  210a              MOVS     r1,#0xa
005f6a  48b7              LDR      r0,|L1.25160|
005f6c  f7fffffe          BL       uart_putchar
005f70  210a              MOVS     r1,#0xa
005f72  48b5              LDR      r0,|L1.25160|
005f74  f7fffffe          BL       uart_putchar
005f78  210a              MOVS     r1,#0xa
005f7a  48b3              LDR      r0,|L1.25160|
005f7c  f7fffffe          BL       uart_putchar
005f80  210a              MOVS     r1,#0xa
005f82  48b1              LDR      r0,|L1.25160|
005f84  f7fffffe          BL       uart_putchar
005f88  210a              MOVS     r1,#0xa
005f8a  48af              LDR      r0,|L1.25160|
005f8c  f7fffffe          BL       uart_putchar
005f90  210a              MOVS     r1,#0xa
005f92  48ad              LDR      r0,|L1.25160|
005f94  f7fffffe          BL       uart_putchar
005f98  210a              MOVS     r1,#0xa
005f9a  48ab              LDR      r0,|L1.25160|
005f9c  f7fffffe          BL       uart_putchar
005fa0  210a              MOVS     r1,#0xa
005fa2  48a9              LDR      r0,|L1.25160|
005fa4  f7fffffe          BL       uart_putchar
005fa8  210a              MOVS     r1,#0xa
005faa  48a7              LDR      r0,|L1.25160|
005fac  f7fffffe          BL       uart_putchar
005fb0  210a              MOVS     r1,#0xa
005fb2  48a5              LDR      r0,|L1.25160|
005fb4  f7fffffe          BL       uart_putchar
005fb8  210a              MOVS     r1,#0xa
005fba  48a3              LDR      r0,|L1.25160|
005fbc  f7fffffe          BL       uart_putchar
005fc0  210a              MOVS     r1,#0xa
005fc2  48a1              LDR      r0,|L1.25160|
005fc4  f7fffffe          BL       uart_putchar
005fc8  210a              MOVS     r1,#0xa
005fca  489f              LDR      r0,|L1.25160|
005fcc  f7fffffe          BL       uart_putchar
005fd0  210a              MOVS     r1,#0xa
005fd2  489d              LDR      r0,|L1.25160|
005fd4  f7fffffe          BL       uart_putchar
005fd8  210a              MOVS     r1,#0xa
005fda  489b              LDR      r0,|L1.25160|
005fdc  f7fffffe          BL       uart_putchar
005fe0  210a              MOVS     r1,#0xa
005fe2  4899              LDR      r0,|L1.25160|
005fe4  f7fffffe          BL       uart_putchar
005fe8  210a              MOVS     r1,#0xa
005fea  4897              LDR      r0,|L1.25160|
005fec  f7fffffe          BL       uart_putchar
005ff0  210a              MOVS     r1,#0xa
005ff2  4895              LDR      r0,|L1.25160|
005ff4  f7fffffe          BL       uart_putchar
005ff8  210a              MOVS     r1,#0xa
005ffa  4893              LDR      r0,|L1.25160|
005ffc  f7fffffe          BL       uart_putchar
006000  210a              MOVS     r1,#0xa
006002  4891              LDR      r0,|L1.25160|
006004  f7fffffe          BL       uart_putchar
006008  210a              MOVS     r1,#0xa
00600a  488f              LDR      r0,|L1.25160|
00600c  f7fffffe          BL       uart_putchar
006010  210a              MOVS     r1,#0xa
006012  488d              LDR      r0,|L1.25160|
006014  f7fffffe          BL       uart_putchar
006018  210a              MOVS     r1,#0xa
00601a  488b              LDR      r0,|L1.25160|
00601c  f7fffffe          BL       uart_putchar
006020  210a              MOVS     r1,#0xa
006022  4889              LDR      r0,|L1.25160|
006024  f7fffffe          BL       uart_putchar
006028  210a              MOVS     r1,#0xa
00602a  4887              LDR      r0,|L1.25160|
00602c  f7fffffe          BL       uart_putchar
006030  210a              MOVS     r1,#0xa
006032  4885              LDR      r0,|L1.25160|
006034  f7fffffe          BL       uart_putchar
006038  210a              MOVS     r1,#0xa
00603a  4883              LDR      r0,|L1.25160|
00603c  e000              B        |L1.24640|
                  |L1.24638|
00603e  e18d              B        |L1.25436|
                  |L1.24640|
006040  f7fffffe          BL       uart_putchar
006044  210a              MOVS     r1,#0xa
006046  4880              LDR      r0,|L1.25160|
006048  f7fffffe          BL       uart_putchar
00604c  210a              MOVS     r1,#0xa
00604e  487e              LDR      r0,|L1.25160|
006050  f7fffffe          BL       uart_putchar
;;;948    																			while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) ))){}
006054  bf00              NOP      
                  |L1.24662|
006056  4975              LDR      r1,|L1.25132|
006058  3190              ADDS     r1,r1,#0x90
00605a  4875              LDR      r0,|L1.25136|
00605c  f7fffffe          BL       strstr
006060  2800              CMP      r0,#0
006062  d109              BNE      |L1.24696|
006064  4971              LDR      r1,|L1.25132|
006066  4872              LDR      r0,|L1.25136|
006068  f7fffffe          BL       strstr
00606c  2800              CMP      r0,#0
00606e  d103              BNE      |L1.24696|
006070  4872              LDR      r0,|L1.25148|
006072  6800              LDR      r0,[r0,#0]  ; tout
006074  2805              CMP      r0,#5
006076  ddee              BLE      |L1.24662|
                  |L1.24696|
;;;949    																			clear();//uart_putchar(UART1_BASE_PTR,0x1a);
006078  f7fffffe          BL       clear
;;;950    																			memset(data,0,strlen(data));
00607c  4871              LDR      r0,|L1.25156|
00607e  f7fffffe          BL       strlen
006082  4601              MOV      r1,r0
006084  9001              STR      r0,[sp,#4]
006086  486f              LDR      r0,|L1.25156|
006088  f7fffffe          BL       __aeabi_memclr
;;;951    																			clear();
00608c  f7fffffe          BL       clear
006090  e164              B        |L1.25436|
                  |L1.24722|
;;;952    																		
;;;953    																//	log_it();								
;;;954    																	}else{send_chunk();}													
006092  f7fffffe          BL       send_chunk
006096  e161              B        |L1.25436|
                  |L1.24728|
;;;955    									//checks for the sd_data available
;;;956    									}
;;;957    									//con1d=strstr(uart_string_gsm,"OK");
;;;958    									else
;;;959    									{
;;;960    											delay(100);
006098  2064              MOVS     r0,#0x64
00609a  f7fffffe          BL       delay
;;;961    											clear();//memset(uart_string_gsm,0,5000);
00609e  f7fffffe          BL       clear
;;;962    											memset(at_,0,100);
0060a2  2164              MOVS     r1,#0x64
0060a4  4860              LDR      r0,|L1.25128|
0060a6  f7fffffe          BL       __aeabi_memclr
;;;963    											sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0060aa  4866              LDR      r0,|L1.25156|
0060ac  f7fffffe          BL       strlen
0060b0  1c40              ADDS     r0,r0,#1
0060b2  4603              MOV      r3,r0
0060b4  4a5f              LDR      r2,|L1.25140|
0060b6  495d              LDR      r1,|L1.25132|
0060b8  3158              ADDS     r1,r1,#0x58
0060ba  9001              STR      r0,[sp,#4]
0060bc  485a              LDR      r0,|L1.25128|
0060be  f7fffffe          BL       __2sprintf
;;;964    											send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0060c2  2005              MOVS     r0,#5
0060c4  4b59              LDR      r3,|L1.25132|
0060c6  461a              MOV      r2,r3
0060c8  327c              ADDS     r2,r2,#0x7c
0060ca  a156              ADR      r1,|L1.25124|
0060cc  9000              STR      r0,[sp,#0]
0060ce  4856              LDR      r0,|L1.25128|
0060d0  f7fffffe          BL       send_SD
;;;965    if(strstr(uart_string_gsm,"ERROR")){
0060d4  4955              LDR      r1,|L1.25132|
0060d6  4856              LDR      r0,|L1.25136|
0060d8  f7fffffe          BL       strstr
0060dc  2800              CMP      r0,#0
0060de  d004              BEQ      |L1.24810|
;;;966    drive[0]='C';drive[1]=':';
0060e0  2043              MOVS     r0,#0x43
0060e2  4954              LDR      r1,|L1.25140|
0060e4  7008              STRB     r0,[r1,#0]
0060e6  203a              MOVS     r0,#0x3a
0060e8  7048              STRB     r0,[r1,#1]
                  |L1.24810|
;;;967    }	
;;;968    											clear();	
0060ea  f7fffffe          BL       clear
;;;969    											k2=0;									//string array counter for uart 1
0060ee  2000              MOVS     r0,#0
0060f0  4951              LDR      r1,|L1.25144|
0060f2  6008              STR      r0,[r1,#0]  ; k2
;;;970    											tout=0;	
0060f4  4951              LDR      r1,|L1.25148|
0060f6  6008              STR      r0,[r1,#0]  ; tout
;;;971    											for(k=0;k<strlen(data);k++)
0060f8  4951              LDR      r1,|L1.25152|
0060fa  6008              STR      r0,[r1,#0]  ; k
0060fc  e00d              B        |L1.24858|
                  |L1.24830|
;;;972    											{
;;;973    											uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0060fe  4851              LDR      r0,|L1.25156|
006100  494f              LDR      r1,|L1.25152|
006102  6809              LDR      r1,[r1,#0]  ; k
006104  5c40              LDRB     r0,[r0,r1]
006106  4601              MOV      r1,r0
006108  9001              STR      r0,[sp,#4]
00610a  484f              LDR      r0,|L1.25160|
00610c  f7fffffe          BL       uart_putchar
006110  484b              LDR      r0,|L1.25152|
006112  6800              LDR      r0,[r0,#0]            ;971  ; k
006114  1c40              ADDS     r0,r0,#1              ;971
006116  494a              LDR      r1,|L1.25152|
006118  6008              STR      r0,[r1,#0]            ;971  ; k
                  |L1.24858|
00611a  484a              LDR      r0,|L1.25156|
00611c  f7fffffe          BL       strlen
006120  4947              LDR      r1,|L1.25152|
006122  6809              LDR      r1,[r1,#0]            ;971  ; k
006124  4288              CMP      r0,r1                 ;971
006126  d8ea              BHI      |L1.24830|
;;;974    											}	
;;;975    											uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
006128  210a              MOVS     r1,#0xa
00612a  4847              LDR      r0,|L1.25160|
00612c  f7fffffe          BL       uart_putchar
006130  210a              MOVS     r1,#0xa
006132  4845              LDR      r0,|L1.25160|
006134  f7fffffe          BL       uart_putchar
006138  210a              MOVS     r1,#0xa
00613a  4843              LDR      r0,|L1.25160|
00613c  f7fffffe          BL       uart_putchar
006140  210a              MOVS     r1,#0xa
006142  4841              LDR      r0,|L1.25160|
006144  f7fffffe          BL       uart_putchar
006148  210a              MOVS     r1,#0xa
00614a  483f              LDR      r0,|L1.25160|
00614c  f7fffffe          BL       uart_putchar
006150  210a              MOVS     r1,#0xa
006152  483d              LDR      r0,|L1.25160|
006154  f7fffffe          BL       uart_putchar
006158  210a              MOVS     r1,#0xa
00615a  483b              LDR      r0,|L1.25160|
00615c  f7fffffe          BL       uart_putchar
006160  210a              MOVS     r1,#0xa
006162  4839              LDR      r0,|L1.25160|
006164  f7fffffe          BL       uart_putchar
006168  210a              MOVS     r1,#0xa
00616a  4837              LDR      r0,|L1.25160|
00616c  f7fffffe          BL       uart_putchar
006170  210a              MOVS     r1,#0xa
006172  4835              LDR      r0,|L1.25160|
006174  f7fffffe          BL       uart_putchar
006178  210a              MOVS     r1,#0xa
00617a  4833              LDR      r0,|L1.25160|
00617c  f7fffffe          BL       uart_putchar
006180  210a              MOVS     r1,#0xa
006182  4831              LDR      r0,|L1.25160|
006184  f7fffffe          BL       uart_putchar
006188  210a              MOVS     r1,#0xa
00618a  482f              LDR      r0,|L1.25160|
00618c  f7fffffe          BL       uart_putchar
006190  210a              MOVS     r1,#0xa
006192  482d              LDR      r0,|L1.25160|
006194  f7fffffe          BL       uart_putchar
006198  210a              MOVS     r1,#0xa
00619a  482b              LDR      r0,|L1.25160|
00619c  f7fffffe          BL       uart_putchar
0061a0  210a              MOVS     r1,#0xa
0061a2  4829              LDR      r0,|L1.25160|
0061a4  f7fffffe          BL       uart_putchar
0061a8  210a              MOVS     r1,#0xa
0061aa  4827              LDR      r0,|L1.25160|
0061ac  f7fffffe          BL       uart_putchar
0061b0  210a              MOVS     r1,#0xa
0061b2  4825              LDR      r0,|L1.25160|
0061b4  f7fffffe          BL       uart_putchar
0061b8  210a              MOVS     r1,#0xa
0061ba  4823              LDR      r0,|L1.25160|
0061bc  f7fffffe          BL       uart_putchar
0061c0  210a              MOVS     r1,#0xa
0061c2  4821              LDR      r0,|L1.25160|
0061c4  f7fffffe          BL       uart_putchar
0061c8  210a              MOVS     r1,#0xa
0061ca  481f              LDR      r0,|L1.25160|
0061cc  f7fffffe          BL       uart_putchar
0061d0  210a              MOVS     r1,#0xa
0061d2  481d              LDR      r0,|L1.25160|
0061d4  f7fffffe          BL       uart_putchar
0061d8  210a              MOVS     r1,#0xa
0061da  481b              LDR      r0,|L1.25160|
0061dc  f7fffffe          BL       uart_putchar
0061e0  210a              MOVS     r1,#0xa
0061e2  4819              LDR      r0,|L1.25160|
0061e4  f7fffffe          BL       uart_putchar
0061e8  210a              MOVS     r1,#0xa
0061ea  4817              LDR      r0,|L1.25160|
0061ec  f7fffffe          BL       uart_putchar
0061f0  210a              MOVS     r1,#0xa
0061f2  4815              LDR      r0,|L1.25160|
0061f4  f7fffffe          BL       uart_putchar
0061f8  210a              MOVS     r1,#0xa
0061fa  4813              LDR      r0,|L1.25160|
0061fc  f7fffffe          BL       uart_putchar
006200  210a              MOVS     r1,#0xa
006202  4811              LDR      r0,|L1.25160|
006204  f7fffffe          BL       uart_putchar
006208  210a              MOVS     r1,#0xa
00620a  480f              LDR      r0,|L1.25160|
00620c  f7fffffe          BL       uart_putchar
006210  210a              MOVS     r1,#0xa
006212  480d              LDR      r0,|L1.25160|
006214  f7fffffe          BL       uart_putchar
006218  210a              MOVS     r1,#0xa
00621a  480b              LDR      r0,|L1.25160|
00621c  f7fffffe          BL       uart_putchar
006220  210a              MOVS     r1,#0xa
006222  e013              B        |L1.25164|
                  |L1.25124|
006224  3e00              DCB      ">",0
006226  00                DCB      0
006227  00                DCB      0
                  |L1.25128|
                          DCD      at_
                  |L1.25132|
                          DCD      ||.text||+0x870
                  |L1.25136|
                          DCD      uart_string_gsm
                  |L1.25140|
                          DCD      drive
                  |L1.25144|
                          DCD      ||k2||
                  |L1.25148|
                          DCD      tout
                  |L1.25152|
                          DCD      k
                  |L1.25156|
                          DCD      data
                  |L1.25160|
                          DCD      0x4006b000
                  |L1.25164|
00624c  48a5              LDR      r0,|L1.25828|
00624e  f7fffffe          BL       uart_putchar
006252  210a              MOVS     r1,#0xa
006254  48a3              LDR      r0,|L1.25828|
006256  f7fffffe          BL       uart_putchar
00625a  210a              MOVS     r1,#0xa
00625c  48a1              LDR      r0,|L1.25828|
00625e  f7fffffe          BL       uart_putchar
006262  210a              MOVS     r1,#0xa
006264  489f              LDR      r0,|L1.25828|
006266  f7fffffe          BL       uart_putchar
00626a  210a              MOVS     r1,#0xa
00626c  489d              LDR      r0,|L1.25828|
00626e  f7fffffe          BL       uart_putchar
006272  210a              MOVS     r1,#0xa
006274  489b              LDR      r0,|L1.25828|
006276  f7fffffe          BL       uart_putchar
00627a  210a              MOVS     r1,#0xa
00627c  4899              LDR      r0,|L1.25828|
00627e  f7fffffe          BL       uart_putchar
006282  210a              MOVS     r1,#0xa
006284  4897              LDR      r0,|L1.25828|
006286  f7fffffe          BL       uart_putchar
00628a  210a              MOVS     r1,#0xa
00628c  4895              LDR      r0,|L1.25828|
00628e  f7fffffe          BL       uart_putchar
006292  210a              MOVS     r1,#0xa
006294  4893              LDR      r0,|L1.25828|
006296  f7fffffe          BL       uart_putchar
00629a  210a              MOVS     r1,#0xa
00629c  4891              LDR      r0,|L1.25828|
00629e  f7fffffe          BL       uart_putchar
0062a2  210a              MOVS     r1,#0xa
0062a4  488f              LDR      r0,|L1.25828|
0062a6  f7fffffe          BL       uart_putchar
0062aa  210a              MOVS     r1,#0xa
0062ac  488d              LDR      r0,|L1.25828|
0062ae  f7fffffe          BL       uart_putchar
0062b2  210a              MOVS     r1,#0xa
0062b4  488b              LDR      r0,|L1.25828|
0062b6  f7fffffe          BL       uart_putchar
0062ba  210a              MOVS     r1,#0xa
0062bc  4889              LDR      r0,|L1.25828|
0062be  f7fffffe          BL       uart_putchar
0062c2  210a              MOVS     r1,#0xa
0062c4  4887              LDR      r0,|L1.25828|
0062c6  f7fffffe          BL       uart_putchar
0062ca  210a              MOVS     r1,#0xa
0062cc  4885              LDR      r0,|L1.25828|
0062ce  f7fffffe          BL       uart_putchar
0062d2  210a              MOVS     r1,#0xa
0062d4  4883              LDR      r0,|L1.25828|
0062d6  f7fffffe          BL       uart_putchar
0062da  210a              MOVS     r1,#0xa
0062dc  4881              LDR      r0,|L1.25828|
0062de  f7fffffe          BL       uart_putchar
0062e2  210a              MOVS     r1,#0xa
0062e4  487f              LDR      r0,|L1.25828|
0062e6  f7fffffe          BL       uart_putchar
0062ea  210a              MOVS     r1,#0xa
0062ec  487d              LDR      r0,|L1.25828|
0062ee  f7fffffe          BL       uart_putchar
0062f2  210a              MOVS     r1,#0xa
0062f4  487b              LDR      r0,|L1.25828|
0062f6  f7fffffe          BL       uart_putchar
0062fa  210a              MOVS     r1,#0xa
0062fc  4879              LDR      r0,|L1.25828|
0062fe  f7fffffe          BL       uart_putchar
006302  210a              MOVS     r1,#0xa
006304  4877              LDR      r0,|L1.25828|
006306  f7fffffe          BL       uart_putchar
00630a  210a              MOVS     r1,#0xa
00630c  4875              LDR      r0,|L1.25828|
00630e  f7fffffe          BL       uart_putchar
006312  210a              MOVS     r1,#0xa
006314  4873              LDR      r0,|L1.25828|
006316  f7fffffe          BL       uart_putchar
;;;976    											//memset(data,0,1000);
;;;977    											//timer counts to wait for characters in uart 1 									
;;;978    											while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
00631a  bf00              NOP      
                  |L1.25372|
00631c  4972              LDR      r1,|L1.25832|
00631e  4873              LDR      r0,|L1.25836|
006320  f7fffffe          BL       strstr
006324  2800              CMP      r0,#0
006326  d10a              BNE      |L1.25406|
006328  496f              LDR      r1,|L1.25832|
00632a  3990              SUBS     r1,r1,#0x90
00632c  486f              LDR      r0,|L1.25836|
00632e  f7fffffe          BL       strstr
006332  2800              CMP      r0,#0
006334  d103              BNE      |L1.25406|
006336  486e              LDR      r0,|L1.25840|
006338  6800              LDR      r0,[r0,#0]  ; tout
00633a  2805              CMP      r0,#5
00633c  ddee              BLE      |L1.25372|
                  |L1.25406|
;;;979    											{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;980    											}
;;;981    											clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00633e  f7fffffe          BL       clear
;;;982    											memset(data,0,strlen(data));
006342  486c              LDR      r0,|L1.25844|
006344  f7fffffe          BL       strlen
006348  4601              MOV      r1,r0
00634a  9001              STR      r0,[sp,#4]
00634c  4869              LDR      r0,|L1.25844|
00634e  f7fffffe          BL       __aeabi_memclr
;;;983    											clear();
006352  f7fffffe          BL       clear
006356  e001              B        |L1.25436|
                  |L1.25432|
;;;984    										//log_it();			//otherwize log it					
;;;985    									}
;;;986    } // if there is a gsm connect available this segment checks for the log available and send it in chunks,..
;;;987    else
;;;988    {
;;;989    	send_chunk();
006358  f7fffffe          BL       send_chunk
                  |L1.25436|
00635c  f7fefe71          BL       |L1.20546|
;;;990    }		
;;;991    /******************sleep checker end**********************/		
;;;992    		}
;;;993    /******************while end**********************/		
;;;994    	} 
;;;995    /******************main end***********************/
;;;996    }
;;;997    /********************************************************************/
                          ENDP

                  HardFault_Handler PROC
;;;1004   
;;;1005   void HardFault_Handler()
006360  b510              PUSH     {r4,lr}
;;;1006   {	long ppp=0;
006362  2400              MOVS     r4,#0
;;;1007   
;;;1008   	RESET_OFF;
006364  2020              MOVS     r0,#0x20
006366  4964              LDR      r1,|L1.25848|
006368  6088              STR      r0,[r1,#8]
;;;1009   	RESET_OFF;
00636a  6088              STR      r0,[r1,#8]
;;;1010   for(ppp=0;ppp<999999; ppp++);	
00636c  bf00              NOP      
00636e  e000              B        |L1.25458|
                  |L1.25456|
006370  1c64              ADDS     r4,r4,#1
                  |L1.25458|
006372  4862              LDR      r0,|L1.25852|
006374  4284              CMP      r4,r0
006376  dbfb              BLT      |L1.25456|
;;;1011   	
;;;1012   	RESET_ON;
006378  2020              MOVS     r0,#0x20
00637a  495f              LDR      r1,|L1.25848|
00637c  6048              STR      r0,[r1,#4]
;;;1013   	RESET_ON;
00637e  6048              STR      r0,[r1,#4]
;;;1014   for(ppp=0;ppp<999999; ppp++);
006380  2400              MOVS     r4,#0
006382  e000              B        |L1.25478|
                  |L1.25476|
006384  1c64              ADDS     r4,r4,#1
                  |L1.25478|
006386  485d              LDR      r0,|L1.25852|
006388  4284              CMP      r4,r0
00638a  dbfb              BLT      |L1.25476|
;;;1015   
;;;1016   RESET_OFF;
00638c  2020              MOVS     r0,#0x20
00638e  495a              LDR      r1,|L1.25848|
006390  6088              STR      r0,[r1,#8]
;;;1017   	RESET_OFF;
006392  6088              STR      r0,[r1,#8]
;;;1018   	delay(100);	
006394  2064              MOVS     r0,#0x64
006396  f7fffffe          BL       delay
;;;1019   	RESET_ON;
00639a  2020              MOVS     r0,#0x20
00639c  4956              LDR      r1,|L1.25848|
00639e  6048              STR      r0,[r1,#4]
;;;1020   	RESET_ON;	
0063a0  6048              STR      r0,[r1,#4]
;;;1021   	delay(100);	
0063a2  2064              MOVS     r0,#0x64
0063a4  f7fffffe          BL       delay
;;;1022   }
0063a8  bd10              POP      {r4,pc}
;;;1023   
                          ENDP

                  LPTimer_IRQHandler PROC
;;;1025   
;;;1026    void LPTimer_IRQHandler(void)
0063aa  b510              PUSH     {r4,lr}
;;;1027   {
;;;1028   lpticks+=1;
0063ac  4854              LDR      r0,|L1.25856|
0063ae  6800              LDR      r0,[r0,#0]  ; lpticks
0063b0  1c40              ADDS     r0,r0,#1
0063b2  4953              LDR      r1,|L1.25856|
0063b4  6008              STR      r0,[r1,#0]  ; lpticks
;;;1029   //rtcticks++;
;;;1030   	if (emergencytimer >= 1){
0063b6  4853              LDR      r0,|L1.25860|
0063b8  6800              LDR      r0,[r0,#0]  ; emergencytimer
0063ba  2801              CMP      r0,#1
0063bc  db04              BLT      |L1.25544|
;;;1031   		emergencytimer--;
0063be  4851              LDR      r0,|L1.25860|
0063c0  6800              LDR      r0,[r0,#0]  ; emergencytimer
0063c2  1e40              SUBS     r0,r0,#1
0063c4  494f              LDR      r1,|L1.25860|
0063c6  6008              STR      r0,[r1,#0]  ; emergencytimer
                  |L1.25544|
;;;1032   	}
;;;1033   	tout++;tout2++;
0063c8  4849              LDR      r0,|L1.25840|
0063ca  6800              LDR      r0,[r0,#0]  ; tout
0063cc  1c40              ADDS     r0,r0,#1
0063ce  4948              LDR      r1,|L1.25840|
0063d0  6008              STR      r0,[r1,#0]  ; tout
0063d2  484d              LDR      r0,|L1.25864|
0063d4  6800              LDR      r0,[r0,#0]  ; tout2
0063d6  1c40              ADDS     r0,r0,#1
0063d8  494b              LDR      r1,|L1.25864|
0063da  6008              STR      r0,[r1,#0]  ; tout2
;;;1034   	rtcticks2++;
0063dc  484b              LDR      r0,|L1.25868|
0063de  6800              LDR      r0,[r0,#0]  ; rtcticks2
0063e0  1c40              ADDS     r0,r0,#1
0063e2  494a              LDR      r1,|L1.25868|
0063e4  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;1035   	if(sleep_flag == 1){aliveping++;}
0063e6  484a              LDR      r0,|L1.25872|
0063e8  6800              LDR      r0,[r0,#0]  ; sleep_flag
0063ea  2801              CMP      r0,#1
0063ec  d104              BNE      |L1.25592|
0063ee  4849              LDR      r0,|L1.25876|
0063f0  6800              LDR      r0,[r0,#0]  ; aliveping
0063f2  1c40              ADDS     r0,r0,#1
0063f4  4947              LDR      r1,|L1.25876|
0063f6  6008              STR      r0,[r1,#0]  ; aliveping
                  |L1.25592|
;;;1036   	if(rtcticks2 > 1600)
0063f8  4844              LDR      r0,|L1.25868|
0063fa  6800              LDR      r0,[r0,#0]  ; rtcticks2
0063fc  2119              MOVS     r1,#0x19
0063fe  0189              LSLS     r1,r1,#6
006400  4288              CMP      r0,r1
006402  dd10              BLE      |L1.25638|
;;;1037   	{
;;;1038   	RESET_OFF;
006404  2020              MOVS     r0,#0x20
006406  493c              LDR      r1,|L1.25848|
006408  6088              STR      r0,[r1,#8]
;;;1039   	RESET_OFF;
00640a  6088              STR      r0,[r1,#8]
;;;1040   	delay(100);	
00640c  2064              MOVS     r0,#0x64
00640e  f7fffffe          BL       delay
;;;1041   	RESET_ON;
006412  2020              MOVS     r0,#0x20
006414  4938              LDR      r1,|L1.25848|
006416  6048              STR      r0,[r1,#4]
;;;1042   	RESET_ON;	
006418  6048              STR      r0,[r1,#4]
;;;1043   	delay(100);
00641a  2064              MOVS     r0,#0x64
00641c  f7fffffe          BL       delay
;;;1044   	rtcticks2 =0;
006420  2000              MOVS     r0,#0
006422  493a              LDR      r1,|L1.25868|
006424  6008              STR      r0,[r1,#0]  ; rtcticks2
                  |L1.25638|
;;;1045   	}
;;;1046   
;;;1047     LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
006426  483c              LDR      r0,|L1.25880|
006428  6800              LDR      r0,[r0,#0]
00642a  2180              MOVS     r1,#0x80
00642c  4308              ORRS     r0,r0,r1
00642e  493a              LDR      r1,|L1.25880|
006430  6008              STR      r0,[r1,#0]
;;;1048     LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
006432  20c1              MOVS     r0,#0xc1
006434  6008              STR      r0,[r1,#0]
;;;1049     
;;;1050   }
006436  bd10              POP      {r4,pc}
;;;1051   
                          ENDP

                  dtr_sleep PROC
;;;1053   
;;;1054   void dtr_sleep()
006438  b538              PUSH     {r3-r5,lr}
;;;1055   {
;;;1056   
;;;1057   test2=GPIOB_PDIR;
00643a  482f              LDR      r0,|L1.25848|
00643c  3840              SUBS     r0,r0,#0x40
00643e  6900              LDR      r0,[r0,#0x10]
006440  4936              LDR      r1,|L1.25884|
006442  6008              STR      r0,[r1,#0]  ; test2
;;;1058   memset(at_,0,strlen(at_));
006444  4836              LDR      r0,|L1.25888|
006446  f7fffffe          BL       strlen
00644a  4604              MOV      r4,r0
00644c  4621              MOV      r1,r4
00644e  4834              LDR      r0,|L1.25888|
006450  f7fffffe          BL       __aeabi_memclr
;;;1059   sprintf(at_,"\n\n\n GPIOB = %d \n\n\n ",test2);	
006454  4831              LDR      r0,|L1.25884|
006456  a133              ADR      r1,|L1.25892|
006458  6802              LDR      r2,[r0,#0]  ; test2
00645a  4831              LDR      r0,|L1.25888|
00645c  f7fffffe          BL       __2sprintf
;;;1060   send_modem(at_);
006460  482f              LDR      r0,|L1.25888|
006462  f7fffffe          BL       send_modem
;;;1061   if( test2 == 0 )	
006466  482d              LDR      r0,|L1.25884|
006468  6800              LDR      r0,[r0,#0]  ; test2
00646a  2800              CMP      r0,#0
00646c  d107              BNE      |L1.25726|
;;;1062   {
;;;1063   	sleep_flag=1;	
00646e  2001              MOVS     r0,#1
006470  4927              LDR      r1,|L1.25872|
006472  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1064   	DTR_ON;   //sleep
006474  2080              MOVS     r0,#0x80
006476  4920              LDR      r1,|L1.25848|
006478  3140              ADDS     r1,r1,#0x40
00647a  6048              STR      r0,[r1,#4]
00647c  e02c              B        |L1.25816|
                  |L1.25726|
;;;1065   
;;;1066   }
;;;1067   else
;;;1068   {DTR_OFF;
00647e  2080              MOVS     r0,#0x80
006480  491d              LDR      r1,|L1.25848|
006482  3140              ADDS     r1,r1,#0x40
006484  6088              STR      r0,[r1,#8]
;;;1069   	
;;;1070   	if (sleep_flag != 0  )
006486  4822              LDR      r0,|L1.25872|
006488  6800              LDR      r0,[r0,#0]  ; sleep_flag
00648a  2800              CMP      r0,#0
00648c  d020              BEQ      |L1.25808|
;;;1071   	{
;;;1072   	// wakeup and reset
;;;1073   		sleep_flag=0;
00648e  2000              MOVS     r0,#0
006490  491f              LDR      r1,|L1.25872|
006492  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1074       		// not sleep	
;;;1075   //	  HardFault_Handler();
;;;1076   delay(1000);
006494  207d              MOVS     r0,#0x7d
006496  00c0              LSLS     r0,r0,#3
006498  f7fffffe          BL       delay
;;;1077   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
00649c  4826              LDR      r0,|L1.25912|
00649e  6800              LDR      r0,[r0,#0]  ; tmeout
0064a0  4b26              LDR      r3,|L1.25916|
0064a2  4a11              LDR      r2,|L1.25832|
0064a4  3a14              SUBS     r2,r2,#0x14
0064a6  4910              LDR      r1,|L1.25832|
0064a8  9000              STR      r0,[sp,#0]
0064aa  4825              LDR      r0,|L1.25920|
0064ac  f7fffffe          BL       send_GSM
;;;1078   		
;;;1079   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
0064b0  4821              LDR      r0,|L1.25912|
0064b2  6800              LDR      r0,[r0,#0]  ; tmeout
0064b4  4b21              LDR      r3,|L1.25916|
0064b6  4a0c              LDR      r2,|L1.25832|
0064b8  3a14              SUBS     r2,r2,#0x14
0064ba  490b              LDR      r1,|L1.25832|
0064bc  9000              STR      r0,[sp,#0]
0064be  a021              ADR      r0,|L1.25924|
0064c0  f7fffffe          BL       send_GSM
;;;1080   
;;;1081   //send_GSM("\n\nAT+CFUN=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
;;;1082   		
;;;1083   delay(1000);	
0064c4  207d              MOVS     r0,#0x7d
0064c6  00c0              LSLS     r0,r0,#3
0064c8  f7fffffe          BL       delay
;;;1084   clear();	
0064cc  f7fffffe          BL       clear
                  |L1.25808|
;;;1085   	}  
;;;1086   	DTR_OFF;		// not sleep	
0064d0  2080              MOVS     r0,#0x80
0064d2  4909              LDR      r1,|L1.25848|
0064d4  3140              ADDS     r1,r1,#0x40
0064d6  6088              STR      r0,[r1,#8]
                  |L1.25816|
;;;1087   
;;;1088   
;;;1089   
;;;1090   }
;;;1091   
;;;1092   LED_state();LED_state2();
0064d8  f7fffffe          BL       LED_state
0064dc  f7fffffe          BL       LED_state2
;;;1093   }
0064e0  bd38              POP      {r3-r5,pc}
;;;1094   
                          ENDP

0064e2  0000              DCW      0x0000
                  |L1.25828|
                          DCD      0x4006b000
                  |L1.25832|
                          DCD      ||.text||+0x900
                  |L1.25836|
                          DCD      uart_string_gsm
                  |L1.25840|
                          DCD      tout
                  |L1.25844|
                          DCD      data
                  |L1.25848|
                          DCD      0x400ff080
                  |L1.25852|
                          DCD      0x000f423f
                  |L1.25856|
                          DCD      lpticks
                  |L1.25860|
                          DCD      emergencytimer
                  |L1.25864|
                          DCD      tout2
                  |L1.25868|
                          DCD      rtcticks2
                  |L1.25872|
                          DCD      sleep_flag
                  |L1.25876|
                          DCD      aliveping
                  |L1.25880|
                          DCD      0x40040000
                  |L1.25884|
                          DCD      test2
                  |L1.25888|
                          DCD      at_
                  |L1.25892|
006524  0a0a0a20          DCB      "\n\n\n GPIOB = %d \n\n\n ",0
006528  4750494f
00652c  42203d20
006530  2564200a
006534  0a0a2000
                  |L1.25912|
                          DCD      tmeout
                  |L1.25916|
                          DCD      ||.text||+0xd60
                  |L1.25920|
                          DCD      ||.text||+0x3dc4
                  |L1.25924|
006544  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
006548  2b475356
00654c  0d0a00  
00654f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uart_string_gsm
                          %        5000
                  data
                          %        1500
                  num2
                          %        30
                  latest
                          %        10
                  ipadd
                          %        16
                  ignstr
                          %        9
                  string_gps
                          %        100
                  gga
                          %        100
                  ||rmc||
                          %        100
                  gsa
                          %        100
                  uart_string_gps
                          %        3000
                  data2
                          %        300
                  exception
                          %        200
                  licenceplate
                          %        15
                  ||ip||
                          %        100
                  port
                          %        10
                  at_
                          %        100
                  lati
                          %        20
                  longi
                          %        20
                  fsize
                          %        15
                  num_o
                          %        15
                  _rtcticks
                          %        10
                  imei
                          %        20
                  sd_data
                          %        1400

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a41542b          DCB      "\nAT+CMGS=""%s""\r\n",0
000004  434d4753
000008  3d222573
00000c  220d0a00
000010  4552524f          DCB      "ERROR:",0
000014  523a00  
000017  00                DCB      0
000018  4552524f          DCB      "ERROR\r\n",0
00001c  520d0a00
000020  3e00              DCB      ">",0
000022  00                DCB      0
000023  00                DCB      0
000024  2b434d47          DCB      "+CMGS:",0
000028  533a00  
00002b  00                DCB      0
00002c  4f4b00            DCB      "OK",0
00002f  00                DCB      0
000030  0a41542b          DCB      "\nAT+FSCREATE=C:\\IGN.TXT\r\n",0
000034  46534352
000038  45415445
00003c  3d433a5c
000040  49474e2e
000044  5458540d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0
00004c  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n",0
000050  2b465357
000054  52495445
000058  3d433a5c
00005c  49474e2e
000060  5458542c
000064  302c362c
000068  31300d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
000070  4f4b0d0a          DCB      "OK\r\n",0
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
000078  0a494f4e          DCB      "\nION\n\n\n\n",0
00007c  0a0a0a0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
000084  0a41542b          DCB      "\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n",0
000088  46534352
00008c  45415445
000090  3d433a5c
000094  49505f50
000098  4f52542e
00009c  5458540d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",0
0000a8  2b465357
0000ac  52495445
0000b0  3d433a5c
0000b4  49505f50
0000b8  4f52542e
0000bc  5458542c
0000c0  302c2564
0000c4  2c31300d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
0000cc  7c49507c          DCB      "|IP|",0
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  7c504f52          DCB      "|PORT|",0
0000d8  547c00  
0000db  00                DCB      0
0000dc  7c00              DCB      "|",0
0000de  00                DCB      0
0000df  00                DCB      0
0000e0  4552524f          DCB      "ERROR",0
0000e4  5200    
0000e6  00                DCB      0
0000e7  00                DCB      0
0000e8  524d4300          DCB      "RMC",0
0000ec  47474100          DCB      "GGA",0
0000f0  47534100          DCB      "GSA",0
0000f4  0d0a0a0a          DCB      "\r\n\n\nAT+GSN\r\n",0
0000f8  41542b47
0000fc  534e0d0a
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
000104  256400            DCB      "%d",0
000107  00                DCB      0
000108  256600            DCB      "%f",0
00010b  00                DCB      0
00010c  252e3166          DCB      "%.1f",0
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
000114  242c00            DCB      "$$,",0
000117  00                DCB      0
000118  2c525544          DCB      ",RUDRA-J01,1.0.19,EM,L,",0
00011c  52412d4a
000120  30312c31
000124  2e302e31
000128  392c454d
00012c  2c4c2c00
000130  3000              DCB      "0",0
000132  00                DCB      0
000133  00                DCB      0
000134  2c525544          DCB      ",RUDRA-J01,1.0.19,NR,L,",0
000138  52412d4a
00013c  30312c31
000140  2e302e31
000144  392c4e52
000148  2c4c2c00
00014c  2c00              DCB      ",",0
00014e  00                DCB      0
00014f  00                DCB      0
000150  2c312c00          DCB      ",1,",0
000154  2c302c00          DCB      ",0,",0
000158  2c4f444f          DCB      ",ODOMETER NC,",0
00015c  4d455445
000160  52204e43
000164  2c00    
000166  00                DCB      0
000167  00                DCB      0
000168  0d0a0a0a          DCB      "\r\n\n\nAT+COPS?\r\n",0
00016c  41542b43
000170  4f50533f
000174  0d0a00  
000177  00                DCB      0
000178  312c00            DCB      "1,",0
00017b  00                DCB      0
00017c  302c00            DCB      "0,",0
00017f  00                DCB      0
000180  432c00            DCB      "C,",0
000183  00                DCB      0
000184  0d0a0a0a          DCB      "\r\n\n\nAT+CSQ\r\n",0
000188  41542b43
00018c  53510d0a
000190  00      
000191  00                DCB      0
000192  00                DCB      0
000193  00                DCB      0
000194  0d0a0a0a          DCB      "\r\n\n\nAT+CENG=2,1\r\n",0
000198  41542b43
00019c  454e473d
0001a0  322c310d
0001a4  0a00    
0001a6  00                DCB      0
0001a7  00                DCB      0
0001a8  0d0a0a0a          DCB      "\r\n\n\nAT+CENG?\r\n",0
0001ac  41542b43
0001b0  454e473f
0001b4  0d0a00  
0001b7  00                DCB      0
0001b8  4e4d5200          DCB      "NMR",0
0001bc  0d0a0a0a          DCB      "\r\n\n\nAT+CENG = 0\r\n",0
0001c0  41542b43
0001c4  454e4720
0001c8  3d20300d
0001cc  0a00    
0001ce  00                DCB      0
0001cf  00                DCB      0
0001d0  3100              DCB      "1",0
0001d2  00                DCB      0
0001d3  00                DCB      0
0001d4  31312c00          DCB      "11,",0
0001d8  30302c00          DCB      "00,",0
0001dc  25642c00          DCB      "%d,",0
0001e0  25642a00          DCB      "%d*",0
0001e4  0a41542b          DCB      "\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n",0
0001e8  46534352
0001ec  45415445
0001f0  3d433a5c
0001f4  494e5445
0001f8  5256414c
0001fc  2e545854
000200  0d0a00  
000203  00                DCB      0
000204  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",0
000208  2b465357
00020c  52495445
000210  3d433a5c
000214  494e5445
000218  5256414c
00021c  2e545854
000220  2c302c25
000224  642c3130
000228  0d0a00  
00022b  00                DCB      0
00022c  7c494e54          DCB      "|INTERVAL|",0
000230  45525641
000234  4c7c00  
000237  00                DCB      0
000238  0a41542b          DCB      "\nAT+FSCREATE=C:\\APN.TXT\r\n",0
00023c  46534352
000240  45415445
000244  3d433a5c
000248  41504e2e
00024c  5458540d
000250  0a00    
000252  00                DCB      0
000253  00                DCB      0
000254  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",0
000258  2b465357
00025c  52495445
000260  3d433a5c
000264  41504e2e
000268  5458542c
00026c  302c2564
000270  2c31300d
000274  0a00    
000276  00                DCB      0
000277  00                DCB      0
000278  0a41542b          DCB      "\nAT+FSCREATE=C:\\LICPLATE.TXT\r\n",0
00027c  46534352
000280  45415445
000284  3d433a5c
000288  4c494350
00028c  4c415445
000290  2e545854
000294  0d0a00  
000297  00                DCB      0
000298  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\LICPLATE.TXT,0,%d,10\r\n",0
00029c  2b465357
0002a0  52495445
0002a4  3d433a5c
0002a8  4c494350
0002ac  4c415445
0002b0  2e545854
0002b4  2c302c25
0002b8  642c3130
0002bc  0d0a00  
0002bf  00                DCB      0
0002c0  7c4c4943          DCB      "|LICPLATE|",0
0002c4  504c4154
0002c8  457c00  
0002cb  00                DCB      0
0002cc  0a0a4154          DCB      "\n\nAT\r\n",0
0002d0  0d0a00  
0002d3  00                DCB      0
0002d4  0a0a4154          DCB      "\n\nAT+GSV\r\n",0
0002d8  2b475356
0002dc  0d0a00  
0002df  00                DCB      0
0002e0  0a0a4154          DCB      "\n\nAT+CMGF=1\n\n",0
0002e4  2b434d47
0002e8  463d310a
0002ec  0a00    
0002ee  00                DCB      0
0002ef  00                DCB      0
0002f0  0a0a4154          DCB      "\n\nAT+CSCA?\r\n",0
0002f4  2b435343
0002f8  413f0d0a
0002fc  00      
0002fd  00                DCB      0
0002fe  00                DCB      0
0002ff  00                DCB      0
000300  0d0a4154          DCB      "\r\nAT+CMGR=1\r\n",0
000304  2b434d47
000308  523d310d
00030c  0a00    
00030e  00                DCB      0
00030f  00                DCB      0
000310  4f574e45          DCB      "OWNER",0
000314  5200    
000316  00                DCB      0
000317  00                DCB      0
000318  4c4f4341          DCB      "LOCATION",0
00031c  54494f4e
000320  00      
000321  00                DCB      0
000322  00                DCB      0
000323  00                DCB      0
000324  494e5445          DCB      "INTERVAL_",0
000328  5256414c
00032c  5f00    
00032e  00                DCB      0
00032f  00                DCB      0
000330  53544152          DCB      "START",0
000334  5400    
000336  00                DCB      0
000337  00                DCB      0
000338  4f574e45          DCB      "OWNER1",0
00033c  523100  
00033f  00                DCB      0
000340  4f574e45          DCB      "OWNER2",0
000344  523200  
000347  00                DCB      0
000348  4f574e45          DCB      "OWNER3",0
00034c  523300  
00034f  00                DCB      0
000350  44454255          DCB      "DEBUG",0
000354  4700    
000356  00                DCB      0
000357  00                DCB      0
000358  52455345          DCB      "RESET",0
00035c  5400    
00035e  00                DCB      0
00035f  00                DCB      0
000360  495000            DCB      "IP",0
000363  00                DCB      0
000364  53554f57          DCB      "SUOWNER",0
000368  4e455200
00036c  534f574e          DCB      "SOWNER",0
000370  455200  
000373  00                DCB      0
000374  49474e49          DCB      "IGNITION ON",0
000378  54494f4e
00037c  204f4e00
000380  49474e49          DCB      "IGNITION OFF",0
000384  54494f4e
000388  204f4646
00038c  00      
00038d  00                DCB      0
00038e  00                DCB      0
00038f  00                DCB      0
000390  49474e53          DCB      "IGNSTAT",0
000394  54415400
000398  4c494350          DCB      "LICPLATE",0
00039c  4c415445
0003a0  00      
0003a1  00                DCB      0
0003a2  00                DCB      0
0003a3  00                DCB      0
0003a4  0a546865          DCB      "\nThere is an Emergency please help:\nCoordinates:%sN,%"
0003a8  72652069
0003ac  7320616e
0003b0  20456d65
0003b4  7267656e
0003b8  63792070
0003bc  6c656173
0003c0  65206865
0003c4  6c703a0a
0003c8  436f6f72
0003cc  64696e61
0003d0  7465733a
0003d4  25734e2c
0003d8  25      
0003d9  73450a68          DCB      "sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&o"
0003dd  74747073
0003e1  3a2f2f77
0003e5  77772e67
0003e9  6f6f676c
0003ed  652e636f
0003f1  6d2f7365
0003f5  61726368
0003f9  3f713d25
0003fd  73256332
000401  43257326
000405  69653d75
000409  74662d38
00040d  266f    
00040f  653d7574          DCB      "e=utf-8\n",0
000413  662d380a
000417  00      
000418  0d0a4154          DCB      "\r\nAT+CPBR=1\r\n",0
00041c  2b435042
000420  523d310d
000424  0a00    
000426  00                DCB      0
000427  00                DCB      0
000428  0d0a4154          DCB      "\r\nAT+CPBR=2\r\n",0
00042c  2b435042
000430  523d320d
000434  0a00    
000436  00                DCB      0
000437  00                DCB      0
000438  0a436f6f          DCB      "\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://"
00043c  7264696e
000440  61746573
000444  203a2025
000448  73204e2c
00044c  20257320
000450  450a5370
000454  65656420
000458  3a202573
00045c  206b6d70
000460  680a0a68
000464  74747073
000468  3a2f2f  
00046b  7777772e          DCB      "www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",0
00046f  676f6f67
000473  6c652e63
000477  6f6d2f73
00047b  65617263
00047f  683f713d
000483  25732563
000487  32432573
00048b  2669653d
00048f  7574662d
000493  38266f65
000497  3d757466
00049b  2d380a00
00049f  00                DCB      0
0004a0  0d0a4154          DCB      "\r\nAT+CMGD=1,4\r\n",0
0004a4  2b434d47
0004a8  443d312c
0004ac  340d0a00
0004b0  257300            DCB      "%s",0
0004b3  00                DCB      0
0004b4  0a41542b          DCB      "\nAT+FSCREATE=D:\\LOG.TXT\r\n",0
0004b8  46534352
0004bc  45415445
0004c0  3d443a5c
0004c4  4c4f472e
0004c8  5458540d
0004cc  0a00    
0004ce  00                DCB      0
0004cf  00                DCB      0
0004d0  0a41542b          DCB      "\nAT+FSCREATE=C:\\LOG.TXT\r\n",0
0004d4  46534352
0004d8  45415445
0004dc  3d433a5c
0004e0  4c4f472e
0004e4  5458540d
0004e8  0a00    
0004ea  00                DCB      0
0004eb  00                DCB      0
0004ec  3130342e          DCB      "104.236.203.4",0
0004f0  3233362e
0004f4  3230332e
0004f8  3400    
0004fa  00                DCB      0
0004fb  00                DCB      0
0004fc  35353535          DCB      "5555",0
000500  00      
000501  00                DCB      0
000502  00                DCB      0
000503  00                DCB      0
000504  3500              DCB      "5",0
000506  00                DCB      0
000507  00                DCB      0
000508  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n\r\n",0
00050c  542b434d
000510  47443d31
000514  2c340d0a
000518  0d0a00  
00051b  00                DCB      0
00051c  0a00              DCB      "\n",0
00051e  00                DCB      0
00051f  00                DCB      0
000520  2c482c00          DCB      ",H,",0
000524  2c4c2c00          DCB      ",L,",0
000528  0d0a4154          DCB      "\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",0
00052c  2b465357
000530  52495445
000534  3d25735c
000538  4c4f472e
00053c  5458542c
000540  312c2564
000544  2c31300a
000548  0a00    
00054a  00                DCB      0
00054b  00                DCB      0
00054c  0a0a2041          DCB      "\n\n AT+CFUN=1,1\r\n",0
000550  542b4346
000554  554e3d31
000558  2c310d0a
00055c  00      
00055d  00                DCB      0
00055e  00                DCB      0
00055f  00                DCB      0
000560  0d0d0a41          DCB      "\r\r\nAT+CMGD=1,4\r\n\n\n\n\n",0
000564  542b434d
000568  47443d31
00056c  2c340d0a
000570  0a0a0a0a
000574  00      
000575  00                DCB      0
000576  00                DCB      0
000577  00                DCB      0
000578  0a0a4154          DCB      "\n\nAT+CPBS=""SM""\r\n",0
00057c  2b435042
000580  533d2253
000584  4d220d0a
000588  00      
000589  00                DCB      0
00058a  00                DCB      0
00058b  00                DCB      0
00058c  0d0a4154          DCB      "\r\nAT+CPBW=1\r\r\n\n",0
000590  2b435042
000594  573d310d
000598  0d0a0a00
00059c  0d0a4154          DCB      "\r\nAT+CPBW=1,""%s"",129,""OWNER1""\r\n",0
0005a0  2b435042
0005a4  573d312c
0005a8  22257322
0005ac  2c313239
0005b0  2c224f57
0005b4  4e455231
0005b8  220d0a00
0005bc  0a0a4154          DCB      "\n\nAT+CPBS=""ME""\r\n",0
0005c0  2b435042
0005c4  533d224d
0005c8  45220d0a
0005cc  00      
0005cd  00                DCB      0
0005ce  00                DCB      0
0005cf  00                DCB      0
0005d0  0d0a4154          DCB      "\r\nAT+CPBW=2\r\r\n\n",0
0005d4  2b435042
0005d8  573d320d
0005dc  0d0a0a00
0005e0  0d0a4154          DCB      "\r\nAT+CPBW=2,""%s"",129,""OWNER2""\r\n",0
0005e4  2b435042
0005e8  573d322c
0005ec  22257322
0005f0  2c313239
0005f4  2c224f57
0005f8  4e455232
0005fc  220d0a00
000600  0d0a4154          DCB      "\r\nAT+CPBW=3\r\r\n\n",0
000604  2b435042
000608  573d330d
00060c  0d0a0a00
000610  0d0a4154          DCB      "\r\nAT+CPBW=3,""%s"",129,""OWNER3""\r\n",0
000614  2b435042
000618  573d332c
00061c  22257322
000620  2c313239
000624  2c224f57
000628  4e455233
00062c  220d0a00
000630  0d0a4154          DCB      "\r\nAT+CPBW=4\r\r\n\n",0
000634  2b435042
000638  573d340d
00063c  0d0a0a00
000640  0d0a4154          DCB      "\r\nAT+CPBW=4,""%s"",129,""SOWNER""\r\n",0
000644  2b435042
000648  573d342c
00064c  22257322
000650  2c313239
000654  2c22534f
000658  574e4552
00065c  220d0a00
000660  0d0a2041          DCB      "\r\n AT+CMGD=1,4\r\n",0
000664  542b434d
000668  47443d31
00066c  2c340d0a
000670  00      
000671  00                DCB      0
000672  00                DCB      0
000673  00                DCB      0
000674  0a41542b          DCB      "\nAT+FSCREATE=C:\\CURSOR.TXT\r\n",0
000678  46534352
00067c  45415445
000680  3d433a5c
000684  43555253
000688  4f522e54
00068c  58540d0a
000690  00      
000691  00                DCB      0
000692  00                DCB      0
000693  00                DCB      0
000694  0d0a4154          DCB      "\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n",0
000698  2b465357
00069c  52495445
0006a0  3d433a5c
0006a4  43555253
0006a8  4f522e54
0006ac  58542c30
0006b0  2c35302c
0006b4  31300d0a
0006b8  00      
0006b9  00                DCB      0
0006ba  00                DCB      0
0006bb  00                DCB      0
0006bc  0a2c256c          DCB      "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
0006c0  642c256c
0006c4  642c256c
0006c8  642c0a0a
0006cc  0a0a0a0a
0006d0  0a0a0a0a
0006d4  0a0a0a0a
0006d8  0a0a0a0a
0006dc  0a0a    
0006de  0a0a0a0a          DCB      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
0006e2  0a0a0a0a
0006e6  0a0a0a0a
0006ea  0a0a0a0a
0006ee  0a0a0a0a
0006f2  0a0a0a0a
0006f6  0a0a0a0a
0006fa  0a0a00            DCB      "\n\n",0
0006fd  00                DCB      0
0006fe  00                DCB      0
0006ff  00                DCB      0
000700  0d0a0d0a          DCB      "\r\n\r\nAT+CBC\r\n",0
000704  41542b43
000708  42430d0a
00070c  00      
00070d  00                DCB      0
00070e  00                DCB      0
00070f  00                DCB      0
000710  4d434300          DCB      "MCC",0
000714  4d4e4300          DCB      "MNC",0
000718  4c414300          DCB      "LAC",0
00071c  43454c4c          DCB      "CELL ID",0
000720  20494400
000724  0d0a0d0a          DCB      "\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",0
000728  41542b46
00072c  53464c53
000730  495a453d
000734  25735c4c
000738  4f472e54
00073c  58540d0a
000740  00      
000741  00                DCB      0
000742  00                DCB      0
000743  00                DCB      0
000744  0d0a0d0a          DCB      "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",0
000748  41542b46
00074c  53524541
000750  443d2573
000754  5c4c4f47
000758  2e545854
00075c  2c312c31
000760  3130302c
000764  25640d0a
000768  00      
000769  00                DCB      0
00076a  00                DCB      0
00076b  00                DCB      0
00076c  53454e44          DCB      "SEND OK",0
000770  204f4b00
000774  4641494c          DCB      "FAIL",0
000778  00      
000779  00                DCB      0
00077a  00                DCB      0
00077b  00                DCB      0
00077c  44454143          DCB      "DEACT",0
000780  5400    
000782  00                DCB      0
000783  00                DCB      0
000784  65786365          DCB      "exception : COMPARED RESPONCES IN THE DATA\n\n\n\n",0
000788  7074696f
00078c  6e203a20
000790  434f4d50
000794  41524544
000798  20524553
00079c  504f4e43
0007a0  45532049
0007a4  4e205448
0007a8  45204441
0007ac  54410a0a
0007b0  0a0a00  
0007b3  00                DCB      0
0007b4  434f4e4e          DCB      "CONNECT",0
0007b8  45435400
0007bc  0d0a4154          DCB      "\r\nAT+CIPSEND\r\n",0
0007c0  2b434950
0007c4  53454e44
0007c8  0d0a00  
0007cb  00                DCB      0
0007cc  0d0a4154          DCB      "\r\nAT+CFUN=0\r\r\n\n",0
0007d0  2b434655
0007d4  4e3d300d
0007d8  0d0a0a00
0007dc  4e4f5420          DCB      "NOT INSERTED\r\nOK",0
0007e0  494e5345
0007e4  52544544
0007e8  0d0a4f4b
0007ec  00      
0007ed  00                DCB      0
0007ee  00                DCB      0
0007ef  00                DCB      0
0007f0  0d0a4154          DCB      "\r\nAT+CFUN=1\r\n",0
0007f4  2b434655
0007f8  4e3d310d
0007fc  0a00    
0007fe  00                DCB      0
0007ff  00                DCB      0
000800  0d0a4154          DCB      "\r\nAT+CIPSHUT\r\n",0
000804  2b434950
000808  53485554
00080c  0d0a00  
00080f  00                DCB      0
000810  0d0a4154          DCB      "\r\nAT+CSTT=""%s""\r\n",0
000814  2b435354
000818  543d2225
00081c  73220d0a
000820  00      
000821  00                DCB      0
000822  00                DCB      0
000823  00                DCB      0
000824  0d0a4154          DCB      "\r\nAT+CIICR\r\r\n",0
000828  2b434949
00082c  43520d0d
000830  0a00    
000832  00                DCB      0
000833  00                DCB      0
000834  0d0a4154          DCB      "\r\nAT+CIFSR\r\r\n",0
000838  2b434946
00083c  53520d0d
000840  0a00    
000842  00                DCB      0
000843  00                DCB      0
000844  302e302e          DCB      "0.0.0.0",0
000848  302e3000
00084c  0d0a4154          DCB      "\r\nAT+CIPSTART=""TCP"",""%s"",""%s""\r\n",0
000850  2b434950
000854  53544152
000858  543d2254
00085c  4350222c
000860  22257322
000864  2c222573
000868  220d0a00
00086c  434f4e4e          DCB      "CONNECT FAIL",0
000870  45435420
000874  4641494c
000878  00      
000879  00                DCB      0
00087a  00                DCB      0
00087b  00                DCB      0
00087c  0d0a4154          DCB      "\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",0
000880  2b465343
000884  52454154
000888  453d2573
00088c  5c4c4f47
000890  2e545854
000894  0d0a00  
000897  00                DCB      0
000898  0a41542b          DCB      "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n",0
00089c  46535245
0008a0  41443d43
0008a4  3a5c4150
0008a8  4e2e5458
0008ac  542c302c
0008b0  3130302c
0008b4  310d0a00
0008b8  0a41542b          DCB      "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n",0
0008bc  46535245
0008c0  41443d43
0008c4  3a5c4947
0008c8  4e2e5458
0008cc  542c302c
0008d0  3130302c
0008d4  310d0a00
0008d8  494f4e00          DCB      "ION",0
0008dc  494f4646          DCB      "IOFF",0
0008e0  00      
0008e1  00                DCB      0
0008e2  00                DCB      0
0008e3  00                DCB      0
0008e4  0a41542b          DCB      "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n",0
0008e8  46535245
0008ec  41443d43
0008f0  3a5c4355
0008f4  52534f52
0008f8  2e545854
0008fc  2c302c31
000900  30302c31
000904  0d0a00  
000907  00                DCB      0
000908  0a41542b          DCB      "\nAT+FSREAD=C:\\LICPLATE.TXT,0,100,1\r\n",0
00090c  46535245
000910  41443d43
000914  3a5c4c49
000918  43504c41
00091c  54452e54
000920  58542c30
000924  2c313030
000928  2c310d0a
00092c  00      
00092d  00                DCB      0
00092e  00                DCB      0
00092f  00                DCB      0
000930  0a494f46          DCB      "\nIOFF\n\n\n\n",0
000934  460a0a0a
000938  0a00    
00093a  00                DCB      0
00093b  00                DCB      0
00093c  0a41542b          DCB      "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n",0
000940  46535245
000944  41443d43
000948  3a5c4950
00094c  5f504f52
000950  542e5458
000954  542c302c
000958  3130302c
00095c  310d0a00
000960  0a41542b          DCB      "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n",0
000964  46535245
000968  41443d43
00096c  3a5c494e
000970  54455256
000974  414c2e54
000978  58542c30
00097c  2c313030
000980  2c310d0a
000984  00      

                          AREA ||.data||, DATA, ALIGN=3

                  cond200
                          DCD      0x00000000
                  k
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  ||k2||
                          DCD      0x00000000
                  ||l2||
                          DCD      0x00000000
                  ign
                          DCD      0x00000000
                  tout
                          DCD      0x00000000
                  tout2
                          DCD      0x00000000
                  time
                          DCD      0x000f423f
                  temp
                          DCD      0x00000000
                  flagch
                          DCD      0x00000000
                  cond121
00002c  00000000          DCB      0x00,0x00,0x00,0x00
                  cond122
                          DCD      0x00000000
                  cond123
                          DCD      0x00000000
                  cond124
                          DCD      0x00000000
                  len
                          DCD      0x00000000
                  cond
000040  00000000          DCB      0x00,0x00,0x00,0x00
                  con1d
                          DCD      0x00000000
                  stcond1
                          DCD      0x00000000
                  stcond2
                          DCD      0x00000000
                  stcond3
                          DCD      0x00000000
                  stcond4
                          DCD      0x00000000
                  time111
                          DCD      0x00000000
                  timeout222
                          DCD      0x00000000
                  qweq
                          DCD      0x00000000
                  i11
                          DCD      0x00000000
                  j11
                          DCD      0x00000000
                  temp11
                          DCD      0x00000000
                  ||sz1||
                          DCD      0x00000000
                  ||sz2||
                          DCD      0x00000000
                  send_SOS
                          DCD      0x00000000
                  gu32PortStatus
                          DCD      0x00000000
                  stateCount
000080  00000000          DCB      0x00,0x00,0x00,0x00
                  cnt_start_value
                          DCD      0x00000000
                  cnt_end_value
                          DCD      0x00000000
                  overhead
                          DCD      0x00000000
                  e
                          DCD      0x00000000
                  adcsa
                          DCD      0x00000000
                  adcin
                          DCD      0x00000000
                  adcsample
                          DCD      0x00000000
                  fuel
                          DCD      0x00000000
                  fuelstr
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
                  emergencyinterval
                          DCD      0x00000064
                  emergencytimer
                          DCD      0x00000000
                  ||rez||
0000b4  00000000          DCFS     0x00000000 ; 0
                  fact
0000b8  3f800000          DCFS     0x3f800000 ; 1
                  d
                          DCD      0x00000000
                  point_seen
                          DCD      0x00000000
                  cond201
                          DCD      0x00000000
                  emergency
0000c8  30000000          DCB      0x30,0x00,0x00,0x00
                  cond1
                          DCD      0x00000000
                  cond2
                          DCD      0x00000000
                  cond3
                          DCD      0x00000000
                  cond4
                          DCD      0x00000000
                  cond5
                          DCD      0x00000000
                  cond6
                          DCD      0x00000000
                  cond7
                          DCD      0x00000000
                  cond8
                          DCD      0x00000000
                  cond9
                          DCD      0x00000000
                  cond10
                          DCD      0x00000000
                  cond11
                          DCD      0x00000000
                  cond12
                          DCD      0x00000000
                  cond13
                          DCD      0x00000000
                  cond14
                          DCD      0x00000000
                  cond15
                          DCD      0x00000000
                  cond16
                          DCD      0x00000000
                  ass
                          DCD      0x00000000
                  count
                          DCD      0x00000000
                  ||fsz||
                          DCD      0x00000000
                  log0
                          DCD      0x00000000
                  frameno
                          DCD      0x00000000
                  times
                          DCD      0x00000000
                  qwe
                          DCD      0x00000000
                  ||k5||
                          DCD      0x00000000
                  enters
                          DCD      0x00000000
                  cursorvaluepr
                          DCD      0x00000000
                  cursorvaluene
                          DCD      0x00000000
                  ||q1||
                          DCD      0x00000000
                  ||q2||
                          DCD      0x00000000
                  ||q3||
                          DCD      0x00000000
                  ||q4||
                          DCD      0x00000000
                  cntendl
                          DCD      0x00000000
                  prev
                          %        8
                  ||iz||
                          DCD      0x00000000
                  a
                          %        8
                  b
                          %        8
                  c
                          %        8
                  ||hh||
                          DCD      0x00000000
                  mm1
                          DCD      0x00000000
                  mm2
                          DCD      0x00000000
                          DCD      0x00000000
                  ||a1||
                          %        8
                  ||b1||
                          %        8
                  ||c1||
                          %        8
                  hh11
                          %        8
                  mm11
                          %        8
                  mm22
                          %        8
                  logged
                          DCD      0x00000000
                  check
                          DCD      0x00000000
                  stcond5
                          DCD      0x00000000
                  acstr
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
                  breach
                          DCD      0x00000000
                  aliveping
                          DCD      0x00000000
                  sleep_flag
                          DCD      0x00000000
                  tmeout
                          DCD      0x00000007
                  int_erval
                          DCD      0x00000001
                  drive
                          DCD      0x00000000
0001d8  00                DCB      0x00
                  apn
0001d9  697361            DCB      0x69,0x73,0x61
0001dc  66650000          DCB      0x66,0x65,0x00,0x00
                          %        16
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
                  speed
0001f4  00000000          DCFS     0x00000000 ; 0
                  lpticks
                          DCD      0x00000000
                  voltagecbc
                          DCD      0x00000000
                  ||csq||
                          DCD      0x00000000
                  rtcticks
                          DCD      0x00000000
                  rtcticks2
                          DCD      0x00000000
                  imeiinc
                          DCD      0x00000000
                  ticks_ch
000210  00                DCB      0x00
                  save_rtcticks
000211  00                DCB      0x00
                  velocity
000212  0000              DCB      0x00,0x00
000214  000000            DCB      0x00,0x00,0x00
                  interval
000217  00                DCB      0x00
                          DCD      0x00000000
                  timeout
                          DCD      0x00000000
                  ||pr||
000220  00000000          DCFS     0x00000000 ; 0
                  ||la||
000224  00000000          DCFS     0x00000000 ; 0
                  ggaptr
                          DCD      0x00000000
                  rmcptr
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  motion_samples
                          DCD      0x00000000
                  notsleep
                          DCD      0x00000000
                  ||ch||
00023c  00                DCB      0x00
                  ringflag
00023d  00                DCB      0x00
                  lptmr_interrupt
00023e  0000              DCB      0x00,0x00
                  time52
                          DCD      0x0000000f
                  cond277
                          DCD      0x00000000
                  cond20077
                          DCD      0x00000000
                  ||sz||
                          DCD      0x00000000
                  ||cn||
                          DCD      0x00000000
                  ||res||
                          DCD      0x00000000
                  test2
                          DCD      0x00000000

                          AREA ||i.clear||, COMGROUP=clear, CODE, READONLY, ALIGN=2

                  clear PROC
;;;1461   	
;;;1462   __inline void clear()
000000  4808              LDR      r0,|L18.36|
;;;1463   {
;;;1464     if (UART_S1_REG(UART1_BASE_PTR) & UART_S1_OR_MASK)
000002  7900              LDRB     r0,[r0,#4]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L18.20|
;;;1465       {
;;;1466         temp = UART_D_REG(UART1_BASE_PTR);
00000c  4805              LDR      r0,|L18.36|
00000e  79c0              LDRB     r0,[r0,#7]
000010  4905              LDR      r1,|L18.40|
000012  6008              STR      r0,[r1,#0]  ; temp
                  |L18.20|
;;;1467   		}
;;;1468   		
;;;1469   		UART_S1_REG(UART1_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000014  4803              LDR      r0,|L18.36|
000016  7900              LDRB     r0,[r0,#4]
000018  2118              MOVS     r1,#0x18
00001a  4308              ORRS     r0,r0,r1
00001c  4901              LDR      r1,|L18.36|
00001e  7108              STRB     r0,[r1,#4]
;;;1470   }	
000020  4770              BX       lr
;;;1471   
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0x4006b000
                  |L18.40|
                          DCD      temp

                          AREA ||i.delay||, COMGROUP=delay, CODE, READONLY, ALIGN=2

                  delay PROC
;;;83     /*************************** delay*****************************************/
;;;84     __inline void delay(int32 delaytime)
000000  e00d              B        |L25.30|
                  |L25.2|
;;;85     {
;;;86      while(delaytime--)
;;;87         {for(i=2000;i>0;i--)
000002  217d              MOVS     r1,#0x7d
000004  0109              LSLS     r1,r1,#4
000006  4a08              LDR      r2,|L25.40|
000008  6011              STR      r1,[r2,#0]  ; i
00000a  e004              B        |L25.22|
                  |L25.12|
00000c  4906              LDR      r1,|L25.40|
00000e  6809              LDR      r1,[r1,#0]  ; i
000010  1e49              SUBS     r1,r1,#1
000012  4a05              LDR      r2,|L25.40|
000014  6011              STR      r1,[r2,#0]  ; i
                  |L25.22|
000016  4904              LDR      r1,|L25.40|
000018  6809              LDR      r1,[r1,#0]  ; i
00001a  2900              CMP      r1,#0
00001c  dcf6              BGT      |L25.12|
                  |L25.30|
00001e  4601              MOV      r1,r0                 ;86
000020  1e40              SUBS     r0,r0,#1              ;86
000022  2900              CMP      r1,#0                 ;86
000024  d1ed              BNE      |L25.2|
;;;88     			{	
;;;89     			}			// about 1 ms
;;;90         }
;;;91     }
000026  4770              BX       lr
;;;92      void delay2(int delaytime)
                          ENDP

                  |L25.40|
                          DCD      i

                          AREA ||i.send_modem||, COMGROUP=send_modem, CODE, READONLY, ALIGN=2

                  send_modem PROC
;;;1437   
;;;1438   __inline void send_modem(char ch[])
000000  b570              PUSH     {r4-r6,lr}
;;;1439   	{	
000002  4605              MOV      r5,r0
;;;1440   						unsigned char i20=0;
000004  2400              MOVS     r4,#0
;;;1441   						for(i20=0;i20<strlen(ch);i20++)
000006  bf00              NOP      
000008  e005              B        |L32.22|
                  |L32.10|
;;;1442   						{
;;;1443   							uart_putchar(UART1_BASE_PTR, ch[i20]);//clear();
00000a  5d29              LDRB     r1,[r5,r4]
00000c  4805              LDR      r0,|L32.36|
00000e  f7fffffe          BL       uart_putchar
000012  1c60              ADDS     r0,r4,#1              ;1441
000014  b2c4              UXTB     r4,r0                 ;1441
                  |L32.22|
000016  4628              MOV      r0,r5                 ;1441
000018  f7fffffe          BL       strlen
00001c  42a0              CMP      r0,r4                 ;1441
00001e  d8f4              BHI      |L32.10|
;;;1444   						}
;;;1445   						
;;;1446   	}
000020  bd70              POP      {r4-r6,pc}
;;;1447   
                          ENDP

000022  0000              DCW      0x0000
                  |L32.36|
                          DCD      0x4006b000

                          AREA ||i.send_GSM||, COMGROUP=send_GSM, CODE, READONLY, ALIGN=2

                  send_GSM PROC
;;;1483   
;;;1484   __inline void send_GSM(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1485   {	 
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e0a              LDR      r6,[sp,#0x28]
;;;1486   
;;;1487   		//uart_putchar(UART1_BASE_PTR,0xA);
;;;1488   		//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1489   	clear();
00000c  f7fffffe          BL       clear
;;;1490   	tout=0;
000010  2000              MOVS     r0,#0
000012  4931              LDR      r1,|L39.216|
000014  6008              STR      r0,[r1,#0]  ; tout
;;;1491   //	qwe=strlen(uart_string_gsm);
;;;1492   		memset(uart_string_gsm,0,5000);
000016  4931              LDR      r1,|L39.220|
000018  4831              LDR      r0,|L39.224|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1493   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4930              LDR      r1,|L39.228|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1494   	 						//timer counts to wait for characters in uart 1 
;;;1495   		clear();
000024  f7fffffe          BL       clear
;;;1496   		send_modem(string);
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       send_modem
;;;1497   		uart_putchar(UART1_BASE_PTR,'\n');	uart_putchar(UART1_BASE_PTR,'\n');	
00002e  210a              MOVS     r1,#0xa
000030  482d              LDR      r0,|L39.232|
000032  f7fffffe          BL       uart_putchar
000036  210a              MOVS     r1,#0xa
000038  482b              LDR      r0,|L39.232|
00003a  f7fffffe          BL       uart_putchar
;;;1498   		//delay(10);
;;;1499   //	uart_putchar(UART1_BASE_PTR,'\r');
;;;1500   	//uart_putchar(UART1_BASE_PTR,'\r');uart_putchar(UART1_BASE_PTR,'\n');//uart_putchar(UART1_BASE_PTR,0x1A);
;;;1501   		do
00003e  bf00              NOP      
                  |L39.64|
;;;1502   		{
;;;1503   			
;;;1504   //					time111--;
;;;1505   //				  timeout222--;
;;;1506   
;;;1507   			
;;;1508   	cond122=strstr(uart_string_gsm, responseA);
000040  4827              LDR      r0,|L39.224|
000042  9902              LDR      r1,[sp,#8]
000044  f7fffffe          BL       strstr
000048  4928              LDR      r1,|L39.236|
00004a  6008              STR      r0,[r1,#0]  ; cond122
;;;1509   	cond123=strstr(uart_string_gsm, responseB);
00004c  4621              MOV      r1,r4
00004e  4824              LDR      r0,|L39.224|
000050  f7fffffe          BL       strstr
000054  4926              LDR      r1,|L39.240|
000056  6008              STR      r0,[r1,#0]  ; cond123
;;;1510     cond124=strstr(uart_string_gsm, responseC);
000058  4629              MOV      r1,r5
00005a  4821              LDR      r0,|L39.224|
00005c  f7fffffe          BL       strstr
000060  4924              LDR      r1,|L39.244|
000062  6008              STR      r0,[r1,#0]  ; cond124
;;;1511   	cond121 = (cond122	|| cond123	|| cond124  || (tout > timeout))	;
000064  4821              LDR      r0,|L39.236|
000066  6800              LDR      r0,[r0,#0]  ; cond122
000068  2800              CMP      r0,#0
00006a  d10b              BNE      |L39.132|
00006c  4820              LDR      r0,|L39.240|
00006e  6800              LDR      r0,[r0,#0]  ; cond123
000070  2800              CMP      r0,#0
000072  d107              BNE      |L39.132|
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]  ; cond124
000078  2800              CMP      r0,#0
00007a  d103              BNE      |L39.132|
00007c  4816              LDR      r0,|L39.216|
00007e  6800              LDR      r0,[r0,#0]  ; tout
000080  42b0              CMP      r0,r6
000082  dd01              BLE      |L39.136|
                  |L39.132|
000084  2001              MOVS     r0,#1
000086  e000              B        |L39.138|
                  |L39.136|
000088  2000              MOVS     r0,#0
                  |L39.138|
00008a  491b              LDR      r1,|L39.248|
00008c  7008              STRB     r0,[r1,#0]
;;;1512   			
;;;1513   		}while (!cond121);
00008e  4608              MOV      r0,r1
000090  7800              LDRB     r0,[r0,#0]  ; cond121
000092  2800              CMP      r0,#0
000094  d0d4              BEQ      |L39.64|
;;;1514   		clear();
000096  f7fffffe          BL       clear
;;;1515   		if(tout>timeout){
00009a  480f              LDR      r0,|L39.216|
00009c  6800              LDR      r0,[r0,#0]  ; tout
00009e  42b0              CMP      r0,r6
0000a0  dd17              BLE      |L39.210|
;;;1516   			uart_putchar(UART1_BASE_PTR,'\r');
0000a2  210d              MOVS     r1,#0xd
0000a4  4810              LDR      r0,|L39.232|
0000a6  f7fffffe          BL       uart_putchar
;;;1517   		uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,0x1A);
0000aa  210a              MOVS     r1,#0xa
0000ac  480e              LDR      r0,|L39.232|
0000ae  f7fffffe          BL       uart_putchar
0000b2  211a              MOVS     r1,#0x1a
0000b4  480c              LDR      r0,|L39.232|
0000b6  f7fffffe          BL       uart_putchar
;;;1518   		uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,'\r');
0000ba  211a              MOVS     r1,#0x1a
0000bc  480a              LDR      r0,|L39.232|
0000be  f7fffffe          BL       uart_putchar
0000c2  210d              MOVS     r1,#0xd
0000c4  4808              LDR      r0,|L39.232|
0000c6  f7fffffe          BL       uart_putchar
;;;1519   		uart_putchar(UART1_BASE_PTR,'\n');}
0000ca  210a              MOVS     r1,#0xa
0000cc  4806              LDR      r0,|L39.232|
0000ce  f7fffffe          BL       uart_putchar
                  |L39.210|
;;;1520   		//return;
;;;1521   //		return uart_string_gsm;
;;;1522   
;;;1523   		
;;;1524   
;;;1525   
;;;1526   }
0000d2  b005              ADD      sp,sp,#0x14
0000d4  bdf0              POP      {r4-r7,pc}
;;;1527   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L39.216|
                          DCD      tout
                  |L39.220|
                          DCD      0x00001388
                  |L39.224|
                          DCD      uart_string_gsm
                  |L39.228|
                          DCD      ||k2||
                  |L39.232|
                          DCD      0x4006b000
                  |L39.236|
                          DCD      cond122
                  |L39.240|
                          DCD      cond123
                  |L39.244|
                          DCD      cond124
                  |L39.248|
                          DCD      cond121

                          AREA ||i.send_MSG||, COMGROUP=send_MSG, CODE, READONLY, ALIGN=2

                  send_MSG PROC
;;;1529   
;;;1530   __inline char * send_MSG(char *string, char *responseA, char *responseB, char *responseC, int32 timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1531   {	
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;1532   		qwe=strlen(uart_string_gsm);
00000a  4829              LDR      r0,|L46.176|
00000c  f7fffffe          BL       strlen
000010  4928              LDR      r1,|L46.180|
000012  6008              STR      r0,[r1,#0]  ; qwe
;;;1533   
;;;1534   	
;;;1535   		memset(uart_string_gsm,0,qwe);
000014  4608              MOV      r0,r1
000016  6801              LDR      r1,[r0,#0]  ; qwe
000018  4825              LDR      r0,|L46.176|
00001a  f7fffffe          BL       __aeabi_memclr
;;;1536   		k2=0;									//string array counter for uart 1
00001e  2000              MOVS     r0,#0
000020  4925              LDR      r1,|L46.184|
000022  6008              STR      r0,[r1,#0]  ; k2
;;;1537   	  time111=99999;						//timer counts to wait for characters in uart 1 
000024  4825              LDR      r0,|L46.188|
000026  4926              LDR      r1,|L46.192|
000028  6008              STR      r0,[r1,#0]  ; time111
;;;1538   		clear();
00002a  f7fffffe          BL       clear
;;;1539   		timeout222=2001;
00002e  4825              LDR      r0,|L46.196|
000030  4925              LDR      r1,|L46.200|
000032  6008              STR      r0,[r1,#0]  ; timeout222
;;;1540   		send_modem(string);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       send_modem
;;;1541   		do	{
00003a  bf00              NOP      
                  |L46.60|
;;;1542   			
;;;1543   					time111--;
00003c  4820              LDR      r0,|L46.192|
00003e  6800              LDR      r0,[r0,#0]  ; time111
000040  1e40              SUBS     r0,r0,#1
000042  491f              LDR      r1,|L46.192|
000044  6008              STR      r0,[r1,#0]  ; time111
;;;1544   				  timeout222--;
000046  4820              LDR      r0,|L46.200|
000048  6800              LDR      r0,[r0,#0]  ; timeout222
00004a  1e40              SUBS     r0,r0,#1
00004c  491e              LDR      r1,|L46.200|
00004e  6008              STR      r0,[r1,#0]  ; timeout222
;;;1545   //          if(lptmr_interrupt == 1){
;;;1546   //					//accel_read();
;;;1547   //					detect_motion();
;;;1548   //					lptmr_interrupt = 0;}		
;;;1549   //					if(timeout222 % 400 == 0)
;;;1550   //					{
;;;1551   //						//uart0_putchar(UART0_BASE_PTR,'1');uart_putchar(UART1_BASE_PTR,0x1A);
;;;1552   //					}
;;;1553   			
;;;1554   	cond122=strstr(uart_string_gsm, responseA);
000050  4639              MOV      r1,r7
000052  4817              LDR      r0,|L46.176|
000054  f7fffffe          BL       strstr
000058  491c              LDR      r1,|L46.204|
00005a  6008              STR      r0,[r1,#0]  ; cond122
;;;1555   	cond123=strstr(uart_string_gsm, responseB);
00005c  4621              MOV      r1,r4
00005e  4814              LDR      r0,|L46.176|
000060  f7fffffe          BL       strstr
000064  491a              LDR      r1,|L46.208|
000066  6008              STR      r0,[r1,#0]  ; cond123
;;;1556     cond124=strstr(uart_string_gsm, responseC);
000068  4629              MOV      r1,r5
00006a  4811              LDR      r0,|L46.176|
00006c  f7fffffe          BL       strstr
000070  4918              LDR      r1,|L46.212|
000072  6008              STR      r0,[r1,#0]  ; cond124
;;;1557   	cond121 = (cond122	|| cond123	|| cond124  || (time111<=1))	;			
000074  4815              LDR      r0,|L46.204|
000076  6800              LDR      r0,[r0,#0]  ; cond122
000078  2800              CMP      r0,#0
00007a  d10b              BNE      |L46.148|
00007c  4814              LDR      r0,|L46.208|
00007e  6800              LDR      r0,[r0,#0]  ; cond123
000080  2800              CMP      r0,#0
000082  d107              BNE      |L46.148|
000084  4608              MOV      r0,r1
000086  6800              LDR      r0,[r0,#0]  ; cond124
000088  2800              CMP      r0,#0
00008a  d103              BNE      |L46.148|
00008c  480c              LDR      r0,|L46.192|
00008e  6800              LDR      r0,[r0,#0]  ; time111
000090  2801              CMP      r0,#1
000092  dc01              BGT      |L46.152|
                  |L46.148|
000094  2001              MOVS     r0,#1
000096  e000              B        |L46.154|
                  |L46.152|
000098  2000              MOVS     r0,#0
                  |L46.154|
00009a  490f              LDR      r1,|L46.216|
00009c  7008              STRB     r0,[r1,#0]
;;;1558   			
;;;1559   			
;;;1560   		}while (!cond121);
00009e  4608              MOV      r0,r1
0000a0  7800              LDRB     r0,[r0,#0]  ; cond121
0000a2  2800              CMP      r0,#0
0000a4  d0ca              BEQ      |L46.60|
;;;1561   		clear();
0000a6  f7fffffe          BL       clear
;;;1562   		return uart_string_gsm;
0000aa  4801              LDR      r0,|L46.176|
;;;1563   
;;;1564   }
0000ac  bdf8              POP      {r3-r7,pc}
;;;1565   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L46.176|
                          DCD      uart_string_gsm
                  |L46.180|
                          DCD      qwe
                  |L46.184|
                          DCD      ||k2||
                  |L46.188|
                          DCD      0x0001869f
                  |L46.192|
                          DCD      time111
                  |L46.196|
                          DCD      0x000007d1
                  |L46.200|
                          DCD      timeout222
                  |L46.204|
                          DCD      cond122
                  |L46.208|
                          DCD      cond123
                  |L46.212|
                          DCD      cond124
                  |L46.216|
                          DCD      cond121

                          AREA ||i.send_message||, COMGROUP=send_message, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  send_message PROC
;;;2721   			
;;;2722   __inline	void send_message(char * data2)
000000  b538              PUSH     {r3-r5,lr}
;;;2723   	{memset(uart_string_gsm,0,5000);
000002  4604              MOV      r4,r0
000004  4929              LDR      r1,|L53.172|
000006  482a              LDR      r0,|L53.176|
000008  f7fffffe          BL       __aeabi_memclr
;;;2724   									memset(at_,0,100);
00000c  2164              MOVS     r1,#0x64
00000e  4829              LDR      r0,|L53.180|
000010  f7fffffe          BL       __aeabi_memclr
;;;2725   									sprintf(at_, "\nAT+CMGS=\"%s\"\r\n" ,num2);
000014  4a28              LDR      r2,|L53.184|
000016  4929              LDR      r1,|L53.188|
000018  4826              LDR      r0,|L53.180|
00001a  f7fffffe          BL       __2sprintf
;;;2726   									send_MSG(at_, ">", "ERROR\r\n" , "ERROR:",tmeout);	
00001e  4828              LDR      r0,|L53.192|
000020  6800              LDR      r0,[r0,#0]  ; tmeout
000022  4b28              LDR      r3,|L53.196|
000024  4a28              LDR      r2,|L53.200|
000026  4929              LDR      r1,|L53.204|
000028  9000              STR      r0,[sp,#0]
00002a  4822              LDR      r0,|L53.180|
00002c  f7fffffe          BL       send_MSG
;;;2727   									if( strstr(uart_string_gsm, ">"))
000030  4926              LDR      r1,|L53.204|
000032  481f              LDR      r0,|L53.176|
000034  f7fffffe          BL       strstr
000038  2800              CMP      r0,#0
00003a  d031              BEQ      |L53.160|
;;;2728   									{
;;;2729   										//
;;;2730   										
;;;2731   											for(k=0;k<strlen(data2);k++)
00003c  2000              MOVS     r0,#0
00003e  4924              LDR      r1,|L53.208|
000040  6008              STR      r0,[r1,#0]  ; k
000042  e00c              B        |L53.94|
                  |L53.68|
;;;2732   											{
;;;2733   												
;;;2734   												uart_putchar(UART1_BASE_PTR, data2[k]);
000044  4822              LDR      r0,|L53.208|
000046  6800              LDR      r0,[r0,#0]  ; k
000048  5c21              LDRB     r1,[r4,r0]
00004a  4822              LDR      r0,|L53.212|
00004c  f7fffffe          BL       uart_putchar
;;;2735   												//uart0_putchar(UART0_BASE_PTR, data2[k]);
;;;2736   												clear();
000050  f7fffffe          BL       clear
000054  481e              LDR      r0,|L53.208|
000056  6800              LDR      r0,[r0,#0]            ;2731  ; k
000058  1c40              ADDS     r0,r0,#1              ;2731
00005a  491d              LDR      r1,|L53.208|
00005c  6008              STR      r0,[r1,#0]            ;2731  ; k
                  |L53.94|
00005e  4620              MOV      r0,r4                 ;2731
000060  f7fffffe          BL       strlen
000064  491a              LDR      r1,|L53.208|
000066  6809              LDR      r1,[r1,#0]            ;2731  ; k
000068  4288              CMP      r0,r1                 ;2731
00006a  d8eb              BHI      |L53.68|
;;;2737   												
;;;2738   											}		
;;;2739   											uart_putchar(UART1_BASE_PTR, 0x1A);
00006c  211a              MOVS     r1,#0x1a
00006e  4819              LDR      r0,|L53.212|
000070  f7fffffe          BL       uart_putchar
;;;2740   											k2=0;									//string array counter for uart 1
000074  2000              MOVS     r0,#0
000076  4918              LDR      r1,|L53.216|
000078  6008              STR      r0,[r1,#0]  ; k2
;;;2741   											timeout=99999;						//timer counts to wait for characters in uart 1 									
00007a  4818              LDR      r0,|L53.220|
00007c  4918              LDR      r1,|L53.224|
00007e  6008              STR      r0,[r1,#0]  ; timeout
;;;2742   											while(!(strstr(uart_string_gsm,"+CMGS:")  ||  (timeout < 1)))
000080  e004              B        |L53.140|
                  |L53.130|
;;;2743   																{
;;;2744   																	timeout--;
000082  4817              LDR      r0,|L53.224|
000084  6800              LDR      r0,[r0,#0]  ; timeout
000086  1e40              SUBS     r0,r0,#1
000088  4915              LDR      r1,|L53.224|
00008a  6008              STR      r0,[r1,#0]  ; timeout
                  |L53.140|
00008c  4915              LDR      r1,|L53.228|
00008e  4808              LDR      r0,|L53.176|
000090  f7fffffe          BL       strstr
000094  2800              CMP      r0,#0                 ;2742
000096  d103              BNE      |L53.160|
000098  4811              LDR      r0,|L53.224|
00009a  6800              LDR      r0,[r0,#0]            ;2742  ; timeout
00009c  2801              CMP      r0,#1                 ;2742
00009e  daf0              BGE      |L53.130|
                  |L53.160|
;;;2745   //																	if(timeout % 4000 == 0)
;;;2746   //																	{
;;;2747   //																		uart0_putchar(UART0_BASE_PTR,'1');
;;;2748   //																		uart_putchar(UART1_BASE_PTR,0x1A);
;;;2749   //																	}
;;;2750   																}
;;;2751   							
;;;2752   									}
;;;2753   		
;;;2754   	memset(uart_string_gsm,0,5000);								
0000a0  4902              LDR      r1,|L53.172|
0000a2  4803              LDR      r0,|L53.176|
0000a4  f7fffffe          BL       __aeabi_memclr
;;;2755   	}
0000a8  bd38              POP      {r3-r5,pc}
;;;2756   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L53.172|
                          DCD      0x00001388
                  |L53.176|
                          DCD      uart_string_gsm
                  |L53.180|
                          DCD      at_
                  |L53.184|
                          DCD      num2
                  |L53.188|
                          DCD      ||.conststring||
                  |L53.192|
                          DCD      tmeout
                  |L53.196|
                          DCD      ||.conststring||+0x10
                  |L53.200|
                          DCD      ||.conststring||+0x18
                  |L53.204|
                          DCD      ||.conststring||+0x20
                  |L53.208|
                          DCD      k
                  |L53.212|
                          DCD      0x4006b000
                  |L53.216|
                          DCD      ||k2||
                  |L53.220|
                          DCD      0x0001869f
                  |L53.224|
                          DCD      timeout
                  |L53.228|
                          DCD      ||.conststring||+0x24

                          AREA ||i.parse_g||, COMGROUP=parse_g, CODE, READONLY, ALIGN=2

                  parse_g PROC
;;;1648   
;;;1649   __inline void parse_g(char* str, int first, int sec, char f, char s , char *string)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1650   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f0b              LDR      r7,[sp,#0x2c]
;;;1651   
;;;1652   		sz1=	strlen(str);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  493c              LDR      r1,|L60.260|
000014  6008              STR      r0,[r1,#0]  ; sz1
;;;1653   		sz2=  strlen(string);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       strlen
00001c  493a              LDR      r1,|L60.264|
00001e  6008              STR      r0,[r1,#0]  ; sz2
;;;1654   		memset(string,0,sz2);
000020  4608              MOV      r0,r1
000022  6801              LDR      r1,[r0,#0]  ; sz2
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_memclr
;;;1655   		for(i11=0,temp11=0;i11<sz1;i11++)
00002a  2000              MOVS     r0,#0
00002c  4937              LDR      r1,|L60.268|
00002e  6008              STR      r0,[r1,#0]  ; i11
000030  4937              LDR      r1,|L60.272|
000032  6008              STR      r0,[r1,#0]  ; temp11
000034  e01a              B        |L60.108|
                  |L60.54|
;;;1656   		{
;;;1657   		if(str[i11]==s)
000036  4835              LDR      r0,|L60.268|
000038  6800              LDR      r0,[r0,#0]  ; i11
00003a  5c21              LDRB     r1,[r4,r0]
00003c  980a              LDR      r0,[sp,#0x28]
00003e  4281              CMP      r1,r0
000040  d108              BNE      |L60.84|
;;;1658   			{temp11++;j11=i11;}
000042  4833              LDR      r0,|L60.272|
000044  6800              LDR      r0,[r0,#0]  ; temp11
000046  1c40              ADDS     r0,r0,#1
000048  4931              LDR      r1,|L60.272|
00004a  6008              STR      r0,[r1,#0]  ; temp11
00004c  482f              LDR      r0,|L60.268|
00004e  6800              LDR      r0,[r0,#0]  ; i11
000050  4930              LDR      r1,|L60.276|
000052  6008              STR      r0,[r1,#0]  ; j11
                  |L60.84|
;;;1659   		else{}
;;;1660   			
;;;1661   		if(temp11>=sec){i11=9900;}
000054  482e              LDR      r0,|L60.272|
000056  6800              LDR      r0,[r0,#0]  ; temp11
000058  42b0              CMP      r0,r6
00005a  db02              BLT      |L60.98|
00005c  482e              LDR      r0,|L60.280|
00005e  492b              LDR      r1,|L60.268|
000060  6008              STR      r0,[r1,#0]  ; i11
                  |L60.98|
000062  482a              LDR      r0,|L60.268|
000064  6800              LDR      r0,[r0,#0]            ;1655  ; i11
000066  1c40              ADDS     r0,r0,#1              ;1655
000068  4928              LDR      r1,|L60.268|
00006a  6008              STR      r0,[r1,#0]            ;1655  ; i11
                  |L60.108|
00006c  4827              LDR      r0,|L60.268|
00006e  6800              LDR      r0,[r0,#0]            ;1655  ; i11
000070  4924              LDR      r1,|L60.260|
000072  6809              LDR      r1,[r1,#0]            ;1655  ; sz1
000074  4288              CMP      r0,r1                 ;1655
000076  dbde              BLT      |L60.54|
;;;1662   		else{}	
;;;1663   		
;;;1664   		}	
;;;1665   		
;;;1666   		for(i11=0,temp11=0;i11<sz1;i11++)
000078  2000              MOVS     r0,#0
00007a  4924              LDR      r1,|L60.268|
00007c  6008              STR      r0,[r1,#0]  ; i11
00007e  4924              LDR      r1,|L60.272|
000080  6008              STR      r0,[r1,#0]  ; temp11
000082  e01a              B        |L60.186|
                  |L60.132|
;;;1667   		{
;;;1668   		if(str[i11]==f)
000084  4821              LDR      r0,|L60.268|
000086  6800              LDR      r0,[r0,#0]  ; i11
000088  5c21              LDRB     r1,[r4,r0]
00008a  9804              LDR      r0,[sp,#0x10]
00008c  4281              CMP      r1,r0
00008e  d108              BNE      |L60.162|
;;;1669   			{temp11++;l=i11;}										
000090  481f              LDR      r0,|L60.272|
000092  6800              LDR      r0,[r0,#0]  ; temp11
000094  1c40              ADDS     r0,r0,#1
000096  491e              LDR      r1,|L60.272|
000098  6008              STR      r0,[r1,#0]  ; temp11
00009a  481c              LDR      r0,|L60.268|
00009c  6800              LDR      r0,[r0,#0]  ; i11
00009e  491f              LDR      r1,|L60.284|
0000a0  6008              STR      r0,[r1,#0]  ; l
                  |L60.162|
;;;1670   		else{}
;;;1671   		if(temp11>=first){i11=9900;}else{}
0000a2  481b              LDR      r0,|L60.272|
0000a4  6800              LDR      r0,[r0,#0]  ; temp11
0000a6  42a8              CMP      r0,r5
0000a8  db02              BLT      |L60.176|
0000aa  481b              LDR      r0,|L60.280|
0000ac  4917              LDR      r1,|L60.268|
0000ae  6008              STR      r0,[r1,#0]  ; i11
                  |L60.176|
0000b0  4816              LDR      r0,|L60.268|
0000b2  6800              LDR      r0,[r0,#0]            ;1666  ; i11
0000b4  1c40              ADDS     r0,r0,#1              ;1666
0000b6  4915              LDR      r1,|L60.268|
0000b8  6008              STR      r0,[r1,#0]            ;1666  ; i11
                  |L60.186|
0000ba  4814              LDR      r0,|L60.268|
0000bc  6800              LDR      r0,[r0,#0]            ;1666  ; i11
0000be  4911              LDR      r1,|L60.260|
0000c0  6809              LDR      r1,[r1,#0]            ;1666  ; sz1
0000c2  4288              CMP      r0,r1                 ;1666
0000c4  dbde              BLT      |L60.132|
;;;1672   		}	
;;;1673   		for(i11=0;i11<(j11-l-1);i11++)
0000c6  2000              MOVS     r0,#0
0000c8  4910              LDR      r1,|L60.268|
0000ca  6008              STR      r0,[r1,#0]  ; i11
0000cc  e00e              B        |L60.236|
                  |L60.206|
;;;1674   		{
;;;1675   		string[i11] = str[l+i11+1];
0000ce  4813              LDR      r0,|L60.284|
0000d0  6800              LDR      r0,[r0,#0]  ; l
0000d2  490e              LDR      r1,|L60.268|
0000d4  6809              LDR      r1,[r1,#0]  ; i11
0000d6  1840              ADDS     r0,r0,r1
0000d8  1c40              ADDS     r0,r0,#1
0000da  5c20              LDRB     r0,[r4,r0]
0000dc  490b              LDR      r1,|L60.268|
0000de  6809              LDR      r1,[r1,#0]  ; i11
0000e0  5478              STRB     r0,[r7,r1]
0000e2  480a              LDR      r0,|L60.268|
0000e4  6800              LDR      r0,[r0,#0]            ;1673  ; i11
0000e6  1c40              ADDS     r0,r0,#1              ;1673
0000e8  4908              LDR      r1,|L60.268|
0000ea  6008              STR      r0,[r1,#0]            ;1673  ; i11
                  |L60.236|
0000ec  4809              LDR      r0,|L60.276|
0000ee  6800              LDR      r0,[r0,#0]            ;1673  ; j11
0000f0  490a              LDR      r1,|L60.284|
0000f2  6809              LDR      r1,[r1,#0]            ;1673  ; l
0000f4  1a40              SUBS     r0,r0,r1              ;1673
0000f6  1e40              SUBS     r0,r0,#1              ;1673
0000f8  4904              LDR      r1,|L60.268|
0000fa  6809              LDR      r1,[r1,#0]            ;1673  ; i11
0000fc  4288              CMP      r0,r1                 ;1673
0000fe  dce6              BGT      |L60.206|
;;;1676   		}			
;;;1677   	
;;;1678   
;;;1679   
;;;1680   }
000100  b005              ADD      sp,sp,#0x14
000102  bdf0              POP      {r4-r7,pc}
;;;1681   
                          ENDP

                  |L60.260|
                          DCD      ||sz1||
                  |L60.264|
                          DCD      ||sz2||
                  |L60.268|
                          DCD      i11
                  |L60.272|
                          DCD      temp11
                  |L60.276|
                          DCD      j11
                  |L60.280|
                          DCD      0x000026ac
                  |L60.284|
                          DCD      l

                          AREA ||i.ignstaton||, COMGROUP=ignstaton, CODE, READONLY, ALIGN=2

                  ignstaton PROC
;;;1307   	
;;;1308   __inline void ignstaton(){
000000  b508              PUSH     {r3,lr}
;;;1309   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L67.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L67.64|
000008  4a0e              LDR      r2,|L67.68|
00000a  490f              LDR      r1,|L67.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L67.76|
000010  f7fffffe          BL       send_GSM
;;;1310   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L67.64|
000018  4a0a              LDR      r2,|L67.68|
00001a  490d              LDR      r1,|L67.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L67.84|
000020  f7fffffe          BL       send_GSM
;;;1311   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1312   send_GSM("\nION\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L67.64|
00002e  4a05              LDR      r2,|L67.68|
000030  4909              LDR      r1,|L67.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L67.92|
000036  f7fffffe          BL       send_GSM
;;;1313   
;;;1314   
;;;1315   }	
00003a  bd08              POP      {r3,pc}
;;;1316   __inline void ignstatoff(){
                          ENDP

                  |L67.60|
                          DCD      tmeout
                  |L67.64|
                          DCD      ||.conststring||+0x10
                  |L67.68|
                          DCD      ||.conststring||+0x18
                  |L67.72|
                          DCD      ||.conststring||+0x2c
                  |L67.76|
                          DCD      ||.conststring||+0x30
                  |L67.80|
                          DCD      ||.conststring||+0x20
                  |L67.84|
                          DCD      ||.conststring||+0x4c
                  |L67.88|
                          DCD      ||.conststring||+0x70
                  |L67.92|
                          DCD      ||.conststring||+0x78

                          AREA ||i.save_ip_port||, COMGROUP=save_ip_port, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_ip_port PROC
;;;1268   	
;;;1269   __inline void save_ip_port()
000000  b538              PUSH     {r3-r5,lr}
;;;1270   {
;;;1271   	
;;;1272   send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4844              LDR      r0,|L74.276|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b44              LDR      r3,|L74.280|
000008  4a44              LDR      r2,|L74.284|
00000a  4945              LDR      r1,|L74.288|
00000c  9000              STR      r0,[sp,#0]
00000e  4845              LDR      r0,|L74.292|
000010  f7fffffe          BL       send_GSM
;;;1273   	
;;;1274   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4844              LDR      r0,|L74.296|
000018  f7fffffe          BL       __aeabi_memclr
;;;1275   	sprintf(at_,"\r\nAT+FSWRITE=C:\\IP_PORT.TXT,0,%d,10\r\n",strlen(ip)+12+strlen(port));	
00001c  4843              LDR      r0,|L74.300|
00001e  f7fffffe          BL       strlen
000022  4605              MOV      r5,r0
000024  350c              ADDS     r5,r5,#0xc
000026  4842              LDR      r0,|L74.304|
000028  f7fffffe          BL       strlen
00002c  182c              ADDS     r4,r5,r0
00002e  4622              MOV      r2,r4
000030  4940              LDR      r1,|L74.308|
000032  483d              LDR      r0,|L74.296|
000034  f7fffffe          BL       __2sprintf
;;;1276   send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000038  200a              MOVS     r0,#0xa
00003a  4b37              LDR      r3,|L74.280|
00003c  4a37              LDR      r2,|L74.284|
00003e  493e              LDR      r1,|L74.312|
000040  9000              STR      r0,[sp,#0]
000042  4839              LDR      r0,|L74.296|
000044  f7fffffe          BL       send_GSM
;;;1277   	clear();
000048  f7fffffe          BL       clear
;;;1278   
;;;1279   	
;;;1280   	send_modem("|IP|");
00004c  483b              LDR      r0,|L74.316|
00004e  f7fffffe          BL       send_modem
;;;1281   		for(k=0;k<strlen(ip);k++)
000052  2000              MOVS     r0,#0
000054  493a              LDR      r1,|L74.320|
000056  6008              STR      r0,[r1,#0]  ; k
000058  e00b              B        |L74.114|
                  |L74.90|
;;;1282   		{
;;;1283   			uart_putchar(UART1_BASE_PTR, ip[k]);// uart0_putchar(UART0_BASE_PTR, ip[k]);//clear();
00005a  4834              LDR      r0,|L74.300|
00005c  4a38              LDR      r2,|L74.320|
00005e  6812              LDR      r2,[r2,#0]  ; k
000060  5c81              LDRB     r1,[r0,r2]
000062  4838              LDR      r0,|L74.324|
000064  f7fffffe          BL       uart_putchar
000068  4835              LDR      r0,|L74.320|
00006a  6800              LDR      r0,[r0,#0]            ;1281  ; k
00006c  1c40              ADDS     r0,r0,#1              ;1281
00006e  4934              LDR      r1,|L74.320|
000070  6008              STR      r0,[r1,#0]            ;1281  ; k
                  |L74.114|
000072  482e              LDR      r0,|L74.300|
000074  f7fffffe          BL       strlen
000078  4931              LDR      r1,|L74.320|
00007a  6809              LDR      r1,[r1,#0]            ;1281  ; k
00007c  4288              CMP      r0,r1                 ;1281
00007e  d8ec              BHI      |L74.90|
;;;1284   		}	
;;;1285   	send_modem("|PORT|");			
000080  4831              LDR      r0,|L74.328|
000082  f7fffffe          BL       send_modem
;;;1286   		for(k=0;k<strlen(port);k++)
000086  2000              MOVS     r0,#0
000088  492d              LDR      r1,|L74.320|
00008a  6008              STR      r0,[r1,#0]  ; k
00008c  e00b              B        |L74.166|
                  |L74.142|
;;;1287   		{
;;;1288   			uart_putchar(UART1_BASE_PTR, port[k]);// uart0_putchar(UART0_BASE_PTR, port[k]);//clear();
00008e  4828              LDR      r0,|L74.304|
000090  4a2b              LDR      r2,|L74.320|
000092  6812              LDR      r2,[r2,#0]  ; k
000094  5c81              LDRB     r1,[r0,r2]
000096  482b              LDR      r0,|L74.324|
000098  f7fffffe          BL       uart_putchar
00009c  4828              LDR      r0,|L74.320|
00009e  6800              LDR      r0,[r0,#0]            ;1286  ; k
0000a0  1c40              ADDS     r0,r0,#1              ;1286
0000a2  4927              LDR      r1,|L74.320|
0000a4  6008              STR      r0,[r1,#0]            ;1286  ; k
                  |L74.166|
0000a6  4822              LDR      r0,|L74.304|
0000a8  f7fffffe          BL       strlen
0000ac  4924              LDR      r1,|L74.320|
0000ae  6809              LDR      r1,[r1,#0]            ;1286  ; k
0000b0  4288              CMP      r0,r1                 ;1286
0000b2  d8ec              BHI      |L74.142|
;;;1289   		}	
;;;1290   send_modem("|");			
0000b4  4825              LDR      r0,|L74.332|
0000b6  f7fffffe          BL       send_modem
;;;1291   									//memset(data,0,1000);
;;;1292   									k2=0;									//string array counter for uart 1
0000ba  2000              MOVS     r0,#0
0000bc  4924              LDR      r1,|L74.336|
0000be  6008              STR      r0,[r1,#0]  ; k2
;;;1293   									time=19999;						//timer counts to wait for characters in uart 1 									
0000c0  4824              LDR      r0,|L74.340|
0000c2  4925              LDR      r1,|L74.344|
0000c4  6008              STR      r0,[r1,#0]  ; time
;;;1294   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
0000c6  e014              B        |L74.242|
                  |L74.200|
;;;1295   									{
;;;1296   									time--;
0000c8  4823              LDR      r0,|L74.344|
0000ca  6800              LDR      r0,[r0,#0]  ; time
0000cc  1e40              SUBS     r0,r0,#1
0000ce  4922              LDR      r1,|L74.344|
0000d0  6008              STR      r0,[r1,#0]  ; time
;;;1297   									if(time % 2000 == 0)
0000d2  217d              MOVS     r1,#0x7d
0000d4  0109              LSLS     r1,r1,#4
0000d6  4820              LDR      r0,|L74.344|
0000d8  6800              LDR      r0,[r0,#0]  ; time
0000da  f7fffffe          BL       __aeabi_idivmod
0000de  2900              CMP      r1,#0
0000e0  d107              BNE      |L74.242|
;;;1298   										{
;;;1299   											uart0_putchar(UART0_BASE_PTR,'1');
0000e2  2131              MOVS     r1,#0x31
0000e4  481d              LDR      r0,|L74.348|
0000e6  f7fffffe          BL       uart0_putchar
;;;1300   											uart_putchar(UART1_BASE_PTR,'\n');
0000ea  210a              MOVS     r1,#0xa
0000ec  4815              LDR      r0,|L74.324|
0000ee  f7fffffe          BL       uart_putchar
                  |L74.242|
0000f2  491b              LDR      r1,|L74.352|
0000f4  481b              LDR      r0,|L74.356|
0000f6  f7fffffe          BL       strstr
0000fa  2800              CMP      r0,#0                 ;1294
0000fc  d109              BNE      |L74.274|
0000fe  4816              LDR      r0,|L74.344|
000100  6800              LDR      r0,[r0,#0]            ;1294  ; time
000102  2801              CMP      r0,#1                 ;1294
000104  db05              BLT      |L74.274|
000106  4918              LDR      r1,|L74.360|
000108  4816              LDR      r0,|L74.356|
00010a  f7fffffe          BL       strstr
00010e  2800              CMP      r0,#0                 ;1294
000110  d0da              BEQ      |L74.200|
                  |L74.274|
;;;1301   										}
;;;1302   	
;;;1303   									}
;;;1304   
;;;1305   	
;;;1306   }	
000112  bd38              POP      {r3-r5,pc}
;;;1307   	
                          ENDP

                  |L74.276|
                          DCD      tmeout
                  |L74.280|
                          DCD      ||.conststring||+0x10
                  |L74.284|
                          DCD      ||.conststring||+0x18
                  |L74.288|
                          DCD      ||.conststring||+0x2c
                  |L74.292|
                          DCD      ||.conststring||+0x84
                  |L74.296|
                          DCD      at_
                  |L74.300|
                          DCD      ||ip||
                  |L74.304|
                          DCD      port
                  |L74.308|
                          DCD      ||.conststring||+0xa4
                  |L74.312|
                          DCD      ||.conststring||+0x20
                  |L74.316|
                          DCD      ||.conststring||+0xcc
                  |L74.320|
                          DCD      k
                  |L74.324|
                          DCD      0x4006b000
                  |L74.328|
                          DCD      ||.conststring||+0xd4
                  |L74.332|
                          DCD      ||.conststring||+0xdc
                  |L74.336|
                          DCD      ||k2||
                  |L74.340|
                          DCD      0x00004e1f
                  |L74.344|
                          DCD      time
                  |L74.348|
                          DCD      0x4006a000
                  |L74.352|
                          DCD      ||.conststring||+0x70
                  |L74.356|
                          DCD      uart_string_gsm
                  |L74.360|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.strreplace||, COMGROUP=strreplace, CODE, READONLY, ALIGN=1

                  strreplace PROC
;;;2794   	
;;;2795   	__inline void strreplace(char string1[], char rep[], char repwith[])
000000  b5f8              PUSH     {r3-r7,lr}
;;;2796   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;2797     char * pch;
;;;2798   	int len = strlen(repwith);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       strlen
00000e  9000              STR      r0,[sp,#0]
;;;2799     pch = strstr (string1,rep);
000010  4631              MOV      r1,r6
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       strstr
000018  4607              MOV      r7,r0
;;;2800     strncpy (pch,repwith,len);
00001a  4621              MOV      r1,r4
00001c  4638              MOV      r0,r7
00001e  9a00              LDR      r2,[sp,#0]
000020  f7fffffe          BL       strncpy
;;;2801     
;;;2802   }
000024  bdf8              POP      {r3-r7,pc}
;;;2803   	
                          ENDP


                          AREA ||i.adc_read||, COMGROUP=adc_read, CODE, READONLY, ALIGN=2

                  adc_read PROC
;;;34     
;;;35     __inline void adc_read(uint8_t channel)
000000  b510              PUSH     {r4,lr}
;;;36     {
000002  4604              MOV      r4,r0
;;;37     	adcin=0;fuel=0;adcsample=0;
000004  2000              MOVS     r0,#0
000006  4922              LDR      r1,|L88.144|
000008  6008              STR      r0,[r1,#0]  ; adcin
00000a  4922              LDR      r1,|L88.148|
00000c  6008              STR      r0,[r1,#0]  ; fuel
00000e  4922              LDR      r1,|L88.152|
000010  6008              STR      r0,[r1,#0]  ; adcsample
;;;38     for(e=0;e<500;){
000012  4922              LDR      r1,|L88.156|
000014  6008              STR      r0,[r1,#0]  ; e
000016  e02c              B        |L88.114|
                  |L88.24|
;;;39     	
;;;40     ADC0->SC1[0] = !ADC_SC1_AIEN_MASK | ADC_SC1_DIFF_MASK | ADC_SC1_ADCH(channel) ;
000018  06e0              LSLS     r0,r4,#27
00001a  0ec0              LSRS     r0,r0,#27
00001c  2120              MOVS     r1,#0x20
00001e  4308              ORRS     r0,r0,r1
000020  491f              LDR      r1,|L88.160|
000022  6008              STR      r0,[r1,#0]
;;;41     while(ADC0_SC2 & ADC_SC2_ADACT_MASK); //Conversion in progress
000024  bf00              NOP      
                  |L88.38|
000026  481e              LDR      r0,|L88.160|
000028  6a00              LDR      r0,[r0,#0x20]
00002a  2180              MOVS     r1,#0x80
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d1f9              BNE      |L88.38|
;;;42     while(!(ADC0_SC1A & ADC_SC1_COCO_MASK)); //Wait until conversion complete
000032  bf00              NOP      
                  |L88.52|
000034  481a              LDR      r0,|L88.160|
000036  6800              LDR      r0,[r0,#0]
000038  2180              MOVS     r1,#0x80
00003a  4008              ANDS     r0,r0,r1
00003c  2800              CMP      r0,#0
00003e  d0f9              BEQ      |L88.52|
;;;43     adcin = ADC0_RA;
000040  4817              LDR      r0,|L88.160|
000042  6900              LDR      r0,[r0,#0x10]
000044  4912              LDR      r1,|L88.144|
000046  6008              STR      r0,[r1,#0]  ; adcin
;;;44     
;;;45     
;;;46     		if(adcin>40000){adcin=0;}
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]  ; adcin
00004c  4915              LDR      r1,|L88.164|
00004e  4288              CMP      r0,r1
000050  dd03              BLE      |L88.90|
000052  2000              MOVS     r0,#0
000054  490e              LDR      r1,|L88.144|
000056  6008              STR      r0,[r1,#0]  ; adcin
000058  e006              B        |L88.104|
                  |L88.90|
;;;47     			else{
;;;48     			adcsample+=adcin;
00005a  480f              LDR      r0,|L88.152|
00005c  6800              LDR      r0,[r0,#0]  ; adcsample
00005e  490c              LDR      r1,|L88.144|
000060  6809              LDR      r1,[r1,#0]  ; adcin
000062  1840              ADDS     r0,r0,r1
000064  490c              LDR      r1,|L88.152|
000066  6008              STR      r0,[r1,#0]  ; adcsample
                  |L88.104|
;;;49     			}
;;;50     			e++;
000068  480c              LDR      r0,|L88.156|
00006a  6800              LDR      r0,[r0,#0]  ; e
00006c  1c40              ADDS     r0,r0,#1
00006e  490b              LDR      r1,|L88.156|
000070  6008              STR      r0,[r1,#0]  ; e
                  |L88.114|
000072  480a              LDR      r0,|L88.156|
000074  6800              LDR      r0,[r0,#0]            ;38  ; e
000076  21ff              MOVS     r1,#0xff              ;38
000078  31f5              ADDS     r1,r1,#0xf5           ;38
00007a  4288              CMP      r0,r1                 ;38
00007c  dbcc              BLT      |L88.24|
;;;51     	}
;;;52     fuel=adcsample/5000;	
00007e  490a              LDR      r1,|L88.168|
000080  4805              LDR      r0,|L88.152|
000082  6800              LDR      r0,[r0,#0]  ; adcsample
000084  f7fffffe          BL       __aeabi_idivmod
000088  4902              LDR      r1,|L88.148|
00008a  6008              STR      r0,[r1,#0]  ; fuel
;;;53     
;;;54     }
00008c  bd10              POP      {r4,pc}
;;;55     	
                          ENDP

00008e  0000              DCW      0x0000
                  |L88.144|
                          DCD      adcin
                  |L88.148|
                          DCD      fuel
                  |L88.152|
                          DCD      adcsample
                  |L88.156|
                          DCD      e
                  |L88.160|
                          DCD      0x4003b000
                  |L88.164|
                          DCD      0x00009c40
                  |L88.168|
                          DCD      0x00001388

                          AREA ||i.stof||, COMGROUP=stof, CODE, READONLY, ALIGN=2

                  stof PROC
;;;1123   
;;;1124   __inline float stof(const char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;1125   {rez=0;fact=1;
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  4925              LDR      r1,|L95.156|
000008  6008              STR      r0,[r1,#0]  ; rez
00000a  207f              MOVS     r0,#0x7f
00000c  05c0              LSLS     r0,r0,#23
00000e  4924              LDR      r1,|L95.160|
000010  6008              STR      r0,[r1,#0]  ; fact
;;;1126   
;;;1127     if (*s == '-'){
000012  7820              LDRB     r0,[r4,#0]
000014  282d              CMP      r0,#0x2d
000016  d102              BNE      |L95.30|
;;;1128       s++;
000018  1c64              ADDS     r4,r4,#1
;;;1129       fact = -1;
00001a  4822              LDR      r0,|L95.164|
00001c  6008              STR      r0,[r1,#0]  ; fact
                  |L95.30|
;;;1130     };
;;;1131     for (point_seen = 0; *s; s++){
00001e  2000              MOVS     r0,#0
000020  4921              LDR      r1,|L95.168|
000022  6008              STR      r0,[r1,#0]  ; point_seen
000024  e02f              B        |L95.134|
                  |L95.38|
;;;1132       if (*s == '.'){
000026  7820              LDRB     r0,[r4,#0]
000028  282e              CMP      r0,#0x2e
00002a  d103              BNE      |L95.52|
;;;1133         point_seen = 1; 
00002c  2001              MOVS     r0,#1
00002e  491e              LDR      r1,|L95.168|
000030  6008              STR      r0,[r1,#0]  ; point_seen
;;;1134         continue;
000032  e027              B        |L95.132|
                  |L95.52|
;;;1135       };
;;;1136       d = *s - '0';
000034  7820              LDRB     r0,[r4,#0]
000036  3830              SUBS     r0,r0,#0x30
000038  491c              LDR      r1,|L95.172|
00003a  6008              STR      r0,[r1,#0]  ; d
;;;1137       if (d >= 0 && d <= 9){
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]  ; d
000040  2800              CMP      r0,#0
000042  db1e              BLT      |L95.130|
000044  4608              MOV      r0,r1
000046  6800              LDR      r0,[r0,#0]  ; d
000048  2809              CMP      r0,#9
00004a  dc1a              BGT      |L95.130|
;;;1138         if (point_seen) fact /= 10.0f;
00004c  4816              LDR      r0,|L95.168|
00004e  6800              LDR      r0,[r0,#0]  ; point_seen
000050  2800              CMP      r0,#0
000052  d006              BEQ      |L95.98|
000054  4916              LDR      r1,|L95.176|
000056  4812              LDR      r0,|L95.160|
000058  6800              LDR      r0,[r0,#0]  ; fact
00005a  f7fffffe          BL       __aeabi_fdiv
00005e  4910              LDR      r1,|L95.160|
000060  6008              STR      r0,[r1,#0]  ; fact
                  |L95.98|
;;;1139         rez = rez * 10.0f + (float)d;
000062  4812              LDR      r0,|L95.172|
000064  6800              LDR      r0,[r0,#0]  ; d
000066  f7fffffe          BL       __aeabi_i2f
00006a  4605              MOV      r5,r0
00006c  4910              LDR      r1,|L95.176|
00006e  480b              LDR      r0,|L95.156|
000070  6800              LDR      r0,[r0,#0]  ; rez
000072  f7fffffe          BL       __aeabi_fmul
000076  4606              MOV      r6,r0
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       __aeabi_fadd
00007e  4907              LDR      r1,|L95.156|
000080  6008              STR      r0,[r1,#0]  ; rez
                  |L95.130|
000082  bf00              NOP                            ;1134
                  |L95.132|
000084  1c64              ADDS     r4,r4,#1              ;1131
                  |L95.134|
000086  7820              LDRB     r0,[r4,#0]            ;1131
000088  2800              CMP      r0,#0                 ;1131
00008a  d1cc              BNE      |L95.38|
;;;1140       };
;;;1141     };
;;;1142     return rez * fact;
00008c  4804              LDR      r0,|L95.160|
00008e  6801              LDR      r1,[r0,#0]  ; fact
000090  4802              LDR      r0,|L95.156|
000092  6800              LDR      r0,[r0,#0]  ; rez
000094  f7fffffe          BL       __aeabi_fmul
;;;1143   };
000098  bd70              POP      {r4-r6,pc}
;;;1144   
                          ENDP

00009a  0000              DCW      0x0000
                  |L95.156|
                          DCD      ||rez||
                  |L95.160|
                          DCD      fact
                  |L95.164|
                          DCD      0xbf800000
                  |L95.168|
                          DCD      point_seen
                  |L95.172|
                          DCD      d
                  |L95.176|
                          DCD      0x41200000

                          AREA ||i.get_gpsdata||, COMGROUP=get_gpsdata, CODE, READONLY, ALIGN=2

                  get_gpsdata PROC
;;;1653   
;;;1654   __inline void get_gpsdata()
000000  b510              PUSH     {r4,lr}
;;;1655   {
;;;1656   						clear2();
000002  f7fffffe          BL       clear2
;;;1657   						memset(uart_string_gps,0,3000);memset(gga,0,100);memset(rmc,0,100);memset(gsa,0,100);		
000006  4977              LDR      r1,|L102.484|
000008  4877              LDR      r0,|L102.488|
00000a  f7fffffe          BL       __aeabi_memclr
00000e  2164              MOVS     r1,#0x64
000010  4876              LDR      r0,|L102.492|
000012  f7fffffe          BL       __aeabi_memclr
000016  2164              MOVS     r1,#0x64
000018  4875              LDR      r0,|L102.496|
00001a  f7fffffe          BL       __aeabi_memclr
00001e  2164              MOVS     r1,#0x64
000020  4874              LDR      r0,|L102.500|
000022  f7fffffe          BL       __aeabi_memclr
;;;1658   						i=0;tout2=0;
000026  2000              MOVS     r0,#0
000028  4973              LDR      r1,|L102.504|
00002a  6008              STR      r0,[r1,#0]  ; i
00002c  4973              LDR      r1,|L102.508|
00002e  6008              STR      r0,[r1,#0]  ; tout2
;;;1659   //						t22=9999999;
;;;1660   do{
000030  bf00              NOP      
                  |L102.50|
;;;1661   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
000032  4873              LDR      r0,|L102.512|
000034  7900              LDRB     r0,[r0,#4]
000036  2120              MOVS     r1,#0x20
000038  4008              ANDS     r0,r0,r1
00003a  2800              CMP      r0,#0
00003c  d00a              BEQ      |L102.84|
;;;1662   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
00003e  4870              LDR      r0,|L102.512|
000040  79c0              LDRB     r0,[r0,#7]
000042  4969              LDR      r1,|L102.488|
000044  4a6c              LDR      r2,|L102.504|
000046  6812              LDR      r2,[r2,#0]  ; i
000048  5488              STRB     r0,[r1,r2]
;;;1663   				i++;
00004a  486b              LDR      r0,|L102.504|
00004c  6800              LDR      r0,[r0,#0]  ; i
00004e  1c40              ADDS     r0,r0,#1
000050  4969              LDR      r1,|L102.504|
000052  6008              STR      r0,[r1,#0]  ; i
                  |L102.84|
;;;1664   	}
;;;1665   	}while(!   (strstr(uart_string_gps,"RMC")       ||  (tout2>1)  )  );
000054  496b              LDR      r1,|L102.516|
000056  4864              LDR      r0,|L102.488|
000058  f7fffffe          BL       strstr
00005c  2800              CMP      r0,#0
00005e  d103              BNE      |L102.104|
000060  4866              LDR      r0,|L102.508|
000062  6800              LDR      r0,[r0,#0]  ; tout2
000064  2801              CMP      r0,#1
000066  dde4              BLE      |L102.50|
                  |L102.104|
;;;1666   i=0;tout2=0;
000068  2000              MOVS     r0,#0
00006a  4963              LDR      r1,|L102.504|
00006c  6008              STR      r0,[r1,#0]  ; i
00006e  4963              LDR      r1,|L102.508|
000070  6008              STR      r0,[r1,#0]  ; tout2
;;;1667   do{
000072  bf00              NOP      
                  |L102.116|
;;;1668   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
000074  4862              LDR      r0,|L102.512|
000076  7900              LDRB     r0,[r0,#4]
000078  2120              MOVS     r1,#0x20
00007a  4008              ANDS     r0,r0,r1
00007c  2800              CMP      r0,#0
00007e  d00a              BEQ      |L102.150|
;;;1669   	{		rmc[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000080  485f              LDR      r0,|L102.512|
000082  79c0              LDRB     r0,[r0,#7]
000084  495a              LDR      r1,|L102.496|
000086  4a5c              LDR      r2,|L102.504|
000088  6812              LDR      r2,[r2,#0]  ; i
00008a  5488              STRB     r0,[r1,r2]
;;;1670   				i++;
00008c  485a              LDR      r0,|L102.504|
00008e  6800              LDR      r0,[r0,#0]  ; i
000090  1c40              ADDS     r0,r0,#1
000092  4959              LDR      r1,|L102.504|
000094  6008              STR      r0,[r1,#0]  ; i
                  |L102.150|
;;;1671   	}
;;;1672   }while(     !( mystrstr(rmc,'*')    ||  tout2>1) );
000096  212a              MOVS     r1,#0x2a
000098  4855              LDR      r0,|L102.496|
00009a  f7fffffe          BL       mystrstr
00009e  2800              CMP      r0,#0
0000a0  d103              BNE      |L102.170|
0000a2  4856              LDR      r0,|L102.508|
0000a4  6800              LDR      r0,[r0,#0]  ; tout2
0000a6  2801              CMP      r0,#1
0000a8  dde4              BLE      |L102.116|
                  |L102.170|
;;;1673   memset(uart_string_gps,0,3000);
0000aa  494e              LDR      r1,|L102.484|
0000ac  484e              LDR      r0,|L102.488|
0000ae  f7fffffe          BL       __aeabi_memclr
;;;1674   i=0;tout2=0;
0000b2  2000              MOVS     r0,#0
0000b4  4950              LDR      r1,|L102.504|
0000b6  6008              STR      r0,[r1,#0]  ; i
0000b8  4950              LDR      r1,|L102.508|
0000ba  6008              STR      r0,[r1,#0]  ; tout2
;;;1675   do{
0000bc  bf00              NOP      
                  |L102.190|
;;;1676   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
0000be  4850              LDR      r0,|L102.512|
0000c0  7900              LDRB     r0,[r0,#4]
0000c2  2120              MOVS     r1,#0x20
0000c4  4008              ANDS     r0,r0,r1
0000c6  2800              CMP      r0,#0
0000c8  d00a              BEQ      |L102.224|
;;;1677   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
0000ca  484d              LDR      r0,|L102.512|
0000cc  79c0              LDRB     r0,[r0,#7]
0000ce  4946              LDR      r1,|L102.488|
0000d0  4a49              LDR      r2,|L102.504|
0000d2  6812              LDR      r2,[r2,#0]  ; i
0000d4  5488              STRB     r0,[r1,r2]
;;;1678   				i++;
0000d6  4848              LDR      r0,|L102.504|
0000d8  6800              LDR      r0,[r0,#0]  ; i
0000da  1c40              ADDS     r0,r0,#1
0000dc  4946              LDR      r1,|L102.504|
0000de  6008              STR      r0,[r1,#0]  ; i
                  |L102.224|
;;;1679   	}
;;;1680   }while(!  (strstr(uart_string_gps,"GGA")      ||  (tout2>1) )  );
0000e0  4949              LDR      r1,|L102.520|
0000e2  4841              LDR      r0,|L102.488|
0000e4  f7fffffe          BL       strstr
0000e8  2800              CMP      r0,#0
0000ea  d103              BNE      |L102.244|
0000ec  4843              LDR      r0,|L102.508|
0000ee  6800              LDR      r0,[r0,#0]  ; tout2
0000f0  2801              CMP      r0,#1
0000f2  dde4              BLE      |L102.190|
                  |L102.244|
;;;1681   i=0;tout2=0;
0000f4  2000              MOVS     r0,#0
0000f6  4940              LDR      r1,|L102.504|
0000f8  6008              STR      r0,[r1,#0]  ; i
0000fa  4940              LDR      r1,|L102.508|
0000fc  6008              STR      r0,[r1,#0]  ; tout2
;;;1682   do{
0000fe  bf00              NOP      
                  |L102.256|
;;;1683   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
000100  483f              LDR      r0,|L102.512|
000102  7900              LDRB     r0,[r0,#4]
000104  2120              MOVS     r1,#0x20
000106  4008              ANDS     r0,r0,r1
000108  2800              CMP      r0,#0
00010a  d00a              BEQ      |L102.290|
;;;1684   	{		gga[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
00010c  483c              LDR      r0,|L102.512|
00010e  79c0              LDRB     r0,[r0,#7]
000110  4936              LDR      r1,|L102.492|
000112  4a39              LDR      r2,|L102.504|
000114  6812              LDR      r2,[r2,#0]  ; i
000116  5488              STRB     r0,[r1,r2]
;;;1685   				i++;
000118  4837              LDR      r0,|L102.504|
00011a  6800              LDR      r0,[r0,#0]  ; i
00011c  1c40              ADDS     r0,r0,#1
00011e  4936              LDR      r1,|L102.504|
000120  6008              STR      r0,[r1,#0]  ; i
                  |L102.290|
;;;1686   	}
;;;1687   }while(!(mystrstr(gga,'*')  ||  (tout2>1) ));
000122  212a              MOVS     r1,#0x2a
000124  4831              LDR      r0,|L102.492|
000126  f7fffffe          BL       mystrstr
00012a  2800              CMP      r0,#0
00012c  d103              BNE      |L102.310|
00012e  4833              LDR      r0,|L102.508|
000130  6800              LDR      r0,[r0,#0]  ; tout2
000132  2801              CMP      r0,#1
000134  dde4              BLE      |L102.256|
                  |L102.310|
;;;1688   
;;;1689   
;;;1690   memset(uart_string_gps,0,3000);
000136  492b              LDR      r1,|L102.484|
000138  482b              LDR      r0,|L102.488|
00013a  f7fffffe          BL       __aeabi_memclr
;;;1691   i=0;tout2=0;
00013e  2000              MOVS     r0,#0
000140  492d              LDR      r1,|L102.504|
000142  6008              STR      r0,[r1,#0]  ; i
000144  492d              LDR      r1,|L102.508|
000146  6008              STR      r0,[r1,#0]  ; tout2
;;;1692   do{
000148  bf00              NOP      
                  |L102.330|
;;;1693   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00014a  482d              LDR      r0,|L102.512|
00014c  7900              LDRB     r0,[r0,#4]
00014e  2120              MOVS     r1,#0x20
000150  4008              ANDS     r0,r0,r1
000152  2800              CMP      r0,#0
000154  d00a              BEQ      |L102.364|
;;;1694   	{		uart_string_gps[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000156  482a              LDR      r0,|L102.512|
000158  79c0              LDRB     r0,[r0,#7]
00015a  4923              LDR      r1,|L102.488|
00015c  4a26              LDR      r2,|L102.504|
00015e  6812              LDR      r2,[r2,#0]  ; i
000160  5488              STRB     r0,[r1,r2]
;;;1695   				i++;
000162  4825              LDR      r0,|L102.504|
000164  6800              LDR      r0,[r0,#0]  ; i
000166  1c40              ADDS     r0,r0,#1
000168  4923              LDR      r1,|L102.504|
00016a  6008              STR      r0,[r1,#0]  ; i
                  |L102.364|
;;;1696   	}
;;;1697   }while(!  (strstr(uart_string_gps,"GSA")      ||  (tout2>1) )  );
00016c  4927              LDR      r1,|L102.524|
00016e  481e              LDR      r0,|L102.488|
000170  f7fffffe          BL       strstr
000174  2800              CMP      r0,#0
000176  d103              BNE      |L102.384|
000178  4820              LDR      r0,|L102.508|
00017a  6800              LDR      r0,[r0,#0]  ; tout2
00017c  2801              CMP      r0,#1
00017e  dde4              BLE      |L102.330|
                  |L102.384|
;;;1698   i=0;tout2=0;
000180  2000              MOVS     r0,#0
000182  491d              LDR      r1,|L102.504|
000184  6008              STR      r0,[r1,#0]  ; i
000186  491d              LDR      r1,|L102.508|
000188  6008              STR      r0,[r1,#0]  ; tout2
;;;1699   do{
00018a  bf00              NOP      
                  |L102.396|
;;;1700   	if(UART_S1_REG(UART2_BASE_PTR) & UART_S1_RDRF_MASK)
00018c  481c              LDR      r0,|L102.512|
00018e  7900              LDRB     r0,[r0,#4]
000190  2120              MOVS     r1,#0x20
000192  4008              ANDS     r0,r0,r1
000194  2800              CMP      r0,#0
000196  d00a              BEQ      |L102.430|
;;;1701   	{		gsa[i]=UART_D_REG(UART2_BASE_PTR);//clear2();
000198  4819              LDR      r0,|L102.512|
00019a  79c0              LDRB     r0,[r0,#7]
00019c  4915              LDR      r1,|L102.500|
00019e  4a16              LDR      r2,|L102.504|
0001a0  6812              LDR      r2,[r2,#0]  ; i
0001a2  5488              STRB     r0,[r1,r2]
;;;1702   				i++;
0001a4  4814              LDR      r0,|L102.504|
0001a6  6800              LDR      r0,[r0,#0]  ; i
0001a8  1c40              ADDS     r0,r0,#1
0001aa  4913              LDR      r1,|L102.504|
0001ac  6008              STR      r0,[r1,#0]  ; i
                  |L102.430|
;;;1703   	}
;;;1704   }while(!(mystrstr(gsa,'*')  ||  (tout2>1) ));
0001ae  212a              MOVS     r1,#0x2a
0001b0  4810              LDR      r0,|L102.500|
0001b2  f7fffffe          BL       mystrstr
0001b6  2800              CMP      r0,#0
0001b8  d103              BNE      |L102.450|
0001ba  4810              LDR      r0,|L102.508|
0001bc  6800              LDR      r0,[r0,#0]  ; tout2
0001be  2801              CMP      r0,#1
0001c0  dde4              BLE      |L102.396|
                  |L102.450|
;;;1705   
;;;1706   
;;;1707   
;;;1708   clear2();
0001c2  f7fffffe          BL       clear2
;;;1709   
;;;1710   		
;;;1711   
;;;1712   stateCount++; 
0001c6  4812              LDR      r0,|L102.528|
0001c8  7800              LDRB     r0,[r0,#0]  ; stateCount
0001ca  1c40              ADDS     r0,r0,#1
0001cc  4910              LDR      r1,|L102.528|
0001ce  7008              STRB     r0,[r1,#0]
;;;1713   if(stateCount>5){stateCount =0;}
0001d0  4608              MOV      r0,r1
0001d2  7800              LDRB     r0,[r0,#0]  ; stateCount
0001d4  2805              CMP      r0,#5
0001d6  dd01              BLE      |L102.476|
0001d8  2000              MOVS     r0,#0
0001da  7008              STRB     r0,[r1,#0]
                  |L102.476|
;;;1714   LED_state2();					
0001dc  f7fffffe          BL       LED_state2
;;;1715   }
0001e0  bd10              POP      {r4,pc}
;;;1716   	
                          ENDP

0001e2  0000              DCW      0x0000
                  |L102.484|
                          DCD      0x00000bb8
                  |L102.488|
                          DCD      uart_string_gps
                  |L102.492|
                          DCD      gga
                  |L102.496|
                          DCD      ||rmc||
                  |L102.500|
                          DCD      gsa
                  |L102.504|
                          DCD      i
                  |L102.508|
                          DCD      tout2
                  |L102.512|
                          DCD      0x4006c000
                  |L102.516|
                          DCD      ||.conststring||+0xe8
                  |L102.520|
                          DCD      ||.conststring||+0xec
                  |L102.524|
                          DCD      ||.conststring||+0xf0
                  |L102.528|
                          DCD      stateCount

                          AREA ||i.GPS_COLLECT||, COMGROUP=GPS_COLLECT, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_widthprec
                  GPS_COLLECT PROC
;;;1146   
;;;1147   __inline void GPS_COLLECT()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1148   {
;;;1149   delay(200);
000002  20c8              MOVS     r0,#0xc8
000004  f7fffffe          BL       delay
;;;1150   clear();
000008  f7fffffe          BL       clear
;;;1151   //adc_read(8);							
;;;1152   //memset(fuelstr,0,5);
;;;1153   //sprintf(fuelstr,"%d,",fuel);	
;;;1154   if(strlen(imei)<14)
00000c  48fe              LDR      r0,|L109.1032|
00000e  f7fffffe          BL       strlen
000012  280e              CMP      r0,#0xe
000014  d239              BCS      |L109.138|
;;;1155   {imeiinc=0;
000016  2000              MOVS     r0,#0
000018  49fc              LDR      r1,|L109.1036|
00001a  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1156   memset(imei,0,20);
00001c  2114              MOVS     r1,#0x14
00001e  48fa              LDR      r0,|L109.1032|
000020  f7fffffe          BL       __aeabi_memclr
;;;1157   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
000024  200a              MOVS     r0,#0xa
000026  4bfa              LDR      r3,|L109.1040|
000028  4afa              LDR      r2,|L109.1044|
00002a  49fb              LDR      r1,|L109.1048|
00002c  9000              STR      r0,[sp,#0]
00002e  48fb              LDR      r0,|L109.1052|
000030  f7fffffe          BL       send_GSM
;;;1158   for(i=0;i<strlen(uart_string_gsm);i++){
000034  2000              MOVS     r0,#0
000036  49fa              LDR      r1,|L109.1056|
000038  6008              STR      r0,[r1,#0]  ; i
00003a  e01d              B        |L109.120|
                  |L109.60|
;;;1159   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
00003c  48f9              LDR      r0,|L109.1060|
00003e  49f8              LDR      r1,|L109.1056|
000040  6809              LDR      r1,[r1,#0]  ; i
000042  5c40              LDRB     r0,[r0,r1]
000044  282f              CMP      r0,#0x2f
000046  dd12              BLE      |L109.110|
000048  48f6              LDR      r0,|L109.1060|
00004a  49f5              LDR      r1,|L109.1056|
00004c  6809              LDR      r1,[r1,#0]  ; i
00004e  5c40              LDRB     r0,[r0,r1]
000050  283a              CMP      r0,#0x3a
000052  da0c              BGE      |L109.110|
;;;1160   			imei[imeiinc] = uart_string_gsm[i];
000054  48f3              LDR      r0,|L109.1060|
000056  49f2              LDR      r1,|L109.1056|
000058  6809              LDR      r1,[r1,#0]  ; i
00005a  5c40              LDRB     r0,[r0,r1]
00005c  49ea              LDR      r1,|L109.1032|
00005e  4aeb              LDR      r2,|L109.1036|
000060  6812              LDR      r2,[r2,#0]  ; imeiinc
000062  5488              STRB     r0,[r1,r2]
;;;1161   			imeiinc++;
000064  48e9              LDR      r0,|L109.1036|
000066  6800              LDR      r0,[r0,#0]  ; imeiinc
000068  1c40              ADDS     r0,r0,#1
00006a  49e8              LDR      r1,|L109.1036|
00006c  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L109.110|
00006e  48ec              LDR      r0,|L109.1056|
000070  6800              LDR      r0,[r0,#0]            ;1158  ; i
000072  1c40              ADDS     r0,r0,#1              ;1158
000074  49ea              LDR      r1,|L109.1056|
000076  6008              STR      r0,[r1,#0]            ;1158  ; i
                  |L109.120|
000078  48ea              LDR      r0,|L109.1060|
00007a  f7fffffe          BL       strlen
00007e  49e8              LDR      r1,|L109.1056|
000080  6809              LDR      r1,[r1,#0]            ;1158  ; i
000082  4288              CMP      r0,r1                 ;1158
000084  d8da              BHI      |L109.60|
;;;1162   		}
;;;1163   }
;;;1164   clear();
000086  f7fffffe          BL       clear
                  |L109.138|
;;;1165   }
;;;1166   
;;;1167   
;;;1168   
;;;1169   
;;;1170   
;;;1171   time52=15;	
00008a  200f              MOVS     r0,#0xf
00008c  49e6              LDR      r1,|L109.1064|
00008e  6008              STR      r0,[r1,#0]  ; time52
;;;1172   
;;;1173   //	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
;;;1174   //	// not sleep	
;;;1175   //	memset(num2,0,30);
;;;1176   //	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
;;;1177   //	voltagecbc=myAtoi(num2);
;;;1178   memset(ignstr,0,2);
000090  48e6              LDR      r0,|L109.1068|
000092  2100              MOVS     r1,#0
000094  7001              STRB     r1,[r0,#0]
000096  7041              STRB     r1,[r0,#1]
;;;1179   if(GPIOB_PDIR & 0x00000001){
000098  48e5              LDR      r0,|L109.1072|
00009a  6900              LDR      r0,[r0,#0x10]
00009c  07c0              LSLS     r0,r0,#31
00009e  0fc0              LSRS     r0,r0,#31
0000a0  2800              CMP      r0,#0
0000a2  d005              BEQ      |L109.176|
;;;1180   			sprintf(ignstr,"%d",1);
0000a4  2201              MOVS     r2,#1
0000a6  49e3              LDR      r1,|L109.1076|
0000a8  48e0              LDR      r0,|L109.1068|
0000aa  f7fffffe          BL       __2sprintf
0000ae  e004              B        |L109.186|
                  |L109.176|
;;;1181   }
;;;1182   else{
;;;1183   			sprintf(ignstr,"%d",0);
0000b0  2200              MOVS     r2,#0
0000b2  49e0              LDR      r1,|L109.1076|
0000b4  48dd              LDR      r0,|L109.1068|
0000b6  f7fffffe          BL       __2sprintf
                  |L109.186|
;;;1184   }
;;;1185   
;;;1186   memset(acstr,0,2); //ptb2
0000ba  48df              LDR      r0,|L109.1080|
0000bc  2100              MOVS     r1,#0
0000be  8001              STRH     r1,[r0,#0]
;;;1187   if(GPIOB_PDIR & 0x00000004){
0000c0  48db              LDR      r0,|L109.1072|
0000c2  6900              LDR      r0,[r0,#0x10]
0000c4  2104              MOVS     r1,#4
0000c6  4008              ANDS     r0,r0,r1
0000c8  2800              CMP      r0,#0
0000ca  d005              BEQ      |L109.216|
;;;1188   			sprintf(acstr,"%d",1);
0000cc  2201              MOVS     r2,#1
0000ce  49d9              LDR      r1,|L109.1076|
0000d0  48d9              LDR      r0,|L109.1080|
0000d2  f7fffffe          BL       __2sprintf
0000d6  e004              B        |L109.226|
                  |L109.216|
;;;1189   }
;;;1190   else{
;;;1191   			sprintf(acstr,"%d",0);
0000d8  2200              MOVS     r2,#0
0000da  49d6              LDR      r1,|L109.1076|
0000dc  48d6              LDR      r0,|L109.1080|
0000de  f7fffffe          BL       __2sprintf
                  |L109.226|
;;;1192   
;;;1193   }
;;;1194   
;;;1195   
;;;1196   if(int_erval>60){int_erval=5;}
0000e2  48d6              LDR      r0,|L109.1084|
0000e4  6800              LDR      r0,[r0,#0]  ; int_erval
0000e6  283c              CMP      r0,#0x3c
0000e8  dd02              BLE      |L109.240|
0000ea  2005              MOVS     r0,#5
0000ec  49d3              LDR      r1,|L109.1084|
0000ee  6008              STR      r0,[r1,#0]  ; int_erval
                  |L109.240|
;;;1197   while(lpticks<int_erval);
0000f0  bf00              NOP      
                  |L109.242|
0000f2  48d3              LDR      r0,|L109.1088|
0000f4  6800              LDR      r0,[r0,#0]  ; lpticks
0000f6  49d1              LDR      r1,|L109.1084|
0000f8  6809              LDR      r1,[r1,#0]  ; int_erval
0000fa  4288              CMP      r0,r1
0000fc  dbf9              BLT      |L109.242|
;;;1198   get_gpsdata();
0000fe  f7fffffe          BL       get_gpsdata
;;;1199   lpticks=0;
000102  2000              MOVS     r0,#0
000104  49ce              LDR      r1,|L109.1088|
000106  6008              STR      r0,[r1,#0]  ; lpticks
;;;1200   
;;;1201   parse_g(rmc, 3, 4, ',', ',' ,lati);
000108  48ce              LDR      r0,|L109.1092|
00010a  212c              MOVS     r1,#0x2c
00010c  460b              MOV      r3,r1
00010e  2204              MOVS     r2,#4
000110  9100              STR      r1,[sp,#0]
000112  9001              STR      r0,[sp,#4]
000114  2103              MOVS     r1,#3
000116  48cc              LDR      r0,|L109.1096|
000118  f7fffffe          BL       parse_g
;;;1202   parse_g(rmc, 5, 6, ',', ',' ,longi);
00011c  48cb              LDR      r0,|L109.1100|
00011e  212c              MOVS     r1,#0x2c
000120  460b              MOV      r3,r1
000122  2206              MOVS     r2,#6
000124  9100              STR      r1,[sp,#0]
000126  9001              STR      r0,[sp,#4]
000128  2105              MOVS     r1,#5
00012a  48c7              LDR      r0,|L109.1096|
00012c  f7fffffe          BL       parse_g
;;;1203   parse_g(rmc, 7, 8, ',', ',' ,velocity);
000130  48c7              LDR      r0,|L109.1104|
000132  212c              MOVS     r1,#0x2c
000134  460b              MOV      r3,r1
000136  2208              MOVS     r2,#8
000138  9100              STR      r1,[sp,#0]
00013a  9001              STR      r0,[sp,#4]
00013c  2107              MOVS     r1,#7
00013e  48c2              LDR      r0,|L109.1096|
000140  f7fffffe          BL       parse_g
;;;1204   		
;;;1205   		speed = stof(velocity);
000144  48c2              LDR      r0,|L109.1104|
000146  f7fffffe          BL       stof
00014a  49c2              LDR      r1,|L109.1108|
00014c  6008              STR      r0,[r1,#0]  ; speed
;;;1206   		c=stof(lati);//7523.7412
00014e  48bd              LDR      r0,|L109.1092|
000150  f7fffffe          BL       stof
000154  4604              MOV      r4,r0
000156  f7fffffe          BL       __aeabi_f2d
00015a  4abf              LDR      r2,|L109.1112|
00015c  c203              STM      r2!,{r0,r1}
;;;1207   		hh= c/100; //75
00015e  2200              MOVS     r2,#0
000160  4bbe              LDR      r3,|L109.1116|
000162  49bd              LDR      r1,|L109.1112|
000164  c903              LDM      r1,{r0,r1}
000166  f7fffffe          BL       __aeabi_ddiv
00016a  4604              MOV      r4,r0
00016c  f7fffffe          BL       __aeabi_d2iz
000170  49bb              LDR      r1,|L109.1120|
000172  6008              STR      r0,[r1,#0]  ; hh
;;;1208   		hh11 = c/100; //75.237412
000174  2200              MOVS     r2,#0
000176  4bb9              LDR      r3,|L109.1116|
000178  49b7              LDR      r1,|L109.1112|
00017a  c903              LDM      r1,{r0,r1}
00017c  f7fffffe          BL       __aeabi_ddiv
000180  4ab8              LDR      r2,|L109.1124|
000182  c203              STM      r2!,{r0,r1}
;;;1209   		mm11 = hh11-hh; //.237412
000184  48b6              LDR      r0,|L109.1120|
000186  6800              LDR      r0,[r0,#0]  ; hh
000188  f7fffffe          BL       __aeabi_i2d
00018c  4604              MOV      r4,r0
00018e  48b5              LDR      r0,|L109.1124|
000190  c80c              LDM      r0!,{r2,r3}
000192  4620              MOV      r0,r4
000194  f7fffffe          BL       __aeabi_drsub
000198  4ab3              LDR      r2,|L109.1128|
00019a  c203              STM      r2!,{r0,r1}
;;;1210   		mm11*=100;
00019c  2200              MOVS     r2,#0
00019e  4baf              LDR      r3,|L109.1116|
0001a0  49b1              LDR      r1,|L109.1128|
0001a2  c903              LDM      r1,{r0,r1}
0001a4  f7fffffe          BL       __aeabi_dmul
0001a8  4aaf              LDR      r2,|L109.1128|
0001aa  c203              STM      r2!,{r0,r1}
;;;1211   		mm22=hh+mm11/60;	
0001ac  2200              MOVS     r2,#0
0001ae  4baf              LDR      r3,|L109.1132|
0001b0  49ad              LDR      r1,|L109.1128|
0001b2  c903              LDM      r1,{r0,r1}
0001b4  f7fffffe          BL       __aeabi_ddiv
0001b8  4604              MOV      r4,r0
0001ba  460d              MOV      r5,r1
0001bc  48a8              LDR      r0,|L109.1120|
0001be  6800              LDR      r0,[r0,#0]  ; hh
0001c0  f7fffffe          BL       __aeabi_i2d
0001c4  4606              MOV      r6,r0
0001c6  4622              MOV      r2,r4
0001c8  462b              MOV      r3,r5
0001ca  f7fffffe          BL       __aeabi_dadd
0001ce  4aa8              LDR      r2,|L109.1136|
0001d0  c203              STM      r2!,{r0,r1}
;;;1212   		memset(lati,0,15);
0001d2  210f              MOVS     r1,#0xf
0001d4  489b              LDR      r0,|L109.1092|
0001d6  f7fffffe          BL       __aeabi_memclr
;;;1213   		sprintf(lati,"%f",mm22);
0001da  48a5              LDR      r0,|L109.1136|
0001dc  49a5              LDR      r1,|L109.1140|
0001de  c80c              LDM      r0!,{r2,r3}
0001e0  4898              LDR      r0,|L109.1092|
0001e2  f7fffffe          BL       __2sprintf
;;;1214   		c=stof(longi);//7523.7412
0001e6  4899              LDR      r0,|L109.1100|
0001e8  f7fffffe          BL       stof
0001ec  4604              MOV      r4,r0
0001ee  f7fffffe          BL       __aeabi_f2d
0001f2  4a99              LDR      r2,|L109.1112|
0001f4  c203              STM      r2!,{r0,r1}
;;;1215   		hh= c/100; //75
0001f6  2200              MOVS     r2,#0
0001f8  4b98              LDR      r3,|L109.1116|
0001fa  4997              LDR      r1,|L109.1112|
0001fc  c903              LDM      r1,{r0,r1}
0001fe  f7fffffe          BL       __aeabi_ddiv
000202  4604              MOV      r4,r0
000204  f7fffffe          BL       __aeabi_d2iz
000208  4995              LDR      r1,|L109.1120|
00020a  6008              STR      r0,[r1,#0]  ; hh
;;;1216   		hh11 = c/100; //75.237412
00020c  2200              MOVS     r2,#0
00020e  4b93              LDR      r3,|L109.1116|
000210  4991              LDR      r1,|L109.1112|
000212  c903              LDM      r1,{r0,r1}
000214  f7fffffe          BL       __aeabi_ddiv
000218  4a92              LDR      r2,|L109.1124|
00021a  c203              STM      r2!,{r0,r1}
;;;1217   		mm11 = hh11-hh; //.237412
00021c  4890              LDR      r0,|L109.1120|
00021e  6800              LDR      r0,[r0,#0]  ; hh
000220  f7fffffe          BL       __aeabi_i2d
000224  4604              MOV      r4,r0
000226  488f              LDR      r0,|L109.1124|
000228  c80c              LDM      r0!,{r2,r3}
00022a  4620              MOV      r0,r4
00022c  f7fffffe          BL       __aeabi_drsub
000230  4a8d              LDR      r2,|L109.1128|
000232  c203              STM      r2!,{r0,r1}
;;;1218   		mm11*=100;
000234  2200              MOVS     r2,#0
000236  4b89              LDR      r3,|L109.1116|
000238  498b              LDR      r1,|L109.1128|
00023a  c903              LDM      r1,{r0,r1}
00023c  f7fffffe          BL       __aeabi_dmul
000240  4a89              LDR      r2,|L109.1128|
000242  c203              STM      r2!,{r0,r1}
;;;1219   		mm22=hh+mm11/60;	
000244  2200              MOVS     r2,#0
000246  4b89              LDR      r3,|L109.1132|
000248  4987              LDR      r1,|L109.1128|
00024a  c903              LDM      r1,{r0,r1}
00024c  f7fffffe          BL       __aeabi_ddiv
000250  4604              MOV      r4,r0
000252  460d              MOV      r5,r1
000254  4882              LDR      r0,|L109.1120|
000256  6800              LDR      r0,[r0,#0]  ; hh
000258  f7fffffe          BL       __aeabi_i2d
00025c  4606              MOV      r6,r0
00025e  4622              MOV      r2,r4
000260  462b              MOV      r3,r5
000262  f7fffffe          BL       __aeabi_dadd
000266  4a82              LDR      r2,|L109.1136|
000268  c203              STM      r2!,{r0,r1}
;;;1220   		memset(longi,0,15);
00026a  210f              MOVS     r1,#0xf
00026c  4877              LDR      r0,|L109.1100|
00026e  f7fffffe          BL       __aeabi_memclr
;;;1221   		sprintf(longi,"%f",mm22);	
000272  487f              LDR      r0,|L109.1136|
000274  497f              LDR      r1,|L109.1140|
000276  c80c              LDM      r0!,{r2,r3}
000278  4874              LDR      r0,|L109.1100|
00027a  f7fffffe          BL       __2sprintf
;;;1222   		speed *= 1.852;
00027e  4875              LDR      r0,|L109.1108|
000280  6800              LDR      r0,[r0,#0]  ; speed
000282  f7fffffe          BL       __aeabi_f2d
000286  4606              MOV      r6,r0
000288  4a7b              LDR      r2,|L109.1144|
00028a  4b7c              LDR      r3,|L109.1148|
00028c  f7fffffe          BL       __aeabi_dmul
000290  4604              MOV      r4,r0
000292  f7fffffe          BL       __aeabi_d2f
000296  496f              LDR      r1,|L109.1108|
000298  6008              STR      r0,[r1,#0]  ; speed
;;;1223   		memset(velocity,0,5);
00029a  2105              MOVS     r1,#5
00029c  486c              LDR      r0,|L109.1104|
00029e  f7fffffe          BL       __aeabi_memclr
;;;1224   		sprintf(velocity,"%.1f",speed);
0002a2  486c              LDR      r0,|L109.1108|
0002a4  6800              LDR      r0,[r0,#0]  ; speed
0002a6  f7fffffe          BL       __aeabi_f2d
0002aa  4604              MOV      r4,r0
0002ac  4622              MOV      r2,r4
0002ae  460b              MOV      r3,r1
0002b0  4973              LDR      r1,|L109.1152|
0002b2  4867              LDR      r0,|L109.1104|
0002b4  f7fffffe          BL       __2sprintf
;;;1225   		sprintf(longi,"%f",mm22);			
0002b8  486d              LDR      r0,|L109.1136|
0002ba  496e              LDR      r1,|L109.1140|
0002bc  c80c              LDM      r0!,{r2,r3}
0002be  4863              LDR      r0,|L109.1100|
0002c0  f7fffffe          BL       __2sprintf
;;;1226   		
;;;1227   		strcat(data,"$,");
0002c4  496f              LDR      r1,|L109.1156|
0002c6  4870              LDR      r0,|L109.1160|
0002c8  f7fffffe          BL       strcat
;;;1228   		strcat(data,ipadd);
0002cc  496f              LDR      r1,|L109.1164|
0002ce  486e              LDR      r0,|L109.1160|
0002d0  f7fffffe          BL       strcat
;;;1229   		strcat(data,acstr);
0002d4  4958              LDR      r1,|L109.1080|
0002d6  486c              LDR      r0,|L109.1160|
0002d8  f7fffffe          BL       strcat
;;;1230   		if(emergencytimer != 0)				//emergency
0002dc  486c              LDR      r0,|L109.1168|
0002de  6800              LDR      r0,[r0,#0]  ; emergencytimer
0002e0  2800              CMP      r0,#0
0002e2  d004              BEQ      |L109.750|
;;;1231   			strcat(data,",RUDRA-J01,1.0.19,EM,L,");
0002e4  496b              LDR      r1,|L109.1172|
0002e6  4868              LDR      r0,|L109.1160|
0002e8  f7fffffe          BL       strcat
0002ec  e003              B        |L109.758|
                  |L109.750|
;;;1232   		else strcat(data, "0");		
0002ee  496a              LDR      r1,|L109.1176|
0002f0  4865              LDR      r0,|L109.1160|
0002f2  f7fffffe          BL       strcat
                  |L109.758|
;;;1233   			strcat(data,",RUDRA-J01,1.0.19,NR,L,");
0002f6  4969              LDR      r1,|L109.1180|
0002f8  4863              LDR      r0,|L109.1160|
0002fa  f7fffffe          BL       strcat
;;;1234   		strcat(data,imei);
0002fe  4942              LDR      r1,|L109.1032|
000300  4861              LDR      r0,|L109.1160|
000302  f7fffffe          BL       strcat
;;;1235   		strcat(data,",");		
000306  4966              LDR      r1,|L109.1184|
000308  485f              LDR      r0,|L109.1160|
00030a  f7fffffe          BL       strcat
;;;1236   		strcat(data,licenceplate);
00030e  4965              LDR      r1,|L109.1188|
000310  485d              LDR      r0,|L109.1160|
000312  f7fffffe          BL       strcat
;;;1237   		//fix
;;;1238   		memset(at_,0,100);
000316  2164              MOVS     r1,#0x64
000318  4863              LDR      r0,|L109.1192|
00031a  f7fffffe          BL       __aeabi_memclr
;;;1239   		parse_g(rmc,2,3,',',',',at_);
00031e  4862              LDR      r0,|L109.1192|
000320  212c              MOVS     r1,#0x2c
000322  460b              MOV      r3,r1
000324  2203              MOVS     r2,#3
000326  9100              STR      r1,[sp,#0]
000328  9001              STR      r0,[sp,#4]
00032a  2102              MOVS     r1,#2
00032c  4846              LDR      r0,|L109.1096|
00032e  f7fffffe          BL       parse_g
;;;1240   		if(at_[0] == 'A')strcat(data,",1,");
000332  485d              LDR      r0,|L109.1192|
000334  7800              LDRB     r0,[r0,#0]  ; at_
000336  2841              CMP      r0,#0x41
000338  d104              BNE      |L109.836|
00033a  495c              LDR      r1,|L109.1196|
00033c  4852              LDR      r0,|L109.1160|
00033e  f7fffffe          BL       strcat
000342  e003              B        |L109.844|
                  |L109.836|
;;;1241   		else	strcat(data,",0,");
000344  495a              LDR      r1,|L109.1200|
000346  4850              LDR      r0,|L109.1160|
000348  f7fffffe          BL       strcat
                  |L109.844|
;;;1242   		//date
;;;1243   		memset(at_,0,100);
00034c  2164              MOVS     r1,#0x64
00034e  4856              LDR      r0,|L109.1192|
000350  f7fffffe          BL       __aeabi_memclr
;;;1244   		parse_g(rmc,9,10,',',',',at_);
000354  4854              LDR      r0,|L109.1192|
000356  212c              MOVS     r1,#0x2c
000358  460b              MOV      r3,r1
00035a  220a              MOVS     r2,#0xa
00035c  9100              STR      r1,[sp,#0]
00035e  9001              STR      r0,[sp,#4]
000360  2109              MOVS     r1,#9
000362  4839              LDR      r0,|L109.1096|
000364  f7fffffe          BL       parse_g
;;;1245   		strcat(data,at_);
000368  494f              LDR      r1,|L109.1192|
00036a  4847              LDR      r0,|L109.1160|
00036c  f7fffffe          BL       strcat
;;;1246   		strcat(data,",");
000370  494b              LDR      r1,|L109.1184|
000372  4845              LDR      r0,|L109.1160|
000374  f7fffffe          BL       strcat
;;;1247   		//time
;;;1248   		memset(at_,0,100);
000378  2164              MOVS     r1,#0x64
00037a  484b              LDR      r0,|L109.1192|
00037c  f7fffffe          BL       __aeabi_memclr
;;;1249   		parse_g(rmc,1,1,',','.',at_);
000380  4849              LDR      r0,|L109.1192|
000382  212e              MOVS     r1,#0x2e
000384  232c              MOVS     r3,#0x2c
000386  2201              MOVS     r2,#1
000388  9100              STR      r1,[sp,#0]
00038a  9001              STR      r0,[sp,#4]
00038c  4611              MOV      r1,r2
00038e  482e              LDR      r0,|L109.1096|
000390  f7fffffe          BL       parse_g
;;;1250   		strcat(data,at_);
000394  4944              LDR      r1,|L109.1192|
000396  483c              LDR      r0,|L109.1160|
000398  f7fffffe          BL       strcat
;;;1251   		strcat(data,",");				
00039c  4940              LDR      r1,|L109.1184|
00039e  483a              LDR      r0,|L109.1160|
0003a0  f7fffffe          BL       strcat
;;;1252   		//lati
;;;1253   		strcat(data,lati);
0003a4  4927              LDR      r1,|L109.1092|
0003a6  4838              LDR      r0,|L109.1160|
0003a8  f7fffffe          BL       strcat
;;;1254   		strcat(data,",");		
0003ac  493c              LDR      r1,|L109.1184|
0003ae  4836              LDR      r0,|L109.1160|
0003b0  f7fffffe          BL       strcat
;;;1255   		//latidir
;;;1256   		memset(at_,0,100);
0003b4  2164              MOVS     r1,#0x64
0003b6  483c              LDR      r0,|L109.1192|
0003b8  f7fffffe          BL       __aeabi_memclr
;;;1257   		parse_g(rmc,4,5,',',',',at_);
0003bc  483a              LDR      r0,|L109.1192|
0003be  212c              MOVS     r1,#0x2c
0003c0  460b              MOV      r3,r1
0003c2  2205              MOVS     r2,#5
0003c4  9100              STR      r1,[sp,#0]
0003c6  9001              STR      r0,[sp,#4]
0003c8  2104              MOVS     r1,#4
0003ca  481f              LDR      r0,|L109.1096|
0003cc  f7fffffe          BL       parse_g
;;;1258   		strcat(data,at_);
0003d0  4935              LDR      r1,|L109.1192|
0003d2  482d              LDR      r0,|L109.1160|
0003d4  f7fffffe          BL       strcat
;;;1259   		strcat(data,",");
0003d8  4931              LDR      r1,|L109.1184|
0003da  482b              LDR      r0,|L109.1160|
0003dc  f7fffffe          BL       strcat
;;;1260   		//longi
;;;1261   		strcat(data,longi);
0003e0  491a              LDR      r1,|L109.1100|
0003e2  4829              LDR      r0,|L109.1160|
0003e4  f7fffffe          BL       strcat
;;;1262   		strcat(data,",");
0003e8  492d              LDR      r1,|L109.1184|
0003ea  4827              LDR      r0,|L109.1160|
0003ec  f7fffffe          BL       strcat
;;;1263   		//longidir
;;;1264   		memset(at_,0,100);
0003f0  2164              MOVS     r1,#0x64
0003f2  482d              LDR      r0,|L109.1192|
0003f4  f7fffffe          BL       __aeabi_memclr
;;;1265   		parse_g(rmc,6,7,',',',',at_);
0003f8  482b              LDR      r0,|L109.1192|
0003fa  212c              MOVS     r1,#0x2c
0003fc  460b              MOV      r3,r1
0003fe  2207              MOVS     r2,#7
000400  9100              STR      r1,[sp,#0]
000402  9001              STR      r0,[sp,#4]
000404  2106              MOVS     r1,#6
000406  e055              B        |L109.1204|
                  |L109.1032|
                          DCD      imei
                  |L109.1036|
                          DCD      imeiinc
                  |L109.1040|
                          DCD      ||.conststring||+0xe0
                  |L109.1044|
                          DCD      ||.conststring||+0x18
                  |L109.1048|
                          DCD      ||.conststring||+0x2c
                  |L109.1052|
                          DCD      ||.conststring||+0xf4
                  |L109.1056|
                          DCD      i
                  |L109.1060|
                          DCD      uart_string_gsm
                  |L109.1064|
                          DCD      time52
                  |L109.1068|
                          DCD      ignstr
                  |L109.1072|
                          DCD      0x400ff040
                  |L109.1076|
                          DCD      ||.conststring||+0x104
                  |L109.1080|
                          DCD      acstr
                  |L109.1084|
                          DCD      int_erval
                  |L109.1088|
                          DCD      lpticks
                  |L109.1092|
                          DCD      lati
                  |L109.1096|
                          DCD      ||rmc||
                  |L109.1100|
                          DCD      longi
                  |L109.1104|
                          DCD      velocity
                  |L109.1108|
                          DCD      speed
                  |L109.1112|
                          DCD      c
                  |L109.1116|
                          DCD      0x40590000
                  |L109.1120|
                          DCD      ||hh||
                  |L109.1124|
                          DCD      hh11
                  |L109.1128|
                          DCD      mm11
                  |L109.1132|
                          DCD      0x404e0000
                  |L109.1136|
                          DCD      mm22
                  |L109.1140|
                          DCD      ||.conststring||+0x108
                  |L109.1144|
                          DCD      0xc083126f
                  |L109.1148|
                          DCD      0x3ffda1ca
                  |L109.1152|
                          DCD      ||.conststring||+0x10c
                  |L109.1156|
                          DCD      ||.conststring||+0x114
                  |L109.1160|
                          DCD      data
                  |L109.1164|
                          DCD      ipadd
                  |L109.1168|
                          DCD      emergencytimer
                  |L109.1172|
                          DCD      ||.conststring||+0x118
                  |L109.1176|
                          DCD      ||.conststring||+0x130
                  |L109.1180|
                          DCD      ||.conststring||+0x134
                  |L109.1184|
                          DCD      ||.conststring||+0x14c
                  |L109.1188|
                          DCD      licenceplate
                  |L109.1192|
                          DCD      at_
                  |L109.1196|
                          DCD      ||.conststring||+0x150
                  |L109.1200|
                          DCD      ||.conststring||+0x154
                  |L109.1204|
0004b4  48e6              LDR      r0,|L109.2128|
0004b6  f7fffffe          BL       parse_g
;;;1266   		strcat(data,at_);
0004ba  49e6              LDR      r1,|L109.2132|
0004bc  48e6              LDR      r0,|L109.2136|
0004be  f7fffffe          BL       strcat
;;;1267   		strcat(data,",");
0004c2  49e6              LDR      r1,|L109.2140|
0004c4  48e4              LDR      r0,|L109.2136|
0004c6  f7fffffe          BL       strcat
;;;1268   		//speed
;;;1269   		strcat(data,velocity);
0004ca  49e5              LDR      r1,|L109.2144|
0004cc  48e2              LDR      r0,|L109.2136|
0004ce  f7fffffe          BL       strcat
;;;1270   		strcat(data,",");
0004d2  49e2              LDR      r1,|L109.2140|
0004d4  48e0              LDR      r0,|L109.2136|
0004d6  f7fffffe          BL       strcat
;;;1271   		//course
;;;1272   		memset(at_,0,100);
0004da  2164              MOVS     r1,#0x64
0004dc  48dd              LDR      r0,|L109.2132|
0004de  f7fffffe          BL       __aeabi_memclr
;;;1273   		parse_g(rmc,8,9,',',',',at_);
0004e2  48dc              LDR      r0,|L109.2132|
0004e4  212c              MOVS     r1,#0x2c
0004e6  460b              MOV      r3,r1
0004e8  2209              MOVS     r2,#9
0004ea  9100              STR      r1,[sp,#0]
0004ec  9001              STR      r0,[sp,#4]
0004ee  2108              MOVS     r1,#8
0004f0  48d7              LDR      r0,|L109.2128|
0004f2  f7fffffe          BL       parse_g
;;;1274   		strcat(data,at_);
0004f6  49d7              LDR      r1,|L109.2132|
0004f8  48d7              LDR      r0,|L109.2136|
0004fa  f7fffffe          BL       strcat
;;;1275   		strcat(data,",");
0004fe  49d7              LDR      r1,|L109.2140|
000500  48d5              LDR      r0,|L109.2136|
000502  f7fffffe          BL       strcat
;;;1276   		//no of satellite
;;;1277   		memset(at_,0,100);
000506  2164              MOVS     r1,#0x64
000508  48d2              LDR      r0,|L109.2132|
00050a  f7fffffe          BL       __aeabi_memclr
;;;1278   		parse_g(gga,7,8,',',',',at_);
00050e  48d1              LDR      r0,|L109.2132|
000510  212c              MOVS     r1,#0x2c
000512  460b              MOV      r3,r1
000514  2208              MOVS     r2,#8
000516  9100              STR      r1,[sp,#0]
000518  9001              STR      r0,[sp,#4]
00051a  2107              MOVS     r1,#7
00051c  48d1              LDR      r0,|L109.2148|
00051e  f7fffffe          BL       parse_g
;;;1279   		strcat(data,at_);
000522  49cc              LDR      r1,|L109.2132|
000524  48cc              LDR      r0,|L109.2136|
000526  f7fffffe          BL       strcat
;;;1280   		strcat(data,",");		
00052a  49cc              LDR      r1,|L109.2140|
00052c  48ca              LDR      r0,|L109.2136|
00052e  f7fffffe          BL       strcat
;;;1281   		//altitude
;;;1282   		memset(at_,0,100);
000532  2164              MOVS     r1,#0x64
000534  48c7              LDR      r0,|L109.2132|
000536  f7fffffe          BL       __aeabi_memclr
;;;1283   		parse_g(gga,9,10,',',',',at_);
00053a  48c6              LDR      r0,|L109.2132|
00053c  212c              MOVS     r1,#0x2c
00053e  460b              MOV      r3,r1
000540  220a              MOVS     r2,#0xa
000542  9100              STR      r1,[sp,#0]
000544  9001              STR      r0,[sp,#4]
000546  2109              MOVS     r1,#9
000548  48c6              LDR      r0,|L109.2148|
00054a  f7fffffe          BL       parse_g
;;;1284   		strcat(data,at_);
00054e  49c1              LDR      r1,|L109.2132|
000550  48c1              LDR      r0,|L109.2136|
000552  f7fffffe          BL       strcat
;;;1285   		strcat(data,",");
000556  49c1              LDR      r1,|L109.2140|
000558  48bf              LDR      r0,|L109.2136|
00055a  f7fffffe          BL       strcat
;;;1286   		//pdop
;;;1287   		memset(at_,0,100);
00055e  2164              MOVS     r1,#0x64
000560  48bc              LDR      r0,|L109.2132|
000562  f7fffffe          BL       __aeabi_memclr
;;;1288   		parse_g(gsa,15,16,',',',',at_);
000566  48bb              LDR      r0,|L109.2132|
000568  212c              MOVS     r1,#0x2c
00056a  460b              MOV      r3,r1
00056c  2210              MOVS     r2,#0x10
00056e  9100              STR      r1,[sp,#0]
000570  9001              STR      r0,[sp,#4]
000572  210f              MOVS     r1,#0xf
000574  48bc              LDR      r0,|L109.2152|
000576  f7fffffe          BL       parse_g
;;;1289   		strcat(data,at_);
00057a  49b6              LDR      r1,|L109.2132|
00057c  48b6              LDR      r0,|L109.2136|
00057e  f7fffffe          BL       strcat
;;;1290   		strcat(data,",");
000582  49b6              LDR      r1,|L109.2140|
000584  48b4              LDR      r0,|L109.2136|
000586  f7fffffe          BL       strcat
;;;1291   
;;;1292   		//Hdop
;;;1293   		memset(at_,0,100);
00058a  2164              MOVS     r1,#0x64
00058c  48b1              LDR      r0,|L109.2132|
00058e  f7fffffe          BL       __aeabi_memclr
;;;1294   		parse_g(gsa,16,17,',',',',at_);
000592  48b0              LDR      r0,|L109.2132|
000594  212c              MOVS     r1,#0x2c
000596  460b              MOV      r3,r1
000598  2211              MOVS     r2,#0x11
00059a  9100              STR      r1,[sp,#0]
00059c  9001              STR      r0,[sp,#4]
00059e  2110              MOVS     r1,#0x10
0005a0  48b1              LDR      r0,|L109.2152|
0005a2  f7fffffe          BL       parse_g
;;;1295   		strcat(data,at_);
0005a6  49ab              LDR      r1,|L109.2132|
0005a8  48ab              LDR      r0,|L109.2136|
0005aa  f7fffffe          BL       strcat
;;;1296   		//odometer
;;;1297   		strcat(data,",ODOMETER NC,");
0005ae  49af              LDR      r1,|L109.2156|
0005b0  48a9              LDR      r0,|L109.2136|
0005b2  f7fffffe          BL       strcat
;;;1298   
;;;1299   		//network operator
;;;1300   		send_GSM("\r\n\n\nAT+COPS?\r\n","OK","ERROR\r\n","ERROR",10);	
0005b6  200a              MOVS     r0,#0xa
0005b8  4bad              LDR      r3,|L109.2160|
0005ba  4aae              LDR      r2,|L109.2164|
0005bc  49ae              LDR      r1,|L109.2168|
0005be  9000              STR      r0,[sp,#0]
0005c0  48ae              LDR      r0,|L109.2172|
0005c2  f7fffffe          BL       send_GSM
;;;1301   		memset(at_,0,100);
0005c6  2164              MOVS     r1,#0x64
0005c8  48a2              LDR      r0,|L109.2132|
0005ca  f7fffffe          BL       __aeabi_memclr
;;;1302   		parse_g(uart_string_gsm,1,2,'"','"',at_);
0005ce  48a1              LDR      r0,|L109.2132|
0005d0  2122              MOVS     r1,#0x22
0005d2  460b              MOV      r3,r1
0005d4  2202              MOVS     r2,#2
0005d6  9100              STR      r1,[sp,#0]
0005d8  9001              STR      r0,[sp,#4]
0005da  2101              MOVS     r1,#1
0005dc  48a8              LDR      r0,|L109.2176|
0005de  f7fffffe          BL       parse_g
;;;1303   		strcat(data,at_);
0005e2  499c              LDR      r1,|L109.2132|
0005e4  489c              LDR      r0,|L109.2136|
0005e6  f7fffffe          BL       strcat
;;;1304   		strcat(data,",");		
0005ea  499c              LDR      r1,|L109.2140|
0005ec  489a              LDR      r0,|L109.2136|
0005ee  f7fffffe          BL       strcat
;;;1305   		//ignition status
;;;1306   		strcat(data,ignstr);
0005f2  49a4              LDR      r1,|L109.2180|
0005f4  4898              LDR      r0,|L109.2136|
0005f6  f7fffffe          BL       strcat
;;;1307   		strcat(data,",");	
0005fa  4998              LDR      r1,|L109.2140|
0005fc  4896              LDR      r0,|L109.2136|
0005fe  f7fffffe          BL       strcat
;;;1308   		//main power connected
;;;1309   		if( !(GPIOC_PDIR & 0x00000001)){
000602  48a1              LDR      r0,|L109.2184|
000604  6900              LDR      r0,[r0,#0x10]
000606  07c0              LSLS     r0,r0,#31
000608  0fc0              LSRS     r0,r0,#31
00060a  2800              CMP      r0,#0
00060c  d104              BNE      |L109.1560|
;;;1310   			strcat(data,"1,");				
00060e  499f              LDR      r1,|L109.2188|
000610  4891              LDR      r0,|L109.2136|
000612  f7fffffe          BL       strcat
000616  e003              B        |L109.1568|
                  |L109.1560|
;;;1311   		}
;;;1312   		else{strcat(data,"0,");}
000618  499d              LDR      r1,|L109.2192|
00061a  488f              LDR      r0,|L109.2136|
00061c  f7fffffe          BL       strcat
                  |L109.1568|
;;;1313   		//emergency status
;;;1314   		if(emergencytimer != 0)
000620  489c              LDR      r0,|L109.2196|
000622  6800              LDR      r0,[r0,#0]  ; emergencytimer
000624  2800              CMP      r0,#0
000626  d004              BEQ      |L109.1586|
;;;1315   			strcat(data, "1,");
000628  4998              LDR      r1,|L109.2188|
00062a  488b              LDR      r0,|L109.2136|
00062c  f7fffffe          BL       strcat
000630  e003              B        |L109.1594|
                  |L109.1586|
;;;1316   		else strcat(data, "0,");
000632  4997              LDR      r1,|L109.2192|
000634  4888              LDR      r0,|L109.2136|
000636  f7fffffe          BL       strcat
                  |L109.1594|
;;;1317   		
;;;1318   		
;;;1319   		//tamper alert
;;;1320   		strcat(data,"C,");
00063a  4997              LDR      r1,|L109.2200|
00063c  4886              LDR      r0,|L109.2136|
00063e  f7fffffe          BL       strcat
;;;1321   		//signal strength
;;;1322   		send_GSM("\r\n\n\nAT+CSQ\r\n","OK","ERROR\r\n","ERROR",10);	
000642  200a              MOVS     r0,#0xa
000644  4b8a              LDR      r3,|L109.2160|
000646  4a8b              LDR      r2,|L109.2164|
000648  498b              LDR      r1,|L109.2168|
00064a  9000              STR      r0,[sp,#0]
00064c  4893              LDR      r0,|L109.2204|
00064e  f7fffffe          BL       send_GSM
;;;1323   		memset(at_,0,100);
000652  2164              MOVS     r1,#0x64
000654  487f              LDR      r0,|L109.2132|
000656  f7fffffe          BL       __aeabi_memclr
;;;1324   		parse_g(uart_string_gsm,1,1,' ',',',at_);
00065a  487e              LDR      r0,|L109.2132|
00065c  212c              MOVS     r1,#0x2c
00065e  2320              MOVS     r3,#0x20
000660  2201              MOVS     r2,#1
000662  9100              STR      r1,[sp,#0]
000664  9001              STR      r0,[sp,#4]
000666  4611              MOV      r1,r2
000668  4885              LDR      r0,|L109.2176|
00066a  f7fffffe          BL       parse_g
;;;1325   		strcat(data,at_);
00066e  4979              LDR      r1,|L109.2132|
000670  4879              LDR      r0,|L109.2136|
000672  f7fffffe          BL       strcat
;;;1326   		strcat(data,",");	
000676  4979              LDR      r1,|L109.2140|
000678  4877              LDR      r0,|L109.2136|
00067a  f7fffffe          BL       strcat
;;;1327   		//mcc
;;;1328   		send_GSM("\r\n\n\nAT+CENG=2,1\r\n","OK","ERROR\r\n","ERROR",10);	
00067e  200a              MOVS     r0,#0xa
000680  4b7b              LDR      r3,|L109.2160|
000682  4a7c              LDR      r2,|L109.2164|
000684  497c              LDR      r1,|L109.2168|
000686  9000              STR      r0,[sp,#0]
000688  4885              LDR      r0,|L109.2208|
00068a  f7fffffe          BL       send_GSM
;;;1329   		send_GSM("\r\n\n\nAT+CENG?\r\n","OK","ERROR\r\n","ERROR",10);	
00068e  200a              MOVS     r0,#0xa
000690  4b77              LDR      r3,|L109.2160|
000692  4a78              LDR      r2,|L109.2164|
000694  4978              LDR      r1,|L109.2168|
000696  9000              STR      r0,[sp,#0]
000698  4882              LDR      r0,|L109.2212|
00069a  f7fffffe          BL       send_GSM
;;;1330   
;;;1331   		memset(at_,0,100);
00069e  2164              MOVS     r1,#0x64
0006a0  486c              LDR      r0,|L109.2132|
0006a2  f7fffffe          BL       __aeabi_memclr
;;;1332   		parse_g(uart_string_gsm,5,6,',',',',at_);
0006a6  486b              LDR      r0,|L109.2132|
0006a8  212c              MOVS     r1,#0x2c
0006aa  460b              MOV      r3,r1
0006ac  2206              MOVS     r2,#6
0006ae  9100              STR      r1,[sp,#0]
0006b0  9001              STR      r0,[sp,#4]
0006b2  2105              MOVS     r1,#5
0006b4  4872              LDR      r0,|L109.2176|
0006b6  f7fffffe          BL       parse_g
;;;1333   		strcat(data,at_);
0006ba  4966              LDR      r1,|L109.2132|
0006bc  4866              LDR      r0,|L109.2136|
0006be  f7fffffe          BL       strcat
;;;1334   		strcat(data,",");					
0006c2  4966              LDR      r1,|L109.2140|
0006c4  4864              LDR      r0,|L109.2136|
0006c6  f7fffffe          BL       strcat
;;;1335   		
;;;1336   		//strcat(data,"MCC");
;;;1337   		//strcat(data,",");	
;;;1338   		//MNC
;;;1339   		memset(at_,0,100);
0006ca  2164              MOVS     r1,#0x64
0006cc  4861              LDR      r0,|L109.2132|
0006ce  f7fffffe          BL       __aeabi_memclr
;;;1340   		parse_g(uart_string_gsm,6,7,',',',',at_);
0006d2  4860              LDR      r0,|L109.2132|
0006d4  212c              MOVS     r1,#0x2c
0006d6  460b              MOV      r3,r1
0006d8  2207              MOVS     r2,#7
0006da  9100              STR      r1,[sp,#0]
0006dc  9001              STR      r0,[sp,#4]
0006de  2106              MOVS     r1,#6
0006e0  4867              LDR      r0,|L109.2176|
0006e2  f7fffffe          BL       parse_g
;;;1341   		strcat(data,at_);
0006e6  495b              LDR      r1,|L109.2132|
0006e8  485b              LDR      r0,|L109.2136|
0006ea  f7fffffe          BL       strcat
;;;1342   		strcat(data,",");			
0006ee  495b              LDR      r1,|L109.2140|
0006f0  4859              LDR      r0,|L109.2136|
0006f2  f7fffffe          BL       strcat
;;;1343   		//strcat(data,"MNC");
;;;1344   		//strcat(data,",");	
;;;1345   		//LAC
;;;1346   		memset(at_,0,100);
0006f6  2164              MOVS     r1,#0x64
0006f8  4856              LDR      r0,|L109.2132|
0006fa  f7fffffe          BL       __aeabi_memclr
;;;1347   		parse_g(uart_string_gsm,11,12,',',',',at_);
0006fe  4855              LDR      r0,|L109.2132|
000700  212c              MOVS     r1,#0x2c
000702  460b              MOV      r3,r1
000704  220c              MOVS     r2,#0xc
000706  9100              STR      r1,[sp,#0]
000708  9001              STR      r0,[sp,#4]
00070a  210b              MOVS     r1,#0xb
00070c  485c              LDR      r0,|L109.2176|
00070e  f7fffffe          BL       parse_g
;;;1348   		strcat(data,at_);
000712  4950              LDR      r1,|L109.2132|
000714  4850              LDR      r0,|L109.2136|
000716  f7fffffe          BL       strcat
;;;1349   		strcat(data,",");	
00071a  4950              LDR      r1,|L109.2140|
00071c  484e              LDR      r0,|L109.2136|
00071e  f7fffffe          BL       strcat
;;;1350   		//strcat(data,"LAC");
;;;1351   		//strcat(data,",");
;;;1352   		//CELL ID
;;;1353   		memset(at_,0,100);
000722  2164              MOVS     r1,#0x64
000724  484b              LDR      r0,|L109.2132|
000726  f7fffffe          BL       __aeabi_memclr
;;;1354   		parse_g(uart_string_gsm,8,9,',',',',at_);
00072a  484a              LDR      r0,|L109.2132|
00072c  212c              MOVS     r1,#0x2c
00072e  460b              MOV      r3,r1
000730  2209              MOVS     r2,#9
000732  9100              STR      r1,[sp,#0]
000734  9001              STR      r0,[sp,#4]
000736  2108              MOVS     r1,#8
000738  4851              LDR      r0,|L109.2176|
00073a  f7fffffe          BL       parse_g
;;;1355   		strcat(data,at_);
00073e  4945              LDR      r1,|L109.2132|
000740  4845              LDR      r0,|L109.2136|
000742  f7fffffe          BL       strcat
;;;1356   		strcat(data,",");			
000746  4945              LDR      r1,|L109.2140|
000748  4843              LDR      r0,|L109.2136|
00074a  f7fffffe          BL       strcat
;;;1357   		//strcat(data,"CELL ID");
;;;1358   		//strcat(data,",");	
;;;1359   		//NMR
;;;1360   //		memset(at_,0,100);
;;;1361   //		parse_g(uart_string_gsm,2,14,'"','"',at_);
;;;1362   //		remove_all_chars(at_,'\r','\n');
;;;1363   //		strreplace(at_,"+CENG: ", ",");
;;;1364   //		
;;;1365   //		strcat(data,at_);
;;;1366   //		strcat(data,",");	
;;;1367   		
;;;1368   		strcat(data,"NMR");
00074e  4956              LDR      r1,|L109.2216|
000750  4841              LDR      r0,|L109.2136|
000752  f7fffffe          BL       strcat
;;;1369   		strcat(data,",");	
000756  4941              LDR      r1,|L109.2140|
000758  483f              LDR      r0,|L109.2136|
00075a  f7fffffe          BL       strcat
;;;1370   		send_GSM("\r\n\n\nAT+CENG = 0\r\n","OK","ERROR\r\n","ERROR",10);	
00075e  200a              MOVS     r0,#0xa
000760  4b43              LDR      r3,|L109.2160|
000762  4a44              LDR      r2,|L109.2164|
000764  4944              LDR      r1,|L109.2168|
000766  9000              STR      r0,[sp,#0]
000768  4850              LDR      r0,|L109.2220|
00076a  f7fffffe          BL       send_GSM
;;;1371   
;;;1372   		//DIGITAL IP
;;;1373   		strcat(data,ignstr);					//ignition
00076e  4945              LDR      r1,|L109.2180|
000770  4839              LDR      r0,|L109.2136|
000772  f7fffffe          BL       strcat
;;;1374   		if(emergencytimer != 0)				//emergency
000776  4847              LDR      r0,|L109.2196|
000778  6800              LDR      r0,[r0,#0]  ; emergencytimer
00077a  2800              CMP      r0,#0
00077c  d004              BEQ      |L109.1928|
;;;1375   			strcat(data, "1");
00077e  494c              LDR      r1,|L109.2224|
000780  4835              LDR      r0,|L109.2136|
000782  f7fffffe          BL       strcat
000786  e003              B        |L109.1936|
                  |L109.1928|
;;;1376   		else strcat(data, "0");
000788  494a              LDR      r1,|L109.2228|
00078a  4833              LDR      r0,|L109.2136|
00078c  f7fffffe          BL       strcat
                  |L109.1936|
;;;1377   		strcat(data,acstr);						//AC input
000790  4949              LDR      r1,|L109.2232|
000792  4831              LDR      r0,|L109.2136|
000794  f7fffffe          BL       strcat
;;;1378   		if( !(GPIOC_PDIR & 0x00000001)){ // main power logic
000798  483b              LDR      r0,|L109.2184|
00079a  6900              LDR      r0,[r0,#0x10]
00079c  07c0              LSLS     r0,r0,#31
00079e  0fc0              LSRS     r0,r0,#31
0007a0  2800              CMP      r0,#0
0007a2  d104              BNE      |L109.1966|
;;;1379   			strcat(data,"1,");				
0007a4  4939              LDR      r1,|L109.2188|
0007a6  482c              LDR      r0,|L109.2136|
0007a8  f7fffffe          BL       strcat
0007ac  e003              B        |L109.1974|
                  |L109.1966|
;;;1380   		}
;;;1381   		else{strcat(data,"0,");}		
0007ae  4938              LDR      r1,|L109.2192|
0007b0  4829              LDR      r0,|L109.2136|
0007b2  f7fffffe          BL       strcat
                  |L109.1974|
;;;1382   		
;;;1383   		//DIGITAL OP
;;;1384   		if (ign == 1) strcat(data,"11,");
0007b6  4841              LDR      r0,|L109.2236|
0007b8  6800              LDR      r0,[r0,#0]  ; ign
0007ba  2801              CMP      r0,#1
0007bc  d104              BNE      |L109.1992|
0007be  4940              LDR      r1,|L109.2240|
0007c0  4825              LDR      r0,|L109.2136|
0007c2  f7fffffe          BL       strcat
0007c6  e003              B        |L109.2000|
                  |L109.1992|
;;;1385   		else strcat(data,"00,");
0007c8  493e              LDR      r1,|L109.2244|
0007ca  4823              LDR      r0,|L109.2136|
0007cc  f7fffffe          BL       strcat
                  |L109.2000|
;;;1386   		
;;;1387   		//FUEL/LOAD SENSOR
;;;1388   		adc_read(9);							
0007d0  2009              MOVS     r0,#9
0007d2  f7fffffe          BL       adc_read
;;;1389   		memset(fuelstr,0,5);
0007d6  2105              MOVS     r1,#5
0007d8  483b              LDR      r0,|L109.2248|
0007da  f7fffffe          BL       __aeabi_memclr4
;;;1390   		sprintf(fuelstr,"%d,",fuel);
0007de  483b              LDR      r0,|L109.2252|
0007e0  493b              LDR      r1,|L109.2256|
0007e2  6802              LDR      r2,[r0,#0]  ; fuel
0007e4  4838              LDR      r0,|L109.2248|
0007e6  f7fffffe          BL       __2sprintf
;;;1391   		strcat(data,fuelstr);			
0007ea  4937              LDR      r1,|L109.2248|
0007ec  481a              LDR      r0,|L109.2136|
0007ee  f7fffffe          BL       strcat
;;;1392   		//frame no. 
;;;1393   		memset(fuelstr,0,5);
0007f2  2105              MOVS     r1,#5
0007f4  4834              LDR      r0,|L109.2248|
0007f6  f7fffffe          BL       __aeabi_memclr4
;;;1394   		sprintf(fuelstr,"%d*",frameno);
0007fa  4836              LDR      r0,|L109.2260|
0007fc  4936              LDR      r1,|L109.2264|
0007fe  6802              LDR      r2,[r0,#0]  ; frameno
000800  4831              LDR      r0,|L109.2248|
000802  f7fffffe          BL       __2sprintf
;;;1395   		strcat(data,fuelstr);	
000806  4930              LDR      r1,|L109.2248|
000808  4813              LDR      r0,|L109.2136|
00080a  f7fffffe          BL       strcat
;;;1396   
;;;1397   		//FUEL/LOAD SENSOR
;;;1398   		adc_read(0);							
00080e  2000              MOVS     r0,#0
000810  f7fffffe          BL       adc_read
;;;1399   		memset(fuelstr,0,5);
000814  2105              MOVS     r1,#5
000816  482c              LDR      r0,|L109.2248|
000818  f7fffffe          BL       __aeabi_memclr4
;;;1400   		sprintf(fuelstr,"%d,",fuel);
00081c  482b              LDR      r0,|L109.2252|
00081e  492c              LDR      r1,|L109.2256|
000820  6802              LDR      r2,[r0,#0]  ; fuel
000822  4829              LDR      r0,|L109.2248|
000824  f7fffffe          BL       __2sprintf
;;;1401   		strcat(data,fuelstr);			
000828  4927              LDR      r1,|L109.2248|
00082a  480b              LDR      r0,|L109.2136|
00082c  f7fffffe          BL       strcat
;;;1402   		//frame no. 
;;;1403   		memset(fuelstr,0,5);
000830  2105              MOVS     r1,#5
000832  4825              LDR      r0,|L109.2248|
000834  f7fffffe          BL       __aeabi_memclr4
;;;1404   		sprintf(fuelstr,"%d*",frameno);
000838  4826              LDR      r0,|L109.2260|
00083a  4927              LDR      r1,|L109.2264|
00083c  6802              LDR      r2,[r0,#0]  ; frameno
00083e  4822              LDR      r0,|L109.2248|
000840  f7fffffe          BL       __2sprintf
;;;1405   		strcat(data,fuelstr);			
000844  4920              LDR      r1,|L109.2248|
000846  4804              LDR      r0,|L109.2136|
000848  f7fffffe          BL       strcat
;;;1406   //		strcat(data,"$GxGGA");4
;;;1407   //at_[100]
;;;1408   
;;;1409   
;;;1410   
;;;1411   //		//strcat(data,rmc);	
;;;1412   //		//strcat(data,",");	
;;;1413   //		strcat(data,num2);	
;;;1414   //		strcat(data,",F=");
;;;1415   //	adc_read(9);							
;;;1416   //	memset(fuelstr,0,5);
;;;1417   //	sprintf(fuelstr,"%d,",fuel);
;;;1418   //		strcat(data,fuelstr);		
;;;1419   //		strcat(data,"AC=");	
;;;1420   //		strcat(data,acstr);
;;;1421   //		strcat(data,",I=");	
;;;1422   //		strcat(data,ignstr);
;;;1423   //		strcat(data,",");	
;;;1424   //	memset(fuelstr,0,5);
;;;1425   //	sprintf(fuelstr,"%d",rtcticks2);
;;;1426   //		strcat(data,fuelstr);	
;;;1427   		
;;;1428   		
;;;1429   
;;;1430   //return 0;
;;;1431   }
00084c  bdfe              POP      {r1-r7,pc}
;;;1432   
                          ENDP

00084e  0000              DCW      0x0000
                  |L109.2128|
                          DCD      ||rmc||
                  |L109.2132|
                          DCD      at_
                  |L109.2136|
                          DCD      data
                  |L109.2140|
                          DCD      ||.conststring||+0x14c
                  |L109.2144|
                          DCD      velocity
                  |L109.2148|
                          DCD      gga
                  |L109.2152|
                          DCD      gsa
                  |L109.2156|
                          DCD      ||.conststring||+0x158
                  |L109.2160|
                          DCD      ||.conststring||+0xe0
                  |L109.2164|
                          DCD      ||.conststring||+0x18
                  |L109.2168|
                          DCD      ||.conststring||+0x2c
                  |L109.2172|
                          DCD      ||.conststring||+0x168
                  |L109.2176|
                          DCD      uart_string_gsm
                  |L109.2180|
                          DCD      ignstr
                  |L109.2184|
                          DCD      0x400ff080
                  |L109.2188|
                          DCD      ||.conststring||+0x178
                  |L109.2192|
                          DCD      ||.conststring||+0x17c
                  |L109.2196|
                          DCD      emergencytimer
                  |L109.2200|
                          DCD      ||.conststring||+0x180
                  |L109.2204|
                          DCD      ||.conststring||+0x184
                  |L109.2208|
                          DCD      ||.conststring||+0x194
                  |L109.2212|
                          DCD      ||.conststring||+0x1a8
                  |L109.2216|
                          DCD      ||.conststring||+0x1b8
                  |L109.2220|
                          DCD      ||.conststring||+0x1bc
                  |L109.2224|
                          DCD      ||.conststring||+0x1d0
                  |L109.2228|
                          DCD      ||.conststring||+0x130
                  |L109.2232|
                          DCD      acstr
                  |L109.2236|
                          DCD      ign
                  |L109.2240|
                          DCD      ||.conststring||+0x1d4
                  |L109.2244|
                          DCD      ||.conststring||+0x1d8
                  |L109.2248|
                          DCD      fuelstr
                  |L109.2252|
                          DCD      fuel
                  |L109.2256|
                          DCD      ||.conststring||+0x1dc
                  |L109.2260|
                          DCD      frameno
                  |L109.2264|
                          DCD      ||.conststring||+0x1e0

                          AREA ||i.myAtoi||, COMGROUP=myAtoi, CODE, READONLY, ALIGN=2

                  myAtoi PROC
;;;1111   
;;;1112   __inline int myAtoi(char *str)
000000  4601              MOV      r1,r0
;;;1113   {res=0;
000002  2000              MOVS     r0,#0
000004  4a0e              LDR      r2,|L116.64|
000006  6010              STR      r0,[r2,#0]  ; res
;;;1114       // Initialize result
;;;1115   
;;;1116       // Iterate through all characters of input string and update result
;;;1117       for (iz = 0; str[iz] != '\0'; ++iz)
000008  4a0e              LDR      r2,|L116.68|
00000a  6010              STR      r0,[r2,#0]  ; iz
00000c  e00f              B        |L116.46|
                  |L116.14|
;;;1118           res = res*10 + str[iz] - '0';
00000e  480c              LDR      r0,|L116.64|
000010  6800              LDR      r0,[r0,#0]  ; res
000012  220a              MOVS     r2,#0xa
000014  4350              MULS     r0,r2,r0
000016  4a0b              LDR      r2,|L116.68|
000018  6812              LDR      r2,[r2,#0]  ; iz
00001a  5c8a              LDRB     r2,[r1,r2]
00001c  1880              ADDS     r0,r0,r2
00001e  3830              SUBS     r0,r0,#0x30
000020  4a07              LDR      r2,|L116.64|
000022  6010              STR      r0,[r2,#0]  ; res
000024  4807              LDR      r0,|L116.68|
000026  6800              LDR      r0,[r0,#0]            ;1117  ; iz
000028  1c40              ADDS     r0,r0,#1              ;1117
00002a  4a06              LDR      r2,|L116.68|
00002c  6010              STR      r0,[r2,#0]            ;1117  ; iz
                  |L116.46|
00002e  4805              LDR      r0,|L116.68|
000030  6800              LDR      r0,[r0,#0]            ;1117  ; iz
000032  5c08              LDRB     r0,[r1,r0]            ;1117
000034  2800              CMP      r0,#0                 ;1117
000036  d1ea              BNE      |L116.14|
;;;1119   
;;;1120       // return result.
;;;1121       return res;
000038  4801              LDR      r0,|L116.64|
00003a  6800              LDR      r0,[r0,#0]  ; res
;;;1122   }
00003c  4770              BX       lr
;;;1123   
                          ENDP

00003e  0000              DCW      0x0000
                  |L116.64|
                          DCD      ||res||
                  |L116.68|
                          DCD      ||iz||

                          AREA ||i.save_interval||, COMGROUP=save_interval, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_interval PROC
;;;1231   
;;;1232   __inline void save_interval()
000000  b538              PUSH     {r3-r5,lr}
;;;1233   {
;;;1234   	
;;;1235   send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L123.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L123.208|
000008  4a32              LDR      r2,|L123.212|
00000a  4933              LDR      r1,|L123.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L123.220|
000010  f7fffffe          BL       send_GSM
;;;1236   
;;;1237   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L123.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1238   	sprintf(at_,"\r\nAT+FSWRITE=C:\\INTERVAL.TXT,0,%d,10\r\n",strlen(interval)+11);	
00001c  4831              LDR      r0,|L123.228|
00001e  f7fffffe          BL       strlen
000022  4604              MOV      r4,r0
000024  340b              ADDS     r4,r4,#0xb
000026  4622              MOV      r2,r4
000028  492f              LDR      r1,|L123.232|
00002a  482d              LDR      r0,|L123.224|
00002c  f7fffffe          BL       __2sprintf
;;;1239   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000030  200a              MOVS     r0,#0xa
000032  4b27              LDR      r3,|L123.208|
000034  4a27              LDR      r2,|L123.212|
000036  492d              LDR      r1,|L123.236|
000038  9000              STR      r0,[sp,#0]
00003a  4829              LDR      r0,|L123.224|
00003c  f7fffffe          BL       send_GSM
;;;1240   	//clear();
;;;1241   
;;;1242   	
;;;1243   	send_modem("|INTERVAL|");
000040  482b              LDR      r0,|L123.240|
000042  f7fffffe          BL       send_modem
;;;1244   		for(k=0;k<strlen(interval);k++)
000046  2000              MOVS     r0,#0
000048  492a              LDR      r1,|L123.244|
00004a  6008              STR      r0,[r1,#0]  ; k
00004c  e00b              B        |L123.102|
                  |L123.78|
;;;1245   		{
;;;1246   			uart_putchar(UART1_BASE_PTR, interval[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004e  4825              LDR      r0,|L123.228|
000050  4a28              LDR      r2,|L123.244|
000052  6812              LDR      r2,[r2,#0]  ; k
000054  5c81              LDRB     r1,[r0,r2]
000056  4828              LDR      r0,|L123.248|
000058  f7fffffe          BL       uart_putchar
00005c  4825              LDR      r0,|L123.244|
00005e  6800              LDR      r0,[r0,#0]            ;1244  ; k
000060  1c40              ADDS     r0,r0,#1              ;1244
000062  4924              LDR      r1,|L123.244|
000064  6008              STR      r0,[r1,#0]            ;1244  ; k
                  |L123.102|
000066  481f              LDR      r0,|L123.228|
000068  f7fffffe          BL       strlen
00006c  4921              LDR      r1,|L123.244|
00006e  6809              LDR      r1,[r1,#0]            ;1244  ; k
000070  4288              CMP      r0,r1                 ;1244
000072  d8ec              BHI      |L123.78|
;;;1247   		}	
;;;1248   			send_modem("|");			
000074  4821              LDR      r0,|L123.252|
000076  f7fffffe          BL       send_modem
;;;1249    
;;;1250   									k2=0;									//string array counter for uart 1
00007a  2000              MOVS     r0,#0
00007c  4920              LDR      r1,|L123.256|
00007e  6008              STR      r0,[r1,#0]  ; k2
;;;1251   									time=19999;						//timer counts to wait for characters in uart 1 									
000080  4820              LDR      r0,|L123.260|
000082  4921              LDR      r1,|L123.264|
000084  6008              STR      r0,[r1,#0]  ; time
;;;1252   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000086  e010              B        |L123.170|
                  |L123.136|
;;;1253   									{
;;;1254   									time--;
000088  481f              LDR      r0,|L123.264|
00008a  6800              LDR      r0,[r0,#0]  ; time
00008c  1e40              SUBS     r0,r0,#1
00008e  491e              LDR      r1,|L123.264|
000090  6008              STR      r0,[r1,#0]  ; time
;;;1255   									if(time % 2000 == 0)
000092  217d              MOVS     r1,#0x7d
000094  0109              LSLS     r1,r1,#4
000096  481c              LDR      r0,|L123.264|
000098  6800              LDR      r0,[r0,#0]  ; time
00009a  f7fffffe          BL       __aeabi_idivmod
00009e  2900              CMP      r1,#0
0000a0  d103              BNE      |L123.170|
;;;1256   										{
;;;1257   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1258   											uart_putchar(UART1_BASE_PTR,'\n');
0000a2  210a              MOVS     r1,#0xa
0000a4  4814              LDR      r0,|L123.248|
0000a6  f7fffffe          BL       uart_putchar
                  |L123.170|
0000aa  4918              LDR      r1,|L123.268|
0000ac  4818              LDR      r0,|L123.272|
0000ae  f7fffffe          BL       strstr
0000b2  2800              CMP      r0,#0                 ;1252
0000b4  d109              BNE      |L123.202|
0000b6  4814              LDR      r0,|L123.264|
0000b8  6800              LDR      r0,[r0,#0]            ;1252  ; time
0000ba  2801              CMP      r0,#1                 ;1252
0000bc  db05              BLT      |L123.202|
0000be  4915              LDR      r1,|L123.276|
0000c0  4813              LDR      r0,|L123.272|
0000c2  f7fffffe          BL       strstr
0000c6  2800              CMP      r0,#0                 ;1252
0000c8  d0de              BEQ      |L123.136|
                  |L123.202|
;;;1259   										}
;;;1260   	
;;;1261   									}
;;;1262   
;;;1263   
;;;1264   	
;;;1265   }	
0000ca  bd38              POP      {r3-r5,pc}
;;;1266   	
                          ENDP

                  |L123.204|
                          DCD      tmeout
                  |L123.208|
                          DCD      ||.conststring||+0x10
                  |L123.212|
                          DCD      ||.conststring||+0x18
                  |L123.216|
                          DCD      ||.conststring||+0x2c
                  |L123.220|
                          DCD      ||.conststring||+0x1e4
                  |L123.224|
                          DCD      at_
                  |L123.228|
                          DCD      interval
                  |L123.232|
                          DCD      ||.conststring||+0x204
                  |L123.236|
                          DCD      ||.conststring||+0x20
                  |L123.240|
                          DCD      ||.conststring||+0x22c
                  |L123.244|
                          DCD      k
                  |L123.248|
                          DCD      0x4006b000
                  |L123.252|
                          DCD      ||.conststring||+0xdc
                  |L123.256|
                          DCD      ||k2||
                  |L123.260|
                          DCD      0x00004e1f
                  |L123.264|
                          DCD      time
                  |L123.268|
                          DCD      ||.conststring||+0x70
                  |L123.272|
                          DCD      uart_string_gsm
                  |L123.276|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.saveapn||, COMGROUP=saveapn, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  saveapn PROC
;;;1154   
;;;1155   __inline void saveapn(){
000000  b538              PUSH     {r3-r5,lr}
;;;1156   	
;;;1157   send_GSM("\nAT+FSCREATE=C:\\APN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L130.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L130.208|
000008  4a32              LDR      r2,|L130.212|
00000a  4933              LDR      r1,|L130.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L130.220|
000010  f7fffffe          BL       send_GSM
;;;1158   
;;;1159   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L130.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1160   	sprintf(at_,"\r\nAT+FSWRITE=C:\\APN.TXT,0,%d,10\r\n",strlen(apn)+3);	
00001c  4831              LDR      r0,|L130.228|
00001e  f7fffffe          BL       strlen
000022  1cc4              ADDS     r4,r0,#3
000024  4622              MOV      r2,r4
000026  4930              LDR      r1,|L130.232|
000028  482d              LDR      r0,|L130.224|
00002a  f7fffffe          BL       __2sprintf
;;;1161   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
00002e  200a              MOVS     r0,#0xa
000030  4b27              LDR      r3,|L130.208|
000032  4a28              LDR      r2,|L130.212|
000034  492d              LDR      r1,|L130.236|
000036  9000              STR      r0,[sp,#0]
000038  4829              LDR      r0,|L130.224|
00003a  f7fffffe          BL       send_GSM
;;;1162   	//clear();
;;;1163   
;;;1164   	
;;;1165   	send_modem("|");
00003e  482c              LDR      r0,|L130.240|
000040  f7fffffe          BL       send_modem
;;;1166   		for(k=0;k<strlen(apn);k++)
000044  2000              MOVS     r0,#0
000046  492b              LDR      r1,|L130.244|
000048  6008              STR      r0,[r1,#0]  ; k
00004a  e00b              B        |L130.100|
                  |L130.76|
;;;1167   		{
;;;1168   			uart_putchar(UART1_BASE_PTR, apn[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004c  4825              LDR      r0,|L130.228|
00004e  4a29              LDR      r2,|L130.244|
000050  6812              LDR      r2,[r2,#0]  ; k
000052  5c81              LDRB     r1,[r0,r2]
000054  4828              LDR      r0,|L130.248|
000056  f7fffffe          BL       uart_putchar
00005a  4826              LDR      r0,|L130.244|
00005c  6800              LDR      r0,[r0,#0]            ;1166  ; k
00005e  1c40              ADDS     r0,r0,#1              ;1166
000060  4924              LDR      r1,|L130.244|
000062  6008              STR      r0,[r1,#0]            ;1166  ; k
                  |L130.100|
000064  481f              LDR      r0,|L130.228|
000066  f7fffffe          BL       strlen
00006a  4922              LDR      r1,|L130.244|
00006c  6809              LDR      r1,[r1,#0]            ;1166  ; k
00006e  4288              CMP      r0,r1                 ;1166
000070  d8ec              BHI      |L130.76|
;;;1169   		}	
;;;1170   			send_modem("|");			
000072  481f              LDR      r0,|L130.240|
000074  f7fffffe          BL       send_modem
;;;1171    
;;;1172   									k2=0;									//string array counter for uart 1
000078  2000              MOVS     r0,#0
00007a  4920              LDR      r1,|L130.252|
00007c  6008              STR      r0,[r1,#0]  ; k2
;;;1173   									time=19999;						//timer counts to wait for characters in uart 1 									
00007e  4820              LDR      r0,|L130.256|
000080  4920              LDR      r1,|L130.260|
000082  6008              STR      r0,[r1,#0]  ; time
;;;1174   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000084  e010              B        |L130.168|
                  |L130.134|
;;;1175   									{
;;;1176   									time--;
000086  481f              LDR      r0,|L130.260|
000088  6800              LDR      r0,[r0,#0]  ; time
00008a  1e40              SUBS     r0,r0,#1
00008c  491d              LDR      r1,|L130.260|
00008e  6008              STR      r0,[r1,#0]  ; time
;;;1177   									if(time % 2000 == 0)
000090  217d              MOVS     r1,#0x7d
000092  0109              LSLS     r1,r1,#4
000094  481b              LDR      r0,|L130.260|
000096  6800              LDR      r0,[r0,#0]  ; time
000098  f7fffffe          BL       __aeabi_idivmod
00009c  2900              CMP      r1,#0
00009e  d103              BNE      |L130.168|
;;;1178   										{
;;;1179   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1180   											uart_putchar(UART1_BASE_PTR,'\n');
0000a0  210a              MOVS     r1,#0xa
0000a2  4815              LDR      r0,|L130.248|
0000a4  f7fffffe          BL       uart_putchar
                  |L130.168|
0000a8  4917              LDR      r1,|L130.264|
0000aa  4818              LDR      r0,|L130.268|
0000ac  f7fffffe          BL       strstr
0000b0  2800              CMP      r0,#0                 ;1174
0000b2  d109              BNE      |L130.200|
0000b4  4813              LDR      r0,|L130.260|
0000b6  6800              LDR      r0,[r0,#0]            ;1174  ; time
0000b8  2801              CMP      r0,#1                 ;1174
0000ba  db05              BLT      |L130.200|
0000bc  4914              LDR      r1,|L130.272|
0000be  4813              LDR      r0,|L130.268|
0000c0  f7fffffe          BL       strstr
0000c4  2800              CMP      r0,#0                 ;1174
0000c6  d0de              BEQ      |L130.134|
                  |L130.200|
;;;1181   										}
;;;1182   	
;;;1183   									}
;;;1184   
;;;1185   
;;;1186   	
;;;1187   }
0000c8  bd38              POP      {r3-r5,pc}
;;;1188   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L130.204|
                          DCD      tmeout
                  |L130.208|
                          DCD      ||.conststring||+0x10
                  |L130.212|
                          DCD      ||.conststring||+0x18
                  |L130.216|
                          DCD      ||.conststring||+0x2c
                  |L130.220|
                          DCD      ||.conststring||+0x238
                  |L130.224|
                          DCD      at_
                  |L130.228|
                          DCD      apn
                  |L130.232|
                          DCD      ||.conststring||+0x254
                  |L130.236|
                          DCD      ||.conststring||+0x20
                  |L130.240|
                          DCD      ||.conststring||+0xdc
                  |L130.244|
                          DCD      k
                  |L130.248|
                          DCD      0x4006b000
                  |L130.252|
                          DCD      ||k2||
                  |L130.256|
                          DCD      0x00004e1f
                  |L130.260|
                          DCD      time
                  |L130.264|
                          DCD      ||.conststring||+0x70
                  |L130.268|
                          DCD      uart_string_gsm
                  |L130.272|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.save_licenceplate||, COMGROUP=save_licenceplate, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  save_licenceplate PROC
;;;1199   
;;;1200   __inline void save_licenceplate(){
000000  b538              PUSH     {r3-r5,lr}
;;;1201   		
;;;1202   send_GSM("\nAT+FSCREATE=C:\\LICPLATE.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4832              LDR      r0,|L137.204|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b32              LDR      r3,|L137.208|
000008  4a32              LDR      r2,|L137.212|
00000a  4933              LDR      r1,|L137.216|
00000c  9000              STR      r0,[sp,#0]
00000e  4833              LDR      r0,|L137.220|
000010  f7fffffe          BL       send_GSM
;;;1203   
;;;1204   	memset(at_,0,100);
000014  2164              MOVS     r1,#0x64
000016  4832              LDR      r0,|L137.224|
000018  f7fffffe          BL       __aeabi_memclr
;;;1205   	sprintf(at_,"\r\nAT+FSWRITE=C:\\LICPLATE.TXT,0,%d,10\r\n",strlen(licenceplate)+11);	
00001c  4831              LDR      r0,|L137.228|
00001e  f7fffffe          BL       strlen
000022  4604              MOV      r4,r0
000024  340b              ADDS     r4,r4,#0xb
000026  4622              MOV      r2,r4
000028  492f              LDR      r1,|L137.232|
00002a  482d              LDR      r0,|L137.224|
00002c  f7fffffe          BL       __2sprintf
;;;1206   	send_GSM(at_, ">", "ERROR\r\n" , "ERROR:",10);	
000030  200a              MOVS     r0,#0xa
000032  4b27              LDR      r3,|L137.208|
000034  4a27              LDR      r2,|L137.212|
000036  492d              LDR      r1,|L137.236|
000038  9000              STR      r0,[sp,#0]
00003a  4829              LDR      r0,|L137.224|
00003c  f7fffffe          BL       send_GSM
;;;1207   	//clear();
;;;1208   
;;;1209   	
;;;1210   	send_modem("|LICPLATE|");
000040  482b              LDR      r0,|L137.240|
000042  f7fffffe          BL       send_modem
;;;1211   		for(k=0;k<strlen(licenceplate);k++)
000046  2000              MOVS     r0,#0
000048  492a              LDR      r1,|L137.244|
00004a  6008              STR      r0,[r1,#0]  ; k
00004c  e00b              B        |L137.102|
                  |L137.78|
;;;1212   		{
;;;1213   			uart_putchar(UART1_BASE_PTR, licenceplate[k]);// uart0_putchar(UART0_BASE_PTR, interval[k]);//clear();
00004e  4825              LDR      r0,|L137.228|
000050  4a28              LDR      r2,|L137.244|
000052  6812              LDR      r2,[r2,#0]  ; k
000054  5c81              LDRB     r1,[r0,r2]
000056  4828              LDR      r0,|L137.248|
000058  f7fffffe          BL       uart_putchar
00005c  4825              LDR      r0,|L137.244|
00005e  6800              LDR      r0,[r0,#0]            ;1211  ; k
000060  1c40              ADDS     r0,r0,#1              ;1211
000062  4924              LDR      r1,|L137.244|
000064  6008              STR      r0,[r1,#0]            ;1211  ; k
                  |L137.102|
000066  481f              LDR      r0,|L137.228|
000068  f7fffffe          BL       strlen
00006c  4921              LDR      r1,|L137.244|
00006e  6809              LDR      r1,[r1,#0]            ;1211  ; k
000070  4288              CMP      r0,r1                 ;1211
000072  d8ec              BHI      |L137.78|
;;;1214   		}	
;;;1215   			send_modem("|");			
000074  4821              LDR      r0,|L137.252|
000076  f7fffffe          BL       send_modem
;;;1216    
;;;1217   									k2=0;									//string array counter for uart 1
00007a  2000              MOVS     r0,#0
00007c  4920              LDR      r1,|L137.256|
00007e  6008              STR      r0,[r1,#0]  ; k2
;;;1218   									time=19999;						//timer counts to wait for characters in uart 1 									
000080  4820              LDR      r0,|L137.260|
000082  4921              LDR      r1,|L137.264|
000084  6008              STR      r0,[r1,#0]  ; time
;;;1219   									while(!(strstr(uart_string_gsm,"OK\r\n")  ||  (time < 1)  ||(strstr(uart_string_gsm, "ERROR"))))
000086  e010              B        |L137.170|
                  |L137.136|
;;;1220   									{
;;;1221   									time--;
000088  481f              LDR      r0,|L137.264|
00008a  6800              LDR      r0,[r0,#0]  ; time
00008c  1e40              SUBS     r0,r0,#1
00008e  491e              LDR      r1,|L137.264|
000090  6008              STR      r0,[r1,#0]  ; time
;;;1222   									if(time % 2000 == 0)
000092  217d              MOVS     r1,#0x7d
000094  0109              LSLS     r1,r1,#4
000096  481c              LDR      r0,|L137.264|
000098  6800              LDR      r0,[r0,#0]  ; time
00009a  f7fffffe          BL       __aeabi_idivmod
00009e  2900              CMP      r1,#0
0000a0  d103              BNE      |L137.170|
;;;1223   										{
;;;1224   											//uart0_putchar(UART0_BASE_PTR,'1');
;;;1225   											uart_putchar(UART1_BASE_PTR,'\n');
0000a2  210a              MOVS     r1,#0xa
0000a4  4814              LDR      r0,|L137.248|
0000a6  f7fffffe          BL       uart_putchar
                  |L137.170|
0000aa  4918              LDR      r1,|L137.268|
0000ac  4818              LDR      r0,|L137.272|
0000ae  f7fffffe          BL       strstr
0000b2  2800              CMP      r0,#0                 ;1219
0000b4  d109              BNE      |L137.202|
0000b6  4814              LDR      r0,|L137.264|
0000b8  6800              LDR      r0,[r0,#0]            ;1219  ; time
0000ba  2801              CMP      r0,#1                 ;1219
0000bc  db05              BLT      |L137.202|
0000be  4915              LDR      r1,|L137.276|
0000c0  4813              LDR      r0,|L137.272|
0000c2  f7fffffe          BL       strstr
0000c6  2800              CMP      r0,#0                 ;1219
0000c8  d0de              BEQ      |L137.136|
                  |L137.202|
;;;1226   										}
;;;1227   	
;;;1228   									}
;;;1229   
;;;1230   }
0000ca  bd38              POP      {r3-r5,pc}
;;;1231   
                          ENDP

                  |L137.204|
                          DCD      tmeout
                  |L137.208|
                          DCD      ||.conststring||+0x10
                  |L137.212|
                          DCD      ||.conststring||+0x18
                  |L137.216|
                          DCD      ||.conststring||+0x2c
                  |L137.220|
                          DCD      ||.conststring||+0x278
                  |L137.224|
                          DCD      at_
                  |L137.228|
                          DCD      licenceplate
                  |L137.232|
                          DCD      ||.conststring||+0x298
                  |L137.236|
                          DCD      ||.conststring||+0x20
                  |L137.240|
                          DCD      ||.conststring||+0x2c0
                  |L137.244|
                          DCD      k
                  |L137.248|
                          DCD      0x4006b000
                  |L137.252|
                          DCD      ||.conststring||+0xdc
                  |L137.256|
                          DCD      ||k2||
                  |L137.260|
                          DCD      0x00004e1f
                  |L137.264|
                          DCD      time
                  |L137.268|
                          DCD      ||.conststring||+0x70
                  |L137.272|
                          DCD      uart_string_gsm
                  |L137.276|
                          DCD      ||.conststring||+0xe0

                          AREA ||i.msg_sim800||, COMGROUP=msg_sim800, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  msg_sim800 PROC
;;;1717   
;;;1718   __inline void msg_sim800() 
000000  b51f              PUSH     {r0-r4,lr}
;;;1719   {
;;;1720   		cond1=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L144.1024|
000006  6008              STR      r0,[r1,#0]  ; cond1
;;;1721   		cond2=0;
000008  49fe              LDR      r1,|L144.1028|
00000a  6008              STR      r0,[r1,#0]  ; cond2
;;;1722   		cond3=0;
00000c  49fe              LDR      r1,|L144.1032|
00000e  6008              STR      r0,[r1,#0]  ; cond3
;;;1723   		cond4=0;
000010  49fe              LDR      r1,|L144.1036|
000012  6008              STR      r0,[r1,#0]  ; cond4
;;;1724   		cond5=0;
000014  49fe              LDR      r1,|L144.1040|
000016  6008              STR      r0,[r1,#0]  ; cond5
;;;1725   		cond6=0;
000018  49fe              LDR      r1,|L144.1044|
00001a  6008              STR      r0,[r1,#0]  ; cond6
;;;1726   		cond7=0;
00001c  49fe              LDR      r1,|L144.1048|
00001e  6008              STR      r0,[r1,#0]  ; cond7
;;;1727   		cond8=0;
000020  49fe              LDR      r1,|L144.1052|
000022  6008              STR      r0,[r1,#0]  ; cond8
;;;1728   		cond9=0;
000024  49fe              LDR      r1,|L144.1056|
000026  6008              STR      r0,[r1,#0]  ; cond9
;;;1729   		cond10=0;
000028  49fe              LDR      r1,|L144.1060|
00002a  6008              STR      r0,[r1,#0]  ; cond10
;;;1730   		cond11=0;
00002c  49fe              LDR      r1,|L144.1064|
00002e  6008              STR      r0,[r1,#0]  ; cond11
;;;1731   		cond12=0;
000030  49fe              LDR      r1,|L144.1068|
000032  6008              STR      r0,[r1,#0]  ; cond12
;;;1732   		cond13=0;
000034  49fe              LDR      r1,|L144.1072|
000036  6008              STR      r0,[r1,#0]  ; cond13
;;;1733   		cond14=0;
000038  49fe              LDR      r1,|L144.1076|
00003a  6008              STR      r0,[r1,#0]  ; cond14
;;;1734   		cond15=0;		
00003c  49fe              LDR      r1,|L144.1080|
00003e  6008              STR      r0,[r1,#0]  ; cond15
;;;1735   		cond16=0;
000040  49fe              LDR      r1,|L144.1084|
000042  6008              STR      r0,[r1,#0]  ; cond16
;;;1736   //ringflag=1;	
;;;1737   	if(ringflag==1 )
000044  48fe              LDR      r0,|L144.1088|
000046  7800              LDRB     r0,[r0,#0]  ; ringflag
000048  2801              CMP      r0,#1
00004a  d17d              BNE      |L144.328|
;;;1738   	{
;;;1739   		sleep_flag=0;
00004c  2000              MOVS     r0,#0
00004e  49fd              LDR      r1,|L144.1092|
000050  6008              STR      r0,[r1,#0]  ; sleep_flag
;;;1740       DTR_OFF;		// not sleep	
000052  2080              MOVS     r0,#0x80
000054  49fc              LDR      r1,|L144.1096|
000056  6088              STR      r0,[r1,#8]
;;;1741   
;;;1742   delay(1000);
000058  207d              MOVS     r0,#0x7d
00005a  00c0              LSLS     r0,r0,#3
00005c  f7fffffe          BL       delay
;;;1743   send_GSM("\n\nAT\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    
000060  48fa              LDR      r0,|L144.1100|
000062  6800              LDR      r0,[r0,#0]  ; tmeout
000064  4bfa              LDR      r3,|L144.1104|
000066  4afb              LDR      r2,|L144.1108|
000068  49fb              LDR      r1,|L144.1112|
00006a  9000              STR      r0,[sp,#0]
00006c  48fb              LDR      r0,|L144.1116|
00006e  f7fffffe          BL       send_GSM
;;;1744   		
;;;1745   send_GSM("\n\nAT+GSV\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);  		
000072  48f6              LDR      r0,|L144.1100|
000074  6800              LDR      r0,[r0,#0]  ; tmeout
000076  4bf6              LDR      r3,|L144.1104|
000078  4af6              LDR      r2,|L144.1108|
00007a  49f7              LDR      r1,|L144.1112|
00007c  9000              STR      r0,[sp,#0]
00007e  48f8              LDR      r0,|L144.1120|
000080  f7fffffe          BL       send_GSM
;;;1746   delay(1000);		
000084  207d              MOVS     r0,#0x7d
000086  00c0              LSLS     r0,r0,#3
000088  f7fffffe          BL       delay
;;;1747   		
;;;1748   
;;;1749   	send_GSM("\n\nAT+CMGF=1\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
00008c  48ef              LDR      r0,|L144.1100|
00008e  6800              LDR      r0,[r0,#0]  ; tmeout
000090  4bef              LDR      r3,|L144.1104|
000092  4af0              LDR      r2,|L144.1108|
000094  49f0              LDR      r1,|L144.1112|
000096  9000              STR      r0,[sp,#0]
000098  48f2              LDR      r0,|L144.1124|
00009a  f7fffffe          BL       send_GSM
;;;1750   	send_GSM("\n\nAT+CSCA?\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);    //   uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);uart_putchar(UART1_BASE_PTR,0xA);uart_putchar(UART1_BASE_PTR,0x1A);		
00009e  48eb              LDR      r0,|L144.1100|
0000a0  6800              LDR      r0,[r0,#0]  ; tmeout
0000a2  4beb              LDR      r3,|L144.1104|
0000a4  4aeb              LDR      r2,|L144.1108|
0000a6  49ec              LDR      r1,|L144.1112|
0000a8  9000              STR      r0,[sp,#0]
0000aa  48ef              LDR      r0,|L144.1128|
0000ac  f7fffffe          BL       send_GSM
;;;1751   
;;;1752   					send_GSM("\r\nAT+CMGR=1\r\n", "OK\r\n", "ERROR" , "OK\r\n",tmeout);	
0000b0  48e6              LDR      r0,|L144.1100|
0000b2  6800              LDR      r0,[r0,#0]  ; tmeout
0000b4  4be8              LDR      r3,|L144.1112|
0000b6  4aed              LDR      r2,|L144.1132|
0000b8  4619              MOV      r1,r3
0000ba  9000              STR      r0,[sp,#0]
0000bc  48ec              LDR      r0,|L144.1136|
0000be  f7fffffe          BL       send_GSM
;;;1753   					clear();
0000c2  f7fffffe          BL       clear
;;;1754   					memset(num2,0,30);
0000c6  211e              MOVS     r1,#0x1e
0000c8  48ea              LDR      r0,|L144.1140|
0000ca  f7fffffe          BL       __aeabi_memclr
;;;1755   					parse_gsm(uart_string_gsm, 3, 4, num2);
0000ce  4be9              LDR      r3,|L144.1140|
0000d0  2204              MOVS     r2,#4
0000d2  2103              MOVS     r1,#3
0000d4  48e8              LDR      r0,|L144.1144|
0000d6  f7fffffe          BL       parse_gsm
;;;1756   			
;;;1757   						cond1=strstr(uart_string_gsm, "OWNER");	
0000da  49e8              LDR      r1,|L144.1148|
0000dc  48e6              LDR      r0,|L144.1144|
0000de  f7fffffe          BL       strstr
0000e2  49c7              LDR      r1,|L144.1024|
0000e4  6008              STR      r0,[r1,#0]  ; cond1
;;;1758   						cond2=strstr(uart_string_gsm, "LOCATION");
0000e6  49e6              LDR      r1,|L144.1152|
0000e8  48e3              LDR      r0,|L144.1144|
0000ea  f7fffffe          BL       strstr
0000ee  49c5              LDR      r1,|L144.1028|
0000f0  6008              STR      r0,[r1,#0]  ; cond2
;;;1759   						cond3=strstr(uart_string_gsm, "INTERVAL_");
0000f2  49e4              LDR      r1,|L144.1156|
0000f4  48e0              LDR      r0,|L144.1144|
0000f6  f7fffffe          BL       strstr
0000fa  49c3              LDR      r1,|L144.1032|
0000fc  6008              STR      r0,[r1,#0]  ; cond3
;;;1760   						cond4=strstr(uart_string_gsm, "START");
0000fe  49e2              LDR      r1,|L144.1160|
000100  48dd              LDR      r0,|L144.1144|
000102  f7fffffe          BL       strstr
000106  49c1              LDR      r1,|L144.1036|
000108  6008              STR      r0,[r1,#0]  ; cond4
;;;1761   						cond5=strstr(uart_string_gsm, "OWNER1");
00010a  49e0              LDR      r1,|L144.1164|
00010c  48da              LDR      r0,|L144.1144|
00010e  f7fffffe          BL       strstr
000112  49bf              LDR      r1,|L144.1040|
000114  6008              STR      r0,[r1,#0]  ; cond5
;;;1762   						cond6=strstr(uart_string_gsm, "OWNER2");
000116  49de              LDR      r1,|L144.1168|
000118  48d7              LDR      r0,|L144.1144|
00011a  f7fffffe          BL       strstr
00011e  49bd              LDR      r1,|L144.1044|
000120  6008              STR      r0,[r1,#0]  ; cond6
;;;1763   						cond7=strstr(uart_string_gsm, "OWNER3");
000122  49dc              LDR      r1,|L144.1172|
000124  48d4              LDR      r0,|L144.1144|
000126  f7fffffe          BL       strstr
00012a  49bb              LDR      r1,|L144.1048|
00012c  6008              STR      r0,[r1,#0]  ; cond7
;;;1764   						cond8=strstr(uart_string_gsm, "DEBUG");
00012e  49da              LDR      r1,|L144.1176|
000130  48d1              LDR      r0,|L144.1144|
000132  f7fffffe          BL       strstr
000136  49b9              LDR      r1,|L144.1052|
000138  6008              STR      r0,[r1,#0]  ; cond8
;;;1765   						cond9=strstr(uart_string_gsm, "RESET");
00013a  49d8              LDR      r1,|L144.1180|
00013c  48ce              LDR      r0,|L144.1144|
00013e  f7fffffe          BL       strstr
000142  49b7              LDR      r1,|L144.1056|
000144  6008              STR      r0,[r1,#0]  ; cond9
;;;1766   						cond10=strstr(uart_string_gsm, "IP");
000146  e000              B        |L144.330|
                  |L144.328|
000148  e3d8              B        |L144.2300|
                  |L144.330|
00014a  49d5              LDR      r1,|L144.1184|
00014c  48ca              LDR      r0,|L144.1144|
00014e  f7fffffe          BL       strstr
000152  49b4              LDR      r1,|L144.1060|
000154  6008              STR      r0,[r1,#0]  ; cond10
;;;1767   						cond11=strstr(uart_string_gsm, "SUOWNER");	
000156  49d3              LDR      r1,|L144.1188|
000158  48c7              LDR      r0,|L144.1144|
00015a  f7fffffe          BL       strstr
00015e  49b2              LDR      r1,|L144.1064|
000160  6008              STR      r0,[r1,#0]  ; cond11
;;;1768   						cond12=strstr(uart_string_gsm, "SOWNER");	
000162  49d1              LDR      r1,|L144.1192|
000164  48c4              LDR      r0,|L144.1144|
000166  f7fffffe          BL       strstr
00016a  49b0              LDR      r1,|L144.1068|
00016c  6008              STR      r0,[r1,#0]  ; cond12
;;;1769   						cond13=strstr(uart_string_gsm, "IGNITION ON");	
00016e  49cf              LDR      r1,|L144.1196|
000170  48c1              LDR      r0,|L144.1144|
000172  f7fffffe          BL       strstr
000176  49ae              LDR      r1,|L144.1072|
000178  6008              STR      r0,[r1,#0]  ; cond13
;;;1770   						cond14=strstr(uart_string_gsm, "IGNITION OFF");	
00017a  49cd              LDR      r1,|L144.1200|
00017c  48be              LDR      r0,|L144.1144|
00017e  f7fffffe          BL       strstr
000182  49ac              LDR      r1,|L144.1076|
000184  6008              STR      r0,[r1,#0]  ; cond14
;;;1771   						cond15=strstr(uart_string_gsm, "IGNSTAT");
000186  49cb              LDR      r1,|L144.1204|
000188  48bb              LDR      r0,|L144.1144|
00018a  f7fffffe          BL       strstr
00018e  49aa              LDR      r1,|L144.1080|
000190  6008              STR      r0,[r1,#0]  ; cond15
;;;1772   						cond16=strstr(uart_string_gsm, "LICPLATE");
000192  49c9              LDR      r1,|L144.1208|
000194  48b8              LDR      r0,|L144.1144|
000196  f7fffffe          BL       strstr
00019a  49a8              LDR      r1,|L144.1084|
00019c  6008              STR      r0,[r1,#0]  ; cond16
;;;1773   
;;;1774   							if(send_SOS==1){
00019e  48c7              LDR      r0,|L144.1212|
0001a0  6800              LDR      r0,[r0,#0]  ; send_SOS
0001a2  2801              CMP      r0,#1
0001a4  d14e              BNE      |L144.580|
;;;1775   										
;;;1776   
;;;1777   								
;;;1778   								memset(data2,0,300);
0001a6  21ff              MOVS     r1,#0xff
0001a8  312d              ADDS     r1,r1,#0x2d
0001aa  48c5              LDR      r0,|L144.1216|
0001ac  f7fffffe          BL       __aeabi_memclr
;;;1779   								sprintf(data2,"\nThere is an Emergency please help:\nCoordinates:%sN,%sE\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,lati,'%',longi);	
0001b0  48c4              LDR      r0,|L144.1220|
0001b2  2125              MOVS     r1,#0x25
0001b4  4ac4              LDR      r2,|L144.1224|
0001b6  4603              MOV      r3,r0
0001b8  9200              STR      r2,[sp,#0]
0001ba  9101              STR      r1,[sp,#4]
0001bc  9002              STR      r0,[sp,#8]
0001be  49c3              LDR      r1,|L144.1228|
0001c0  48bf              LDR      r0,|L144.1216|
0001c2  f7fffffe          BL       __2sprintf
;;;1780   								memset(num2,0,30);
0001c6  211e              MOVS     r1,#0x1e
0001c8  48aa              LDR      r0,|L144.1140|
0001ca  f7fffffe          BL       __aeabi_memclr
;;;1781   								send_GSM("\r\nAT+CPBR=1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0001ce  489f              LDR      r0,|L144.1100|
0001d0  6800              LDR      r0,[r0,#0]  ; tmeout
0001d2  4b9f              LDR      r3,|L144.1104|
0001d4  4a9f              LDR      r2,|L144.1108|
0001d6  49a0              LDR      r1,|L144.1112|
0001d8  9000              STR      r0,[sp,#0]
0001da  48bd              LDR      r0,|L144.1232|
0001dc  f7fffffe          BL       send_GSM
;;;1782   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);										
0001e0  48a4              LDR      r0,|L144.1140|
0001e2  2122              MOVS     r1,#0x22
0001e4  460b              MOV      r3,r1
0001e6  2202              MOVS     r2,#2
0001e8  9100              STR      r1,[sp,#0]
0001ea  9001              STR      r0,[sp,#4]
0001ec  2101              MOVS     r1,#1
0001ee  48a2              LDR      r0,|L144.1144|
0001f0  f7fffffe          BL       parse_g
;;;1783   								send_message(data2);
0001f4  48b2              LDR      r0,|L144.1216|
0001f6  f7fffffe          BL       send_message
;;;1784   								memset(num2,0,30);
0001fa  211e              MOVS     r1,#0x1e
0001fc  489d              LDR      r0,|L144.1140|
0001fe  f7fffffe          BL       __aeabi_memclr
;;;1785   								send_GSM("\r\nAT+CPBR=2\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000202  4892              LDR      r0,|L144.1100|
000204  6800              LDR      r0,[r0,#0]  ; tmeout
000206  4b92              LDR      r3,|L144.1104|
000208  4a92              LDR      r2,|L144.1108|
00020a  4993              LDR      r1,|L144.1112|
00020c  9000              STR      r0,[sp,#0]
00020e  48b1              LDR      r0,|L144.1236|
000210  f7fffffe          BL       send_GSM
;;;1786   								parse_g(uart_string_gsm, 1, 2, '"', '"', num2);					
000214  4897              LDR      r0,|L144.1140|
000216  2122              MOVS     r1,#0x22
000218  460b              MOV      r3,r1
00021a  2202              MOVS     r2,#2
00021c  9100              STR      r1,[sp,#0]
00021e  9001              STR      r0,[sp,#4]
000220  2101              MOVS     r1,#1
000222  4895              LDR      r0,|L144.1144|
000224  f7fffffe          BL       parse_g
;;;1787   								emergency = '1';
000228  2031              MOVS     r0,#0x31
00022a  49ab              LDR      r1,|L144.1240|
00022c  7008              STRB     r0,[r1,#0]
;;;1788   								emergencytimer = emergencyinterval;
00022e  48ab              LDR      r0,|L144.1244|
000230  6800              LDR      r0,[r0,#0]  ; emergencyinterval
000232  49ab              LDR      r1,|L144.1248|
000234  6008              STR      r0,[r1,#0]  ; emergencytimer
;;;1789   								send_message(data2);								
000236  48a2              LDR      r0,|L144.1216|
000238  f7fffffe          BL       send_message
;;;1790   								send_SOS=0;
00023c  2000              MOVS     r0,#0
00023e  499f              LDR      r1,|L144.1212|
000240  6008              STR      r0,[r1,#0]  ; send_SOS
                  |L144.578|
000242  e1ff              B        |L144.1604|
                  |L144.580|
;;;1791   							}
;;;1792   							else if(cond1 && cond2)
000244  486e              LDR      r0,|L144.1024|
000246  6800              LDR      r0,[r0,#0]  ; cond1
000248  2800              CMP      r0,#0
00024a  d022              BEQ      |L144.658|
00024c  486d              LDR      r0,|L144.1028|
00024e  6800              LDR      r0,[r0,#0]  ; cond2
000250  2800              CMP      r0,#0
000252  d01e              BEQ      |L144.658|
;;;1793   							{
;;;1794   								memset(data2,0,300);
000254  21ff              MOVS     r1,#0xff
000256  312d              ADDS     r1,r1,#0x2d
000258  4899              LDR      r0,|L144.1216|
00025a  f7fffffe          BL       __aeabi_memclr
;;;1795   								sprintf(data2,"\nCoordinates : %s N, %s E\nSpeed : %s kmph\n\nhttps://www.google.com/search?q=%s%c2C%s&ie=utf-8&oe=utf-8\n",lati,longi,velocity,lati,'%',longi);	
00025e  4999              LDR      r1,|L144.1220|
000260  2025              MOVS     r0,#0x25
000262  4a99              LDR      r2,|L144.1224|
000264  4b9f              LDR      r3,|L144.1252|
000266  9300              STR      r3,[sp,#0]
000268  9201              STR      r2,[sp,#4]
00026a  9103              STR      r1,[sp,#0xc]
00026c  9002              STR      r0,[sp,#8]
00026e  460b              MOV      r3,r1
000270  499d              LDR      r1,|L144.1256|
000272  4893              LDR      r0,|L144.1216|
000274  f7fffffe          BL       __2sprintf
;;;1796   
;;;1797   								{send_message(data2);}
000278  4891              LDR      r0,|L144.1216|
00027a  f7fffffe          BL       send_message
;;;1798   
;;;1799   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
00027e  4873              LDR      r0,|L144.1100|
000280  6800              LDR      r0,[r0,#0]  ; tmeout
000282  4b73              LDR      r3,|L144.1104|
000284  4a73              LDR      r2,|L144.1108|
000286  4974              LDR      r1,|L144.1112|
000288  9000              STR      r0,[sp,#0]
00028a  4898              LDR      r0,|L144.1260|
00028c  f7fffffe          BL       send_GSM
000290  e7d7              B        |L144.578|
                  |L144.658|
;;;1800   								
;;;1801   								
;;;1802   							}
;;;1803   							else if(cond12 && cond16)
000292  4866              LDR      r0,|L144.1068|
000294  6800              LDR      r0,[r0,#0]  ; cond12
000296  2800              CMP      r0,#0
000298  d021              BEQ      |L144.734|
00029a  4868              LDR      r0,|L144.1084|
00029c  6800              LDR      r0,[r0,#0]  ; cond16
00029e  2800              CMP      r0,#0
0002a0  d01d              BEQ      |L144.734|
;;;1804   							{
;;;1805   
;;;1806   								
;;;1807   								memset(at_,0,100);
0002a2  2164              MOVS     r1,#0x64
0002a4  4892              LDR      r0,|L144.1264|
0002a6  f7fffffe          BL       __aeabi_memclr
;;;1808   								memset(licenceplate,0,15);
0002aa  210f              MOVS     r1,#0xf
0002ac  4891              LDR      r0,|L144.1268|
0002ae  f7fffffe          BL       __aeabi_memclr
;;;1809   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', licenceplate);		
0002b2  4890              LDR      r0,|L144.1268|
0002b4  210d              MOVS     r1,#0xd
0002b6  2320              MOVS     r3,#0x20
0002b8  2205              MOVS     r2,#5
0002ba  9100              STR      r1,[sp,#0]
0002bc  9001              STR      r0,[sp,#4]
0002be  2103              MOVS     r1,#3
0002c0  486d              LDR      r0,|L144.1144|
0002c2  f7fffffe          BL       parse_g
;;;1810   								save_licenceplate();			
0002c6  f7fffffe          BL       save_licenceplate
;;;1811   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0002ca  4860              LDR      r0,|L144.1100|
0002cc  6800              LDR      r0,[r0,#0]  ; tmeout
0002ce  4b60              LDR      r3,|L144.1104|
0002d0  4a60              LDR      r2,|L144.1108|
0002d2  4961              LDR      r1,|L144.1112|
0002d4  9000              STR      r0,[sp,#0]
0002d6  4885              LDR      r0,|L144.1260|
0002d8  f7fffffe          BL       send_GSM
0002dc  e7b1              B        |L144.578|
                  |L144.734|
;;;1812   								
;;;1813   								
;;;1814   								
;;;1815   							}	
;;;1816   							else if(cond1 && cond3)
0002de  4848              LDR      r0,|L144.1024|
0002e0  6800              LDR      r0,[r0,#0]  ; cond1
0002e2  2800              CMP      r0,#0
0002e4  d026              BEQ      |L144.820|
0002e6  4848              LDR      r0,|L144.1032|
0002e8  6800              LDR      r0,[r0,#0]  ; cond3
0002ea  2800              CMP      r0,#0
0002ec  d022              BEQ      |L144.820|
;;;1817   							{
;;;1818   								memset(at_,0,100);
0002ee  2164              MOVS     r1,#0x64
0002f0  487f              LDR      r0,|L144.1264|
0002f2  f7fffffe          BL       __aeabi_memclr
;;;1819   								memset(interval,0,5);
0002f6  2105              MOVS     r1,#5
0002f8  487f              LDR      r0,|L144.1272|
0002fa  f7fffffe          BL       __aeabi_memclr
;;;1820   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', interval);		
0002fe  487e              LDR      r0,|L144.1272|
000300  210d              MOVS     r1,#0xd
000302  2320              MOVS     r3,#0x20
000304  2205              MOVS     r2,#5
000306  9100              STR      r1,[sp,#0]
000308  9001              STR      r0,[sp,#4]
00030a  2103              MOVS     r1,#3
00030c  485a              LDR      r0,|L144.1144|
00030e  f7fffffe          BL       parse_g
;;;1821   								int_erval=myAtoi(interval);
000312  4879              LDR      r0,|L144.1272|
000314  f7fffffe          BL       myAtoi
000318  4978              LDR      r1,|L144.1276|
00031a  6008              STR      r0,[r1,#0]  ; int_erval
;;;1822   								save_interval();			
00031c  f7fffffe          BL       save_interval
;;;1823   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000320  484a              LDR      r0,|L144.1100|
000322  6800              LDR      r0,[r0,#0]  ; tmeout
000324  4b4a              LDR      r3,|L144.1104|
000326  4a4b              LDR      r2,|L144.1108|
000328  494b              LDR      r1,|L144.1112|
00032a  9000              STR      r0,[sp,#0]
00032c  486f              LDR      r0,|L144.1260|
00032e  f7fffffe          BL       send_GSM
000332  e786              B        |L144.578|
                  |L144.820|
;;;1824   
;;;1825   								
;;;1826   							}				
;;;1827   
;;;1828   						else if(cond8)
000334  4839              LDR      r0,|L144.1052|
000336  6800              LDR      r0,[r0,#0]  ; cond8
000338  2800              CMP      r0,#0
00033a  d05f              BEQ      |L144.1020|
;;;1829   							{
;;;1830   								
;;;1831   									memset(at_,0,100);
00033c  2164              MOVS     r1,#0x64
00033e  486c              LDR      r0,|L144.1264|
000340  f7fffffe          BL       __aeabi_memclr
;;;1832   									for(k=0;k<450;k++)
000344  2000              MOVS     r0,#0
000346  496e              LDR      r1,|L144.1280|
000348  6008              STR      r0,[r1,#0]  ; k
00034a  e04e              B        |L144.1002|
                  |L144.844|
;;;1833   									{
;;;1834   										if(uart_string_gsm[k-1] == ' ' && uart_string_gsm[k-2] == 'G' && uart_string_gsm[k-3] == 'U'
00034c  486c              LDR      r0,|L144.1280|
00034e  6800              LDR      r0,[r0,#0]  ; k
000350  1e40              SUBS     r0,r0,#1
000352  4949              LDR      r1,|L144.1144|
000354  5c08              LDRB     r0,[r1,r0]
000356  2820              CMP      r0,#0x20
000358  d142              BNE      |L144.992|
00035a  4869              LDR      r0,|L144.1280|
00035c  6800              LDR      r0,[r0,#0]  ; k
00035e  1e80              SUBS     r0,r0,#2
000360  5c08              LDRB     r0,[r1,r0]
000362  2847              CMP      r0,#0x47
000364  d13c              BNE      |L144.992|
000366  4866              LDR      r0,|L144.1280|
000368  6800              LDR      r0,[r0,#0]  ; k
00036a  1ec0              SUBS     r0,r0,#3
00036c  5c08              LDRB     r0,[r1,r0]
00036e  2855              CMP      r0,#0x55
000370  d136              BNE      |L144.992|
;;;1835   										&& uart_string_gsm[k-4] == 'B' && uart_string_gsm[k-5] == 'E' && uart_string_gsm[k-6] == 'D')
000372  4863              LDR      r0,|L144.1280|
000374  6800              LDR      r0,[r0,#0]  ; k
000376  1f00              SUBS     r0,r0,#4
000378  5c08              LDRB     r0,[r1,r0]
00037a  2842              CMP      r0,#0x42
00037c  d130              BNE      |L144.992|
00037e  4860              LDR      r0,|L144.1280|
000380  6800              LDR      r0,[r0,#0]  ; k
000382  1f40              SUBS     r0,r0,#5
000384  5c08              LDRB     r0,[r1,r0]
000386  2845              CMP      r0,#0x45
000388  d12a              BNE      |L144.992|
00038a  485d              LDR      r0,|L144.1280|
00038c  6800              LDR      r0,[r0,#0]  ; k
00038e  1f80              SUBS     r0,r0,#6
000390  5c08              LDRB     r0,[r1,r0]
000392  2844              CMP      r0,#0x44
000394  d124              BNE      |L144.992|
;;;1836   										{
;;;1837   											for(i=0;i<100;i++)
000396  2000              MOVS     r0,#0
000398  495a              LDR      r1,|L144.1284|
00039a  6008              STR      r0,[r1,#0]  ; i
00039c  e011              B        |L144.962|
                  |L144.926|
;;;1838   											{
;;;1839   												at_[i]=uart_string_gsm[k];
00039e  4836              LDR      r0,|L144.1144|
0003a0  4957              LDR      r1,|L144.1280|
0003a2  6809              LDR      r1,[r1,#0]  ; k
0003a4  5c40              LDRB     r0,[r0,r1]
0003a6  4952              LDR      r1,|L144.1264|
0003a8  4a56              LDR      r2,|L144.1284|
0003aa  6812              LDR      r2,[r2,#0]  ; i
0003ac  5488              STRB     r0,[r1,r2]
;;;1840   												k++;
0003ae  4854              LDR      r0,|L144.1280|
0003b0  6800              LDR      r0,[r0,#0]  ; k
0003b2  1c40              ADDS     r0,r0,#1
0003b4  4952              LDR      r1,|L144.1280|
0003b6  6008              STR      r0,[r1,#0]  ; k
0003b8  4852              LDR      r0,|L144.1284|
0003ba  6800              LDR      r0,[r0,#0]            ;1837  ; i
0003bc  1c40              ADDS     r0,r0,#1              ;1837
0003be  4951              LDR      r1,|L144.1284|
0003c0  6008              STR      r0,[r1,#0]            ;1837  ; i
                  |L144.962|
0003c2  4850              LDR      r0,|L144.1284|
0003c4  6800              LDR      r0,[r0,#0]            ;1837  ; i
0003c6  2864              CMP      r0,#0x64              ;1837
0003c8  dbe9              BLT      |L144.926|
;;;1841   											}	
;;;1842   										at_[i+1]='\r';
0003ca  210d              MOVS     r1,#0xd
0003cc  4a48              LDR      r2,|L144.1264|
0003ce  484d              LDR      r0,|L144.1284|
0003d0  6800              LDR      r0,[r0,#0]  ; i
0003d2  1c40              ADDS     r0,r0,#1
0003d4  5411              STRB     r1,[r2,r0]
;;;1843   										at_[i+2]='\n';	
0003d6  210a              MOVS     r1,#0xa
0003d8  484a              LDR      r0,|L144.1284|
0003da  6800              LDR      r0,[r0,#0]  ; i
0003dc  1c80              ADDS     r0,r0,#2
0003de  5411              STRB     r1,[r2,r0]
                  |L144.992|
0003e0  4847              LDR      r0,|L144.1280|
0003e2  6800              LDR      r0,[r0,#0]            ;1832  ; k
0003e4  1c40              ADDS     r0,r0,#1              ;1832
0003e6  4946              LDR      r1,|L144.1280|
0003e8  6008              STR      r0,[r1,#0]            ;1832  ; k
                  |L144.1002|
0003ea  4845              LDR      r0,|L144.1280|
0003ec  6800              LDR      r0,[r0,#0]            ;1832  ; k
0003ee  21ff              MOVS     r1,#0xff              ;1832
0003f0  31c3              ADDS     r1,r1,#0xc3           ;1832
0003f2  4288              CMP      r0,r1                 ;1832
0003f4  dbaa              BLT      |L144.844|
;;;1844   										}
;;;1845   										else{}
;;;1846   									}
;;;1847   									
;;;1848   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
0003f6  4815              LDR      r0,|L144.1100|
0003f8  6800              LDR      r0,[r0,#0]  ; tmeout
0003fa  e085              B        |L144.1288|
                  |L144.1020|
0003fc  e0a5              B        |L144.1354|
0003fe  0000              DCW      0x0000
                  |L144.1024|
                          DCD      cond1
                  |L144.1028|
                          DCD      cond2
                  |L144.1032|
                          DCD      cond3
                  |L144.1036|
                          DCD      cond4
                  |L144.1040|
                          DCD      cond5
                  |L144.1044|
                          DCD      cond6
                  |L144.1048|
                          DCD      cond7
                  |L144.1052|
                          DCD      cond8
                  |L144.1056|
                          DCD      cond9
                  |L144.1060|
                          DCD      cond10
                  |L144.1064|
                          DCD      cond11
                  |L144.1068|
                          DCD      cond12
                  |L144.1072|
                          DCD      cond13
                  |L144.1076|
                          DCD      cond14
                  |L144.1080|
                          DCD      cond15
                  |L144.1084|
                          DCD      cond16
                  |L144.1088|
                          DCD      ringflag
                  |L144.1092|
                          DCD      sleep_flag
                  |L144.1096|
                          DCD      0x400ff0c0
                  |L144.1100|
                          DCD      tmeout
                  |L144.1104|
                          DCD      ||.conststring||+0x10
                  |L144.1108|
                          DCD      ||.conststring||+0x18
                  |L144.1112|
                          DCD      ||.conststring||+0x70
                  |L144.1116|
                          DCD      ||.conststring||+0x2cc
                  |L144.1120|
                          DCD      ||.conststring||+0x2d4
                  |L144.1124|
                          DCD      ||.conststring||+0x2e0
                  |L144.1128|
                          DCD      ||.conststring||+0x2f0
                  |L144.1132|
                          DCD      ||.conststring||+0xe0
                  |L144.1136|
                          DCD      ||.conststring||+0x300
                  |L144.1140|
                          DCD      num2
                  |L144.1144|
                          DCD      uart_string_gsm
                  |L144.1148|
                          DCD      ||.conststring||+0x310
                  |L144.1152|
                          DCD      ||.conststring||+0x318
                  |L144.1156|
                          DCD      ||.conststring||+0x324
                  |L144.1160|
                          DCD      ||.conststring||+0x330
                  |L144.1164|
                          DCD      ||.conststring||+0x338
                  |L144.1168|
                          DCD      ||.conststring||+0x340
                  |L144.1172|
                          DCD      ||.conststring||+0x348
                  |L144.1176|
                          DCD      ||.conststring||+0x350
                  |L144.1180|
                          DCD      ||.conststring||+0x358
                  |L144.1184|
                          DCD      ||.conststring||+0x360
                  |L144.1188|
                          DCD      ||.conststring||+0x364
                  |L144.1192|
                          DCD      ||.conststring||+0x36c
                  |L144.1196|
                          DCD      ||.conststring||+0x374
                  |L144.1200|
                          DCD      ||.conststring||+0x380
                  |L144.1204|
                          DCD      ||.conststring||+0x390
                  |L144.1208|
                          DCD      ||.conststring||+0x398
                  |L144.1212|
                          DCD      send_SOS
                  |L144.1216|
                          DCD      data2
                  |L144.1220|
                          DCD      longi
                  |L144.1224|
                          DCD      lati
                  |L144.1228|
                          DCD      ||.conststring||+0x3a4
                  |L144.1232|
                          DCD      ||.conststring||+0x418
                  |L144.1236|
                          DCD      ||.conststring||+0x428
                  |L144.1240|
                          DCD      emergency
                  |L144.1244|
                          DCD      emergencyinterval
                  |L144.1248|
                          DCD      emergencytimer
                  |L144.1252|
                          DCD      velocity
                  |L144.1256|
                          DCD      ||.conststring||+0x438
                  |L144.1260|
                          DCD      ||.conststring||+0x4a0
                  |L144.1264|
                          DCD      at_
                  |L144.1268|
                          DCD      licenceplate
                  |L144.1272|
                          DCD      interval
                  |L144.1276|
                          DCD      int_erval
                  |L144.1280|
                          DCD      k
                  |L144.1284|
                          DCD      i
                  |L144.1288|
000508  4bfd              LDR      r3,|L144.2304|
00050a  4afe              LDR      r2,|L144.2308|
00050c  49fe              LDR      r1,|L144.2312|
00050e  9000              STR      r0,[sp,#0]
000510  48fe              LDR      r0,|L144.2316|
000512  f7fffffe          BL       send_GSM
;;;1849   									  send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);		
000516  48fe              LDR      r0,|L144.2320|
000518  6800              LDR      r0,[r0,#0]  ; tmeout
00051a  4bf9              LDR      r3,|L144.2304|
00051c  4af9              LDR      r2,|L144.2308|
00051e  49fa              LDR      r1,|L144.2312|
000520  9000              STR      r0,[sp,#0]
000522  48fc              LDR      r0,|L144.2324|
000524  f7fffffe          BL       send_GSM
;;;1850   										memset(data2,0,strlen(data2));
000528  48fb              LDR      r0,|L144.2328|
00052a  f7fffffe          BL       strlen
00052e  4604              MOV      r4,r0
000530  4621              MOV      r1,r4
000532  48f9              LDR      r0,|L144.2328|
000534  f7fffffe          BL       __aeabi_memclr
;;;1851   										sprintf(data2,"%s",uart_string_gsm);	
000538  4af8              LDR      r2,|L144.2332|
00053a  49f9              LDR      r1,|L144.2336|
00053c  48f6              LDR      r0,|L144.2328|
00053e  f7fffffe          BL       __2sprintf
;;;1852   										send_message(data2);
000542  48f5              LDR      r0,|L144.2328|
000544  f7fffffe          BL       send_message
000548  e67b              B        |L144.578|
                  |L144.1354|
;;;1853   										
;;;1854   									
;;;1855   								
;;;1856   							}
;;;1857   										
;;;1858   							else if(cond12 && cond4)
00054a  48f6              LDR      r0,|L144.2340|
00054c  6800              LDR      r0,[r0,#0]  ; cond12
00054e  2800              CMP      r0,#0
000550  d07a              BEQ      |L144.1608|
000552  48f5              LDR      r0,|L144.2344|
000554  6800              LDR      r0,[r0,#0]  ; cond4
000556  2800              CMP      r0,#0
000558  d076              BEQ      |L144.1608|
;;;1859   							{
;;;1860   								memset( apn,0,25);
00055a  2119              MOVS     r1,#0x19
00055c  48f3              LDR      r0,|L144.2348|
00055e  f7fffffe          BL       __aeabi_memclr
;;;1861   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', apn);			
000562  48f2              LDR      r0,|L144.2348|
000564  210d              MOVS     r1,#0xd
000566  2320              MOVS     r3,#0x20
000568  2205              MOVS     r2,#5
00056a  9100              STR      r1,[sp,#0]
00056c  9001              STR      r0,[sp,#4]
00056e  2103              MOVS     r1,#3
000570  48ea              LDR      r0,|L144.2332|
000572  f7fffffe          BL       parse_g
;;;1862   								saveapn();								
000576  f7fffffe          BL       saveapn
;;;1863   								send_GSM("\nAT+FSCREATE=C:\\IP_PORT.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00057a  48e5              LDR      r0,|L144.2320|
00057c  6800              LDR      r0,[r0,#0]  ; tmeout
00057e  4be0              LDR      r3,|L144.2304|
000580  4ae0              LDR      r2,|L144.2308|
000582  49eb              LDR      r1,|L144.2352|
000584  9000              STR      r0,[sp,#0]
000586  48eb              LDR      r0,|L144.2356|
000588  f7fffffe          BL       send_GSM
;;;1864   								send_GSM("\nAT+FSCREATE=D:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00058c  48e0              LDR      r0,|L144.2320|
00058e  6800              LDR      r0,[r0,#0]  ; tmeout
000590  4bdb              LDR      r3,|L144.2304|
000592  4adc              LDR      r2,|L144.2308|
000594  49e6              LDR      r1,|L144.2352|
000596  9000              STR      r0,[sp,#0]
000598  48e7              LDR      r0,|L144.2360|
00059a  f7fffffe          BL       send_GSM
;;;1865   								send_GSM("\nAT+FSCREATE=C:\\LOG.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
00059e  48dc              LDR      r0,|L144.2320|
0005a0  6800              LDR      r0,[r0,#0]  ; tmeout
0005a2  4bd7              LDR      r3,|L144.2304|
0005a4  4ad7              LDR      r2,|L144.2308|
0005a6  49e2              LDR      r1,|L144.2352|
0005a8  9000              STR      r0,[sp,#0]
0005aa  48e4              LDR      r0,|L144.2364|
0005ac  f7fffffe          BL       send_GSM
;;;1866   								send_GSM("\nAT+FSCREATE=C:\\INTERVAL.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
0005b0  48d7              LDR      r0,|L144.2320|
0005b2  6800              LDR      r0,[r0,#0]  ; tmeout
0005b4  4bd2              LDR      r3,|L144.2304|
0005b6  4ad3              LDR      r2,|L144.2308|
0005b8  49dd              LDR      r1,|L144.2352|
0005ba  9000              STR      r0,[sp,#0]
0005bc  48e0              LDR      r0,|L144.2368|
0005be  f7fffffe          BL       send_GSM
;;;1867   								send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
0005c2  48d3              LDR      r0,|L144.2320|
0005c4  6800              LDR      r0,[r0,#0]  ; tmeout
0005c6  4bce              LDR      r3,|L144.2304|
0005c8  4ace              LDR      r2,|L144.2308|
0005ca  49d9              LDR      r1,|L144.2352|
0005cc  9000              STR      r0,[sp,#0]
0005ce  48dd              LDR      r0,|L144.2372|
0005d0  f7fffffe          BL       send_GSM
;;;1868   
;;;1869   								memset(ip,0,100);
0005d4  2164              MOVS     r1,#0x64
0005d6  48dc              LDR      r0,|L144.2376|
0005d8  f7fffffe          BL       __aeabi_memclr
;;;1870   								memset(port,0,10);
0005dc  210a              MOVS     r1,#0xa
0005de  48db              LDR      r0,|L144.2380|
0005e0  f7fffffe          BL       __aeabi_memclr
;;;1871   								strcat (ip, "104.236.203.4");
0005e4  49da              LDR      r1,|L144.2384|
0005e6  48d8              LDR      r0,|L144.2376|
0005e8  f7fffffe          BL       strcat
;;;1872   								strcat (port, "5555");		
0005ec  49d9              LDR      r1,|L144.2388|
0005ee  48d7              LDR      r0,|L144.2380|
0005f0  f7fffffe          BL       strcat
;;;1873   								memcpy (interval, "5", 1);										
0005f4  48d8              LDR      r0,|L144.2392|
0005f6  49d9              LDR      r1,|L144.2396|
0005f8  7809              LDRB     r1,[r1,#0]
0005fa  7001              STRB     r1,[r0,#0]
;;;1874   								save_ip_port();
0005fc  f7fffffe          BL       save_ip_port
;;;1875   								ignstaton();
000600  f7fffffe          BL       ignstaton
;;;1876   
;;;1877   								save_interval();	
000604  f7fffffe          BL       save_interval
;;;1878   								int_erval=myAtoi(interval);		
000608  48d3              LDR      r0,|L144.2392|
00060a  f7fffffe          BL       myAtoi
00060e  49d4              LDR      r1,|L144.2400|
000610  6008              STR      r0,[r1,#0]  ; int_erval
;;;1879   								savecursord();
000612  f7fffffe          BL       savecursord
;;;1880   
;;;1881   			//					printf("\n\n\t,%s,%s,%s,\n",ip,port,interval);		
;;;1882   								
;;;1883   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000616  48be              LDR      r0,|L144.2320|
000618  6800              LDR      r0,[r0,#0]  ; tmeout
00061a  4bb9              LDR      r3,|L144.2304|
00061c  4ad1              LDR      r2,|L144.2404|
00061e  49c4              LDR      r1,|L144.2352|
000620  9000              STR      r0,[sp,#0]
000622  48d1              LDR      r0,|L144.2408|
000624  f7fffffe          BL       send_GSM
;;;1884   
;;;1885   								
;;;1886   								
;;;1887   RESET_OFF;
000628  2020              MOVS     r0,#0x20
00062a  49d0              LDR      r1,|L144.2412|
00062c  6088              STR      r0,[r1,#8]
;;;1888   	RESET_OFF;
00062e  6088              STR      r0,[r1,#8]
;;;1889   	delay(100);	
000630  2064              MOVS     r0,#0x64
000632  f7fffffe          BL       delay
;;;1890   	RESET_ON;
000636  2020              MOVS     r0,#0x20
000638  49cc              LDR      r1,|L144.2412|
00063a  6048              STR      r0,[r1,#4]
;;;1891   	RESET_ON;	
00063c  6048              STR      r0,[r1,#4]
;;;1892   	delay(100);
00063e  2064              MOVS     r0,#0x64
000640  f7fffffe          BL       delay
                  |L144.1604|
000644  e218              B        |L144.2680|
000646  e7ff              B        |L144.1608|
                  |L144.1608|
;;;1893   
;;;1894   								
;;;1895   								
;;;1896   							}
;;;1897   	
;;;1898   
;;;1899   							else if( cond1 && cond9)
000648  48c9              LDR      r0,|L144.2416|
00064a  6800              LDR      r0,[r0,#0]  ; cond1
00064c  2800              CMP      r0,#0
                  |L144.1614|
00064e  d07d              BEQ      |L144.1868|
000650  48c8              LDR      r0,|L144.2420|
000652  6800              LDR      r0,[r0,#0]  ; cond9
000654  2800              CMP      r0,#0
000656  d0fa              BEQ      |L144.1614|
;;;1900   							{
;;;1901   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000658  48ad              LDR      r0,|L144.2320|
00065a  6800              LDR      r0,[r0,#0]  ; tmeout
00065c  4ba8              LDR      r3,|L144.2304|
00065e  4aa9              LDR      r2,|L144.2308|
000660  49a9              LDR      r1,|L144.2312|
000662  9000              STR      r0,[sp,#0]
000664  48a9              LDR      r0,|L144.2316|
000666  f7fffffe          BL       send_GSM
;;;1902   
;;;1903   strcat(data,"\n");	
00066a  49c3              LDR      r1,|L144.2424|
00066c  48c3              LDR      r0,|L144.2428|
00066e  f7fffffe          BL       strcat
;;;1904   GPS_COLLECT();
000672  f7fffffe          BL       GPS_COLLECT
;;;1905   strreplace(data, ",L,", ",H,");	
000676  4ac2              LDR      r2,|L144.2432|
000678  49c2              LDR      r1,|L144.2436|
00067a  48c0              LDR      r0,|L144.2428|
00067c  f7fffffe          BL       strreplace
;;;1906   
;;;1907   								
;;;1908   
;;;1909   	delay(100);
000680  2064              MOVS     r0,#0x64
000682  f7fffffe          BL       delay
;;;1910   		clear();//memset(uart_string_gsm,0,5000);
000686  f7fffffe          BL       clear
;;;1911   	
;;;1912   	memset(at_,0,100);
00068a  2164              MOVS     r1,#0x64
00068c  48a1              LDR      r0,|L144.2324|
00068e  f7fffffe          BL       __aeabi_memclr
;;;1913   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000692  48ba              LDR      r0,|L144.2428|
000694  f7fffffe          BL       strlen
000698  1c44              ADDS     r4,r0,#1
00069a  4623              MOV      r3,r4
00069c  4aba              LDR      r2,|L144.2440|
00069e  49bb              LDR      r1,|L144.2444|
0006a0  489c              LDR      r0,|L144.2324|
0006a2  f7fffffe          BL       __2sprintf
;;;1914   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0006a6  2005              MOVS     r0,#5
0006a8  4bae              LDR      r3,|L144.2404|
0006aa  4a96              LDR      r2,|L144.2308|
0006ac  49b8              LDR      r1,|L144.2448|
0006ae  9000              STR      r0,[sp,#0]
0006b0  4898              LDR      r0,|L144.2324|
0006b2  f7fffffe          BL       send_SD
;;;1915   if(strstr(uart_string_gsm,"ERROR")){
0006b6  49ab              LDR      r1,|L144.2404|
0006b8  4898              LDR      r0,|L144.2332|
0006ba  f7fffffe          BL       strstr
0006be  2800              CMP      r0,#0
0006c0  d004              BEQ      |L144.1740|
;;;1916   	drive[0]='C';drive[1]=':';
0006c2  2043              MOVS     r0,#0x43
0006c4  49b0              LDR      r1,|L144.2440|
0006c6  7008              STRB     r0,[r1,#0]
0006c8  203a              MOVS     r0,#0x3a
0006ca  7048              STRB     r0,[r1,#1]
                  |L144.1740|
;;;1917   }	
;;;1918   clear();	
0006cc  f7fffffe          BL       clear
;;;1919   									k2=0;									//string array counter for uart 1
0006d0  2000              MOVS     r0,#0
0006d2  49b0              LDR      r1,|L144.2452|
0006d4  6008              STR      r0,[r1,#0]  ; k2
;;;1920   									tout=0;	
0006d6  49b0              LDR      r1,|L144.2456|
0006d8  6008              STR      r0,[r1,#0]  ; tout
;;;1921   		for(k=0;k<strlen(data);k++)
0006da  49b0              LDR      r1,|L144.2460|
0006dc  6008              STR      r0,[r1,#0]  ; k
0006de  e00b              B        |L144.1784|
                  |L144.1760|
;;;1922   		{
;;;1923   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0006e0  48a6              LDR      r0,|L144.2428|
0006e2  4aae              LDR      r2,|L144.2460|
0006e4  6812              LDR      r2,[r2,#0]  ; k
0006e6  5c81              LDRB     r1,[r0,r2]
0006e8  48ad              LDR      r0,|L144.2464|
0006ea  f7fffffe          BL       uart_putchar
0006ee  48ab              LDR      r0,|L144.2460|
0006f0  6800              LDR      r0,[r0,#0]            ;1921  ; k
0006f2  1c40              ADDS     r0,r0,#1              ;1921
0006f4  49a9              LDR      r1,|L144.2460|
0006f6  6008              STR      r0,[r1,#0]            ;1921  ; k
                  |L144.1784|
0006f8  48a0              LDR      r0,|L144.2428|
0006fa  f7fffffe          BL       strlen
0006fe  49a7              LDR      r1,|L144.2460|
000700  6809              LDR      r1,[r1,#0]            ;1921  ; k
000702  4288              CMP      r0,r1                 ;1921
000704  d8ec              BHI      |L144.1760|
;;;1924   		}	
;;;1925   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000706  210a              MOVS     r1,#0xa
000708  48a5              LDR      r0,|L144.2464|
00070a  f7fffffe          BL       uart_putchar
00070e  210a              MOVS     r1,#0xa
000710  48a3              LDR      r0,|L144.2464|
000712  f7fffffe          BL       uart_putchar
000716  210a              MOVS     r1,#0xa
000718  48a1              LDR      r0,|L144.2464|
00071a  f7fffffe          BL       uart_putchar
00071e  210a              MOVS     r1,#0xa
000720  489f              LDR      r0,|L144.2464|
000722  f7fffffe          BL       uart_putchar
000726  210a              MOVS     r1,#0xa
000728  489d              LDR      r0,|L144.2464|
00072a  f7fffffe          BL       uart_putchar
00072e  210a              MOVS     r1,#0xa
000730  489b              LDR      r0,|L144.2464|
000732  f7fffffe          BL       uart_putchar
000736  210a              MOVS     r1,#0xa
000738  4899              LDR      r0,|L144.2464|
00073a  f7fffffe          BL       uart_putchar
00073e  210a              MOVS     r1,#0xa
000740  4897              LDR      r0,|L144.2464|
000742  f7fffffe          BL       uart_putchar
000746  210a              MOVS     r1,#0xa
000748  4895              LDR      r0,|L144.2464|
00074a  e000              B        |L144.1870|
                  |L144.1868|
00074c  e149              B        |L144.2530|
                  |L144.1870|
00074e  f7fffffe          BL       uart_putchar
000752  210a              MOVS     r1,#0xa
000754  4892              LDR      r0,|L144.2464|
000756  f7fffffe          BL       uart_putchar
00075a  210a              MOVS     r1,#0xa
00075c  4890              LDR      r0,|L144.2464|
00075e  f7fffffe          BL       uart_putchar
000762  210a              MOVS     r1,#0xa
000764  488e              LDR      r0,|L144.2464|
000766  f7fffffe          BL       uart_putchar
00076a  210a              MOVS     r1,#0xa
00076c  488c              LDR      r0,|L144.2464|
00076e  f7fffffe          BL       uart_putchar
000772  210a              MOVS     r1,#0xa
000774  488a              LDR      r0,|L144.2464|
000776  f7fffffe          BL       uart_putchar
00077a  210a              MOVS     r1,#0xa
00077c  4888              LDR      r0,|L144.2464|
00077e  f7fffffe          BL       uart_putchar
000782  210a              MOVS     r1,#0xa
000784  4886              LDR      r0,|L144.2464|
000786  f7fffffe          BL       uart_putchar
00078a  210a              MOVS     r1,#0xa
00078c  4884              LDR      r0,|L144.2464|
00078e  f7fffffe          BL       uart_putchar
000792  210a              MOVS     r1,#0xa
000794  4882              LDR      r0,|L144.2464|
000796  f7fffffe          BL       uart_putchar
00079a  210a              MOVS     r1,#0xa
00079c  4880              LDR      r0,|L144.2464|
00079e  f7fffffe          BL       uart_putchar
0007a2  210a              MOVS     r1,#0xa
0007a4  487e              LDR      r0,|L144.2464|
0007a6  f7fffffe          BL       uart_putchar
0007aa  210a              MOVS     r1,#0xa
0007ac  487c              LDR      r0,|L144.2464|
0007ae  f7fffffe          BL       uart_putchar
0007b2  210a              MOVS     r1,#0xa
0007b4  487a              LDR      r0,|L144.2464|
0007b6  f7fffffe          BL       uart_putchar
0007ba  210a              MOVS     r1,#0xa
0007bc  4878              LDR      r0,|L144.2464|
0007be  f7fffffe          BL       uart_putchar
0007c2  210a              MOVS     r1,#0xa
0007c4  4876              LDR      r0,|L144.2464|
0007c6  f7fffffe          BL       uart_putchar
0007ca  210a              MOVS     r1,#0xa
0007cc  4874              LDR      r0,|L144.2464|
0007ce  f7fffffe          BL       uart_putchar
0007d2  210a              MOVS     r1,#0xa
0007d4  4872              LDR      r0,|L144.2464|
0007d6  f7fffffe          BL       uart_putchar
0007da  210a              MOVS     r1,#0xa
0007dc  4870              LDR      r0,|L144.2464|
0007de  f7fffffe          BL       uart_putchar
0007e2  210a              MOVS     r1,#0xa
0007e4  486e              LDR      r0,|L144.2464|
0007e6  f7fffffe          BL       uart_putchar
0007ea  210a              MOVS     r1,#0xa
0007ec  486c              LDR      r0,|L144.2464|
0007ee  f7fffffe          BL       uart_putchar
0007f2  210a              MOVS     r1,#0xa
0007f4  486a              LDR      r0,|L144.2464|
0007f6  f7fffffe          BL       uart_putchar
0007fa  210a              MOVS     r1,#0xa
0007fc  4868              LDR      r0,|L144.2464|
0007fe  f7fffffe          BL       uart_putchar
000802  210a              MOVS     r1,#0xa
000804  4866              LDR      r0,|L144.2464|
000806  f7fffffe          BL       uart_putchar
00080a  210a              MOVS     r1,#0xa
00080c  4864              LDR      r0,|L144.2464|
00080e  f7fffffe          BL       uart_putchar
000812  210a              MOVS     r1,#0xa
000814  4862              LDR      r0,|L144.2464|
000816  f7fffffe          BL       uart_putchar
00081a  210a              MOVS     r1,#0xa
00081c  4860              LDR      r0,|L144.2464|
00081e  f7fffffe          BL       uart_putchar
000822  210a              MOVS     r1,#0xa
000824  485e              LDR      r0,|L144.2464|
000826  f7fffffe          BL       uart_putchar
00082a  210a              MOVS     r1,#0xa
00082c  485c              LDR      r0,|L144.2464|
00082e  f7fffffe          BL       uart_putchar
000832  210a              MOVS     r1,#0xa
000834  485a              LDR      r0,|L144.2464|
000836  f7fffffe          BL       uart_putchar
00083a  210a              MOVS     r1,#0xa
00083c  4858              LDR      r0,|L144.2464|
00083e  f7fffffe          BL       uart_putchar
000842  210a              MOVS     r1,#0xa
000844  4856              LDR      r0,|L144.2464|
000846  f7fffffe          BL       uart_putchar
00084a  210a              MOVS     r1,#0xa
00084c  4854              LDR      r0,|L144.2464|
00084e  f7fffffe          BL       uart_putchar
000852  210a              MOVS     r1,#0xa
000854  4852              LDR      r0,|L144.2464|
000856  f7fffffe          BL       uart_putchar
00085a  210a              MOVS     r1,#0xa
00085c  4850              LDR      r0,|L144.2464|
00085e  f7fffffe          BL       uart_putchar
000862  210a              MOVS     r1,#0xa
000864  484e              LDR      r0,|L144.2464|
000866  f7fffffe          BL       uart_putchar
00086a  210a              MOVS     r1,#0xa
00086c  484c              LDR      r0,|L144.2464|
00086e  f7fffffe          BL       uart_putchar
000872  210a              MOVS     r1,#0xa
000874  484a              LDR      r0,|L144.2464|
000876  f7fffffe          BL       uart_putchar
00087a  210a              MOVS     r1,#0xa
00087c  4848              LDR      r0,|L144.2464|
00087e  f7fffffe          BL       uart_putchar
000882  210a              MOVS     r1,#0xa
000884  4846              LDR      r0,|L144.2464|
000886  f7fffffe          BL       uart_putchar
00088a  210a              MOVS     r1,#0xa
00088c  4844              LDR      r0,|L144.2464|
00088e  f7fffffe          BL       uart_putchar
000892  210a              MOVS     r1,#0xa
000894  4842              LDR      r0,|L144.2464|
000896  f7fffffe          BL       uart_putchar
00089a  210a              MOVS     r1,#0xa
00089c  4840              LDR      r0,|L144.2464|
00089e  f7fffffe          BL       uart_putchar
0008a2  210a              MOVS     r1,#0xa
0008a4  483e              LDR      r0,|L144.2464|
0008a6  f7fffffe          BL       uart_putchar
0008aa  210a              MOVS     r1,#0xa
0008ac  483c              LDR      r0,|L144.2464|
0008ae  f7fffffe          BL       uart_putchar
0008b2  210a              MOVS     r1,#0xa
0008b4  483a              LDR      r0,|L144.2464|
0008b6  f7fffffe          BL       uart_putchar
0008ba  210a              MOVS     r1,#0xa
0008bc  4838              LDR      r0,|L144.2464|
0008be  f7fffffe          BL       uart_putchar
0008c2  210a              MOVS     r1,#0xa
0008c4  4836              LDR      r0,|L144.2464|
0008c6  f7fffffe          BL       uart_putchar
0008ca  210a              MOVS     r1,#0xa
0008cc  4834              LDR      r0,|L144.2464|
0008ce  f7fffffe          BL       uart_putchar
;;;1926   									//memset(data,0,1000);
;;;1927   														//timer counts to wait for characters in uart 1 									
;;;1928   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0008d2  bf00              NOP      
                  |L144.2260|
0008d4  490c              LDR      r1,|L144.2312|
0008d6  4811              LDR      r0,|L144.2332|
0008d8  f7fffffe          BL       strstr
0008dc  2800              CMP      r0,#0
0008de  d109              BNE      |L144.2292|
0008e0  4920              LDR      r1,|L144.2404|
0008e2  480e              LDR      r0,|L144.2332|
0008e4  f7fffffe          BL       strstr
0008e8  2800              CMP      r0,#0
0008ea  d103              BNE      |L144.2292|
0008ec  482a              LDR      r0,|L144.2456|
0008ee  6800              LDR      r0,[r0,#0]  ; tout
0008f0  2805              CMP      r0,#5
0008f2  ddef              BLE      |L144.2260|
                  |L144.2292|
;;;1929   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;1930   									}
;;;1931   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
0008f4  f7fffffe          BL       clear
;;;1932   									//clear();
;;;1933   									memset(data,0,strlen(data));
0008f8  4820              LDR      r0,|L144.2428|
0008fa  e053              B        |L144.2468|
                  |L144.2300|
0008fc  e2cd              B        |L144.3738|
0008fe  0000              DCW      0x0000
                  |L144.2304|
                          DCD      ||.conststring||+0x10
                  |L144.2308|
                          DCD      ||.conststring||+0x18
                  |L144.2312|
                          DCD      ||.conststring||+0x70
                  |L144.2316|
                          DCD      ||.conststring||+0x4a0
                  |L144.2320|
                          DCD      tmeout
                  |L144.2324|
                          DCD      at_
                  |L144.2328|
                          DCD      data2
                  |L144.2332|
                          DCD      uart_string_gsm
                  |L144.2336|
                          DCD      ||.conststring||+0x4b0
                  |L144.2340|
                          DCD      cond12
                  |L144.2344|
                          DCD      cond4
                  |L144.2348|
                          DCD      apn
                  |L144.2352|
                          DCD      ||.conststring||+0x2c
                  |L144.2356|
                          DCD      ||.conststring||+0x84
                  |L144.2360|
                          DCD      ||.conststring||+0x4b4
                  |L144.2364|
                          DCD      ||.conststring||+0x4d0
                  |L144.2368|
                          DCD      ||.conststring||+0x1e4
                  |L144.2372|
                          DCD      ||.conststring||+0x30
                  |L144.2376|
                          DCD      ||ip||
                  |L144.2380|
                          DCD      port
                  |L144.2384|
                          DCD      ||.conststring||+0x4ec
                  |L144.2388|
                          DCD      ||.conststring||+0x4fc
                  |L144.2392|
                          DCD      interval
                  |L144.2396|
                          DCD      ||.conststring||+0x504
                  |L144.2400|
                          DCD      int_erval
                  |L144.2404|
                          DCD      ||.conststring||+0xe0
                  |L144.2408|
                          DCD      ||.conststring||+0x508
                  |L144.2412|
                          DCD      0x400ff080
                  |L144.2416|
                          DCD      cond1
                  |L144.2420|
                          DCD      cond9
                  |L144.2424|
                          DCD      ||.conststring||+0x51c
                  |L144.2428|
                          DCD      data
                  |L144.2432|
                          DCD      ||.conststring||+0x520
                  |L144.2436|
                          DCD      ||.conststring||+0x524
                  |L144.2440|
                          DCD      drive
                  |L144.2444|
                          DCD      ||.conststring||+0x528
                  |L144.2448|
                          DCD      ||.conststring||+0x20
                  |L144.2452|
                          DCD      ||k2||
                  |L144.2456|
                          DCD      tout
                  |L144.2460|
                          DCD      k
                  |L144.2464|
                          DCD      0x4006b000
                  |L144.2468|
0009a4  f7fffffe          BL       strlen
0009a8  4604              MOV      r4,r0
0009aa  4621              MOV      r1,r4
0009ac  48fe              LDR      r0,|L144.3496|
0009ae  f7fffffe          BL       __aeabi_memclr
;;;1934   									clear();
0009b2  f7fffffe          BL       clear
;;;1935   
;;;1936   																
;;;1937   								
;;;1938   								
;;;1939   //log_it();								
;;;1940   		RESET_OFF;delay(10);
0009b6  2020              MOVS     r0,#0x20
0009b8  49fc              LDR      r1,|L144.3500|
0009ba  6088              STR      r0,[r1,#8]
0009bc  200a              MOVS     r0,#0xa
0009be  f7fffffe          BL       delay
;;;1941   		RESET_ON;delay(10);
0009c2  2020              MOVS     r0,#0x20
0009c4  49f9              LDR      r1,|L144.3500|
0009c6  6048              STR      r0,[r1,#4]
0009c8  200a              MOVS     r0,#0xa
0009ca  f7fffffe          BL       delay
;;;1942   								send_GSM("\n\n AT+CFUN=1,1\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);			
0009ce  48f8              LDR      r0,|L144.3504|
0009d0  6800              LDR      r0,[r0,#0]  ; tmeout
0009d2  4bf8              LDR      r3,|L144.3508|
0009d4  4af8              LDR      r2,|L144.3512|
0009d6  49f9              LDR      r1,|L144.3516|
0009d8  9000              STR      r0,[sp,#0]
0009da  48f9              LDR      r0,|L144.3520|
0009dc  f7fffffe          BL       send_GSM
0009e0  e249              B        |L144.3702|
                  |L144.2530|
;;;1943   							}
;;;1944   							
;;;1945   							else if(cond12 && cond10)
0009e2  48f8              LDR      r0,|L144.3524|
0009e4  6800              LDR      r0,[r0,#0]  ; cond12
0009e6  2800              CMP      r0,#0
0009e8  d027              BEQ      |L144.2618|
0009ea  48f7              LDR      r0,|L144.3528|
0009ec  6800              LDR      r0,[r0,#0]  ; cond10
0009ee  2800              CMP      r0,#0
0009f0  d023              BEQ      |L144.2618|
;;;1946   							{
;;;1947   						//		printf("\n\n\n\t%s",uart_string_gsm);
;;;1948   								memset(ip,0,16);
0009f2  2110              MOVS     r1,#0x10
0009f4  48f5              LDR      r0,|L144.3532|
0009f6  f7fffffe          BL       __aeabi_memclr
;;;1949   								parse_g(uart_string_gsm, 3, 4, ' ', ' ', ip);
0009fa  48f4              LDR      r0,|L144.3532|
0009fc  2120              MOVS     r1,#0x20
0009fe  460b              MOV      r3,r1
000a00  2204              MOVS     r2,#4
000a02  9100              STR      r1,[sp,#0]
000a04  9001              STR      r0,[sp,#4]
000a06  2103              MOVS     r1,#3
000a08  48f1              LDR      r0,|L144.3536|
000a0a  f7fffffe          BL       parse_g
;;;1950   								parse_g(uart_string_gsm, 6, 5, ' ', '\r', port);	
000a0e  48f1              LDR      r0,|L144.3540|
000a10  210d              MOVS     r1,#0xd
000a12  2320              MOVS     r3,#0x20
000a14  2205              MOVS     r2,#5
000a16  9100              STR      r1,[sp,#0]
000a18  9001              STR      r0,[sp,#4]
000a1a  2106              MOVS     r1,#6
000a1c  48ec              LDR      r0,|L144.3536|
000a1e  f7fffffe          BL       parse_g
;;;1951   			//					printf("\n%s\n",port);
;;;1952   								save_ip_port();
000a22  f7fffffe          BL       save_ip_port
;;;1953   							
;;;1954   	//							printf("\n\n\n\t%s\t||\t%s",ip,port);
;;;1955   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a26  48e2              LDR      r0,|L144.3504|
000a28  6800              LDR      r0,[r0,#0]  ; tmeout
000a2a  4be2              LDR      r3,|L144.3508|
000a2c  4ae2              LDR      r2,|L144.3512|
000a2e  49e3              LDR      r1,|L144.3516|
000a30  9000              STR      r0,[sp,#0]
000a32  48e9              LDR      r0,|L144.3544|
000a34  f7fffffe          BL       send_GSM
000a38  e21d              B        |L144.3702|
                  |L144.2618|
;;;1956   
;;;1957   //								while(1);
;;;1958   								
;;;1959   								
;;;1960   							}
;;;1961   
;;;1962   											
;;;1963   							else if(cond1 && cond13)
000a3a  48e8              LDR      r0,|L144.3548|
000a3c  6800              LDR      r0,[r0,#0]  ; cond1
000a3e  2800              CMP      r0,#0
000a40  d01b              BEQ      |L144.2682|
000a42  48e7              LDR      r0,|L144.3552|
000a44  6800              LDR      r0,[r0,#0]  ; cond13
000a46  2800              CMP      r0,#0
000a48  d017              BEQ      |L144.2682|
;;;1964   							{
;;;1965   								
;;;1966   								IGNITION_ON;FUEL_ON;
000a4a  2002              MOVS     r0,#2
000a4c  49d7              LDR      r1,|L144.3500|
000a4e  3980              SUBS     r1,r1,#0x80
000a50  6088              STR      r0,[r1,#8]
000a52  2004              MOVS     r0,#4
000a54  6088              STR      r0,[r1,#8]
;;;1967   								clear();
000a56  f7fffffe          BL       clear
;;;1968   								ignstaton();
000a5a  f7fffffe          BL       ignstaton
;;;1969   								delay(1000);
000a5e  207d              MOVS     r0,#0x7d
000a60  00c0              LSLS     r0,r0,#3
000a62  f7fffffe          BL       delay
;;;1970   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000a66  48d2              LDR      r0,|L144.3504|
000a68  6800              LDR      r0,[r0,#0]  ; tmeout
000a6a  4bd2              LDR      r3,|L144.3508|
000a6c  4ad2              LDR      r2,|L144.3512|
000a6e  49d3              LDR      r1,|L144.3516|
000a70  9000              STR      r0,[sp,#0]
000a72  48dc              LDR      r0,|L144.3556|
000a74  f7fffffe          BL       send_GSM
                  |L144.2680|
000a78  e1fd              B        |L144.3702|
                  |L144.2682|
;;;1971   								
;;;1972   							}
;;;1973   							else if(cond1 && cond14)
000a7a  48d8              LDR      r0,|L144.3548|
000a7c  6800              LDR      r0,[r0,#0]  ; cond1
000a7e  2800              CMP      r0,#0
000a80  d01b              BEQ      |L144.2746|
000a82  48d9              LDR      r0,|L144.3560|
000a84  6800              LDR      r0,[r0,#0]  ; cond14
000a86  2800              CMP      r0,#0
000a88  d017              BEQ      |L144.2746|
;;;1974   							{
;;;1975   								
;;;1976   								IGNITION_OFF;FUEL_OFF;
000a8a  2002              MOVS     r0,#2
000a8c  49c7              LDR      r1,|L144.3500|
000a8e  3980              SUBS     r1,r1,#0x80
000a90  6048              STR      r0,[r1,#4]
000a92  2004              MOVS     r0,#4
000a94  6048              STR      r0,[r1,#4]
;;;1977   								clear();
000a96  f7fffffe          BL       clear
;;;1978   								ignstatoff();
000a9a  f7fffffe          BL       ignstatoff
;;;1979   								delay(1000);
000a9e  207d              MOVS     r0,#0x7d
000aa0  00c0              LSLS     r0,r0,#3
000aa2  f7fffffe          BL       delay
;;;1980   								
;;;1981   								
;;;1982   								
;;;1983   								
;;;1984   								
;;;1985   								send_GSM("\r\r\nAT+CMGD=1,4\r\n\n\n\n\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000aa6  48c2              LDR      r0,|L144.3504|
000aa8  6800              LDR      r0,[r0,#0]  ; tmeout
000aaa  4bc2              LDR      r3,|L144.3508|
000aac  4ac2              LDR      r2,|L144.3512|
000aae  49c3              LDR      r1,|L144.3516|
000ab0  9000              STR      r0,[sp,#0]
000ab2  48cc              LDR      r0,|L144.3556|
000ab4  f7fffffe          BL       send_GSM
000ab8  e1dd              B        |L144.3702|
                  |L144.2746|
;;;1986   								
;;;1987   							}
;;;1988   							
;;;1989   							else if(cond1 && cond5)
000aba  48c8              LDR      r0,|L144.3548|
000abc  6800              LDR      r0,[r0,#0]  ; cond1
000abe  2800              CMP      r0,#0
000ac0  d05d              BEQ      |L144.2942|
000ac2  48ca              LDR      r0,|L144.3564|
000ac4  6800              LDR      r0,[r0,#0]  ; cond5
000ac6  2800              CMP      r0,#0
000ac8  d059              BEQ      |L144.2942|
;;;1990   							{
;;;1991   								
;;;1992   
;;;1993   								memset(at_,0,100);
000aca  2164              MOVS     r1,#0x64
000acc  48c8              LDR      r0,|L144.3568|
000ace  f7fffffe          BL       __aeabi_memclr
;;;1994   								memset(num_o,0,15);
000ad2  210f              MOVS     r1,#0xf
000ad4  48c7              LDR      r0,|L144.3572|
000ad6  f7fffffe          BL       __aeabi_memclr
;;;1995   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000ada  48c6              LDR      r0,|L144.3572|
000adc  210d              MOVS     r1,#0xd
000ade  2320              MOVS     r3,#0x20
000ae0  2205              MOVS     r2,#5
000ae2  9100              STR      r1,[sp,#0]
000ae4  9001              STR      r0,[sp,#4]
000ae6  2103              MOVS     r1,#3
000ae8  48b9              LDR      r0,|L144.3536|
000aea  f7fffffe          BL       parse_g
;;;1996   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000aee  48b0              LDR      r0,|L144.3504|
000af0  6800              LDR      r0,[r0,#0]  ; tmeout
000af2  4bb0              LDR      r3,|L144.3508|
000af4  4ab0              LDR      r2,|L144.3512|
000af6  49b1              LDR      r1,|L144.3516|
000af8  9000              STR      r0,[sp,#0]
000afa  48bf              LDR      r0,|L144.3576|
000afc  f7fffffe          BL       send_GSM
;;;1997   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b00  2004              MOVS     r0,#4
000b02  4bbe              LDR      r3,|L144.3580|
000b04  4aac              LDR      r2,|L144.3512|
000b06  49be              LDR      r1,|L144.3584|
000b08  9000              STR      r0,[sp,#0]
000b0a  48be              LDR      r0,|L144.3588|
000b0c  f7fffffe          BL       send_GSM
;;;1998   
;;;1999   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000b10  4ab8              LDR      r2,|L144.3572|
000b12  49bd              LDR      r1,|L144.3592|
000b14  48b6              LDR      r0,|L144.3568|
000b16  f7fffffe          BL       __2sprintf
;;;2000   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b1a  48a5              LDR      r0,|L144.3504|
000b1c  6800              LDR      r0,[r0,#0]  ; tmeout
000b1e  4ba5              LDR      r3,|L144.3508|
000b20  4aa5              LDR      r2,|L144.3512|
000b22  49a6              LDR      r1,|L144.3516|
000b24  9000              STR      r0,[sp,#0]
000b26  48b2              LDR      r0,|L144.3568|
000b28  f7fffffe          BL       send_GSM
;;;2001   								
;;;2002   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b2c  48a0              LDR      r0,|L144.3504|
000b2e  6800              LDR      r0,[r0,#0]  ; tmeout
000b30  4ba0              LDR      r3,|L144.3508|
000b32  4aa1              LDR      r2,|L144.3512|
000b34  49a1              LDR      r1,|L144.3516|
000b36  9000              STR      r0,[sp,#0]
000b38  48b4              LDR      r0,|L144.3596|
000b3a  f7fffffe          BL       send_GSM
;;;2003   								send_GSM("\r\nAT+CPBW=1\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000b3e  2004              MOVS     r0,#4
000b40  4bae              LDR      r3,|L144.3580|
000b42  4a9d              LDR      r2,|L144.3512|
000b44  49ae              LDR      r1,|L144.3584|
000b46  9000              STR      r0,[sp,#0]
000b48  48ae              LDR      r0,|L144.3588|
000b4a  f7fffffe          BL       send_GSM
;;;2004   
;;;2005   								sprintf(at_, "\r\nAT+CPBW=1,\"%s\",129,\"OWNER1\"\r\n" , num_o);
000b4e  4aa9              LDR      r2,|L144.3572|
000b50  49ad              LDR      r1,|L144.3592|
000b52  48a7              LDR      r0,|L144.3568|
000b54  f7fffffe          BL       __2sprintf
;;;2006   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000b58  4895              LDR      r0,|L144.3504|
000b5a  6800              LDR      r0,[r0,#0]  ; tmeout
000b5c  4b95              LDR      r3,|L144.3508|
000b5e  4a96              LDR      r2,|L144.3512|
000b60  4996              LDR      r1,|L144.3516|
000b62  9000              STR      r0,[sp,#0]
000b64  48a2              LDR      r0,|L144.3568|
000b66  f7fffffe          BL       send_GSM
;;;2007   
;;;2008   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000b6a  4891              LDR      r0,|L144.3504|
000b6c  6800              LDR      r0,[r0,#0]  ; tmeout
000b6e  4b91              LDR      r3,|L144.3508|
000b70  4a91              LDR      r2,|L144.3512|
000b72  4992              LDR      r1,|L144.3516|
000b74  9000              STR      r0,[sp,#0]
000b76  4898              LDR      r0,|L144.3544|
000b78  f7fffffe          BL       send_GSM
000b7c  e17b              B        |L144.3702|
                  |L144.2942|
;;;2009   															
;;;2010   						
;;;2011   								
;;;2012   							}		
;;;2013   							else if(cond1 && cond6)
000b7e  4897              LDR      r0,|L144.3548|
000b80  6800              LDR      r0,[r0,#0]  ; cond1
000b82  2800              CMP      r0,#0
000b84  d05d              BEQ      |L144.3138|
000b86  48a2              LDR      r0,|L144.3600|
000b88  6800              LDR      r0,[r0,#0]  ; cond6
000b8a  2800              CMP      r0,#0
000b8c  d059              BEQ      |L144.3138|
;;;2014   							{
;;;2015   
;;;2016   								
;;;2017   								memset(at_,0,100);
000b8e  2164              MOVS     r1,#0x64
000b90  4897              LDR      r0,|L144.3568|
000b92  f7fffffe          BL       __aeabi_memclr
;;;2018   								memset(num_o,0,15);
000b96  210f              MOVS     r1,#0xf
000b98  4896              LDR      r0,|L144.3572|
000b9a  f7fffffe          BL       __aeabi_memclr
;;;2019   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000b9e  4895              LDR      r0,|L144.3572|
000ba0  210d              MOVS     r1,#0xd
000ba2  2320              MOVS     r3,#0x20
000ba4  2205              MOVS     r2,#5
000ba6  9100              STR      r1,[sp,#0]
000ba8  9001              STR      r0,[sp,#4]
000baa  2103              MOVS     r1,#3
000bac  4888              LDR      r0,|L144.3536|
000bae  f7fffffe          BL       parse_g
;;;2020   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000bb2  487f              LDR      r0,|L144.3504|
000bb4  6800              LDR      r0,[r0,#0]  ; tmeout
000bb6  4b7f              LDR      r3,|L144.3508|
000bb8  4a7f              LDR      r2,|L144.3512|
000bba  4980              LDR      r1,|L144.3516|
000bbc  9000              STR      r0,[sp,#0]
000bbe  488e              LDR      r0,|L144.3576|
000bc0  f7fffffe          BL       send_GSM
;;;2021   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000bc4  2004              MOVS     r0,#4
000bc6  4b8d              LDR      r3,|L144.3580|
000bc8  4a7b              LDR      r2,|L144.3512|
000bca  498d              LDR      r1,|L144.3584|
000bcc  9000              STR      r0,[sp,#0]
000bce  4891              LDR      r0,|L144.3604|
000bd0  f7fffffe          BL       send_GSM
;;;2022   
;;;2023   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000bd4  4a87              LDR      r2,|L144.3572|
000bd6  4990              LDR      r1,|L144.3608|
000bd8  4885              LDR      r0,|L144.3568|
000bda  f7fffffe          BL       __2sprintf
;;;2024   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000bde  4874              LDR      r0,|L144.3504|
000be0  6800              LDR      r0,[r0,#0]  ; tmeout
000be2  4b74              LDR      r3,|L144.3508|
000be4  4a74              LDR      r2,|L144.3512|
000be6  4975              LDR      r1,|L144.3516|
000be8  9000              STR      r0,[sp,#0]
000bea  4881              LDR      r0,|L144.3568|
000bec  f7fffffe          BL       send_GSM
;;;2025   								
;;;2026   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000bf0  486f              LDR      r0,|L144.3504|
000bf2  6800              LDR      r0,[r0,#0]  ; tmeout
000bf4  4b6f              LDR      r3,|L144.3508|
000bf6  4a70              LDR      r2,|L144.3512|
000bf8  4970              LDR      r1,|L144.3516|
000bfa  9000              STR      r0,[sp,#0]
000bfc  4883              LDR      r0,|L144.3596|
000bfe  f7fffffe          BL       send_GSM
;;;2027   								send_GSM("\r\nAT+CPBW=2\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000c02  2004              MOVS     r0,#4
000c04  4b7d              LDR      r3,|L144.3580|
000c06  4a6c              LDR      r2,|L144.3512|
000c08  497d              LDR      r1,|L144.3584|
000c0a  9000              STR      r0,[sp,#0]
000c0c  4881              LDR      r0,|L144.3604|
000c0e  f7fffffe          BL       send_GSM
;;;2028   
;;;2029   								sprintf(at_, "\r\nAT+CPBW=2,\"%s\",129,\"OWNER2\"\r\n" , num_o);
000c12  4a78              LDR      r2,|L144.3572|
000c14  4980              LDR      r1,|L144.3608|
000c16  4876              LDR      r0,|L144.3568|
000c18  f7fffffe          BL       __2sprintf
;;;2030   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);								
000c1c  4864              LDR      r0,|L144.3504|
000c1e  6800              LDR      r0,[r0,#0]  ; tmeout
000c20  4b64              LDR      r3,|L144.3508|
000c22  4a65              LDR      r2,|L144.3512|
000c24  4965              LDR      r1,|L144.3516|
000c26  9000              STR      r0,[sp,#0]
000c28  4871              LDR      r0,|L144.3568|
000c2a  f7fffffe          BL       send_GSM
;;;2031   
;;;2032   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000c2e  4860              LDR      r0,|L144.3504|
000c30  6800              LDR      r0,[r0,#0]  ; tmeout
000c32  4b60              LDR      r3,|L144.3508|
000c34  4a60              LDR      r2,|L144.3512|
000c36  4961              LDR      r1,|L144.3516|
000c38  9000              STR      r0,[sp,#0]
000c3a  4867              LDR      r0,|L144.3544|
000c3c  f7fffffe          BL       send_GSM
000c40  e119              B        |L144.3702|
                  |L144.3138|
;;;2033   							}									
;;;2034   							else if(cond1 && cond7)
000c42  4866              LDR      r0,|L144.3548|
000c44  6800              LDR      r0,[r0,#0]  ; cond1
000c46  2800              CMP      r0,#0
000c48  d05d              BEQ      |L144.3334|
000c4a  4874              LDR      r0,|L144.3612|
000c4c  6800              LDR      r0,[r0,#0]  ; cond7
000c4e  2800              CMP      r0,#0
000c50  d059              BEQ      |L144.3334|
;;;2035   							{
;;;2036   								
;;;2037   								memset(at_,0,100);
000c52  2164              MOVS     r1,#0x64
000c54  4866              LDR      r0,|L144.3568|
000c56  f7fffffe          BL       __aeabi_memclr
;;;2038   								memset(num_o,0,15);
000c5a  210f              MOVS     r1,#0xf
000c5c  4865              LDR      r0,|L144.3572|
000c5e  f7fffffe          BL       __aeabi_memclr
;;;2039   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000c62  4864              LDR      r0,|L144.3572|
000c64  210d              MOVS     r1,#0xd
000c66  2320              MOVS     r3,#0x20
000c68  2205              MOVS     r2,#5
000c6a  9100              STR      r1,[sp,#0]
000c6c  9001              STR      r0,[sp,#4]
000c6e  2103              MOVS     r1,#3
000c70  4857              LDR      r0,|L144.3536|
000c72  f7fffffe          BL       parse_g
;;;2040   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000c76  484e              LDR      r0,|L144.3504|
000c78  6800              LDR      r0,[r0,#0]  ; tmeout
000c7a  4b4e              LDR      r3,|L144.3508|
000c7c  4a4e              LDR      r2,|L144.3512|
000c7e  494f              LDR      r1,|L144.3516|
000c80  9000              STR      r0,[sp,#0]
000c82  485d              LDR      r0,|L144.3576|
000c84  f7fffffe          BL       send_GSM
;;;2041   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000c88  2004              MOVS     r0,#4
000c8a  4b5c              LDR      r3,|L144.3580|
000c8c  4a4a              LDR      r2,|L144.3512|
000c8e  495c              LDR      r1,|L144.3584|
000c90  9000              STR      r0,[sp,#0]
000c92  4863              LDR      r0,|L144.3616|
000c94  f7fffffe          BL       send_GSM
;;;2042   
;;;2043   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000c98  4a56              LDR      r2,|L144.3572|
000c9a  4962              LDR      r1,|L144.3620|
000c9c  4854              LDR      r0,|L144.3568|
000c9e  f7fffffe          BL       __2sprintf
;;;2044   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ca2  4843              LDR      r0,|L144.3504|
000ca4  6800              LDR      r0,[r0,#0]  ; tmeout
000ca6  4b43              LDR      r3,|L144.3508|
000ca8  4a43              LDR      r2,|L144.3512|
000caa  4944              LDR      r1,|L144.3516|
000cac  9000              STR      r0,[sp,#0]
000cae  4850              LDR      r0,|L144.3568|
000cb0  f7fffffe          BL       send_GSM
;;;2045   								
;;;2046   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000cb4  483e              LDR      r0,|L144.3504|
000cb6  6800              LDR      r0,[r0,#0]  ; tmeout
000cb8  4b3e              LDR      r3,|L144.3508|
000cba  4a3f              LDR      r2,|L144.3512|
000cbc  493f              LDR      r1,|L144.3516|
000cbe  9000              STR      r0,[sp,#0]
000cc0  4852              LDR      r0,|L144.3596|
000cc2  f7fffffe          BL       send_GSM
;;;2047   								send_GSM("\r\nAT+CPBW=3\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000cc6  2004              MOVS     r0,#4
000cc8  4b4c              LDR      r3,|L144.3580|
000cca  4a3b              LDR      r2,|L144.3512|
000ccc  494c              LDR      r1,|L144.3584|
000cce  9000              STR      r0,[sp,#0]
000cd0  4853              LDR      r0,|L144.3616|
000cd2  f7fffffe          BL       send_GSM
;;;2048   
;;;2049   								sprintf(at_, "\r\nAT+CPBW=3,\"%s\",129,\"OWNER3\"\r\n" , num_o);
000cd6  4a47              LDR      r2,|L144.3572|
000cd8  4952              LDR      r1,|L144.3620|
000cda  4845              LDR      r0,|L144.3568|
000cdc  f7fffffe          BL       __2sprintf
;;;2050   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000ce0  4833              LDR      r0,|L144.3504|
000ce2  6800              LDR      r0,[r0,#0]  ; tmeout
000ce4  4b33              LDR      r3,|L144.3508|
000ce6  4a34              LDR      r2,|L144.3512|
000ce8  4934              LDR      r1,|L144.3516|
000cea  9000              STR      r0,[sp,#0]
000cec  4840              LDR      r0,|L144.3568|
000cee  f7fffffe          BL       send_GSM
;;;2051   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000cf2  482f              LDR      r0,|L144.3504|
000cf4  6800              LDR      r0,[r0,#0]  ; tmeout
000cf6  4b2f              LDR      r3,|L144.3508|
000cf8  4a2f              LDR      r2,|L144.3512|
000cfa  4930              LDR      r1,|L144.3516|
000cfc  9000              STR      r0,[sp,#0]
000cfe  4836              LDR      r0,|L144.3544|
000d00  f7fffffe          BL       send_GSM
000d04  e0b7              B        |L144.3702|
                  |L144.3334|
;;;2052   							}			
;;;2053   							else if(cond11)
000d06  4848              LDR      r0,|L144.3624|
000d08  6800              LDR      r0,[r0,#0]  ; cond11
000d0a  2800              CMP      r0,#0
000d0c  d04a              BEQ      |L144.3492|
;;;2054   							{
;;;2055   
;;;2056   								memset(at_,0,100);
000d0e  2164              MOVS     r1,#0x64
000d10  4837              LDR      r0,|L144.3568|
000d12  f7fffffe          BL       __aeabi_memclr
;;;2057   								memset(num_o,0,15);
000d16  210f              MOVS     r1,#0xf
000d18  4836              LDR      r0,|L144.3572|
000d1a  f7fffffe          BL       __aeabi_memclr
;;;2058   								parse_g(uart_string_gsm, 3, 5, ' ', '\r', num_o);
000d1e  4835              LDR      r0,|L144.3572|
000d20  210d              MOVS     r1,#0xd
000d22  2320              MOVS     r3,#0x20
000d24  2205              MOVS     r2,#5
000d26  9100              STR      r1,[sp,#0]
000d28  9001              STR      r0,[sp,#4]
000d2a  2103              MOVS     r1,#3
000d2c  4828              LDR      r0,|L144.3536|
000d2e  f7fffffe          BL       parse_g
;;;2059   								send_GSM("\n\nAT+CPBS=\"SM\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d32  481f              LDR      r0,|L144.3504|
000d34  6800              LDR      r0,[r0,#0]  ; tmeout
000d36  4b1f              LDR      r3,|L144.3508|
000d38  4a1f              LDR      r2,|L144.3512|
000d3a  4920              LDR      r1,|L144.3516|
000d3c  9000              STR      r0,[sp,#0]
000d3e  482e              LDR      r0,|L144.3576|
000d40  f7fffffe          BL       send_GSM
;;;2060   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000d44  2004              MOVS     r0,#4
000d46  4b2d              LDR      r3,|L144.3580|
000d48  4a1b              LDR      r2,|L144.3512|
000d4a  492d              LDR      r1,|L144.3584|
000d4c  9000              STR      r0,[sp,#0]
000d4e  4837              LDR      r0,|L144.3628|
000d50  f7fffffe          BL       send_GSM
;;;2061   
;;;2062   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000d54  4a27              LDR      r2,|L144.3572|
000d56  4936              LDR      r1,|L144.3632|
000d58  4825              LDR      r0,|L144.3568|
000d5a  f7fffffe          BL       __2sprintf
;;;2063   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d5e  4814              LDR      r0,|L144.3504|
000d60  6800              LDR      r0,[r0,#0]  ; tmeout
000d62  4b14              LDR      r3,|L144.3508|
000d64  4a14              LDR      r2,|L144.3512|
000d66  4915              LDR      r1,|L144.3516|
000d68  9000              STR      r0,[sp,#0]
000d6a  4821              LDR      r0,|L144.3568|
000d6c  f7fffffe          BL       send_GSM
;;;2064   								
;;;2065   								send_GSM("\n\nAT+CPBS=\"ME\"\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d70  480f              LDR      r0,|L144.3504|
000d72  6800              LDR      r0,[r0,#0]  ; tmeout
000d74  4b0f              LDR      r3,|L144.3508|
000d76  4a10              LDR      r2,|L144.3512|
000d78  4910              LDR      r1,|L144.3516|
000d7a  9000              STR      r0,[sp,#0]
000d7c  4823              LDR      r0,|L144.3596|
000d7e  f7fffffe          BL       send_GSM
;;;2066   								send_GSM("\r\nAT+CPBW=4\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",4);	
000d82  2004              MOVS     r0,#4
000d84  4b1d              LDR      r3,|L144.3580|
000d86  4a0c              LDR      r2,|L144.3512|
000d88  491d              LDR      r1,|L144.3584|
000d8a  9000              STR      r0,[sp,#0]
000d8c  4827              LDR      r0,|L144.3628|
000d8e  f7fffffe          BL       send_GSM
;;;2067   
;;;2068   								sprintf(at_, "\r\nAT+CPBW=4,\"%s\",129,\"SOWNER\"\r\n" , num_o);
000d92  4a18              LDR      r2,|L144.3572|
000d94  4926              LDR      r1,|L144.3632|
000d96  4816              LDR      r0,|L144.3568|
000d98  f7fffffe          BL       __2sprintf
;;;2069   								send_GSM(at_,"OK\r\n","ERROR\r\n","ERROR:",tmeout);
000d9c  4804              LDR      r0,|L144.3504|
000d9e  6800              LDR      r0,[r0,#0]  ; tmeout
000da0  4b04              LDR      r3,|L144.3508|
000da2  e047              B        |L144.3636|
                  |L144.3492|
000da4  e056              B        |L144.3668|
000da6  0000              DCW      0x0000
                  |L144.3496|
                          DCD      data
                  |L144.3500|
                          DCD      0x400ff080
                  |L144.3504|
                          DCD      tmeout
                  |L144.3508|
                          DCD      ||.conststring||+0x10
                  |L144.3512|
                          DCD      ||.conststring||+0x18
                  |L144.3516|
                          DCD      ||.conststring||+0x70
                  |L144.3520|
                          DCD      ||.conststring||+0x54c
                  |L144.3524|
                          DCD      cond12
                  |L144.3528|
                          DCD      cond10
                  |L144.3532|
                          DCD      ||ip||
                  |L144.3536|
                          DCD      uart_string_gsm
                  |L144.3540|
                          DCD      port
                  |L144.3544|
                          DCD      ||.conststring||+0x4a0
                  |L144.3548|
                          DCD      cond1
                  |L144.3552|
                          DCD      cond13
                  |L144.3556|
                          DCD      ||.conststring||+0x560
                  |L144.3560|
                          DCD      cond14
                  |L144.3564|
                          DCD      cond5
                  |L144.3568|
                          DCD      at_
                  |L144.3572|
                          DCD      num_o
                  |L144.3576|
                          DCD      ||.conststring||+0x578
                  |L144.3580|
                          DCD      ||.conststring||+0xe0
                  |L144.3584|
                          DCD      ||.conststring||+0x2c
                  |L144.3588|
                          DCD      ||.conststring||+0x58c
                  |L144.3592|
                          DCD      ||.conststring||+0x59c
                  |L144.3596|
                          DCD      ||.conststring||+0x5bc
                  |L144.3600|
                          DCD      cond6
                  |L144.3604|
                          DCD      ||.conststring||+0x5d0
                  |L144.3608|
                          DCD      ||.conststring||+0x5e0
                  |L144.3612|
                          DCD      cond7
                  |L144.3616|
                          DCD      ||.conststring||+0x600
                  |L144.3620|
                          DCD      ||.conststring||+0x610
                  |L144.3624|
                          DCD      cond11
                  |L144.3628|
                          DCD      ||.conststring||+0x630
                  |L144.3632|
                          DCD      ||.conststring||+0x640
                  |L144.3636|
000e34  4a19              LDR      r2,|L144.3740|
000e36  491a              LDR      r1,|L144.3744|
000e38  9000              STR      r0,[sp,#0]
000e3a  481a              LDR      r0,|L144.3748|
000e3c  f7fffffe          BL       send_GSM
;;;2070   								
;;;2071   								send_GSM("\r\nAT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000e40  4819              LDR      r0,|L144.3752|
000e42  6800              LDR      r0,[r0,#0]  ; tmeout
000e44  4b19              LDR      r3,|L144.3756|
000e46  4a15              LDR      r2,|L144.3740|
000e48  4915              LDR      r1,|L144.3744|
000e4a  9000              STR      r0,[sp,#0]
000e4c  4818              LDR      r0,|L144.3760|
000e4e  f7fffffe          BL       send_GSM
000e52  e010              B        |L144.3702|
                  |L144.3668|
;;;2072   								
;;;2073   							}	
;;;2074   							else if(cond15)
000e54  4817              LDR      r0,|L144.3764|
000e56  6800              LDR      r0,[r0,#0]  ; cond15
000e58  2800              CMP      r0,#0
000e5a  d003              BEQ      |L144.3684|
;;;2075   							{
;;;2076   								send_message(ignstr);
000e5c  4816              LDR      r0,|L144.3768|
000e5e  f7fffffe          BL       send_message
000e62  e008              B        |L144.3702|
                  |L144.3684|
;;;2077   								
;;;2078   							}							
;;;2079   
;;;2080   							else
;;;2081   							{							
;;;2082   								send_GSM("\r\n AT+CMGD=1,4\r\n","OK\r\n","ERROR\r\n","ERROR:",tmeout);	
000e64  4810              LDR      r0,|L144.3752|
000e66  6800              LDR      r0,[r0,#0]  ; tmeout
000e68  4b10              LDR      r3,|L144.3756|
000e6a  4a0c              LDR      r2,|L144.3740|
000e6c  490c              LDR      r1,|L144.3744|
000e6e  9000              STR      r0,[sp,#0]
000e70  4812              LDR      r0,|L144.3772|
000e72  f7fffffe          BL       send_GSM
                  |L144.3702|
;;;2083   							}
;;;2084   
;;;2085   
;;;2086   		ringflag=0;
000e76  2000              MOVS     r0,#0
000e78  4911              LDR      r1,|L144.3776|
000e7a  7008              STRB     r0,[r1,#0]
;;;2087   clear();							
000e7c  f7fffffe          BL       clear
;;;2088   send_GSM("\r\n AT+CMGD=1,4\r\n\r\n","OK","ERROR","ERROR:",tmeout);		
000e80  4809              LDR      r0,|L144.3752|
000e82  6800              LDR      r0,[r0,#0]  ; tmeout
000e84  4b09              LDR      r3,|L144.3756|
000e86  4a0f              LDR      r2,|L144.3780|
000e88  490f              LDR      r1,|L144.3784|
000e8a  9000              STR      r0,[sp,#0]
000e8c  480f              LDR      r0,|L144.3788|
000e8e  f7fffffe          BL       send_GSM
;;;2089   delay(1000);					
000e92  207d              MOVS     r0,#0x7d
000e94  00c0              LSLS     r0,r0,#3
000e96  f7fffffe          BL       delay
                  |L144.3738|
;;;2090   		}
;;;2091   		
;;;2092   }
000e9a  bd1f              POP      {r0-r4,pc}
;;;2093   int count_char(char ch,char* string)
                          ENDP

                  |L144.3740|
                          DCD      ||.conststring||+0x18
                  |L144.3744|
                          DCD      ||.conststring||+0x70
                  |L144.3748|
                          DCD      at_
                  |L144.3752|
                          DCD      tmeout
                  |L144.3756|
                          DCD      ||.conststring||+0x10
                  |L144.3760|
                          DCD      ||.conststring||+0x4a0
                  |L144.3764|
                          DCD      cond15
                  |L144.3768|
                          DCD      ignstr
                  |L144.3772|
                          DCD      ||.conststring||+0x660
                  |L144.3776|
                          DCD      ringflag
                  |L144.3780|
                          DCD      ||.conststring||+0xe0
                  |L144.3784|
                          DCD      ||.conststring||+0x2c
                  |L144.3788|
                          DCD      ||.conststring||+0x508

                          AREA ||i.savecursor||, COMGROUP=savecursor, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursor PROC
;;;1369   
;;;1370   	__inline void savecursor(){
000000  b508              PUSH     {r3,lr}
;;;1371   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4816              LDR      r0,|L151.92|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b16              LDR      r3,|L151.96|
000008  4a16              LDR      r2,|L151.100|
00000a  4917              LDR      r1,|L151.104|
00000c  9000              STR      r0,[sp,#0]
00000e  4817              LDR      r0,|L151.108|
000010  f7fffffe          BL       send_GSM
;;;1372   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b12              LDR      r3,|L151.96|
000018  4a12              LDR      r2,|L151.100|
00001a  4915              LDR      r1,|L151.112|
00001c  9000              STR      r0,[sp,#0]
00001e  4815              LDR      r0,|L151.116|
000020  f7fffffe          BL       send_GSM
;;;1373   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1374   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4812              LDR      r0,|L151.120|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1375   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",times,k5,cursorvaluepr);		
000032  4812              LDR      r0,|L151.124|
000034  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
000036  9000              STR      r0,[sp,#0]
000038  4811              LDR      r0,|L151.128|
00003a  6803              LDR      r3,[r0,#0]  ; k5
00003c  4811              LDR      r0,|L151.132|
00003e  4912              LDR      r1,|L151.136|
000040  6802              LDR      r2,[r0,#0]  ; times
000042  480d              LDR      r0,|L151.120|
000044  f7fffffe          BL       __2sprintf
;;;1376   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000048  200a              MOVS     r0,#0xa
00004a  4b05              LDR      r3,|L151.96|
00004c  4a05              LDR      r2,|L151.100|
00004e  4906              LDR      r1,|L151.104|
000050  9000              STR      r0,[sp,#0]
000052  4809              LDR      r0,|L151.120|
000054  f7fffffe          BL       send_GSM
;;;1377   }	
000058  bd08              POP      {r3,pc}
;;;1378   	__inline void savecursord(){
                          ENDP

00005a  0000              DCW      0x0000
                  |L151.92|
                          DCD      tmeout
                  |L151.96|
                          DCD      ||.conststring||+0x10
                  |L151.100|
                          DCD      ||.conststring||+0x18
                  |L151.104|
                          DCD      ||.conststring||+0x2c
                  |L151.108|
                          DCD      ||.conststring||+0x674
                  |L151.112|
                          DCD      ||.conststring||+0x20
                  |L151.116|
                          DCD      ||.conststring||+0x694
                  |L151.120|
                          DCD      at_
                  |L151.124|
                          DCD      cursorvaluepr
                  |L151.128|
                          DCD      ||k5||
                  |L151.132|
                          DCD      times
                  |L151.136|
                          DCD      ||.conststring||+0x6bc

                          AREA ||i.reset_func||, COMGROUP=reset_func, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  reset_func PROC
;;;2758   
;;;2759   __inline void reset_func()
000000  b538              PUSH     {r3-r5,lr}
;;;2760   {
;;;2761   		savecursor();
000002  f7fffffe          BL       savecursor
;;;2762   	
;;;2763   				memset(at_,0,100);
000006  2164              MOVS     r1,#0x64
000008  48a0              LDR      r0,|L158.652|
00000a  f7fffffe          BL       __aeabi_memclr
;;;2764   				sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
00000e  48a0              LDR      r0,|L158.656|
000010  f7fffffe          BL       strlen
000014  1c44              ADDS     r4,r0,#1
000016  4623              MOV      r3,r4
000018  4a9e              LDR      r2,|L158.660|
00001a  499f              LDR      r1,|L158.664|
00001c  489b              LDR      r0,|L158.652|
00001e  f7fffffe          BL       __2sprintf
;;;2765   				send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000022  2005              MOVS     r0,#5
000024  4b9d              LDR      r3,|L158.668|
000026  4a9e              LDR      r2,|L158.672|
000028  499e              LDR      r1,|L158.676|
00002a  9000              STR      r0,[sp,#0]
00002c  4897              LDR      r0,|L158.652|
00002e  f7fffffe          BL       send_SD
;;;2766   if(strstr(uart_string_gsm,"ERROR")){
000032  499a              LDR      r1,|L158.668|
000034  489c              LDR      r0,|L158.680|
000036  f7fffffe          BL       strstr
00003a  2800              CMP      r0,#0
00003c  d004              BEQ      |L158.72|
;;;2767   	drive[0]='C';drive[1]=':';
00003e  2043              MOVS     r0,#0x43
000040  4994              LDR      r1,|L158.660|
000042  7008              STRB     r0,[r1,#0]
000044  203a              MOVS     r0,#0x3a
000046  7048              STRB     r0,[r1,#1]
                  |L158.72|
;;;2768   }	
;;;2769   				//clear();	
;;;2770   				k2=0;									//string array counter for uart 1
000048  2000              MOVS     r0,#0
00004a  4998              LDR      r1,|L158.684|
00004c  6008              STR      r0,[r1,#0]  ; k2
;;;2771   				tout=0;	
00004e  4998              LDR      r1,|L158.688|
000050  6008              STR      r0,[r1,#0]  ; tout
;;;2772   				for(k=0;k<strlen(data);k++)
000052  4998              LDR      r1,|L158.692|
000054  6008              STR      r0,[r1,#0]  ; k
000056  e00b              B        |L158.112|
                  |L158.88|
;;;2773   				{
;;;2774   					uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000058  488d              LDR      r0,|L158.656|
00005a  4a96              LDR      r2,|L158.692|
00005c  6812              LDR      r2,[r2,#0]  ; k
00005e  5c81              LDRB     r1,[r0,r2]
000060  4895              LDR      r0,|L158.696|
000062  f7fffffe          BL       uart_putchar
000066  4893              LDR      r0,|L158.692|
000068  6800              LDR      r0,[r0,#0]            ;2772  ; k
00006a  1c40              ADDS     r0,r0,#1              ;2772
00006c  4991              LDR      r1,|L158.692|
00006e  6008              STR      r0,[r1,#0]            ;2772  ; k
                  |L158.112|
000070  4887              LDR      r0,|L158.656|
000072  f7fffffe          BL       strlen
000076  498f              LDR      r1,|L158.692|
000078  6809              LDR      r1,[r1,#0]            ;2772  ; k
00007a  4288              CMP      r0,r1                 ;2772
00007c  d8ec              BHI      |L158.88|
;;;2775   				}	
;;;2776   				uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
00007e  210a              MOVS     r1,#0xa
000080  488d              LDR      r0,|L158.696|
000082  f7fffffe          BL       uart_putchar
000086  210a              MOVS     r1,#0xa
000088  488b              LDR      r0,|L158.696|
00008a  f7fffffe          BL       uart_putchar
00008e  210a              MOVS     r1,#0xa
000090  4889              LDR      r0,|L158.696|
000092  f7fffffe          BL       uart_putchar
000096  210a              MOVS     r1,#0xa
000098  4887              LDR      r0,|L158.696|
00009a  f7fffffe          BL       uart_putchar
00009e  210a              MOVS     r1,#0xa
0000a0  4885              LDR      r0,|L158.696|
0000a2  f7fffffe          BL       uart_putchar
0000a6  210a              MOVS     r1,#0xa
0000a8  4883              LDR      r0,|L158.696|
0000aa  f7fffffe          BL       uart_putchar
0000ae  210a              MOVS     r1,#0xa
0000b0  4881              LDR      r0,|L158.696|
0000b2  f7fffffe          BL       uart_putchar
0000b6  210a              MOVS     r1,#0xa
0000b8  487f              LDR      r0,|L158.696|
0000ba  f7fffffe          BL       uart_putchar
0000be  210a              MOVS     r1,#0xa
0000c0  487d              LDR      r0,|L158.696|
0000c2  f7fffffe          BL       uart_putchar
0000c6  210a              MOVS     r1,#0xa
0000c8  487b              LDR      r0,|L158.696|
0000ca  f7fffffe          BL       uart_putchar
0000ce  210a              MOVS     r1,#0xa
0000d0  4879              LDR      r0,|L158.696|
0000d2  f7fffffe          BL       uart_putchar
0000d6  210a              MOVS     r1,#0xa
0000d8  4877              LDR      r0,|L158.696|
0000da  f7fffffe          BL       uart_putchar
0000de  210a              MOVS     r1,#0xa
0000e0  4875              LDR      r0,|L158.696|
0000e2  f7fffffe          BL       uart_putchar
0000e6  210a              MOVS     r1,#0xa
0000e8  4873              LDR      r0,|L158.696|
0000ea  f7fffffe          BL       uart_putchar
0000ee  210a              MOVS     r1,#0xa
0000f0  4871              LDR      r0,|L158.696|
0000f2  f7fffffe          BL       uart_putchar
0000f6  210a              MOVS     r1,#0xa
0000f8  486f              LDR      r0,|L158.696|
0000fa  f7fffffe          BL       uart_putchar
0000fe  210a              MOVS     r1,#0xa
000100  486d              LDR      r0,|L158.696|
000102  f7fffffe          BL       uart_putchar
000106  210a              MOVS     r1,#0xa
000108  486b              LDR      r0,|L158.696|
00010a  f7fffffe          BL       uart_putchar
00010e  210a              MOVS     r1,#0xa
000110  4869              LDR      r0,|L158.696|
000112  f7fffffe          BL       uart_putchar
000116  210a              MOVS     r1,#0xa
000118  4867              LDR      r0,|L158.696|
00011a  f7fffffe          BL       uart_putchar
00011e  210a              MOVS     r1,#0xa
000120  4865              LDR      r0,|L158.696|
000122  f7fffffe          BL       uart_putchar
000126  210a              MOVS     r1,#0xa
000128  4863              LDR      r0,|L158.696|
00012a  f7fffffe          BL       uart_putchar
00012e  210a              MOVS     r1,#0xa
000130  4861              LDR      r0,|L158.696|
000132  f7fffffe          BL       uart_putchar
000136  210a              MOVS     r1,#0xa
000138  485f              LDR      r0,|L158.696|
00013a  f7fffffe          BL       uart_putchar
00013e  210a              MOVS     r1,#0xa
000140  485d              LDR      r0,|L158.696|
000142  f7fffffe          BL       uart_putchar
000146  210a              MOVS     r1,#0xa
000148  485b              LDR      r0,|L158.696|
00014a  f7fffffe          BL       uart_putchar
00014e  210a              MOVS     r1,#0xa
000150  4859              LDR      r0,|L158.696|
000152  f7fffffe          BL       uart_putchar
000156  210a              MOVS     r1,#0xa
000158  4857              LDR      r0,|L158.696|
00015a  f7fffffe          BL       uart_putchar
00015e  210a              MOVS     r1,#0xa
000160  4855              LDR      r0,|L158.696|
000162  f7fffffe          BL       uart_putchar
000166  210a              MOVS     r1,#0xa
000168  4853              LDR      r0,|L158.696|
00016a  f7fffffe          BL       uart_putchar
00016e  210a              MOVS     r1,#0xa
000170  4851              LDR      r0,|L158.696|
000172  f7fffffe          BL       uart_putchar
000176  210a              MOVS     r1,#0xa
000178  484f              LDR      r0,|L158.696|
00017a  f7fffffe          BL       uart_putchar
00017e  210a              MOVS     r1,#0xa
000180  484d              LDR      r0,|L158.696|
000182  f7fffffe          BL       uart_putchar
000186  210a              MOVS     r1,#0xa
000188  484b              LDR      r0,|L158.696|
00018a  f7fffffe          BL       uart_putchar
00018e  210a              MOVS     r1,#0xa
000190  4849              LDR      r0,|L158.696|
000192  f7fffffe          BL       uart_putchar
000196  210a              MOVS     r1,#0xa
000198  4847              LDR      r0,|L158.696|
00019a  f7fffffe          BL       uart_putchar
00019e  210a              MOVS     r1,#0xa
0001a0  4845              LDR      r0,|L158.696|
0001a2  f7fffffe          BL       uart_putchar
0001a6  210a              MOVS     r1,#0xa
0001a8  4843              LDR      r0,|L158.696|
0001aa  f7fffffe          BL       uart_putchar
0001ae  210a              MOVS     r1,#0xa
0001b0  4841              LDR      r0,|L158.696|
0001b2  f7fffffe          BL       uart_putchar
0001b6  210a              MOVS     r1,#0xa
0001b8  483f              LDR      r0,|L158.696|
0001ba  f7fffffe          BL       uart_putchar
0001be  210a              MOVS     r1,#0xa
0001c0  483d              LDR      r0,|L158.696|
0001c2  f7fffffe          BL       uart_putchar
0001c6  210a              MOVS     r1,#0xa
0001c8  483b              LDR      r0,|L158.696|
0001ca  f7fffffe          BL       uart_putchar
0001ce  210a              MOVS     r1,#0xa
0001d0  4839              LDR      r0,|L158.696|
0001d2  f7fffffe          BL       uart_putchar
0001d6  210a              MOVS     r1,#0xa
0001d8  4837              LDR      r0,|L158.696|
0001da  f7fffffe          BL       uart_putchar
0001de  210a              MOVS     r1,#0xa
0001e0  4835              LDR      r0,|L158.696|
0001e2  f7fffffe          BL       uart_putchar
0001e6  210a              MOVS     r1,#0xa
0001e8  4833              LDR      r0,|L158.696|
0001ea  f7fffffe          BL       uart_putchar
0001ee  210a              MOVS     r1,#0xa
0001f0  4831              LDR      r0,|L158.696|
0001f2  f7fffffe          BL       uart_putchar
0001f6  210a              MOVS     r1,#0xa
0001f8  482f              LDR      r0,|L158.696|
0001fa  f7fffffe          BL       uart_putchar
0001fe  210a              MOVS     r1,#0xa
000200  482d              LDR      r0,|L158.696|
000202  f7fffffe          BL       uart_putchar
000206  210a              MOVS     r1,#0xa
000208  482b              LDR      r0,|L158.696|
00020a  f7fffffe          BL       uart_putchar
00020e  210a              MOVS     r1,#0xa
000210  4829              LDR      r0,|L158.696|
000212  f7fffffe          BL       uart_putchar
000216  210a              MOVS     r1,#0xa
000218  4827              LDR      r0,|L158.696|
00021a  f7fffffe          BL       uart_putchar
00021e  210a              MOVS     r1,#0xa
000220  4825              LDR      r0,|L158.696|
000222  f7fffffe          BL       uart_putchar
000226  210a              MOVS     r1,#0xa
000228  4823              LDR      r0,|L158.696|
00022a  f7fffffe          BL       uart_putchar
00022e  210a              MOVS     r1,#0xa
000230  4821              LDR      r0,|L158.696|
000232  f7fffffe          BL       uart_putchar
000236  210a              MOVS     r1,#0xa
000238  481f              LDR      r0,|L158.696|
00023a  f7fffffe          BL       uart_putchar
00023e  210a              MOVS     r1,#0xa
000240  481d              LDR      r0,|L158.696|
000242  f7fffffe          BL       uart_putchar
;;;2777   				//memset(data,0,1000);
;;;2778   				//timer counts to wait for characters in uart 1 									
;;;2779   				while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000246  bf00              NOP      
                  |L158.584|
000248  491c              LDR      r1,|L158.700|
00024a  4817              LDR      r0,|L158.680|
00024c  f7fffffe          BL       strstr
000250  2800              CMP      r0,#0
000252  d109              BNE      |L158.616|
000254  4911              LDR      r1,|L158.668|
000256  4814              LDR      r0,|L158.680|
000258  f7fffffe          BL       strstr
00025c  2800              CMP      r0,#0
00025e  d103              BNE      |L158.616|
000260  4813              LDR      r0,|L158.688|
000262  6800              LDR      r0,[r0,#0]  ; tout
000264  2805              CMP      r0,#5
000266  ddef              BLE      |L158.584|
                  |L158.616|
;;;2780   				{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2781   				}
;;;2782   				//clear();//uart_putchar(UART1_BASE_PTR,0x1a);
;;;2783   				//memset(data,0,strlen(data));
;;;2784   				//clear();
;;;2785   	RESET_OFF;
000268  2020              MOVS     r0,#0x20
00026a  4915              LDR      r1,|L158.704|
00026c  6088              STR      r0,[r1,#8]
;;;2786   	RESET_OFF;
00026e  6088              STR      r0,[r1,#8]
;;;2787   	delay(100);	
000270  2064              MOVS     r0,#0x64
000272  f7fffffe          BL       delay
;;;2788   	RESET_ON;
000276  2020              MOVS     r0,#0x20
000278  4911              LDR      r1,|L158.704|
00027a  6048              STR      r0,[r1,#4]
;;;2789   	RESET_ON;	
00027c  6048              STR      r0,[r1,#4]
;;;2790   	delay(100);
00027e  2064              MOVS     r0,#0x64
000280  f7fffffe          BL       delay
;;;2791   	rtcticks2 =0;
000284  2000              MOVS     r0,#0
000286  490f              LDR      r1,|L158.708|
000288  6008              STR      r0,[r1,#0]  ; rtcticks2
;;;2792   	
;;;2793   }	
00028a  bd38              POP      {r3-r5,pc}
;;;2794   	
                          ENDP

                  |L158.652|
                          DCD      at_
                  |L158.656|
                          DCD      data
                  |L158.660|
                          DCD      drive
                  |L158.664|
                          DCD      ||.conststring||+0x528
                  |L158.668|
                          DCD      ||.conststring||+0xe0
                  |L158.672|
                          DCD      ||.conststring||+0x18
                  |L158.676|
                          DCD      ||.conststring||+0x20
                  |L158.680|
                          DCD      uart_string_gsm
                  |L158.684|
                          DCD      ||k2||
                  |L158.688|
                          DCD      tout
                  |L158.692|
                          DCD      k
                  |L158.696|
                          DCD      0x4006b000
                  |L158.700|
                          DCD      ||.conststring||+0x70
                  |L158.704|
                          DCD      0x400ff080
                  |L158.708|
                          DCD      rtcticks2

                          AREA ||i.remove_all_chars||, COMGROUP=remove_all_chars, CODE, READONLY, ALIGN=1

                  remove_all_chars PROC
;;;72     
;;;73     __inline void remove_all_chars(char* str, char c, char d) {
000000  b530              PUSH     {r4,r5,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;74         char *pr = str, *pw = str;
000006  4619              MOV      r1,r3
000008  4618              MOV      r0,r3
;;;75         while (*pr) {
00000a  e015              B        |L165.56|
                  |L165.12|
;;;76             *pw = *pr++;
00000c  780d              LDRB     r5,[r1,#0]
00000e  7005              STRB     r5,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
;;;77     			pw += (*pw != c && *pw != d && *pw != ' ' && *pw != '/' && *pw != ':');
000012  7805              LDRB     r5,[r0,#0]
000014  42a5              CMP      r5,r4
000016  d00d              BEQ      |L165.52|
000018  7805              LDRB     r5,[r0,#0]
00001a  4295              CMP      r5,r2
00001c  d00a              BEQ      |L165.52|
00001e  7805              LDRB     r5,[r0,#0]
000020  2d20              CMP      r5,#0x20
000022  d007              BEQ      |L165.52|
000024  7805              LDRB     r5,[r0,#0]
000026  2d2f              CMP      r5,#0x2f
000028  d004              BEQ      |L165.52|
00002a  7805              LDRB     r5,[r0,#0]
00002c  2d3a              CMP      r5,#0x3a
00002e  d001              BEQ      |L165.52|
000030  2501              MOVS     r5,#1
000032  e000              B        |L165.54|
                  |L165.52|
000034  2500              MOVS     r5,#0
                  |L165.54|
000036  1828              ADDS     r0,r5,r0
                  |L165.56|
000038  780d              LDRB     r5,[r1,#0]            ;75
00003a  2d00              CMP      r5,#0                 ;75
00003c  d1e6              BNE      |L165.12|
;;;78         }
;;;79         *pw = '\0';
00003e  7005              STRB     r5,[r0,#0]
;;;80     }
000040  bd30              POP      {r4,r5,pc}
;;;81     
                          ENDP


                          AREA ||i.GPS_COLLECT2||, COMGROUP=GPS_COLLECT2, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  GPS_COLLECT2 PROC
;;;1433   
;;;1434   __inline void GPS_COLLECT2()
000000  b5fe              PUSH     {r1-r7,lr}
;;;1435   {	
;;;1436   time52=15;	
000002  200f              MOVS     r0,#0xf
000004  49fe              LDR      r1,|L172.1024|
000006  6008              STR      r0,[r1,#0]  ; time52
;;;1437   
;;;1438   delay(200);
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       delay
;;;1439   clear();
00000e  f7fffffe          BL       clear
;;;1440   //adc_read(8);							
;;;1441   //memset(fuelstr,0,5);
;;;1442   //sprintf(fuelstr,"%d,",fuel);	
;;;1443   if(strlen(imei)<14)
000012  48fc              LDR      r0,|L172.1028|
000014  f7fffffe          BL       strlen
000018  280e              CMP      r0,#0xe
00001a  d239              BCS      |L172.144|
;;;1444   {
;;;1445   imeiinc=0;
00001c  2000              MOVS     r0,#0
00001e  49fa              LDR      r1,|L172.1032|
000020  6008              STR      r0,[r1,#0]  ; imeiinc
;;;1446   memset(imei,0,20);
000022  2114              MOVS     r1,#0x14
000024  48f7              LDR      r0,|L172.1028|
000026  f7fffffe          BL       __aeabi_memclr
;;;1447   send_GSM("\r\n\n\nAT+GSN\r\n","OK","ERROR\r\n","ERROR",10);	
00002a  200a              MOVS     r0,#0xa
00002c  4bf7              LDR      r3,|L172.1036|
00002e  4af8              LDR      r2,|L172.1040|
000030  49f8              LDR      r1,|L172.1044|
000032  9000              STR      r0,[sp,#0]
000034  48f8              LDR      r0,|L172.1048|
000036  f7fffffe          BL       send_GSM
;;;1448   for(i=0;i<strlen(uart_string_gsm);i++){
00003a  2000              MOVS     r0,#0
00003c  49f7              LDR      r1,|L172.1052|
00003e  6008              STR      r0,[r1,#0]  ; i
000040  e01d              B        |L172.126|
                  |L172.66|
;;;1449   		if((uart_string_gsm[i]>47)   &&   (uart_string_gsm[i]<58)){   //means numeric
000042  48f7              LDR      r0,|L172.1056|
000044  49f5              LDR      r1,|L172.1052|
000046  6809              LDR      r1,[r1,#0]  ; i
000048  5c40              LDRB     r0,[r0,r1]
00004a  282f              CMP      r0,#0x2f
00004c  dd12              BLE      |L172.116|
00004e  48f4              LDR      r0,|L172.1056|
000050  49f2              LDR      r1,|L172.1052|
000052  6809              LDR      r1,[r1,#0]  ; i
000054  5c40              LDRB     r0,[r0,r1]
000056  283a              CMP      r0,#0x3a
000058  da0c              BGE      |L172.116|
;;;1450   			imei[imeiinc] = uart_string_gsm[i];
00005a  48f1              LDR      r0,|L172.1056|
00005c  49ef              LDR      r1,|L172.1052|
00005e  6809              LDR      r1,[r1,#0]  ; i
000060  5c40              LDRB     r0,[r0,r1]
000062  49e8              LDR      r1,|L172.1028|
000064  4ae8              LDR      r2,|L172.1032|
000066  6812              LDR      r2,[r2,#0]  ; imeiinc
000068  5488              STRB     r0,[r1,r2]
;;;1451   			imeiinc++;
00006a  48e7              LDR      r0,|L172.1032|
00006c  6800              LDR      r0,[r0,#0]  ; imeiinc
00006e  1c40              ADDS     r0,r0,#1
000070  49e5              LDR      r1,|L172.1032|
000072  6008              STR      r0,[r1,#0]  ; imeiinc
                  |L172.116|
000074  48e9              LDR      r0,|L172.1052|
000076  6800              LDR      r0,[r0,#0]            ;1448  ; i
000078  1c40              ADDS     r0,r0,#1              ;1448
00007a  49e8              LDR      r1,|L172.1052|
00007c  6008              STR      r0,[r1,#0]            ;1448  ; i
                  |L172.126|
00007e  48e8              LDR      r0,|L172.1056|
000080  f7fffffe          BL       strlen
000084  49e5              LDR      r1,|L172.1052|
000086  6809              LDR      r1,[r1,#0]            ;1448  ; i
000088  4288              CMP      r0,r1                 ;1448
00008a  d8da              BHI      |L172.66|
;;;1452   		}
;;;1453   }
;;;1454   clear();	
00008c  f7fffffe          BL       clear
                  |L172.144|
;;;1455   }
;;;1456   	
;;;1457   	
;;;1458   	adc_read(9);							
000090  2009              MOVS     r0,#9
000092  f7fffffe          BL       adc_read
;;;1459   	memset(fuelstr,0,5);
000096  2105              MOVS     r1,#5
000098  48e2              LDR      r0,|L172.1060|
00009a  f7fffffe          BL       __aeabi_memclr4
;;;1460   	sprintf(fuelstr,"%d,",fuel);
00009e  48e2              LDR      r0,|L172.1064|
0000a0  49e2              LDR      r1,|L172.1068|
0000a2  6802              LDR      r2,[r0,#0]  ; fuel
0000a4  48df              LDR      r0,|L172.1060|
0000a6  f7fffffe          BL       __2sprintf
;;;1461   
;;;1462   	send_GSM("\r\n\r\nAT+CBC\r\n","OK","ERROR","ERROR:",tmeout);
0000aa  48e1              LDR      r0,|L172.1072|
0000ac  6800              LDR      r0,[r0,#0]  ; tmeout
0000ae  4be1              LDR      r3,|L172.1076|
0000b0  4ad6              LDR      r2,|L172.1036|
0000b2  49d8              LDR      r1,|L172.1044|
0000b4  9000              STR      r0,[sp,#0]
0000b6  48e0              LDR      r0,|L172.1080|
0000b8  f7fffffe          BL       send_GSM
;;;1463   	// not sleep	
;;;1464   	memset(num2,0,30);
0000bc  211e              MOVS     r1,#0x1e
0000be  48df              LDR      r0,|L172.1084|
0000c0  f7fffffe          BL       __aeabi_memclr
;;;1465   	parse_g(uart_string_gsm, 2, 5, ',', '\r' ,num2);
0000c4  48dd              LDR      r0,|L172.1084|
0000c6  210d              MOVS     r1,#0xd
0000c8  232c              MOVS     r3,#0x2c
0000ca  2205              MOVS     r2,#5
0000cc  9100              STR      r1,[sp,#0]
0000ce  9001              STR      r0,[sp,#4]
0000d0  2102              MOVS     r1,#2
0000d2  48d3              LDR      r0,|L172.1056|
0000d4  f7fffffe          BL       parse_g
;;;1466   	voltagecbc=myAtoi(num2);	
0000d8  48d8              LDR      r0,|L172.1084|
0000da  f7fffffe          BL       myAtoi
0000de  49d8              LDR      r1,|L172.1088|
0000e0  6008              STR      r0,[r1,#0]  ; voltagecbc
;;;1467   
;;;1468   memset(ignstr,0,2);
0000e2  48d8              LDR      r0,|L172.1092|
0000e4  2100              MOVS     r1,#0
0000e6  7001              STRB     r1,[r0,#0]
0000e8  7041              STRB     r1,[r0,#1]
;;;1469   if(GPIOB_PDIR & 0x00000001){
0000ea  48d7              LDR      r0,|L172.1096|
0000ec  6900              LDR      r0,[r0,#0x10]
0000ee  07c0              LSLS     r0,r0,#31
0000f0  0fc0              LSRS     r0,r0,#31
0000f2  2800              CMP      r0,#0
0000f4  d005              BEQ      |L172.258|
;;;1470   			sprintf(ignstr,"%d",1);
0000f6  2201              MOVS     r2,#1
0000f8  49d4              LDR      r1,|L172.1100|
0000fa  48d2              LDR      r0,|L172.1092|
0000fc  f7fffffe          BL       __2sprintf
000100  e004              B        |L172.268|
                  |L172.258|
;;;1471   }
;;;1472   else{
;;;1473   			sprintf(ignstr,"%d",0);
000102  2200              MOVS     r2,#0
000104  49d1              LDR      r1,|L172.1100|
000106  48cf              LDR      r0,|L172.1092|
000108  f7fffffe          BL       __2sprintf
                  |L172.268|
;;;1474   
;;;1475   }
;;;1476   
;;;1477   memset(acstr,0,2); //ptb2
00010c  48d0              LDR      r0,|L172.1104|
00010e  2100              MOVS     r1,#0
000110  8001              STRH     r1,[r0,#0]
;;;1478   if(GPIOB_PDIR & 0x00000004){
000112  48cd              LDR      r0,|L172.1096|
000114  6900              LDR      r0,[r0,#0x10]
000116  2104              MOVS     r1,#4
000118  4008              ANDS     r0,r0,r1
00011a  2800              CMP      r0,#0
00011c  d005              BEQ      |L172.298|
;;;1479   			sprintf(acstr,"%d",1);
00011e  2201              MOVS     r2,#1
000120  49ca              LDR      r1,|L172.1100|
000122  48cb              LDR      r0,|L172.1104|
000124  f7fffffe          BL       __2sprintf
000128  e004              B        |L172.308|
                  |L172.298|
;;;1480   }
;;;1481   else{
;;;1482   				sprintf(acstr,"%d",0);
00012a  2200              MOVS     r2,#0
00012c  49c7              LDR      r1,|L172.1100|
00012e  48c8              LDR      r0,|L172.1104|
000130  f7fffffe          BL       __2sprintf
                  |L172.308|
;;;1483   
;;;1484   }
;;;1485   	
;;;1486   while(lpticks<int_erval);
000134  bf00              NOP      
                  |L172.310|
000136  48c7              LDR      r0,|L172.1108|
000138  6800              LDR      r0,[r0,#0]  ; lpticks
00013a  49c7              LDR      r1,|L172.1112|
00013c  6809              LDR      r1,[r1,#0]  ; int_erval
00013e  4288              CMP      r0,r1
000140  dbf9              BLT      |L172.310|
;;;1487   get_gpsdata();
000142  f7fffffe          BL       get_gpsdata
;;;1488   lpticks=0;
000146  2000              MOVS     r0,#0
000148  49c2              LDR      r1,|L172.1108|
00014a  6008              STR      r0,[r1,#0]  ; lpticks
;;;1489   
;;;1490   parse_g(rmc, 3, 4, ',', ',' ,lati);
00014c  48c3              LDR      r0,|L172.1116|
00014e  212c              MOVS     r1,#0x2c
000150  460b              MOV      r3,r1
000152  2204              MOVS     r2,#4
000154  9100              STR      r1,[sp,#0]
000156  9001              STR      r0,[sp,#4]
000158  2103              MOVS     r1,#3
00015a  48c1              LDR      r0,|L172.1120|
00015c  f7fffffe          BL       parse_g
;;;1491   parse_g(rmc, 5, 6, ',', ',' ,longi);
000160  48c0              LDR      r0,|L172.1124|
000162  212c              MOVS     r1,#0x2c
000164  460b              MOV      r3,r1
000166  2206              MOVS     r2,#6
000168  9100              STR      r1,[sp,#0]
00016a  9001              STR      r0,[sp,#4]
00016c  2105              MOVS     r1,#5
00016e  48bc              LDR      r0,|L172.1120|
000170  f7fffffe          BL       parse_g
;;;1492   parse_g(rmc, 7, 8, ',', ',' ,velocity);
000174  48bc              LDR      r0,|L172.1128|
000176  212c              MOVS     r1,#0x2c
000178  460b              MOV      r3,r1
00017a  2208              MOVS     r2,#8
00017c  9100              STR      r1,[sp,#0]
00017e  9001              STR      r0,[sp,#4]
000180  2107              MOVS     r1,#7
000182  48b7              LDR      r0,|L172.1120|
000184  f7fffffe          BL       parse_g
;;;1493   		
;;;1494   		speed = stof(velocity);
000188  48b7              LDR      r0,|L172.1128|
00018a  f7fffffe          BL       stof
00018e  49b7              LDR      r1,|L172.1132|
000190  6008              STR      r0,[r1,#0]  ; speed
;;;1495   		c=stof(lati);//7523.7412
000192  48b2              LDR      r0,|L172.1116|
000194  f7fffffe          BL       stof
000198  4604              MOV      r4,r0
00019a  f7fffffe          BL       __aeabi_f2d
00019e  4ab4              LDR      r2,|L172.1136|
0001a0  c203              STM      r2!,{r0,r1}
;;;1496   		hh= c/100; //75
0001a2  2200              MOVS     r2,#0
0001a4  4bb3              LDR      r3,|L172.1140|
0001a6  49b2              LDR      r1,|L172.1136|
0001a8  c903              LDM      r1,{r0,r1}
0001aa  f7fffffe          BL       __aeabi_ddiv
0001ae  4604              MOV      r4,r0
0001b0  f7fffffe          BL       __aeabi_d2iz
0001b4  49b0              LDR      r1,|L172.1144|
0001b6  6008              STR      r0,[r1,#0]  ; hh
;;;1497   		hh11 = c/100; //75.237412
0001b8  2200              MOVS     r2,#0
0001ba  4bae              LDR      r3,|L172.1140|
0001bc  49ac              LDR      r1,|L172.1136|
0001be  c903              LDM      r1,{r0,r1}
0001c0  f7fffffe          BL       __aeabi_ddiv
0001c4  4aad              LDR      r2,|L172.1148|
0001c6  c203              STM      r2!,{r0,r1}
;;;1498   		mm11 = hh11-hh; //.237412
0001c8  48ab              LDR      r0,|L172.1144|
0001ca  6800              LDR      r0,[r0,#0]  ; hh
0001cc  f7fffffe          BL       __aeabi_i2d
0001d0  4604              MOV      r4,r0
0001d2  48aa              LDR      r0,|L172.1148|
0001d4  c80c              LDM      r0!,{r2,r3}
0001d6  4620              MOV      r0,r4
0001d8  f7fffffe          BL       __aeabi_drsub
0001dc  4aa8              LDR      r2,|L172.1152|
0001de  c203              STM      r2!,{r0,r1}
;;;1499   		mm11*=100;
0001e0  2200              MOVS     r2,#0
0001e2  4ba4              LDR      r3,|L172.1140|
0001e4  49a6              LDR      r1,|L172.1152|
0001e6  c903              LDM      r1,{r0,r1}
0001e8  f7fffffe          BL       __aeabi_dmul
0001ec  4aa4              LDR      r2,|L172.1152|
0001ee  c203              STM      r2!,{r0,r1}
;;;1500   		mm22=hh+mm11/60;	
0001f0  2200              MOVS     r2,#0
0001f2  4ba4              LDR      r3,|L172.1156|
0001f4  49a2              LDR      r1,|L172.1152|
0001f6  c903              LDM      r1,{r0,r1}
0001f8  f7fffffe          BL       __aeabi_ddiv
0001fc  4604              MOV      r4,r0
0001fe  460d              MOV      r5,r1
000200  489d              LDR      r0,|L172.1144|
000202  6800              LDR      r0,[r0,#0]  ; hh
000204  f7fffffe          BL       __aeabi_i2d
000208  4606              MOV      r6,r0
00020a  4622              MOV      r2,r4
00020c  462b              MOV      r3,r5
00020e  f7fffffe          BL       __aeabi_dadd
000212  4a9d              LDR      r2,|L172.1160|
000214  c203              STM      r2!,{r0,r1}
;;;1501   		memset(lati,0,15);
000216  210f              MOVS     r1,#0xf
000218  4890              LDR      r0,|L172.1116|
00021a  f7fffffe          BL       __aeabi_memclr
;;;1502   		sprintf(lati,"%f",mm22);
00021e  489a              LDR      r0,|L172.1160|
000220  499a              LDR      r1,|L172.1164|
000222  c80c              LDM      r0!,{r2,r3}
000224  488d              LDR      r0,|L172.1116|
000226  f7fffffe          BL       __2sprintf
;;;1503   		c=stof(longi);//7523.7412
00022a  488e              LDR      r0,|L172.1124|
00022c  f7fffffe          BL       stof
000230  4604              MOV      r4,r0
000232  f7fffffe          BL       __aeabi_f2d
000236  4a8e              LDR      r2,|L172.1136|
000238  c203              STM      r2!,{r0,r1}
;;;1504   		hh= c/100; //75
00023a  2200              MOVS     r2,#0
00023c  4b8d              LDR      r3,|L172.1140|
00023e  498c              LDR      r1,|L172.1136|
000240  c903              LDM      r1,{r0,r1}
000242  f7fffffe          BL       __aeabi_ddiv
000246  4604              MOV      r4,r0
000248  f7fffffe          BL       __aeabi_d2iz
00024c  498a              LDR      r1,|L172.1144|
00024e  6008              STR      r0,[r1,#0]  ; hh
;;;1505   		hh11 = c/100; //75.237412
000250  2200              MOVS     r2,#0
000252  4b88              LDR      r3,|L172.1140|
000254  4986              LDR      r1,|L172.1136|
000256  c903              LDM      r1,{r0,r1}
000258  f7fffffe          BL       __aeabi_ddiv
00025c  4a87              LDR      r2,|L172.1148|
00025e  c203              STM      r2!,{r0,r1}
;;;1506   		mm11 = hh11-hh; //.237412
000260  4885              LDR      r0,|L172.1144|
000262  6800              LDR      r0,[r0,#0]  ; hh
000264  f7fffffe          BL       __aeabi_i2d
000268  4604              MOV      r4,r0
00026a  4884              LDR      r0,|L172.1148|
00026c  c80c              LDM      r0!,{r2,r3}
00026e  4620              MOV      r0,r4
000270  f7fffffe          BL       __aeabi_drsub
000274  4a82              LDR      r2,|L172.1152|
000276  c203              STM      r2!,{r0,r1}
;;;1507   		mm11*=100;
000278  2200              MOVS     r2,#0
00027a  4b7e              LDR      r3,|L172.1140|
00027c  4980              LDR      r1,|L172.1152|
00027e  c903              LDM      r1,{r0,r1}
000280  f7fffffe          BL       __aeabi_dmul
000284  4a7e              LDR      r2,|L172.1152|
000286  c203              STM      r2!,{r0,r1}
;;;1508   		mm22=hh+mm11/60;	
000288  2200              MOVS     r2,#0
00028a  4b7e              LDR      r3,|L172.1156|
00028c  497c              LDR      r1,|L172.1152|
00028e  c903              LDM      r1,{r0,r1}
000290  f7fffffe          BL       __aeabi_ddiv
000294  4604              MOV      r4,r0
000296  460d              MOV      r5,r1
000298  4877              LDR      r0,|L172.1144|
00029a  6800              LDR      r0,[r0,#0]  ; hh
00029c  f7fffffe          BL       __aeabi_i2d
0002a0  4606              MOV      r6,r0
0002a2  4622              MOV      r2,r4
0002a4  462b              MOV      r3,r5
0002a6  f7fffffe          BL       __aeabi_dadd
0002aa  4a77              LDR      r2,|L172.1160|
0002ac  c203              STM      r2!,{r0,r1}
;;;1509   		memset(longi,0,15);
0002ae  210f              MOVS     r1,#0xf
0002b0  486c              LDR      r0,|L172.1124|
0002b2  f7fffffe          BL       __aeabi_memclr
;;;1510   		sprintf(longi,"%f",mm22);	
0002b6  4874              LDR      r0,|L172.1160|
0002b8  4974              LDR      r1,|L172.1164|
0002ba  c80c              LDM      r0!,{r2,r3}
0002bc  4869              LDR      r0,|L172.1124|
0002be  f7fffffe          BL       __2sprintf
;;;1511   
;;;1512   		strcat(data,"$,");
0002c2  4973              LDR      r1,|L172.1168|
0002c4  4873              LDR      r0,|L172.1172|
0002c6  f7fffffe          BL       strcat
;;;1513   		strcat(data,ipadd);
0002ca  4973              LDR      r1,|L172.1176|
0002cc  4871              LDR      r0,|L172.1172|
0002ce  f7fffffe          BL       strcat
;;;1514   		strcat(data,",RUDRA-J01,1.0.19,NR,L,");
0002d2  4972              LDR      r1,|L172.1180|
0002d4  486f              LDR      r0,|L172.1172|
0002d6  f7fffffe          BL       strcat
;;;1515   		strcat(data,imei);
0002da  494a              LDR      r1,|L172.1028|
0002dc  486d              LDR      r0,|L172.1172|
0002de  f7fffffe          BL       strcat
;;;1516   		strcat(data,",");		
0002e2  496f              LDR      r1,|L172.1184|
0002e4  486b              LDR      r0,|L172.1172|
0002e6  f7fffffe          BL       strcat
;;;1517   		strcat(data,licenceplate);
0002ea  496e              LDR      r1,|L172.1188|
0002ec  4869              LDR      r0,|L172.1172|
0002ee  f7fffffe          BL       strcat
;;;1518   		//fix
;;;1519   		memset(at_,0,100);
0002f2  2164              MOVS     r1,#0x64
0002f4  486c              LDR      r0,|L172.1192|
0002f6  f7fffffe          BL       __aeabi_memclr
;;;1520   		parse_g(rmc,2,3,',',',',at_);
0002fa  486b              LDR      r0,|L172.1192|
0002fc  212c              MOVS     r1,#0x2c
0002fe  460b              MOV      r3,r1
000300  2203              MOVS     r2,#3
000302  9100              STR      r1,[sp,#0]
000304  9001              STR      r0,[sp,#4]
000306  2102              MOVS     r1,#2
000308  4855              LDR      r0,|L172.1120|
00030a  f7fffffe          BL       parse_g
;;;1521   		if(at_[0] == 'A')strcat(data,",1,");
00030e  4866              LDR      r0,|L172.1192|
000310  7800              LDRB     r0,[r0,#0]  ; at_
000312  2841              CMP      r0,#0x41
000314  d104              BNE      |L172.800|
000316  4965              LDR      r1,|L172.1196|
000318  485e              LDR      r0,|L172.1172|
00031a  f7fffffe          BL       strcat
00031e  e003              B        |L172.808|
                  |L172.800|
;;;1522   		else	strcat(data,",0,");
000320  4963              LDR      r1,|L172.1200|
000322  485c              LDR      r0,|L172.1172|
000324  f7fffffe          BL       strcat
                  |L172.808|
;;;1523   		//date
;;;1524   		memset(at_,0,100);
000328  2164              MOVS     r1,#0x64
00032a  485f              LDR      r0,|L172.1192|
00032c  f7fffffe          BL       __aeabi_memclr
;;;1525   		parse_g(rmc,9,10,',',',',at_);
000330  485d              LDR      r0,|L172.1192|
000332  212c              MOVS     r1,#0x2c
000334  460b              MOV      r3,r1
000336  220a              MOVS     r2,#0xa
000338  9100              STR      r1,[sp,#0]
00033a  9001              STR      r0,[sp,#4]
00033c  2109              MOVS     r1,#9
00033e  4848              LDR      r0,|L172.1120|
000340  f7fffffe          BL       parse_g
;;;1526   		strcat(data,at_);
000344  4958              LDR      r1,|L172.1192|
000346  4853              LDR      r0,|L172.1172|
000348  f7fffffe          BL       strcat
;;;1527   		strcat(data,",");
00034c  4954              LDR      r1,|L172.1184|
00034e  4851              LDR      r0,|L172.1172|
000350  f7fffffe          BL       strcat
;;;1528   		//time
;;;1529   		memset(at_,0,100);
000354  2164              MOVS     r1,#0x64
000356  4854              LDR      r0,|L172.1192|
000358  f7fffffe          BL       __aeabi_memclr
;;;1530   		parse_g(rmc,1,1,',','.',at_);
00035c  4852              LDR      r0,|L172.1192|
00035e  212e              MOVS     r1,#0x2e
000360  232c              MOVS     r3,#0x2c
000362  2201              MOVS     r2,#1
000364  9100              STR      r1,[sp,#0]
000366  9001              STR      r0,[sp,#4]
000368  4611              MOV      r1,r2
00036a  483d              LDR      r0,|L172.1120|
00036c  f7fffffe          BL       parse_g
;;;1531   		strcat(data,at_);
000370  494d              LDR      r1,|L172.1192|
000372  4848              LDR      r0,|L172.1172|
000374  f7fffffe          BL       strcat
;;;1532   		strcat(data,",");				
000378  4949              LDR      r1,|L172.1184|
00037a  4846              LDR      r0,|L172.1172|
00037c  f7fffffe          BL       strcat
;;;1533   		//lati
;;;1534   		strcat(data,lati);
000380  4936              LDR      r1,|L172.1116|
000382  4844              LDR      r0,|L172.1172|
000384  f7fffffe          BL       strcat
;;;1535   		strcat(data,",");		
000388  4945              LDR      r1,|L172.1184|
00038a  4842              LDR      r0,|L172.1172|
00038c  f7fffffe          BL       strcat
;;;1536   		//latidir
;;;1537   		memset(at_,0,100);
000390  2164              MOVS     r1,#0x64
000392  4845              LDR      r0,|L172.1192|
000394  f7fffffe          BL       __aeabi_memclr
;;;1538   		parse_g(rmc,4,5,',',',',at_);
000398  4843              LDR      r0,|L172.1192|
00039a  212c              MOVS     r1,#0x2c
00039c  460b              MOV      r3,r1
00039e  2205              MOVS     r2,#5
0003a0  9100              STR      r1,[sp,#0]
0003a2  9001              STR      r0,[sp,#4]
0003a4  2104              MOVS     r1,#4
0003a6  482e              LDR      r0,|L172.1120|
0003a8  f7fffffe          BL       parse_g
;;;1539   		strcat(data,at_);
0003ac  493e              LDR      r1,|L172.1192|
0003ae  4839              LDR      r0,|L172.1172|
0003b0  f7fffffe          BL       strcat
;;;1540   		strcat(data,",");
0003b4  493a              LDR      r1,|L172.1184|
0003b6  4837              LDR      r0,|L172.1172|
0003b8  f7fffffe          BL       strcat
;;;1541   		//longi
;;;1542   		strcat(data,longi);
0003bc  4929              LDR      r1,|L172.1124|
0003be  4835              LDR      r0,|L172.1172|
0003c0  f7fffffe          BL       strcat
;;;1543   		strcat(data,",");
0003c4  4936              LDR      r1,|L172.1184|
0003c6  4833              LDR      r0,|L172.1172|
0003c8  f7fffffe          BL       strcat
;;;1544   		//longidir
;;;1545   		memset(at_,0,100);
0003cc  2164              MOVS     r1,#0x64
0003ce  4836              LDR      r0,|L172.1192|
0003d0  f7fffffe          BL       __aeabi_memclr
;;;1546   		parse_g(rmc,6,7,',',',',at_);
0003d4  4834              LDR      r0,|L172.1192|
0003d6  212c              MOVS     r1,#0x2c
0003d8  460b              MOV      r3,r1
0003da  2207              MOVS     r2,#7
0003dc  9100              STR      r1,[sp,#0]
0003de  9001              STR      r0,[sp,#4]
0003e0  2106              MOVS     r1,#6
0003e2  481f              LDR      r0,|L172.1120|
0003e4  f7fffffe          BL       parse_g
;;;1547   		strcat(data,at_);
0003e8  492f              LDR      r1,|L172.1192|
0003ea  482a              LDR      r0,|L172.1172|
0003ec  f7fffffe          BL       strcat
;;;1548   		strcat(data,",");
0003f0  492b              LDR      r1,|L172.1184|
0003f2  4828              LDR      r0,|L172.1172|
0003f4  f7fffffe          BL       strcat
;;;1549   		//speed
;;;1550   		strcat(data,velocity);
0003f8  491b              LDR      r1,|L172.1128|
0003fa  4826              LDR      r0,|L172.1172|
0003fc  e05a              B        |L172.1204|
0003fe  0000              DCW      0x0000
                  |L172.1024|
                          DCD      time52
                  |L172.1028|
                          DCD      imei
                  |L172.1032|
                          DCD      imeiinc
                  |L172.1036|
                          DCD      ||.conststring||+0xe0
                  |L172.1040|
                          DCD      ||.conststring||+0x18
                  |L172.1044|
                          DCD      ||.conststring||+0x2c
                  |L172.1048|
                          DCD      ||.conststring||+0xf4
                  |L172.1052|
                          DCD      i
                  |L172.1056|
                          DCD      uart_string_gsm
                  |L172.1060|
                          DCD      fuelstr
                  |L172.1064|
                          DCD      fuel
                  |L172.1068|
                          DCD      ||.conststring||+0x1dc
                  |L172.1072|
                          DCD      tmeout
                  |L172.1076|
                          DCD      ||.conststring||+0x10
                  |L172.1080|
                          DCD      ||.conststring||+0x700
                  |L172.1084|
                          DCD      num2
                  |L172.1088|
                          DCD      voltagecbc
                  |L172.1092|
                          DCD      ignstr
                  |L172.1096|
                          DCD      0x400ff040
                  |L172.1100|
                          DCD      ||.conststring||+0x104
                  |L172.1104|
                          DCD      acstr
                  |L172.1108|
                          DCD      lpticks
                  |L172.1112|
                          DCD      int_erval
                  |L172.1116|
                          DCD      lati
                  |L172.1120|
                          DCD      ||rmc||
                  |L172.1124|
                          DCD      longi
                  |L172.1128|
                          DCD      velocity
                  |L172.1132|
                          DCD      speed
                  |L172.1136|
                          DCD      c
                  |L172.1140|
                          DCD      0x40590000
                  |L172.1144|
                          DCD      ||hh||
                  |L172.1148|
                          DCD      hh11
                  |L172.1152|
                          DCD      mm11
                  |L172.1156|
                          DCD      0x404e0000
                  |L172.1160|
                          DCD      mm22
                  |L172.1164|
                          DCD      ||.conststring||+0x108
                  |L172.1168|
                          DCD      ||.conststring||+0x114
                  |L172.1172|
                          DCD      data
                  |L172.1176|
                          DCD      ipadd
                  |L172.1180|
                          DCD      ||.conststring||+0x134
                  |L172.1184|
                          DCD      ||.conststring||+0x14c
                  |L172.1188|
                          DCD      licenceplate
                  |L172.1192|
                          DCD      at_
                  |L172.1196|
                          DCD      ||.conststring||+0x150
                  |L172.1200|
                          DCD      ||.conststring||+0x154
                  |L172.1204|
0004b4  f7fffffe          BL       strcat
;;;1551   		strcat(data,",");
0004b8  49a7              LDR      r1,|L172.1880|
0004ba  48a8              LDR      r0,|L172.1884|
0004bc  f7fffffe          BL       strcat
;;;1552   		//course
;;;1553   		memset(at_,0,100);
0004c0  2164              MOVS     r1,#0x64
0004c2  48a7              LDR      r0,|L172.1888|
0004c4  f7fffffe          BL       __aeabi_memclr
;;;1554   		parse_g(rmc,8,9,',',',',at_);
0004c8  48a5              LDR      r0,|L172.1888|
0004ca  212c              MOVS     r1,#0x2c
0004cc  460b              MOV      r3,r1
0004ce  2209              MOVS     r2,#9
0004d0  9100              STR      r1,[sp,#0]
0004d2  9001              STR      r0,[sp,#4]
0004d4  2108              MOVS     r1,#8
0004d6  48a3              LDR      r0,|L172.1892|
0004d8  f7fffffe          BL       parse_g
;;;1555   		strcat(data,at_);
0004dc  49a0              LDR      r1,|L172.1888|
0004de  489f              LDR      r0,|L172.1884|
0004e0  f7fffffe          BL       strcat
;;;1556   		strcat(data,",");
0004e4  499c              LDR      r1,|L172.1880|
0004e6  489d              LDR      r0,|L172.1884|
0004e8  f7fffffe          BL       strcat
;;;1557   		//no of satellite
;;;1558   		memset(at_,0,100);
0004ec  2164              MOVS     r1,#0x64
0004ee  489c              LDR      r0,|L172.1888|
0004f0  f7fffffe          BL       __aeabi_memclr
;;;1559   		parse_g(gga,7,8,',',',',at_);
0004f4  489a              LDR      r0,|L172.1888|
0004f6  212c              MOVS     r1,#0x2c
0004f8  460b              MOV      r3,r1
0004fa  2208              MOVS     r2,#8
0004fc  9100              STR      r1,[sp,#0]
0004fe  9001              STR      r0,[sp,#4]
000500  2107              MOVS     r1,#7
000502  4899              LDR      r0,|L172.1896|
000504  f7fffffe          BL       parse_g
;;;1560   		strcat(data,at_);
000508  4995              LDR      r1,|L172.1888|
00050a  4894              LDR      r0,|L172.1884|
00050c  f7fffffe          BL       strcat
;;;1561   		strcat(data,",");		
000510  4991              LDR      r1,|L172.1880|
000512  4892              LDR      r0,|L172.1884|
000514  f7fffffe          BL       strcat
;;;1562   		//altitude
;;;1563   		memset(at_,0,100);
000518  2164              MOVS     r1,#0x64
00051a  4891              LDR      r0,|L172.1888|
00051c  f7fffffe          BL       __aeabi_memclr
;;;1564   		parse_g(gga,9,10,',',',',at_);
000520  488f              LDR      r0,|L172.1888|
000522  212c              MOVS     r1,#0x2c
000524  460b              MOV      r3,r1
000526  220a              MOVS     r2,#0xa
000528  9100              STR      r1,[sp,#0]
00052a  9001              STR      r0,[sp,#4]
00052c  2109              MOVS     r1,#9
00052e  488e              LDR      r0,|L172.1896|
000530  f7fffffe          BL       parse_g
;;;1565   		strcat(data,at_);
000534  498a              LDR      r1,|L172.1888|
000536  4889              LDR      r0,|L172.1884|
000538  f7fffffe          BL       strcat
;;;1566   		strcat(data,",");
00053c  4986              LDR      r1,|L172.1880|
00053e  4887              LDR      r0,|L172.1884|
000540  f7fffffe          BL       strcat
;;;1567   		//pdop
;;;1568   		memset(at_,0,100);
000544  2164              MOVS     r1,#0x64
000546  4886              LDR      r0,|L172.1888|
000548  f7fffffe          BL       __aeabi_memclr
;;;1569   		parse_g(gsa,15,16,',',',',at_);
00054c  4884              LDR      r0,|L172.1888|
00054e  212c              MOVS     r1,#0x2c
000550  460b              MOV      r3,r1
000552  2210              MOVS     r2,#0x10
000554  9100              STR      r1,[sp,#0]
000556  9001              STR      r0,[sp,#4]
000558  210f              MOVS     r1,#0xf
00055a  4884              LDR      r0,|L172.1900|
00055c  f7fffffe          BL       parse_g
;;;1570   		strcat(data,at_);
000560  497f              LDR      r1,|L172.1888|
000562  487e              LDR      r0,|L172.1884|
000564  f7fffffe          BL       strcat
;;;1571   		strcat(data,",");
000568  497b              LDR      r1,|L172.1880|
00056a  487c              LDR      r0,|L172.1884|
00056c  f7fffffe          BL       strcat
;;;1572   
;;;1573   		//Hdop
;;;1574   		memset(at_,0,100);
000570  2164              MOVS     r1,#0x64
000572  487b              LDR      r0,|L172.1888|
000574  f7fffffe          BL       __aeabi_memclr
;;;1575   		parse_g(gsa,16,17,',',',',at_);
000578  4879              LDR      r0,|L172.1888|
00057a  212c              MOVS     r1,#0x2c
00057c  460b              MOV      r3,r1
00057e  2211              MOVS     r2,#0x11
000580  9100              STR      r1,[sp,#0]
000582  9001              STR      r0,[sp,#4]
000584  2110              MOVS     r1,#0x10
000586  4879              LDR      r0,|L172.1900|
000588  f7fffffe          BL       parse_g
;;;1576   		strcat(data,at_);
00058c  4974              LDR      r1,|L172.1888|
00058e  4873              LDR      r0,|L172.1884|
000590  f7fffffe          BL       strcat
;;;1577   		//odometer
;;;1578   		strcat(data,",ODOMETER NC,");
000594  4976              LDR      r1,|L172.1904|
000596  4871              LDR      r0,|L172.1884|
000598  f7fffffe          BL       strcat
;;;1579   
;;;1580   		//network operator
;;;1581   		send_GSM("\r\n\n\nAT+COPS?\r\n","OK","ERROR\r\n","ERROR",10);	
00059c  200a              MOVS     r0,#0xa
00059e  4b75              LDR      r3,|L172.1908|
0005a0  4a75              LDR      r2,|L172.1912|
0005a2  4976              LDR      r1,|L172.1916|
0005a4  9000              STR      r0,[sp,#0]
0005a6  4876              LDR      r0,|L172.1920|
0005a8  f7fffffe          BL       send_GSM
;;;1582   		memset(at_,0,100);
0005ac  2164              MOVS     r1,#0x64
0005ae  486c              LDR      r0,|L172.1888|
0005b0  f7fffffe          BL       __aeabi_memclr
;;;1583   		parse_g(uart_string_gsm,1,2,'"','"',at_);
0005b4  486a              LDR      r0,|L172.1888|
0005b6  2122              MOVS     r1,#0x22
0005b8  460b              MOV      r3,r1
0005ba  2202              MOVS     r2,#2
0005bc  9100              STR      r1,[sp,#0]
0005be  9001              STR      r0,[sp,#4]
0005c0  2101              MOVS     r1,#1
0005c2  4870              LDR      r0,|L172.1924|
0005c4  f7fffffe          BL       parse_g
;;;1584   		strcat(data,at_);
0005c8  4965              LDR      r1,|L172.1888|
0005ca  4864              LDR      r0,|L172.1884|
0005cc  f7fffffe          BL       strcat
;;;1585   		strcat(data,",");		
0005d0  4961              LDR      r1,|L172.1880|
0005d2  4862              LDR      r0,|L172.1884|
0005d4  f7fffffe          BL       strcat
;;;1586   		//ignition status
;;;1587   		strcat(data,ignstr);
0005d8  496b              LDR      r1,|L172.1928|
0005da  4860              LDR      r0,|L172.1884|
0005dc  f7fffffe          BL       strcat
;;;1588   		strcat(data,",");	
0005e0  495d              LDR      r1,|L172.1880|
0005e2  485e              LDR      r0,|L172.1884|
0005e4  f7fffffe          BL       strcat
;;;1589   		//main power connected
;;;1590   		if( !(GPIOC_PDIR & 0x00000001)){
0005e8  4868              LDR      r0,|L172.1932|
0005ea  6900              LDR      r0,[r0,#0x10]
0005ec  07c0              LSLS     r0,r0,#31
0005ee  0fc0              LSRS     r0,r0,#31
0005f0  2800              CMP      r0,#0
0005f2  d104              BNE      |L172.1534|
;;;1591   			strcat(data,"1,");				
0005f4  4966              LDR      r1,|L172.1936|
0005f6  4859              LDR      r0,|L172.1884|
0005f8  f7fffffe          BL       strcat
0005fc  e003              B        |L172.1542|
                  |L172.1534|
;;;1592   		}
;;;1593   		else{strcat(data,"0,");}
0005fe  4965              LDR      r1,|L172.1940|
000600  4856              LDR      r0,|L172.1884|
000602  f7fffffe          BL       strcat
                  |L172.1542|
;;;1594   		//emergency status
;;;1595   		if(emergencytimer != 0)
000606  4864              LDR      r0,|L172.1944|
000608  6800              LDR      r0,[r0,#0]  ; emergencytimer
00060a  2800              CMP      r0,#0
00060c  d004              BEQ      |L172.1560|
;;;1596   			strcat(data, "1,");
00060e  4960              LDR      r1,|L172.1936|
000610  4852              LDR      r0,|L172.1884|
000612  f7fffffe          BL       strcat
000616  e003              B        |L172.1568|
                  |L172.1560|
;;;1597   		else strcat(data, "0,");
000618  495e              LDR      r1,|L172.1940|
00061a  4850              LDR      r0,|L172.1884|
00061c  f7fffffe          BL       strcat
                  |L172.1568|
;;;1598   		
;;;1599   		
;;;1600   		//tamper alert
;;;1601   		strcat(data,"C,");
000620  495e              LDR      r1,|L172.1948|
000622  484e              LDR      r0,|L172.1884|
000624  f7fffffe          BL       strcat
;;;1602   		//signal strength
;;;1603   		send_GSM("\r\n\n\nAT+CSQ\r\n","OK","ERROR\r\n","ERROR",10);	
000628  200a              MOVS     r0,#0xa
00062a  4b52              LDR      r3,|L172.1908|
00062c  4a52              LDR      r2,|L172.1912|
00062e  4953              LDR      r1,|L172.1916|
000630  9000              STR      r0,[sp,#0]
000632  485b              LDR      r0,|L172.1952|
000634  f7fffffe          BL       send_GSM
;;;1604   		memset(at_,0,100);
000638  2164              MOVS     r1,#0x64
00063a  4849              LDR      r0,|L172.1888|
00063c  f7fffffe          BL       __aeabi_memclr
;;;1605   		parse_g(uart_string_gsm,1,1,' ',',',at_);
000640  4847              LDR      r0,|L172.1888|
000642  212c              MOVS     r1,#0x2c
000644  2320              MOVS     r3,#0x20
000646  2201              MOVS     r2,#1
000648  9100              STR      r1,[sp,#0]
00064a  9001              STR      r0,[sp,#4]
00064c  4611              MOV      r1,r2
00064e  484d              LDR      r0,|L172.1924|
000650  f7fffffe          BL       parse_g
;;;1606   		strcat(data,at_);
000654  4942              LDR      r1,|L172.1888|
000656  4841              LDR      r0,|L172.1884|
000658  f7fffffe          BL       strcat
;;;1607   		strcat(data,",");	
00065c  493e              LDR      r1,|L172.1880|
00065e  483f              LDR      r0,|L172.1884|
000660  f7fffffe          BL       strcat
;;;1608   		//mcc
;;;1609   		strcat(data,"MCC");
000664  494f              LDR      r1,|L172.1956|
000666  483d              LDR      r0,|L172.1884|
000668  f7fffffe          BL       strcat
;;;1610   		strcat(data,",");	
00066c  493a              LDR      r1,|L172.1880|
00066e  483b              LDR      r0,|L172.1884|
000670  f7fffffe          BL       strcat
;;;1611   		//MNC
;;;1612   		strcat(data,"MNC");
000674  494c              LDR      r1,|L172.1960|
000676  4839              LDR      r0,|L172.1884|
000678  f7fffffe          BL       strcat
;;;1613   		strcat(data,",");	
00067c  4936              LDR      r1,|L172.1880|
00067e  4837              LDR      r0,|L172.1884|
000680  f7fffffe          BL       strcat
;;;1614   		//LAC
;;;1615   		strcat(data,"LAC");
000684  4949              LDR      r1,|L172.1964|
000686  4835              LDR      r0,|L172.1884|
000688  f7fffffe          BL       strcat
;;;1616   		strcat(data,",");
00068c  4932              LDR      r1,|L172.1880|
00068e  4833              LDR      r0,|L172.1884|
000690  f7fffffe          BL       strcat
;;;1617   		//CELL ID
;;;1618   		strcat(data,"CELL ID");
000694  4946              LDR      r1,|L172.1968|
000696  4831              LDR      r0,|L172.1884|
000698  f7fffffe          BL       strcat
;;;1619   		strcat(data,",");	
00069c  492e              LDR      r1,|L172.1880|
00069e  482f              LDR      r0,|L172.1884|
0006a0  f7fffffe          BL       strcat
;;;1620   		//NMR
;;;1621   		strcat(data,"NMR");
0006a4  4943              LDR      r1,|L172.1972|
0006a6  482d              LDR      r0,|L172.1884|
0006a8  f7fffffe          BL       strcat
;;;1622   		strcat(data,",");	
0006ac  492a              LDR      r1,|L172.1880|
0006ae  482b              LDR      r0,|L172.1884|
0006b0  f7fffffe          BL       strcat
;;;1623   
;;;1624   		//DIGITAL IP
;;;1625   		strcat(data,ignstr);					//ignition
0006b4  4934              LDR      r1,|L172.1928|
0006b6  4829              LDR      r0,|L172.1884|
0006b8  f7fffffe          BL       strcat
;;;1626   		if(emergencytimer != 0)				//emergency
0006bc  4836              LDR      r0,|L172.1944|
0006be  6800              LDR      r0,[r0,#0]  ; emergencytimer
0006c0  2800              CMP      r0,#0
0006c2  d004              BEQ      |L172.1742|
;;;1627   			strcat(data, "1");
0006c4  493c              LDR      r1,|L172.1976|
0006c6  4825              LDR      r0,|L172.1884|
0006c8  f7fffffe          BL       strcat
0006cc  e003              B        |L172.1750|
                  |L172.1742|
;;;1628   		else strcat(data, "0");
0006ce  493b              LDR      r1,|L172.1980|
0006d0  4822              LDR      r0,|L172.1884|
0006d2  f7fffffe          BL       strcat
                  |L172.1750|
;;;1629   		strcat(data,acstr);						//AC input
0006d6  493a              LDR      r1,|L172.1984|
0006d8  4820              LDR      r0,|L172.1884|
0006da  f7fffffe          BL       strcat
;;;1630   		if( !(GPIOC_PDIR & 0x00000001)){ // main power logic
0006de  482b              LDR      r0,|L172.1932|
0006e0  6900              LDR      r0,[r0,#0x10]
0006e2  07c0              LSLS     r0,r0,#31
0006e4  0fc0              LSRS     r0,r0,#31
0006e6  2800              CMP      r0,#0
0006e8  d104              BNE      |L172.1780|
;;;1631   			strcat(data,"1,");				
0006ea  4929              LDR      r1,|L172.1936|
0006ec  481b              LDR      r0,|L172.1884|
0006ee  f7fffffe          BL       strcat
0006f2  e003              B        |L172.1788|
                  |L172.1780|
;;;1632   		}
;;;1633   		else{strcat(data,"0,");}		
0006f4  4927              LDR      r1,|L172.1940|
0006f6  4819              LDR      r0,|L172.1884|
0006f8  f7fffffe          BL       strcat
                  |L172.1788|
;;;1634   		
;;;1635   		//DIGITAL OP
;;;1636   		if (ign == 1) strcat(data,"11,");
0006fc  4831              LDR      r0,|L172.1988|
0006fe  6800              LDR      r0,[r0,#0]  ; ign
000700  2801              CMP      r0,#1
000702  d104              BNE      |L172.1806|
000704  4930              LDR      r1,|L172.1992|
000706  4815              LDR      r0,|L172.1884|
000708  f7fffffe          BL       strcat
00070c  e003              B        |L172.1814|
                  |L172.1806|
;;;1637   		else strcat(data,"00,");
00070e  492f              LDR      r1,|L172.1996|
000710  4812              LDR      r0,|L172.1884|
000712  f7fffffe          BL       strcat
                  |L172.1814|
;;;1638   		
;;;1639   		//FUEL/LOAD SENSOR
;;;1640   		adc_read(9);							
000716  2009              MOVS     r0,#9
000718  f7fffffe          BL       adc_read
;;;1641   		memset(fuelstr,0,5);
00071c  2105              MOVS     r1,#5
00071e  482c              LDR      r0,|L172.2000|
000720  f7fffffe          BL       __aeabi_memclr4
;;;1642   		sprintf(fuelstr,"%d,",fuel);
000724  482b              LDR      r0,|L172.2004|
000726  492c              LDR      r1,|L172.2008|
000728  6802              LDR      r2,[r0,#0]  ; fuel
00072a  4829              LDR      r0,|L172.2000|
00072c  f7fffffe          BL       __2sprintf
;;;1643   		strcat(data,fuelstr);			
000730  4927              LDR      r1,|L172.2000|
000732  480a              LDR      r0,|L172.1884|
000734  f7fffffe          BL       strcat
;;;1644   		//frame no. 
;;;1645   		memset(fuelstr,0,5);
000738  2105              MOVS     r1,#5
00073a  4825              LDR      r0,|L172.2000|
00073c  f7fffffe          BL       __aeabi_memclr4
;;;1646   		sprintf(fuelstr,"%d*",frameno);
000740  4826              LDR      r0,|L172.2012|
000742  4927              LDR      r1,|L172.2016|
000744  6802              LDR      r2,[r0,#0]  ; frameno
000746  4822              LDR      r0,|L172.2000|
000748  f7fffffe          BL       __2sprintf
;;;1647   		strcat(data,fuelstr);	
00074c  4920              LDR      r1,|L172.2000|
00074e  4803              LDR      r0,|L172.1884|
000750  f7fffffe          BL       strcat
;;;1648   		
;;;1649   //return 0;
;;;1650   }
000754  bdfe              POP      {r1-r7,pc}
;;;1651   
                          ENDP

000756  0000              DCW      0x0000
                  |L172.1880|
                          DCD      ||.conststring||+0x14c
                  |L172.1884|
                          DCD      data
                  |L172.1888|
                          DCD      at_
                  |L172.1892|
                          DCD      ||rmc||
                  |L172.1896|
                          DCD      gga
                  |L172.1900|
                          DCD      gsa
                  |L172.1904|
                          DCD      ||.conststring||+0x158
                  |L172.1908|
                          DCD      ||.conststring||+0xe0
                  |L172.1912|
                          DCD      ||.conststring||+0x18
                  |L172.1916|
                          DCD      ||.conststring||+0x2c
                  |L172.1920|
                          DCD      ||.conststring||+0x168
                  |L172.1924|
                          DCD      uart_string_gsm
                  |L172.1928|
                          DCD      ignstr
                  |L172.1932|
                          DCD      0x400ff080
                  |L172.1936|
                          DCD      ||.conststring||+0x178
                  |L172.1940|
                          DCD      ||.conststring||+0x17c
                  |L172.1944|
                          DCD      emergencytimer
                  |L172.1948|
                          DCD      ||.conststring||+0x180
                  |L172.1952|
                          DCD      ||.conststring||+0x184
                  |L172.1956|
                          DCD      ||.conststring||+0x710
                  |L172.1960|
                          DCD      ||.conststring||+0x714
                  |L172.1964|
                          DCD      ||.conststring||+0x718
                  |L172.1968|
                          DCD      ||.conststring||+0x71c
                  |L172.1972|
                          DCD      ||.conststring||+0x1b8
                  |L172.1976|
                          DCD      ||.conststring||+0x1d0
                  |L172.1980|
                          DCD      ||.conststring||+0x130
                  |L172.1984|
                          DCD      acstr
                  |L172.1988|
                          DCD      ign
                  |L172.1992|
                          DCD      ||.conststring||+0x1d4
                  |L172.1996|
                          DCD      ||.conststring||+0x1d8
                  |L172.2000|
                          DCD      fuelstr
                  |L172.2004|
                          DCD      fuel
                  |L172.2008|
                          DCD      ||.conststring||+0x1dc
                  |L172.2012|
                          DCD      frameno
                  |L172.2016|
                          DCD      ||.conststring||+0x1e0

                          AREA ||i.send_chunk||, COMGROUP=send_chunk, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  send_chunk PROC
;;;2129   
;;;2130   __inline void  send_chunk(){
000000  b57c              PUSH     {r2-r6,lr}
;;;2131   fsz=0;
000002  2000              MOVS     r0,#0
000004  49fe              LDR      r1,|L179.1024|
000006  6008              STR      r0,[r1,#0]  ; fsz
;;;2132   times=-2;	
000008  1e80              SUBS     r0,r0,#2
00000a  49fe              LDR      r1,|L179.1028|
00000c  6008              STR      r0,[r1,#0]  ; times
;;;2133   	
;;;2134   
;;;2135   temp=int_erval;				
00000e  48fe              LDR      r0,|L179.1032|
000010  6800              LDR      r0,[r0,#0]  ; int_erval
000012  49fe              LDR      r1,|L179.1036|
000014  6008              STR      r0,[r1,#0]  ; temp
;;;2136   int_erval=1;
000016  2001              MOVS     r0,#1
000018  49fb              LDR      r1,|L179.1032|
00001a  6008              STR      r0,[r1,#0]  ; int_erval
;;;2137   
;;;2138   	
;;;2139   memset(at_,0,100);
00001c  2164              MOVS     r1,#0x64
00001e  48fc              LDR      r0,|L179.1040|
000020  f7fffffe          BL       __aeabi_memclr
;;;2140   sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
000024  4afb              LDR      r2,|L179.1044|
000026  49fc              LDR      r1,|L179.1048|
000028  48f9              LDR      r0,|L179.1040|
00002a  f7fffffe          BL       __2sprintf
;;;2141   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00002e  48fb              LDR      r0,|L179.1052|
000030  6800              LDR      r0,[r0,#0]  ; tmeout
000032  4bfb              LDR      r3,|L179.1056|
000034  4afb              LDR      r2,|L179.1060|
000036  49fc              LDR      r1,|L179.1064|
000038  9000              STR      r0,[sp,#0]
00003a  48f5              LDR      r0,|L179.1040|
00003c  f7fffffe          BL       send_GSM
;;;2142   parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
000040  48fa              LDR      r0,|L179.1068|
000042  210d              MOVS     r1,#0xd
000044  2320              MOVS     r3,#0x20
000046  2205              MOVS     r2,#5
000048  9100              STR      r1,[sp,#0]
00004a  9001              STR      r0,[sp,#4]
00004c  2101              MOVS     r1,#1
00004e  48f8              LDR      r0,|L179.1072|
000050  f7fffffe          BL       parse_g
;;;2143   fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
000054  48f5              LDR      r0,|L179.1068|
000056  f7fffffe          BL       stof
00005a  49e9              LDR      r1,|L179.1024|
00005c  6008              STR      r0,[r1,#0]  ; fsz
;;;2144   //reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;2145   	
;;;2146   times =	(fsz/900) + 2;
00005e  49f5              LDR      r1,|L179.1076|
000060  48e7              LDR      r0,|L179.1024|
000062  6800              LDR      r0,[r0,#0]  ; fsz
000064  f7fffffe          BL       __aeabi_fdiv
000068  4605              MOV      r5,r0
00006a  2101              MOVS     r1,#1
00006c  0789              LSLS     r1,r1,#30
00006e  f7fffffe          BL       __aeabi_fadd
000072  4604              MOV      r4,r0
000074  f7fffffe          BL       __aeabi_f2iz
000078  49e2              LDR      r1,|L179.1028|
00007a  6008              STR      r0,[r1,#0]  ; times
;;;2147   for(;k5<=(times);){
00007c  e3fe              B        |L179.2172|
                  |L179.126|
;;;2148   if(fsz==0){log0=1;break;}
00007e  2100              MOVS     r1,#0
000080  48df              LDR      r0,|L179.1024|
000082  6800              LDR      r0,[r0,#0]  ; fsz
000084  f7fffffe          BL       __aeabi_cfcmpeq
000088  d103              BNE      |L179.146|
00008a  2001              MOVS     r0,#1
00008c  49ea              LDR      r1,|L179.1080|
00008e  6008              STR      r0,[r1,#0]  ; log0
000090  e3f6              B        |L179.2176|
                  |L179.146|
;;;2149   else log0=0;
000092  2000              MOVS     r0,#0
000094  49e8              LDR      r1,|L179.1080|
000096  6008              STR      r0,[r1,#0]  ; log0
;;;2150   
;;;2151   	RESET_ON;
000098  2020              MOVS     r0,#0x20
00009a  49e8              LDR      r1,|L179.1084|
00009c  6048              STR      r0,[r1,#4]
;;;2152   	DTR_OFF;
00009e  2080              MOVS     r0,#0x80
0000a0  49e6              LDR      r1,|L179.1084|
0000a2  3140              ADDS     r1,r1,#0x40
0000a4  6088              STR      r0,[r1,#8]
;;;2153   	
;;;2154   msg_sim800(); 
0000a6  f7fffffe          BL       msg_sim800
;;;2155   
;;;2156   memset(data,0,strlen(data));	
0000aa  48e5              LDR      r0,|L179.1088|
0000ac  f7fffffe          BL       strlen
0000b0  4604              MOV      r4,r0
0000b2  4621              MOV      r1,r4
0000b4  48e2              LDR      r0,|L179.1088|
0000b6  f7fffffe          BL       __aeabi_memclr
;;;2157   strcat(data,"\n");	
0000ba  49e2              LDR      r1,|L179.1092|
0000bc  48e0              LDR      r0,|L179.1088|
0000be  f7fffffe          BL       strcat
;;;2158   	
;;;2159   	
;;;2160   	memset(at_,0,100);
0000c2  2164              MOVS     r1,#0x64
0000c4  48d2              LDR      r0,|L179.1040|
0000c6  f7fffffe          BL       __aeabi_memclr
;;;2161   	sprintf(at_,"\r\n\r\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);
0000ca  4ad2              LDR      r2,|L179.1044|
0000cc  49d2              LDR      r1,|L179.1048|
0000ce  48d0              LDR      r0,|L179.1040|
0000d0  f7fffffe          BL       __2sprintf
;;;2162   GPS_COLLECT();
0000d4  f7fffffe          BL       GPS_COLLECT
;;;2163   
;;;2164   	
;;;2165   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
0000d8  48d0              LDR      r0,|L179.1052|
0000da  6800              LDR      r0,[r0,#0]  ; tmeout
0000dc  4bd0              LDR      r3,|L179.1056|
0000de  4ad1              LDR      r2,|L179.1060|
0000e0  49d1              LDR      r1,|L179.1064|
0000e2  9000              STR      r0,[sp,#0]
0000e4  48ca              LDR      r0,|L179.1040|
0000e6  f7fffffe          BL       send_GSM
;;;2166   	parse_g(uart_string_gsm, 1,5, ' ', '\r', fsize);
0000ea  48d0              LDR      r0,|L179.1068|
0000ec  210d              MOVS     r1,#0xd
0000ee  2320              MOVS     r3,#0x20
0000f0  2205              MOVS     r2,#5
0000f2  9100              STR      r1,[sp,#0]
0000f4  9001              STR      r0,[sp,#4]
0000f6  2101              MOVS     r1,#1
0000f8  48cd              LDR      r0,|L179.1072|
0000fa  f7fffffe          BL       parse_g
;;;2167   	fsz=stof(fsize);//7523.7412	              //1400 is the maximum imit  //200 is the maximum size of 1 data	
0000fe  48cb              LDR      r0,|L179.1068|
000100  f7fffffe          BL       stof
000104  49be              LDR      r1,|L179.1024|
000106  6008              STR      r0,[r1,#0]  ; fsz
;;;2168   	//reading buffer of SD data = 1400 // need to concatinate maximum amount of data in it and a 200 character data
;;;2169   	times =	(fsz/900) + 1;	
000108  49ca              LDR      r1,|L179.1076|
00010a  48bd              LDR      r0,|L179.1024|
00010c  6800              LDR      r0,[r0,#0]  ; fsz
00010e  f7fffffe          BL       __aeabi_fdiv
000112  4605              MOV      r5,r0
000114  217f              MOVS     r1,#0x7f
000116  05c9              LSLS     r1,r1,#23
000118  f7fffffe          BL       __aeabi_fadd
00011c  4604              MOV      r4,r0
00011e  f7fffffe          BL       __aeabi_f2iz
000122  49b8              LDR      r1,|L179.1028|
000124  6008              STR      r0,[r1,#0]  ; times
;;;2170   	
;;;2171   	
;;;2172   memset(at_,0,100);
000126  2164              MOVS     r1,#0x64
000128  48b9              LDR      r0,|L179.1040|
00012a  f7fffffe          BL       __aeabi_memclr
;;;2173   //sprintf(at_,"\r\n\r\n              <%d>   <%d>   <=%d>          \r\n\r\n",times,k5,rtcticks2);							
;;;2174   //send_modem(at_);
;;;2175   clear();
00012e  f7fffffe          BL       clear
;;;2176   	
;;;2177   	
;;;2178   		sprintf(at_, "\r\n\r\nAT+FSREAD=%s\\LOG.TXT,1,1100,%d\r\n",drive,cursorvaluepr );		//1256
000132  48c5              LDR      r0,|L179.1096|
000134  4ab7              LDR      r2,|L179.1044|
000136  49c5              LDR      r1,|L179.1100|
000138  6803              LDR      r3,[r0,#0]  ; cursorvaluepr
00013a  48b5              LDR      r0,|L179.1040|
00013c  f7fffffe          BL       __2sprintf
;;;2179   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",5);
000140  2005              MOVS     r0,#5
000142  4bb7              LDR      r3,|L179.1056|
000144  4ab7              LDR      r2,|L179.1060|
000146  49b8              LDR      r1,|L179.1064|
000148  9000              STR      r0,[sp,#0]
00014a  48b1              LDR      r0,|L179.1040|
00014c  f7fffffe          BL       send_GSM
;;;2180   			if(strstr(uart_string_gsm,"ERROR")){
000150  49bf              LDR      r1,|L179.1104|
000152  48b7              LDR      r0,|L179.1072|
000154  f7fffffe          BL       strstr
000158  2800              CMP      r0,#0
00015a  d00b              BEQ      |L179.372|
;;;2181   				RESET_OFF;
00015c  2020              MOVS     r0,#0x20
00015e  49b7              LDR      r1,|L179.1084|
000160  6088              STR      r0,[r1,#8]
;;;2182   				delay(50);
000162  2032              MOVS     r0,#0x32
000164  f7fffffe          BL       delay
;;;2183   				RESET_ON;
000168  2020              MOVS     r0,#0x20
00016a  49b4              LDR      r1,|L179.1084|
00016c  6048              STR      r0,[r1,#4]
;;;2184   				delay(50);
00016e  2032              MOVS     r0,#0x32
000170  f7fffffe          BL       delay
                  |L179.372|
;;;2185   			}
;;;2186   		cntendl=count_char('\n',uart_string_gsm);
000174  49ae              LDR      r1,|L179.1072|
000176  200a              MOVS     r0,#0xa
000178  f7fffffe          BL       count_char
00017c  49b5              LDR      r1,|L179.1108|
00017e  6008              STR      r0,[r1,#0]  ; cntendl
;;;2187      //if(cntendl!=0)
;;;2188   		enters = cntendl;		
000180  4608              MOV      r0,r1
000182  6800              LDR      r0,[r0,#0]  ; cntendl
000184  49b4              LDR      r1,|L179.1112|
000186  6008              STR      r0,[r1,#0]  ; enters
;;;2189   		memset(sd_data,0,1400);
000188  21af              MOVS     r1,#0xaf
00018a  00c9              LSLS     r1,r1,#3
00018c  48b3              LDR      r0,|L179.1116|
00018e  f7fffffe          BL       __aeabi_memclr
;;;2190   		parse_g(uart_string_gsm, 1,enters-2, '\n', '\n' ,sd_data);	
000192  48b2              LDR      r0,|L179.1116|
000194  210a              MOVS     r1,#0xa
000196  9100              STR      r1,[sp,#0]
000198  9001              STR      r0,[sp,#4]
00019a  48af              LDR      r0,|L179.1112|
00019c  6800              LDR      r0,[r0,#0]  ; enters
00019e  1e82              SUBS     r2,r0,#2
0001a0  460b              MOV      r3,r1
0001a2  2101              MOVS     r1,#1
0001a4  48a2              LDR      r0,|L179.1072|
0001a6  f7fffffe          BL       parse_g
;;;2191   		strcat(sd_data,"\n");
0001aa  49a6              LDR      r1,|L179.1092|
0001ac  48ab              LDR      r0,|L179.1116|
0001ae  f7fffffe          BL       strcat
;;;2192   		strcat(sd_data,data);
0001b2  49a3              LDR      r1,|L179.1088|
0001b4  48a9              LDR      r0,|L179.1116|
0001b6  f7fffffe          BL       strcat
;;;2193   		if(strstr(sd_data,"SEND OK")    ||   strstr(sd_data,"ERROR") || strstr(sd_data,"FAIL")  ||  strstr(sd_data,"DEACT"))	{
0001ba  49a9              LDR      r1,|L179.1120|
0001bc  48a7              LDR      r0,|L179.1116|
0001be  f7fffffe          BL       strstr
0001c2  2800              CMP      r0,#0
0001c4  d111              BNE      |L179.490|
0001c6  49a2              LDR      r1,|L179.1104|
0001c8  48a4              LDR      r0,|L179.1116|
0001ca  f7fffffe          BL       strstr
0001ce  2800              CMP      r0,#0
0001d0  d10b              BNE      |L179.490|
0001d2  49a4              LDR      r1,|L179.1124|
0001d4  48a1              LDR      r0,|L179.1116|
0001d6  f7fffffe          BL       strstr
0001da  2800              CMP      r0,#0
0001dc  d105              BNE      |L179.490|
0001de  49a2              LDR      r1,|L179.1128|
0001e0  489e              LDR      r0,|L179.1116|
0001e2  f7fffffe          BL       strstr
0001e6  2800              CMP      r0,#0
0001e8  d008              BEQ      |L179.508|
                  |L179.490|
;;;2194   		memset(exception,0,200);	
0001ea  21c8              MOVS     r1,#0xc8
0001ec  489f              LDR      r0,|L179.1132|
0001ee  f7fffffe          BL       __aeabi_memclr
;;;2195   		strcat(exception,"exception : COMPARED RESPONCES IN THE DATA\n\n\n\n");	
0001f2  499f              LDR      r1,|L179.1136|
0001f4  489d              LDR      r0,|L179.1132|
0001f6  f7fffffe          BL       strcat
0001fa  e003              B        |L179.516|
                  |L179.508|
;;;2196   		}
;;;2197   		else{memset(exception,0,200);}
0001fc  21c8              MOVS     r1,#0xc8
0001fe  489b              LDR      r0,|L179.1132|
000200  f7fffffe          BL       __aeabi_memclr
                  |L179.516|
;;;2198   
;;;2199   	
;;;2200   		qwe=strlen(uart_string_gsm);
000204  488a              LDR      r0,|L179.1072|
000206  f7fffffe          BL       strlen
00020a  499a              LDR      r1,|L179.1140|
00020c  6008              STR      r0,[r1,#0]  ; qwe
;;;2201   		memset(uart_string_gsm,0,qwe);
00020e  4608              MOV      r0,r1
000210  6801              LDR      r1,[r0,#0]  ; qwe
000212  4887              LDR      r0,|L179.1072|
000214  f7fffffe          BL       __aeabi_memclr
;;;2202   		
;;;2203   
;;;2204   	
;;;2205   		
;;;2206   		send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT",tmeout);	
000218  4880              LDR      r0,|L179.1052|
00021a  6800              LDR      r0,[r0,#0]  ; tmeout
00021c  4b96              LDR      r3,|L179.1144|
00021e  4a8c              LDR      r2,|L179.1104|
000220  4996              LDR      r1,|L179.1148|
000222  9000              STR      r0,[sp,#0]
000224  4896              LDR      r0,|L179.1152|
000226  f7fffffe          BL       send_GSM
;;;2207   								cond =mystrstr(uart_string_gsm,'>');
00022a  213e              MOVS     r1,#0x3e
00022c  4880              LDR      r0,|L179.1072|
00022e  f7fffffe          BL       mystrstr
000232  4994              LDR      r1,|L179.1156|
000234  7008              STRB     r0,[r1,#0]
;;;2208   									if(cond)	
000236  4608              MOV      r0,r1
000238  7800              LDRB     r0,[r0,#0]  ; cond
00023a  2800              CMP      r0,#0
00023c  d101              BNE      |L179.578|
00023e  f001f829          BL       |L179.4756|
                  |L179.578|
;;;2209   									{	
;;;2210   									clear();
000242  f7fffffe          BL       clear
;;;2211   									memset(uart_string_gsm,0,5000);
000246  4990              LDR      r1,|L179.1160|
000248  4879              LDR      r0,|L179.1072|
00024a  f7fffffe          BL       __aeabi_memclr
;;;2212   									if(strlen(exception) > 5){
00024e  4887              LDR      r0,|L179.1132|
000250  f7fffffe          BL       strlen
000254  2805              CMP      r0,#5
000256  d905              BLS      |L179.612|
;;;2213   									qwe=strlen(exception);
000258  4884              LDR      r0,|L179.1132|
00025a  f7fffffe          BL       strlen
00025e  4985              LDR      r1,|L179.1140|
000260  6008              STR      r0,[r1,#0]  ; qwe
000262  e004              B        |L179.622|
                  |L179.612|
;;;2214   									}
;;;2215   									else{										
;;;2216   									qwe=strlen(sd_data);
000264  487d              LDR      r0,|L179.1116|
000266  f7fffffe          BL       strlen
00026a  4982              LDR      r1,|L179.1140|
00026c  6008              STR      r0,[r1,#0]  ; qwe
                  |L179.622|
;;;2217   									}										
;;;2218   									tout=0;
00026e  2000              MOVS     r0,#0
000270  4986              LDR      r1,|L179.1164|
000272  6008              STR      r0,[r1,#0]  ; tout
;;;2219   									k2=0;
000274  4986              LDR      r1,|L179.1168|
000276  6008              STR      r0,[r1,#0]  ; k2
;;;2220   									for(k=0;k<(qwe);k++)
000278  4986              LDR      r1,|L179.1172|
00027a  6008              STR      r0,[r1,#0]  ; k
00027c  e018              B        |L179.688|
                  |L179.638|
;;;2221   									{
;;;2222   										if(strlen(exception) > 5){
00027e  487b              LDR      r0,|L179.1132|
000280  f7fffffe          BL       strlen
000284  2805              CMP      r0,#5
000286  d907              BLS      |L179.664|
;;;2223   										uart_putchar(UART1_BASE_PTR, exception[k]);	
000288  4878              LDR      r0,|L179.1132|
00028a  4a82              LDR      r2,|L179.1172|
00028c  6812              LDR      r2,[r2,#0]  ; k
00028e  5c81              LDRB     r1,[r0,r2]
000290  4881              LDR      r0,|L179.1176|
000292  f7fffffe          BL       uart_putchar
000296  e006              B        |L179.678|
                  |L179.664|
;;;2224   										}
;;;2225   										else{										
;;;2226   										uart_putchar(UART1_BASE_PTR, sd_data[k]);
000298  4870              LDR      r0,|L179.1116|
00029a  4a7e              LDR      r2,|L179.1172|
00029c  6812              LDR      r2,[r2,#0]  ; k
00029e  5c81              LDRB     r1,[r0,r2]
0002a0  487d              LDR      r0,|L179.1176|
0002a2  f7fffffe          BL       uart_putchar
                  |L179.678|
0002a6  487b              LDR      r0,|L179.1172|
0002a8  6800              LDR      r0,[r0,#0]            ;2220  ; k
0002aa  1c40              ADDS     r0,r0,#1              ;2220
0002ac  4979              LDR      r1,|L179.1172|
0002ae  6008              STR      r0,[r1,#0]            ;2220  ; k
                  |L179.688|
0002b0  4878              LDR      r0,|L179.1172|
0002b2  6800              LDR      r0,[r0,#0]            ;2220  ; k
0002b4  496f              LDR      r1,|L179.1140|
0002b6  6809              LDR      r1,[r1,#0]            ;2220  ; qwe
0002b8  4288              CMP      r0,r1                 ;2220
0002ba  dbe0              BLT      |L179.638|
;;;2227   										}
;;;2228   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
0002bc  210a              MOVS     r1,#0xa
0002be  4876              LDR      r0,|L179.1176|
0002c0  f7fffffe          BL       uart_putchar
0002c4  211a              MOVS     r1,#0x1a
0002c6  4874              LDR      r0,|L179.1176|
0002c8  f7fffffe          BL       uart_putchar
0002cc  211a              MOVS     r1,#0x1a
0002ce  4872              LDR      r0,|L179.1176|
0002d0  f7fffffe          BL       uart_putchar
0002d4  211a              MOVS     r1,#0x1a
0002d6  4870              LDR      r0,|L179.1176|
0002d8  f7fffffe          BL       uart_putchar
0002dc  211a              MOVS     r1,#0x1a
0002de  486e              LDR      r0,|L179.1176|
0002e0  f7fffffe          BL       uart_putchar
0002e4  211a              MOVS     r1,#0x1a
0002e6  486c              LDR      r0,|L179.1176|
0002e8  f7fffffe          BL       uart_putchar
0002ec  211a              MOVS     r1,#0x1a
0002ee  486a              LDR      r0,|L179.1176|
0002f0  f7fffffe          BL       uart_putchar
;;;2229   									do
0002f4  bf00              NOP      
                  |L179.758|
;;;2230   																{q1=strstr(uart_string_gsm,"SEND OK");
0002f6  495a              LDR      r1,|L179.1120|
0002f8  484d              LDR      r0,|L179.1072|
0002fa  f7fffffe          BL       strstr
0002fe  4967              LDR      r1,|L179.1180|
000300  6008              STR      r0,[r1,#0]  ; q1
;;;2231   																	q2=strstr(uart_string_gsm, "ERROR");
000302  4953              LDR      r1,|L179.1104|
000304  484a              LDR      r0,|L179.1072|
000306  f7fffffe          BL       strstr
00030a  4965              LDR      r1,|L179.1184|
00030c  6008              STR      r0,[r1,#0]  ; q2
;;;2232   																		q3=strstr(uart_string_gsm, "FAIL");	
00030e  4955              LDR      r1,|L179.1124|
000310  4847              LDR      r0,|L179.1072|
000312  f7fffffe          BL       strstr
000316  4963              LDR      r1,|L179.1188|
000318  6008              STR      r0,[r1,#0]  ; q3
;;;2233   																			q4=strstr(uart_string_gsm, "DEACT");	
00031a  4953              LDR      r1,|L179.1128|
00031c  4844              LDR      r0,|L179.1072|
00031e  f7fffffe          BL       strstr
000322  4961              LDR      r1,|L179.1192|
000324  6008              STR      r0,[r1,#0]  ; q4
;;;2234   																	
;;;2235   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) ); //|| (timeout < 1)   
000326  485d              LDR      r0,|L179.1180|
000328  6800              LDR      r0,[r0,#0]  ; q1
00032a  2800              CMP      r0,#0
00032c  d10f              BNE      |L179.846|
00032e  485c              LDR      r0,|L179.1184|
000330  6800              LDR      r0,[r0,#0]  ; q2
000332  2800              CMP      r0,#0
000334  d10b              BNE      |L179.846|
000336  485b              LDR      r0,|L179.1188|
000338  6800              LDR      r0,[r0,#0]  ; q3
00033a  2800              CMP      r0,#0
00033c  d107              BNE      |L179.846|
00033e  4608              MOV      r0,r1
000340  6800              LDR      r0,[r0,#0]  ; q4
000342  2800              CMP      r0,#0
000344  d103              BNE      |L179.846|
000346  4851              LDR      r0,|L179.1164|
000348  6800              LDR      r0,[r0,#0]  ; tout
00034a  2808              CMP      r0,#8
00034c  ddd3              BLE      |L179.758|
                  |L179.846|
;;;2236   																delay(10);clear();
00034e  200a              MOVS     r0,#0xa
000350  f7fffffe          BL       delay
000354  f7fffffe          BL       clear
;;;2237   														uart_putchar(UART1_BASE_PTR,0x1A);
000358  211a              MOVS     r1,#0x1a
00035a  484f              LDR      r0,|L179.1176|
00035c  f7fffffe          BL       uart_putchar
;;;2238   												delay(10);
000360  200a              MOVS     r0,#0xa
000362  f7fffffe          BL       delay
;;;2239   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000366  211a              MOVS     r1,#0x1a
000368  484b              LDR      r0,|L179.1176|
00036a  f7fffffe          BL       uart_putchar
00036e  211a              MOVS     r1,#0x1a
000370  4849              LDR      r0,|L179.1176|
000372  f7fffffe          BL       uart_putchar
000376  211a              MOVS     r1,#0x1a
000378  4847              LDR      r0,|L179.1176|
00037a  f7fffffe          BL       uart_putchar
;;;2240   delay(50);
00037e  2032              MOVS     r0,#0x32
000380  f7fffffe          BL       delay
;;;2241   if(strstr(uart_string_gsm,"SEND OK"))
000384  4936              LDR      r1,|L179.1120|
000386  482a              LDR      r0,|L179.1072|
000388  f7fffffe          BL       strstr
00038c  2800              CMP      r0,#0
00038e  d013              BEQ      |L179.952|
;;;2242   {
;;;2243   cursorvaluene=cursor_val(sd_data,enters-3);
000390  4831              LDR      r0,|L179.1112|
000392  6800              LDR      r0,[r0,#0]  ; enters
000394  1ec1              SUBS     r1,r0,#3
000396  4831              LDR      r0,|L179.1116|
000398  f7fffffe          BL       cursor_val
00039c  4943              LDR      r1,|L179.1196|
00039e  6008              STR      r0,[r1,#0]  ; cursorvaluene
;;;2244   cursorvaluepr+=cursorvaluene;
0003a0  4829              LDR      r0,|L179.1096|
0003a2  6800              LDR      r0,[r0,#0]  ; cursorvaluepr
0003a4  6809              LDR      r1,[r1,#0]  ; cursorvaluene
0003a6  1840              ADDS     r0,r0,r1
0003a8  4927              LDR      r1,|L179.1096|
0003aa  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;2245   k5++;
0003ac  4840              LDR      r0,|L179.1200|
0003ae  6800              LDR      r0,[r0,#0]  ; k5
0003b0  1c40              ADDS     r0,r0,#1
0003b2  493f              LDR      r1,|L179.1200|
0003b4  6008              STR      r0,[r1,#0]  ; k5
0003b6  e3fc              B        |L179.2994|
                  |L179.952|
;;;2246   }
;;;2247   else{remove_all_chars(data, '\n', '\n');
0003b8  220a              MOVS     r2,#0xa
0003ba  4611              MOV      r1,r2
0003bc  4820              LDR      r0,|L179.1088|
0003be  f7fffffe          BL       remove_all_chars
;;;2248   			strreplace(data, ",L,", ",H,");
0003c2  4a3c              LDR      r2,|L179.1204|
0003c4  493c              LDR      r1,|L179.1208|
0003c6  481e              LDR      r0,|L179.1088|
0003c8  f7fffffe          BL       strreplace
;;;2249   
;;;2250   	delay(100);
0003cc  2064              MOVS     r0,#0x64
0003ce  f7fffffe          BL       delay
;;;2251   		clear();//memset(uart_string_gsm,0,5000);
0003d2  f7fffffe          BL       clear
;;;2252   	
;;;2253   	memset(at_,0,100);
0003d6  2164              MOVS     r1,#0x64
0003d8  480d              LDR      r0,|L179.1040|
0003da  f7fffffe          BL       __aeabi_memclr
;;;2254   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0003de  4818              LDR      r0,|L179.1088|
0003e0  f7fffffe          BL       strlen
0003e4  1c44              ADDS     r4,r0,#1
0003e6  4623              MOV      r3,r4
0003e8  4a0a              LDR      r2,|L179.1044|
0003ea  4934              LDR      r1,|L179.1212|
0003ec  4808              LDR      r0,|L179.1040|
0003ee  f7fffffe          BL       __2sprintf
;;;2255   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0003f2  2005              MOVS     r0,#5
0003f4  4b16              LDR      r3,|L179.1104|
0003f6  4a0b              LDR      r2,|L179.1060|
0003f8  4920              LDR      r1,|L179.1148|
0003fa  9000              STR      r0,[sp,#0]
0003fc  4804              LDR      r0,|L179.1040|
0003fe  e05f              B        |L179.1216|
                  |L179.1024|
                          DCD      ||fsz||
                  |L179.1028|
                          DCD      times
                  |L179.1032|
                          DCD      int_erval
                  |L179.1036|
                          DCD      temp
                  |L179.1040|
                          DCD      at_
                  |L179.1044|
                          DCD      drive
                  |L179.1048|
                          DCD      ||.conststring||+0x724
                  |L179.1052|
                          DCD      tmeout
                  |L179.1056|
                          DCD      ||.conststring||+0x10
                  |L179.1060|
                          DCD      ||.conststring||+0x18
                  |L179.1064|
                          DCD      ||.conststring||+0x2c
                  |L179.1068|
                          DCD      fsize
                  |L179.1072|
                          DCD      uart_string_gsm
                  |L179.1076|
                          DCD      0x44610000
                  |L179.1080|
                          DCD      log0
                  |L179.1084|
                          DCD      0x400ff080
                  |L179.1088|
                          DCD      data
                  |L179.1092|
                          DCD      ||.conststring||+0x51c
                  |L179.1096|
                          DCD      cursorvaluepr
                  |L179.1100|
                          DCD      ||.conststring||+0x744
                  |L179.1104|
                          DCD      ||.conststring||+0xe0
                  |L179.1108|
                          DCD      cntendl
                  |L179.1112|
                          DCD      enters
                  |L179.1116|
                          DCD      sd_data
                  |L179.1120|
                          DCD      ||.conststring||+0x76c
                  |L179.1124|
                          DCD      ||.conststring||+0x774
                  |L179.1128|
                          DCD      ||.conststring||+0x77c
                  |L179.1132|
                          DCD      exception
                  |L179.1136|
                          DCD      ||.conststring||+0x784
                  |L179.1140|
                          DCD      qwe
                  |L179.1144|
                          DCD      ||.conststring||+0x7b4
                  |L179.1148|
                          DCD      ||.conststring||+0x20
                  |L179.1152|
                          DCD      ||.conststring||+0x7bc
                  |L179.1156|
                          DCD      cond
                  |L179.1160|
                          DCD      0x00001388
                  |L179.1164|
                          DCD      tout
                  |L179.1168|
                          DCD      ||k2||
                  |L179.1172|
                          DCD      k
                  |L179.1176|
                          DCD      0x4006b000
                  |L179.1180|
                          DCD      ||q1||
                  |L179.1184|
                          DCD      ||q2||
                  |L179.1188|
                          DCD      ||q3||
                  |L179.1192|
                          DCD      ||q4||
                  |L179.1196|
                          DCD      cursorvaluene
                  |L179.1200|
                          DCD      ||k5||
                  |L179.1204|
                          DCD      ||.conststring||+0x520
                  |L179.1208|
                          DCD      ||.conststring||+0x524
                  |L179.1212|
                          DCD      ||.conststring||+0x528
                  |L179.1216|
0004c0  f7fffffe          BL       send_SD
;;;2256   
;;;2257   	
;;;2258   clear();	
0004c4  f7fffffe          BL       clear
;;;2259   									k2=0;									//string array counter for uart 1
0004c8  2000              MOVS     r0,#0
0004ca  49fe              LDR      r1,|L179.2244|
0004cc  6008              STR      r0,[r1,#0]  ; k2
;;;2260   									tout=0;	
0004ce  49fe              LDR      r1,|L179.2248|
0004d0  6008              STR      r0,[r1,#0]  ; tout
;;;2261   		for(k=0;k<strlen(data);k++)
0004d2  49fe              LDR      r1,|L179.2252|
0004d4  6008              STR      r0,[r1,#0]  ; k
0004d6  e00b              B        |L179.1264|
                  |L179.1240|
;;;2262   		{
;;;2263   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0004d8  48fd              LDR      r0,|L179.2256|
0004da  4afc              LDR      r2,|L179.2252|
0004dc  6812              LDR      r2,[r2,#0]  ; k
0004de  5c81              LDRB     r1,[r0,r2]
0004e0  48fc              LDR      r0,|L179.2260|
0004e2  f7fffffe          BL       uart_putchar
0004e6  48f9              LDR      r0,|L179.2252|
0004e8  6800              LDR      r0,[r0,#0]            ;2261  ; k
0004ea  1c40              ADDS     r0,r0,#1              ;2261
0004ec  49f7              LDR      r1,|L179.2252|
0004ee  6008              STR      r0,[r1,#0]            ;2261  ; k
                  |L179.1264|
0004f0  48f7              LDR      r0,|L179.2256|
0004f2  f7fffffe          BL       strlen
0004f6  49f5              LDR      r1,|L179.2252|
0004f8  6809              LDR      r1,[r1,#0]            ;2261  ; k
0004fa  4288              CMP      r0,r1                 ;2261
0004fc  d8ec              BHI      |L179.1240|
;;;2264   		}	
;;;2265   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
0004fe  210a              MOVS     r1,#0xa
000500  48f4              LDR      r0,|L179.2260|
000502  f7fffffe          BL       uart_putchar
000506  210a              MOVS     r1,#0xa
000508  48f2              LDR      r0,|L179.2260|
00050a  f7fffffe          BL       uart_putchar
00050e  210a              MOVS     r1,#0xa
000510  48f0              LDR      r0,|L179.2260|
000512  f7fffffe          BL       uart_putchar
000516  210a              MOVS     r1,#0xa
000518  48ee              LDR      r0,|L179.2260|
00051a  f7fffffe          BL       uart_putchar
00051e  210a              MOVS     r1,#0xa
000520  48ec              LDR      r0,|L179.2260|
000522  f7fffffe          BL       uart_putchar
000526  210a              MOVS     r1,#0xa
000528  48ea              LDR      r0,|L179.2260|
00052a  f7fffffe          BL       uart_putchar
00052e  210a              MOVS     r1,#0xa
000530  48e8              LDR      r0,|L179.2260|
000532  f7fffffe          BL       uart_putchar
000536  210a              MOVS     r1,#0xa
000538  48e6              LDR      r0,|L179.2260|
00053a  f7fffffe          BL       uart_putchar
00053e  210a              MOVS     r1,#0xa
000540  48e4              LDR      r0,|L179.2260|
000542  f7fffffe          BL       uart_putchar
000546  210a              MOVS     r1,#0xa
000548  48e2              LDR      r0,|L179.2260|
00054a  f7fffffe          BL       uart_putchar
00054e  210a              MOVS     r1,#0xa
000550  48e0              LDR      r0,|L179.2260|
000552  f7fffffe          BL       uart_putchar
000556  210a              MOVS     r1,#0xa
000558  48de              LDR      r0,|L179.2260|
00055a  f7fffffe          BL       uart_putchar
00055e  210a              MOVS     r1,#0xa
000560  48dc              LDR      r0,|L179.2260|
000562  f7fffffe          BL       uart_putchar
000566  210a              MOVS     r1,#0xa
000568  48da              LDR      r0,|L179.2260|
00056a  f7fffffe          BL       uart_putchar
00056e  210a              MOVS     r1,#0xa
000570  48d8              LDR      r0,|L179.2260|
000572  f7fffffe          BL       uart_putchar
000576  210a              MOVS     r1,#0xa
000578  48d6              LDR      r0,|L179.2260|
00057a  f7fffffe          BL       uart_putchar
00057e  210a              MOVS     r1,#0xa
000580  48d4              LDR      r0,|L179.2260|
000582  f7fffffe          BL       uart_putchar
000586  210a              MOVS     r1,#0xa
000588  48d2              LDR      r0,|L179.2260|
00058a  f7fffffe          BL       uart_putchar
00058e  210a              MOVS     r1,#0xa
000590  48d0              LDR      r0,|L179.2260|
000592  f7fffffe          BL       uart_putchar
000596  210a              MOVS     r1,#0xa
000598  48ce              LDR      r0,|L179.2260|
00059a  f7fffffe          BL       uart_putchar
00059e  210a              MOVS     r1,#0xa
0005a0  48cc              LDR      r0,|L179.2260|
0005a2  f7fffffe          BL       uart_putchar
0005a6  210a              MOVS     r1,#0xa
0005a8  48ca              LDR      r0,|L179.2260|
0005aa  f7fffffe          BL       uart_putchar
0005ae  210a              MOVS     r1,#0xa
0005b0  48c8              LDR      r0,|L179.2260|
0005b2  f7fffffe          BL       uart_putchar
0005b6  210a              MOVS     r1,#0xa
0005b8  48c6              LDR      r0,|L179.2260|
0005ba  f7fffffe          BL       uart_putchar
0005be  210a              MOVS     r1,#0xa
0005c0  48c4              LDR      r0,|L179.2260|
0005c2  f7fffffe          BL       uart_putchar
0005c6  210a              MOVS     r1,#0xa
0005c8  48c2              LDR      r0,|L179.2260|
0005ca  f7fffffe          BL       uart_putchar
0005ce  210a              MOVS     r1,#0xa
0005d0  48c0              LDR      r0,|L179.2260|
0005d2  f7fffffe          BL       uart_putchar
0005d6  210a              MOVS     r1,#0xa
0005d8  48be              LDR      r0,|L179.2260|
0005da  f7fffffe          BL       uart_putchar
0005de  210a              MOVS     r1,#0xa
0005e0  48bc              LDR      r0,|L179.2260|
0005e2  f7fffffe          BL       uart_putchar
0005e6  210a              MOVS     r1,#0xa
0005e8  48ba              LDR      r0,|L179.2260|
0005ea  f7fffffe          BL       uart_putchar
0005ee  210a              MOVS     r1,#0xa
0005f0  48b8              LDR      r0,|L179.2260|
0005f2  f7fffffe          BL       uart_putchar
0005f6  210a              MOVS     r1,#0xa
0005f8  48b6              LDR      r0,|L179.2260|
0005fa  f7fffffe          BL       uart_putchar
0005fe  210a              MOVS     r1,#0xa
000600  48b4              LDR      r0,|L179.2260|
000602  f7fffffe          BL       uart_putchar
000606  210a              MOVS     r1,#0xa
000608  48b2              LDR      r0,|L179.2260|
00060a  f7fffffe          BL       uart_putchar
00060e  210a              MOVS     r1,#0xa
000610  48b0              LDR      r0,|L179.2260|
000612  f7fffffe          BL       uart_putchar
000616  210a              MOVS     r1,#0xa
000618  48ae              LDR      r0,|L179.2260|
00061a  f7fffffe          BL       uart_putchar
00061e  210a              MOVS     r1,#0xa
000620  48ac              LDR      r0,|L179.2260|
000622  f7fffffe          BL       uart_putchar
000626  210a              MOVS     r1,#0xa
000628  48aa              LDR      r0,|L179.2260|
00062a  f7fffffe          BL       uart_putchar
00062e  210a              MOVS     r1,#0xa
000630  48a8              LDR      r0,|L179.2260|
000632  f7fffffe          BL       uart_putchar
000636  210a              MOVS     r1,#0xa
000638  48a6              LDR      r0,|L179.2260|
00063a  f7fffffe          BL       uart_putchar
00063e  210a              MOVS     r1,#0xa
000640  48a4              LDR      r0,|L179.2260|
000642  f7fffffe          BL       uart_putchar
000646  210a              MOVS     r1,#0xa
000648  48a2              LDR      r0,|L179.2260|
00064a  f7fffffe          BL       uart_putchar
00064e  210a              MOVS     r1,#0xa
000650  48a0              LDR      r0,|L179.2260|
000652  f7fffffe          BL       uart_putchar
000656  210a              MOVS     r1,#0xa
000658  489e              LDR      r0,|L179.2260|
00065a  f7fffffe          BL       uart_putchar
00065e  210a              MOVS     r1,#0xa
000660  489c              LDR      r0,|L179.2260|
000662  f7fffffe          BL       uart_putchar
000666  210a              MOVS     r1,#0xa
000668  489a              LDR      r0,|L179.2260|
00066a  f7fffffe          BL       uart_putchar
00066e  210a              MOVS     r1,#0xa
000670  4898              LDR      r0,|L179.2260|
000672  f7fffffe          BL       uart_putchar
000676  210a              MOVS     r1,#0xa
000678  4896              LDR      r0,|L179.2260|
00067a  f7fffffe          BL       uart_putchar
00067e  210a              MOVS     r1,#0xa
000680  4894              LDR      r0,|L179.2260|
000682  f7fffffe          BL       uart_putchar
000686  210a              MOVS     r1,#0xa
000688  4892              LDR      r0,|L179.2260|
00068a  f7fffffe          BL       uart_putchar
00068e  210a              MOVS     r1,#0xa
000690  4890              LDR      r0,|L179.2260|
000692  f7fffffe          BL       uart_putchar
000696  210a              MOVS     r1,#0xa
000698  488e              LDR      r0,|L179.2260|
00069a  f7fffffe          BL       uart_putchar
00069e  210a              MOVS     r1,#0xa
0006a0  488c              LDR      r0,|L179.2260|
0006a2  f7fffffe          BL       uart_putchar
0006a6  210a              MOVS     r1,#0xa
0006a8  488a              LDR      r0,|L179.2260|
0006aa  f7fffffe          BL       uart_putchar
0006ae  210a              MOVS     r1,#0xa
0006b0  4888              LDR      r0,|L179.2260|
0006b2  f7fffffe          BL       uart_putchar
0006b6  210a              MOVS     r1,#0xa
0006b8  4886              LDR      r0,|L179.2260|
0006ba  f7fffffe          BL       uart_putchar
0006be  210a              MOVS     r1,#0xa
0006c0  4884              LDR      r0,|L179.2260|
0006c2  f7fffffe          BL       uart_putchar
;;;2266   														//timer counts to wait for characters in uart 1 									
;;;2267   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0006c6  bf00              NOP      
                  |L179.1736|
0006c8  4983              LDR      r1,|L179.2264|
0006ca  4884              LDR      r0,|L179.2268|
0006cc  f7fffffe          BL       strstr
0006d0  2800              CMP      r0,#0
0006d2  d109              BNE      |L179.1768|
0006d4  4982              LDR      r1,|L179.2272|
0006d6  4881              LDR      r0,|L179.2268|
0006d8  f7fffffe          BL       strstr
0006dc  2800              CMP      r0,#0
0006de  d103              BNE      |L179.1768|
0006e0  4879              LDR      r0,|L179.2248|
0006e2  6800              LDR      r0,[r0,#0]  ; tout
0006e4  2805              CMP      r0,#5
0006e6  ddef              BLE      |L179.1736|
                  |L179.1768|
;;;2268   									{	}
;;;2269   	                clear();
0006e8  f7fffffe          BL       clear
;;;2270   									memset(data,0,strlen(data));
0006ec  4878              LDR      r0,|L179.2256|
0006ee  f7fffffe          BL       strlen
0006f2  4604              MOV      r4,r0
0006f4  4621              MOV      r1,r4
0006f6  4876              LDR      r0,|L179.2256|
0006f8  f7fffffe          BL       __aeabi_memclr
;;;2271   									clear();
0006fc  f7fffffe          BL       clear
;;;2272   
;;;2273   								
;;;2274   
;;;2275   
;;;2276   
;;;2277   //	log_it();
;;;2278   
;;;2279   			memset(data,0,strlen(data));
000700  4873              LDR      r0,|L179.2256|
000702  f7fffffe          BL       strlen
000706  4604              MOV      r4,r0
000708  4621              MOV      r1,r4
00070a  4871              LDR      r0,|L179.2256|
00070c  f7fffffe          BL       __aeabi_memclr
;;;2280   //*********************************tcp_initialization();***************************************//
;;;2281   
;;;2282   	
;;;2283   msg_sim800(); 
000710  f7fffffe          BL       msg_sim800
;;;2284   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
000714  2005              MOVS     r0,#5
000716  4b72              LDR      r3,|L179.2272|
000718  4a72              LDR      r2,|L179.2276|
00071a  4973              LDR      r1,|L179.2280|
00071c  9000              STR      r0,[sp,#0]
00071e  4873              LDR      r0,|L179.2284|
000720  f7fffffe          BL       send_GSM
;;;2285   delay(100);
000724  2064              MOVS     r0,#0x64
000726  f7fffffe          BL       delay
;;;2286   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
00072a  2004              MOVS     r0,#4
00072c  4b6c              LDR      r3,|L179.2272|
00072e  4a70              LDR      r2,|L179.2288|
000730  496d              LDR      r1,|L179.2280|
000732  9000              STR      r0,[sp,#0]
000734  486f              LDR      r0,|L179.2292|
000736  f7fffffe          BL       send_GSM
;;;2287   GPS_COLLECT2();
00073a  f7fffffe          BL       GPS_COLLECT2
;;;2288   strreplace(data, ",L,", ",H,");		
00073e  4a6e              LDR      r2,|L179.2296|
000740  496e              LDR      r1,|L179.2300|
000742  4863              LDR      r0,|L179.2256|
000744  f7fffffe          BL       strreplace
;;;2289   GPS_COLLECT2();
000748  f7fffffe          BL       GPS_COLLECT2
;;;2290   strreplace(data, ",L,", ",H,");	
00074c  4a6a              LDR      r2,|L179.2296|
00074e  496b              LDR      r1,|L179.2300|
000750  485f              LDR      r0,|L179.2256|
000752  f7fffffe          BL       strreplace
;;;2291   GPS_COLLECT2();
000756  f7fffffe          BL       GPS_COLLECT2
;;;2292   strreplace(data, ",L,", ",H,");
00075a  4a67              LDR      r2,|L179.2296|
00075c  4967              LDR      r1,|L179.2300|
00075e  485c              LDR      r0,|L179.2256|
000760  f7fffffe          BL       strreplace
;;;2293   cond201=(strstr(uart_string_gsm, "OK"));
000764  4960              LDR      r1,|L179.2280|
000766  485d              LDR      r0,|L179.2268|
000768  f7fffffe          BL       strstr
00076c  4964              LDR      r1,|L179.2304|
00076e  6008              STR      r0,[r1,#0]  ; cond201
;;;2294   cond200=(strstr(uart_string_gsm, "ERROR"));
000770  495b              LDR      r1,|L179.2272|
000772  485a              LDR      r0,|L179.2268|
000774  f7fffffe          BL       strstr
000778  4962              LDR      r1,|L179.2308|
00077a  6008              STR      r0,[r1,#0]  ; cond200
;;;2295   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00077c  4860              LDR      r0,|L179.2304|
00077e  6800              LDR      r0,[r0,#0]  ; cond201
000780  2800              CMP      r0,#0
000782  d101              BNE      |L179.1928|
000784  2001              MOVS     r0,#1
000786  e000              B        |L179.1930|
                  |L179.1928|
000788  2000              MOVS     r0,#0
                  |L179.1930|
00078a  2800              CMP      r0,#0
                  |L179.1932|
00078c  d077              BEQ      |L179.2174|
00078e  485d              LDR      r0,|L179.2308|
000790  6800              LDR      r0,[r0,#0]  ; cond200
000792  2800              CMP      r0,#0
000794  d101              BNE      |L179.1946|
000796  2001              MOVS     r0,#1
000798  e000              B        |L179.1948|
                  |L179.1946|
00079a  2000              MOVS     r0,#0
                  |L179.1948|
00079c  2800              CMP      r0,#0
00079e  d0f5              BEQ      |L179.1932|
0007a0  4859              LDR      r0,|L179.2312|
0007a2  6800              LDR      r0,[r0,#0]  ; sleep_flag
0007a4  2801              CMP      r0,#1
0007a6  d0f1              BEQ      |L179.1932|
;;;2296   {
;;;2297   delay(100);
0007a8  2064              MOVS     r0,#0x64
0007aa  f7fffffe          BL       delay
;;;2298   clear();//memset(uart_string_gsm,0,5000);
0007ae  f7fffffe          BL       clear
;;;2299   memset(at_,0,100);
0007b2  2164              MOVS     r1,#0x64
0007b4  4855              LDR      r0,|L179.2316|
0007b6  f7fffffe          BL       __aeabi_memclr
;;;2300   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0007ba  4845              LDR      r0,|L179.2256|
0007bc  f7fffffe          BL       strlen
0007c0  1c44              ADDS     r4,r0,#1
0007c2  4623              MOV      r3,r4
0007c4  4a52              LDR      r2,|L179.2320|
0007c6  4953              LDR      r1,|L179.2324|
0007c8  4850              LDR      r0,|L179.2316|
0007ca  f7fffffe          BL       __2sprintf
;;;2301   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0007ce  2005              MOVS     r0,#5
0007d0  4b43              LDR      r3,|L179.2272|
0007d2  4a44              LDR      r2,|L179.2276|
0007d4  4950              LDR      r1,|L179.2328|
0007d6  9000              STR      r0,[sp,#0]
0007d8  484c              LDR      r0,|L179.2316|
0007da  f7fffffe          BL       send_SD
;;;2302   clear();	
0007de  f7fffffe          BL       clear
;;;2303   k2=0;									//string array counter for uart 1
0007e2  2000              MOVS     r0,#0
0007e4  4937              LDR      r1,|L179.2244|
0007e6  6008              STR      r0,[r1,#0]  ; k2
;;;2304   tout=0;	
0007e8  4937              LDR      r1,|L179.2248|
0007ea  6008              STR      r0,[r1,#0]  ; tout
;;;2305   for(k=0;k<strlen(data);k++)
0007ec  4937              LDR      r1,|L179.2252|
0007ee  6008              STR      r0,[r1,#0]  ; k
0007f0  e00b              B        |L179.2058|
                  |L179.2034|
;;;2306   {
;;;2307   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0007f2  4837              LDR      r0,|L179.2256|
0007f4  4a35              LDR      r2,|L179.2252|
0007f6  6812              LDR      r2,[r2,#0]  ; k
0007f8  5c81              LDRB     r1,[r0,r2]
0007fa  4836              LDR      r0,|L179.2260|
0007fc  f7fffffe          BL       uart_putchar
000800  4832              LDR      r0,|L179.2252|
000802  6800              LDR      r0,[r0,#0]            ;2305  ; k
000804  1c40              ADDS     r0,r0,#1              ;2305
000806  4931              LDR      r1,|L179.2252|
000808  6008              STR      r0,[r1,#0]            ;2305  ; k
                  |L179.2058|
00080a  4831              LDR      r0,|L179.2256|
00080c  f7fffffe          BL       strlen
000810  492e              LDR      r1,|L179.2252|
000812  6809              LDR      r1,[r1,#0]            ;2305  ; k
000814  4288              CMP      r0,r1                 ;2305
000816  d8ec              BHI      |L179.2034|
;;;2308   }	
;;;2309   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000818  210a              MOVS     r1,#0xa
00081a  482e              LDR      r0,|L179.2260|
00081c  f7fffffe          BL       uart_putchar
000820  210a              MOVS     r1,#0xa
000822  482c              LDR      r0,|L179.2260|
000824  f7fffffe          BL       uart_putchar
000828  210a              MOVS     r1,#0xa
00082a  482a              LDR      r0,|L179.2260|
00082c  f7fffffe          BL       uart_putchar
000830  210a              MOVS     r1,#0xa
000832  4828              LDR      r0,|L179.2260|
000834  f7fffffe          BL       uart_putchar
000838  210a              MOVS     r1,#0xa
00083a  4826              LDR      r0,|L179.2260|
00083c  f7fffffe          BL       uart_putchar
000840  210a              MOVS     r1,#0xa
000842  4824              LDR      r0,|L179.2260|
000844  f7fffffe          BL       uart_putchar
000848  210a              MOVS     r1,#0xa
00084a  4822              LDR      r0,|L179.2260|
00084c  f7fffffe          BL       uart_putchar
000850  210a              MOVS     r1,#0xa
000852  4820              LDR      r0,|L179.2260|
000854  f7fffffe          BL       uart_putchar
000858  210a              MOVS     r1,#0xa
00085a  481e              LDR      r0,|L179.2260|
00085c  f7fffffe          BL       uart_putchar
000860  210a              MOVS     r1,#0xa
000862  481c              LDR      r0,|L179.2260|
000864  f7fffffe          BL       uart_putchar
000868  210a              MOVS     r1,#0xa
00086a  481a              LDR      r0,|L179.2260|
00086c  f7fffffe          BL       uart_putchar
000870  210a              MOVS     r1,#0xa
000872  4818              LDR      r0,|L179.2260|
000874  f7fffffe          BL       uart_putchar
000878  210a              MOVS     r1,#0xa
00087a  e002              B        |L179.2178|
                  |L179.2172|
00087c  e3fe              B        |L179.4220|
                  |L179.2174|
00087e  e109              B        |L179.2708|
                  |L179.2176|
000880  e3b0              B        |L179.4068|
                  |L179.2178|
000882  4814              LDR      r0,|L179.2260|
000884  f7fffffe          BL       uart_putchar
000888  210a              MOVS     r1,#0xa
00088a  4812              LDR      r0,|L179.2260|
00088c  f7fffffe          BL       uart_putchar
000890  210a              MOVS     r1,#0xa
000892  4810              LDR      r0,|L179.2260|
000894  f7fffffe          BL       uart_putchar
000898  210a              MOVS     r1,#0xa
00089a  480e              LDR      r0,|L179.2260|
00089c  f7fffffe          BL       uart_putchar
0008a0  210a              MOVS     r1,#0xa
0008a2  480c              LDR      r0,|L179.2260|
0008a4  f7fffffe          BL       uart_putchar
0008a8  210a              MOVS     r1,#0xa
0008aa  480a              LDR      r0,|L179.2260|
0008ac  f7fffffe          BL       uart_putchar
0008b0  210a              MOVS     r1,#0xa
0008b2  4808              LDR      r0,|L179.2260|
0008b4  f7fffffe          BL       uart_putchar
0008b8  210a              MOVS     r1,#0xa
0008ba  4806              LDR      r0,|L179.2260|
0008bc  f7fffffe          BL       uart_putchar
0008c0  210a              MOVS     r1,#0xa
0008c2  e02b              B        |L179.2332|
                  |L179.2244|
                          DCD      ||k2||
                  |L179.2248|
                          DCD      tout
                  |L179.2252|
                          DCD      k
                  |L179.2256|
                          DCD      data
                  |L179.2260|
                          DCD      0x4006b000
                  |L179.2264|
                          DCD      ||.conststring||+0x70
                  |L179.2268|
                          DCD      uart_string_gsm
                  |L179.2272|
                          DCD      ||.conststring||+0xe0
                  |L179.2276|
                          DCD      ||.conststring||+0x18
                  |L179.2280|
                          DCD      ||.conststring||+0x2c
                  |L179.2284|
                          DCD      ||.conststring||+0x7cc
                  |L179.2288|
                          DCD      ||.conststring||+0x7dc
                  |L179.2292|
                          DCD      ||.conststring||+0x7f0
                  |L179.2296|
                          DCD      ||.conststring||+0x520
                  |L179.2300|
                          DCD      ||.conststring||+0x524
                  |L179.2304|
                          DCD      cond201
                  |L179.2308|
                          DCD      cond200
                  |L179.2312|
                          DCD      sleep_flag
                  |L179.2316|
                          DCD      at_
                  |L179.2320|
                          DCD      drive
                  |L179.2324|
                          DCD      ||.conststring||+0x528
                  |L179.2328|
                          DCD      ||.conststring||+0x20
                  |L179.2332|
00091c  48fe              LDR      r0,|L179.3352|
00091e  f7fffffe          BL       uart_putchar
000922  210a              MOVS     r1,#0xa
000924  48fc              LDR      r0,|L179.3352|
000926  f7fffffe          BL       uart_putchar
00092a  210a              MOVS     r1,#0xa
00092c  48fa              LDR      r0,|L179.3352|
00092e  f7fffffe          BL       uart_putchar
000932  210a              MOVS     r1,#0xa
000934  48f8              LDR      r0,|L179.3352|
000936  f7fffffe          BL       uart_putchar
00093a  210a              MOVS     r1,#0xa
00093c  48f6              LDR      r0,|L179.3352|
00093e  f7fffffe          BL       uart_putchar
000942  210a              MOVS     r1,#0xa
000944  48f4              LDR      r0,|L179.3352|
000946  f7fffffe          BL       uart_putchar
00094a  210a              MOVS     r1,#0xa
00094c  48f2              LDR      r0,|L179.3352|
00094e  f7fffffe          BL       uart_putchar
000952  210a              MOVS     r1,#0xa
000954  48f0              LDR      r0,|L179.3352|
000956  f7fffffe          BL       uart_putchar
00095a  210a              MOVS     r1,#0xa
00095c  48ee              LDR      r0,|L179.3352|
00095e  f7fffffe          BL       uart_putchar
000962  210a              MOVS     r1,#0xa
000964  48ec              LDR      r0,|L179.3352|
000966  f7fffffe          BL       uart_putchar
00096a  210a              MOVS     r1,#0xa
00096c  48ea              LDR      r0,|L179.3352|
00096e  f7fffffe          BL       uart_putchar
000972  210a              MOVS     r1,#0xa
000974  48e8              LDR      r0,|L179.3352|
000976  f7fffffe          BL       uart_putchar
00097a  210a              MOVS     r1,#0xa
00097c  48e6              LDR      r0,|L179.3352|
00097e  f7fffffe          BL       uart_putchar
000982  210a              MOVS     r1,#0xa
000984  48e4              LDR      r0,|L179.3352|
000986  f7fffffe          BL       uart_putchar
00098a  210a              MOVS     r1,#0xa
00098c  48e2              LDR      r0,|L179.3352|
00098e  f7fffffe          BL       uart_putchar
000992  210a              MOVS     r1,#0xa
000994  48e0              LDR      r0,|L179.3352|
000996  f7fffffe          BL       uart_putchar
00099a  210a              MOVS     r1,#0xa
00099c  48de              LDR      r0,|L179.3352|
00099e  f7fffffe          BL       uart_putchar
0009a2  210a              MOVS     r1,#0xa
0009a4  48dc              LDR      r0,|L179.3352|
0009a6  f7fffffe          BL       uart_putchar
0009aa  210a              MOVS     r1,#0xa
0009ac  48da              LDR      r0,|L179.3352|
0009ae  f7fffffe          BL       uart_putchar
0009b2  210a              MOVS     r1,#0xa
0009b4  48d8              LDR      r0,|L179.3352|
0009b6  f7fffffe          BL       uart_putchar
0009ba  210a              MOVS     r1,#0xa
0009bc  48d6              LDR      r0,|L179.3352|
0009be  f7fffffe          BL       uart_putchar
0009c2  210a              MOVS     r1,#0xa
0009c4  48d4              LDR      r0,|L179.3352|
0009c6  f7fffffe          BL       uart_putchar
0009ca  210a              MOVS     r1,#0xa
0009cc  48d2              LDR      r0,|L179.3352|
0009ce  f7fffffe          BL       uart_putchar
0009d2  210a              MOVS     r1,#0xa
0009d4  48d0              LDR      r0,|L179.3352|
0009d6  f7fffffe          BL       uart_putchar
0009da  210a              MOVS     r1,#0xa
0009dc  48ce              LDR      r0,|L179.3352|
0009de  f7fffffe          BL       uart_putchar
0009e2  210a              MOVS     r1,#0xa
0009e4  48cc              LDR      r0,|L179.3352|
0009e6  f7fffffe          BL       uart_putchar
0009ea  210a              MOVS     r1,#0xa
0009ec  48ca              LDR      r0,|L179.3352|
0009ee  f7fffffe          BL       uart_putchar
0009f2  210a              MOVS     r1,#0xa
0009f4  48c8              LDR      r0,|L179.3352|
0009f6  f7fffffe          BL       uart_putchar
0009fa  210a              MOVS     r1,#0xa
0009fc  48c6              LDR      r0,|L179.3352|
0009fe  f7fffffe          BL       uart_putchar
000a02  210a              MOVS     r1,#0xa
000a04  48c4              LDR      r0,|L179.3352|
000a06  f7fffffe          BL       uart_putchar
000a0a  210a              MOVS     r1,#0xa
000a0c  48c2              LDR      r0,|L179.3352|
000a0e  f7fffffe          BL       uart_putchar
000a12  210a              MOVS     r1,#0xa
000a14  48c0              LDR      r0,|L179.3352|
000a16  f7fffffe          BL       uart_putchar
000a1a  210a              MOVS     r1,#0xa
000a1c  48be              LDR      r0,|L179.3352|
000a1e  f7fffffe          BL       uart_putchar
000a22  210a              MOVS     r1,#0xa
000a24  48bc              LDR      r0,|L179.3352|
000a26  f7fffffe          BL       uart_putchar
000a2a  210a              MOVS     r1,#0xa
000a2c  48ba              LDR      r0,|L179.3352|
000a2e  f7fffffe          BL       uart_putchar
000a32  210a              MOVS     r1,#0xa
000a34  48b8              LDR      r0,|L179.3352|
000a36  f7fffffe          BL       uart_putchar
000a3a  210a              MOVS     r1,#0xa
000a3c  48b6              LDR      r0,|L179.3352|
000a3e  f7fffffe          BL       uart_putchar
;;;2310   									//memset(data,0,1000);
;;;2311   														//timer counts to wait for characters in uart 1 									
;;;2312   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000a42  bf00              NOP      
                  |L179.2628|
000a44  49b5              LDR      r1,|L179.3356|
000a46  48b6              LDR      r0,|L179.3360|
000a48  f7fffffe          BL       strstr
000a4c  2800              CMP      r0,#0
000a4e  d109              BNE      |L179.2660|
000a50  49b4              LDR      r1,|L179.3364|
000a52  48b3              LDR      r0,|L179.3360|
000a54  f7fffffe          BL       strstr
000a58  2800              CMP      r0,#0
000a5a  d103              BNE      |L179.2660|
000a5c  48b2              LDR      r0,|L179.3368|
000a5e  6800              LDR      r0,[r0,#0]  ; tout
000a60  2805              CMP      r0,#5
000a62  ddef              BLE      |L179.2628|
                  |L179.2660|
;;;2313   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2314   									}
;;;2315   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000a64  f7fffffe          BL       clear
;;;2316   									//clear();
;;;2317   									memset(data,0,strlen(data));
000a68  48b0              LDR      r0,|L179.3372|
000a6a  f7fffffe          BL       strlen
000a6e  4604              MOV      r4,r0
000a70  4621              MOV      r1,r4
000a72  48ae              LDR      r0,|L179.3372|
000a74  f7fffffe          BL       __aeabi_memclr
;;;2318   									clear();
000a78  f7fffffe          BL       clear
;;;2319   									RESET_OFF;delay(100);
000a7c  2020              MOVS     r0,#0x20
000a7e  49ac              LDR      r1,|L179.3376|
000a80  6088              STR      r0,[r1,#8]
000a82  2064              MOVS     r0,#0x64
000a84  f7fffffe          BL       delay
;;;2320   									RESET_ON;delay(100);		
000a88  2020              MOVS     r0,#0x20
000a8a  49a9              LDR      r1,|L179.3376|
000a8c  6048              STR      r0,[r1,#4]
000a8e  2064              MOVS     r0,#0x64
000a90  f7fffffe          BL       delay
                  |L179.2708|
;;;2321   }
;;;2322   	
;;;2323   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
000a94  2004              MOVS     r0,#4
000a96  4ba7              LDR      r3,|L179.3380|
000a98  4aa7              LDR      r2,|L179.3384|
000a9a  49a8              LDR      r1,|L179.3388|
000a9c  9000              STR      r0,[sp,#0]
000a9e  48a8              LDR      r0,|L179.3392|
000aa0  f7fffffe          BL       send_GSM
;;;2324   GPS_COLLECT2();
000aa4  f7fffffe          BL       GPS_COLLECT2
;;;2325   strreplace(data, ",L,", ",H,");	
000aa8  4aa6              LDR      r2,|L179.3396|
000aaa  49a7              LDR      r1,|L179.3400|
000aac  489f              LDR      r0,|L179.3372|
000aae  f7fffffe          BL       strreplace
;;;2326   memset(at_,0,100);
000ab2  2164              MOVS     r1,#0x64
000ab4  48a5              LDR      r0,|L179.3404|
000ab6  f7fffffe          BL       __aeabi_memclr
;;;2327   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
000aba  4aa5              LDR      r2,|L179.3408|
000abc  49a5              LDR      r1,|L179.3412|
000abe  48a3              LDR      r0,|L179.3404|
000ac0  f7fffffe          BL       __2sprintf
;;;2328   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
000ac4  48a4              LDR      r0,|L179.3416|
000ac6  6800              LDR      r0,[r0,#0]  ; tmeout
000ac8  4b9a              LDR      r3,|L179.3380|
000aca  4a9b              LDR      r2,|L179.3384|
000acc  499b              LDR      r1,|L179.3388|
000ace  9000              STR      r0,[sp,#0]
000ad0  489e              LDR      r0,|L179.3404|
000ad2  f7fffffe          BL       send_GSM
;;;2329   msg_sim800(); 
000ad6  f7fffffe          BL       msg_sim800
;;;2330   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
000ada  2004              MOVS     r0,#4
000adc  4b9f              LDR      r3,|L179.3420|
000ade  4a96              LDR      r2,|L179.3384|
000ae0  4996              LDR      r1,|L179.3388|
000ae2  9000              STR      r0,[sp,#0]
000ae4  489e              LDR      r0,|L179.3424|
000ae6  f7fffffe          BL       send_GSM
;;;2331   GPS_COLLECT2();
000aea  f7fffffe          BL       GPS_COLLECT2
;;;2332   strreplace(data, ",L,", ",H,");	
000aee  4a95              LDR      r2,|L179.3396|
000af0  4995              LDR      r1,|L179.3400|
000af2  488e              LDR      r0,|L179.3372|
000af4  f7fffffe          BL       strreplace
;;;2333   GPS_COLLECT2();
000af8  f7fffffe          BL       GPS_COLLECT2
;;;2334   strreplace(data, ",L,", ",H,");	
000afc  4a91              LDR      r2,|L179.3396|
000afe  4992              LDR      r1,|L179.3400|
000b00  488a              LDR      r0,|L179.3372|
000b02  f7fffffe          BL       strreplace
;;;2335   
;;;2336   
;;;2337   msg_sim800(); 
000b06  f7fffffe          BL       msg_sim800
;;;2338   GPS_COLLECT2();
000b0a  f7fffffe          BL       GPS_COLLECT2
;;;2339   strreplace(data, ",L,", ",H,");	
000b0e  4a8d              LDR      r2,|L179.3396|
000b10  498d              LDR      r1,|L179.3400|
000b12  4886              LDR      r0,|L179.3372|
000b14  f7fffffe          BL       strreplace
;;;2340   send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);
000b18  2001              MOVS     r0,#1
000b1a  4b90              LDR      r3,|L179.3420|
000b1c  4a86              LDR      r2,|L179.3384|
000b1e  4987              LDR      r1,|L179.3388|
000b20  9000              STR      r0,[sp,#0]
000b22  4890              LDR      r0,|L179.3428|
000b24  f7fffffe          BL       send_GSM
;;;2341   memset(ipadd,0,16);
000b28  2110              MOVS     r1,#0x10
000b2a  488f              LDR      r0,|L179.3432|
000b2c  f7fffffe          BL       __aeabi_memclr
;;;2342   parse_g(uart_string_gsm,1,2,'\n','\n',ipadd);
000b30  488d              LDR      r0,|L179.3432|
000b32  210a              MOVS     r1,#0xa
000b34  460b              MOV      r3,r1
000b36  2202              MOVS     r2,#2
000b38  9100              STR      r1,[sp,#0]
000b3a  9001              STR      r0,[sp,#4]
000b3c  2101              MOVS     r1,#1
000b3e  4878              LDR      r0,|L179.3360|
000b40  f7fffffe          BL       parse_g
;;;2343   remove_all_chars(ipadd,'\r','\n');
000b44  220a              MOVS     r2,#0xa
000b46  210d              MOVS     r1,#0xd
000b48  4887              LDR      r0,|L179.3432|
000b4a  f7fffffe          BL       remove_all_chars
;;;2344   if(strstr(uart_string_gsm,"0.0.0.0"))
000b4e  4987              LDR      r1,|L179.3436|
000b50  4873              LDR      r0,|L179.3360|
000b52  f7fffffe          BL       strstr
000b56  2800              CMP      r0,#0
000b58  d001              BEQ      |L179.2910|
;;;2345   {
;;;2346   	reset_func();
000b5a  f7fffffe          BL       reset_func
                  |L179.2910|
;;;2347   }	
;;;2348   
;;;2349   
;;;2350   msg_sim800(); 
000b5e  f7fffffe          BL       msg_sim800
;;;2351   
;;;2352   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
000b62  4b83              LDR      r3,|L179.3440|
000b64  4a83              LDR      r2,|L179.3444|
000b66  4984              LDR      r1,|L179.3448|
000b68  4878              LDR      r0,|L179.3404|
000b6a  f7fffffe          BL       __2sprintf
;;;2353   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
000b6e  487a              LDR      r0,|L179.3416|
000b70  6800              LDR      r0,[r0,#0]  ; tmeout
000b72  4b70              LDR      r3,|L179.3380|
000b74  4a6b              LDR      r2,|L179.3364|
000b76  4981              LDR      r1,|L179.3452|
000b78  9000              STR      r0,[sp,#0]
000b7a  4874              LDR      r0,|L179.3404|
000b7c  f7fffffe          BL       send_GSM
;;;2354   						clear();
000b80  f7fffffe          BL       clear
;;;2355   						
;;;2356   						
;;;2357   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
000b84  4874              LDR      r0,|L179.3416|
000b86  6800              LDR      r0,[r0,#0]  ; tmeout
000b88  4b7d              LDR      r3,|L179.3456|
000b8a  4a66              LDR      r2,|L179.3364|
000b8c  497d              LDR      r1,|L179.3460|
000b8e  9000              STR      r0,[sp,#0]
000b90  487d              LDR      r0,|L179.3464|
000b92  f7fffffe          BL       send_GSM
;;;2358   									
;;;2359   //*********************************tcp_initialization ends*************************************//									
;;;2360   			if(mystrstr(uart_string_gsm,'>')){
000b96  213e              MOVS     r1,#0x3e
000b98  4861              LDR      r0,|L179.3360|
000b9a  f7fffffe          BL       mystrstr
000b9e  2800              CMP      r0,#0
000ba0  d07e              BEQ      |L179.3232|
;;;2361   									clear();
000ba2  f7fffffe          BL       clear
;;;2362   									memset(uart_string_gsm,0,5000);
000ba6  4979              LDR      r1,|L179.3468|
000ba8  485d              LDR      r0,|L179.3360|
000baa  f7fffffe          BL       __aeabi_memclr
;;;2363   									qwe=strlen(data);
000bae  485f              LDR      r0,|L179.3372|
000bb0  e000              B        |L179.2996|
                  |L179.2994|
000bb2  e3fc              B        |L179.5038|
                  |L179.2996|
000bb4  f7fffffe          BL       strlen
000bb8  4975              LDR      r1,|L179.3472|
000bba  6008              STR      r0,[r1,#0]  ; qwe
;;;2364   									tout=0;
000bbc  2000              MOVS     r0,#0
000bbe  495a              LDR      r1,|L179.3368|
000bc0  6008              STR      r0,[r1,#0]  ; tout
;;;2365   									k2=0;
000bc2  4974              LDR      r1,|L179.3476|
000bc4  6008              STR      r0,[r1,#0]  ; k2
;;;2366   									for(k=0;k<(qwe);k++)
000bc6  4974              LDR      r1,|L179.3480|
000bc8  6008              STR      r0,[r1,#0]  ; k
000bca  e00b              B        |L179.3044|
                  |L179.3020|
;;;2367   									{
;;;2368   										uart_putchar(UART1_BASE_PTR, data[k]);
000bcc  4857              LDR      r0,|L179.3372|
000bce  4a72              LDR      r2,|L179.3480|
000bd0  6812              LDR      r2,[r2,#0]  ; k
000bd2  5c81              LDRB     r1,[r0,r2]
000bd4  4850              LDR      r0,|L179.3352|
000bd6  f7fffffe          BL       uart_putchar
000bda  486f              LDR      r0,|L179.3480|
000bdc  6800              LDR      r0,[r0,#0]            ;2366  ; k
000bde  1c40              ADDS     r0,r0,#1              ;2366
000be0  496d              LDR      r1,|L179.3480|
000be2  6008              STR      r0,[r1,#0]            ;2366  ; k
                  |L179.3044|
000be4  486c              LDR      r0,|L179.3480|
000be6  6800              LDR      r0,[r0,#0]            ;2366  ; k
000be8  4969              LDR      r1,|L179.3472|
000bea  6809              LDR      r1,[r1,#0]            ;2366  ; qwe
000bec  4288              CMP      r0,r1                 ;2366
000bee  dbed              BLT      |L179.3020|
;;;2369   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
000bf0  210a              MOVS     r1,#0xa
000bf2  4849              LDR      r0,|L179.3352|
000bf4  f7fffffe          BL       uart_putchar
000bf8  211a              MOVS     r1,#0x1a
000bfa  4847              LDR      r0,|L179.3352|
000bfc  f7fffffe          BL       uart_putchar
000c00  211a              MOVS     r1,#0x1a
000c02  4845              LDR      r0,|L179.3352|
000c04  f7fffffe          BL       uart_putchar
000c08  211a              MOVS     r1,#0x1a
000c0a  4843              LDR      r0,|L179.3352|
000c0c  f7fffffe          BL       uart_putchar
000c10  211a              MOVS     r1,#0x1a
000c12  4841              LDR      r0,|L179.3352|
000c14  f7fffffe          BL       uart_putchar
000c18  211a              MOVS     r1,#0x1a
000c1a  483f              LDR      r0,|L179.3352|
000c1c  f7fffffe          BL       uart_putchar
000c20  211a              MOVS     r1,#0x1a
000c22  483d              LDR      r0,|L179.3352|
000c24  f7fffffe          BL       uart_putchar
;;;2370   															do
000c28  bf00              NOP      
                  |L179.3114|
;;;2371   																{q1=strstr(uart_string_gsm,"SEND OK");
000c2a  495c              LDR      r1,|L179.3484|
000c2c  483c              LDR      r0,|L179.3360|
000c2e  f7fffffe          BL       strstr
000c32  495b              LDR      r1,|L179.3488|
000c34  6008              STR      r0,[r1,#0]  ; q1
;;;2372   																	q2=strstr(uart_string_gsm, "ERROR");
000c36  493b              LDR      r1,|L179.3364|
000c38  4839              LDR      r0,|L179.3360|
000c3a  f7fffffe          BL       strstr
000c3e  4959              LDR      r1,|L179.3492|
000c40  6008              STR      r0,[r1,#0]  ; q2
;;;2373   																		q3=strstr(uart_string_gsm, "FAIL");	
000c42  4959              LDR      r1,|L179.3496|
000c44  4836              LDR      r0,|L179.3360|
000c46  f7fffffe          BL       strstr
000c4a  4958              LDR      r1,|L179.3500|
000c4c  6008              STR      r0,[r1,#0]  ; q3
;;;2374   																			q4=strstr(uart_string_gsm, "DEACT");	
000c4e  4943              LDR      r1,|L179.3420|
000c50  4833              LDR      r0,|L179.3360|
000c52  f7fffffe          BL       strstr
000c56  4956              LDR      r1,|L179.3504|
000c58  6008              STR      r0,[r1,#0]  ; q4
;;;2375   																	
;;;2376   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
000c5a  4851              LDR      r0,|L179.3488|
000c5c  6800              LDR      r0,[r0,#0]  ; q1
000c5e  2800              CMP      r0,#0
000c60  d10f              BNE      |L179.3202|
000c62  4850              LDR      r0,|L179.3492|
000c64  6800              LDR      r0,[r0,#0]  ; q2
000c66  2800              CMP      r0,#0
000c68  d10b              BNE      |L179.3202|
000c6a  4850              LDR      r0,|L179.3500|
000c6c  6800              LDR      r0,[r0,#0]  ; q3
000c6e  2800              CMP      r0,#0
000c70  d107              BNE      |L179.3202|
000c72  4608              MOV      r0,r1
000c74  6800              LDR      r0,[r0,#0]  ; q4
000c76  2800              CMP      r0,#0
000c78  d103              BNE      |L179.3202|
000c7a  482b              LDR      r0,|L179.3368|
000c7c  6800              LDR      r0,[r0,#0]  ; tout
000c7e  2808              CMP      r0,#8
000c80  ddd3              BLE      |L179.3114|
                  |L179.3202|
;;;2377   															
;;;2378   																			delay(10);clear();
000c82  200a              MOVS     r0,#0xa
000c84  f7fffffe          BL       delay
000c88  f7fffffe          BL       clear
;;;2379   														uart_putchar(UART1_BASE_PTR,0x1A);
000c8c  211a              MOVS     r1,#0x1a
000c8e  4822              LDR      r0,|L179.3352|
000c90  f7fffffe          BL       uart_putchar
;;;2380   												delay(10);
000c94  200a              MOVS     r0,#0xa
000c96  f7fffffe          BL       delay
;;;2381   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
000c9a  211a              MOVS     r1,#0x1a
000c9c  481e              LDR      r0,|L179.3352|
000c9e  e000              B        |L179.3234|
                  |L179.3232|
000ca0  e1a1              B        |L179.4070|
                  |L179.3234|
000ca2  f7fffffe          BL       uart_putchar
000ca6  211a              MOVS     r1,#0x1a
000ca8  481b              LDR      r0,|L179.3352|
000caa  f7fffffe          BL       uart_putchar
000cae  211a              MOVS     r1,#0x1a
000cb0  4819              LDR      r0,|L179.3352|
000cb2  f7fffffe          BL       uart_putchar
;;;2382   delay(20);
000cb6  2014              MOVS     r0,#0x14
000cb8  f7fffffe          BL       delay
;;;2383   if(!strstr(uart_string_gsm,"SEND OK")){
000cbc  4937              LDR      r1,|L179.3484|
000cbe  4818              LDR      r0,|L179.3360|
000cc0  f7fffffe          BL       strstr
000cc4  2800              CMP      r0,#0
000cc6  d001              BEQ      |L179.3276|
000cc8  f001f9f4          BL       |L179.8372|
                  |L179.3276|
;;;2384   
;;;2385   
;;;2386   	delay(100);
000ccc  2064              MOVS     r0,#0x64
000cce  f7fffffe          BL       delay
;;;2387   		clear();//memset(uart_string_gsm,0,5000);
000cd2  f7fffffe          BL       clear
;;;2388   	
;;;2389   	memset(at_,0,100);
000cd6  2164              MOVS     r1,#0x64
000cd8  481c              LDR      r0,|L179.3404|
000cda  f7fffffe          BL       __aeabi_memclr
;;;2390   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000cde  4813              LDR      r0,|L179.3372|
000ce0  f7fffffe          BL       strlen
000ce4  1c44              ADDS     r4,r0,#1
000ce6  4623              MOV      r3,r4
000ce8  4a32              LDR      r2,|L179.3508|
000cea  4933              LDR      r1,|L179.3512|
000cec  4817              LDR      r0,|L179.3404|
000cee  f7fffffe          BL       __2sprintf
;;;2391   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
000cf2  2005              MOVS     r0,#5
000cf4  4b0b              LDR      r3,|L179.3364|
000cf6  4a10              LDR      r2,|L179.3384|
000cf8  4922              LDR      r1,|L179.3460|
000cfa  9000              STR      r0,[sp,#0]
000cfc  4813              LDR      r0,|L179.3404|
000cfe  f7fffffe          BL       send_SD
;;;2392   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2393   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2394   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2395   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2396   //	}
;;;2397   	
;;;2398   clear();	
000d02  f7fffffe          BL       clear
;;;2399   									k2=0;									//string array counter for uart 1
000d06  2000              MOVS     r0,#0
000d08  4922              LDR      r1,|L179.3476|
000d0a  6008              STR      r0,[r1,#0]  ; k2
;;;2400   									tout=0;	
000d0c  4906              LDR      r1,|L179.3368|
000d0e  6008              STR      r0,[r1,#0]  ; tout
;;;2401   		for(k=0;k<strlen(data);k++)
000d10  4921              LDR      r1,|L179.3480|
000d12  6008              STR      r0,[r1,#0]  ; k
000d14  e05e              B        |L179.3540|
000d16  0000              DCW      0x0000
                  |L179.3352|
                          DCD      0x4006b000
                  |L179.3356|
                          DCD      ||.conststring||+0x70
                  |L179.3360|
                          DCD      uart_string_gsm
                  |L179.3364|
                          DCD      ||.conststring||+0xe0
                  |L179.3368|
                          DCD      tout
                  |L179.3372|
                          DCD      data
                  |L179.3376|
                          DCD      0x400ff080
                  |L179.3380|
                          DCD      ||.conststring||+0x10
                  |L179.3384|
                          DCD      ||.conststring||+0x18
                  |L179.3388|
                          DCD      ||.conststring||+0x2c
                  |L179.3392|
                          DCD      ||.conststring||+0x800
                  |L179.3396|
                          DCD      ||.conststring||+0x520
                  |L179.3400|
                          DCD      ||.conststring||+0x524
                  |L179.3404|
                          DCD      at_
                  |L179.3408|
                          DCD      apn
                  |L179.3412|
                          DCD      ||.conststring||+0x810
                  |L179.3416|
                          DCD      tmeout
                  |L179.3420|
                          DCD      ||.conststring||+0x77c
                  |L179.3424|
                          DCD      ||.conststring||+0x824
                  |L179.3428|
                          DCD      ||.conststring||+0x834
                  |L179.3432|
                          DCD      ipadd
                  |L179.3436|
                          DCD      ||.conststring||+0x844
                  |L179.3440|
                          DCD      port
                  |L179.3444|
                          DCD      ||ip||
                  |L179.3448|
                          DCD      ||.conststring||+0x84c
                  |L179.3452|
                          DCD      ||.conststring||+0x7b4
                  |L179.3456|
                          DCD      ||.conststring||+0x86c
                  |L179.3460|
                          DCD      ||.conststring||+0x20
                  |L179.3464|
                          DCD      ||.conststring||+0x7bc
                  |L179.3468|
                          DCD      0x00001388
                  |L179.3472|
                          DCD      qwe
                  |L179.3476|
                          DCD      ||k2||
                  |L179.3480|
                          DCD      k
                  |L179.3484|
                          DCD      ||.conststring||+0x76c
                  |L179.3488|
                          DCD      ||q1||
                  |L179.3492|
                          DCD      ||q2||
                  |L179.3496|
                          DCD      ||.conststring||+0x774
                  |L179.3500|
                          DCD      ||q3||
                  |L179.3504|
                          DCD      ||q4||
                  |L179.3508|
                          DCD      drive
                  |L179.3512|
                          DCD      ||.conststring||+0x528
                  |L179.3516|
;;;2402   		{
;;;2403   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
000dbc  48fd              LDR      r0,|L179.4532|
000dbe  4afe              LDR      r2,|L179.4536|
000dc0  6812              LDR      r2,[r2,#0]  ; k
000dc2  5c81              LDRB     r1,[r0,r2]
000dc4  48fd              LDR      r0,|L179.4540|
000dc6  f7fffffe          BL       uart_putchar
000dca  48fb              LDR      r0,|L179.4536|
000dcc  6800              LDR      r0,[r0,#0]            ;2401  ; k
000dce  1c40              ADDS     r0,r0,#1              ;2401
000dd0  49f9              LDR      r1,|L179.4536|
000dd2  6008              STR      r0,[r1,#0]            ;2401  ; k
                  |L179.3540|
000dd4  48f7              LDR      r0,|L179.4532|
000dd6  f7fffffe          BL       strlen
000dda  49f7              LDR      r1,|L179.4536|
000ddc  6809              LDR      r1,[r1,#0]            ;2401  ; k
000dde  4288              CMP      r0,r1                 ;2401
000de0  d8ec              BHI      |L179.3516|
;;;2404   		}	
;;;2405   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
000de2  210a              MOVS     r1,#0xa
000de4  48f5              LDR      r0,|L179.4540|
000de6  f7fffffe          BL       uart_putchar
000dea  210a              MOVS     r1,#0xa
000dec  48f3              LDR      r0,|L179.4540|
000dee  f7fffffe          BL       uart_putchar
000df2  210a              MOVS     r1,#0xa
000df4  48f1              LDR      r0,|L179.4540|
000df6  f7fffffe          BL       uart_putchar
000dfa  210a              MOVS     r1,#0xa
000dfc  48ef              LDR      r0,|L179.4540|
000dfe  f7fffffe          BL       uart_putchar
000e02  210a              MOVS     r1,#0xa
000e04  48ed              LDR      r0,|L179.4540|
000e06  f7fffffe          BL       uart_putchar
000e0a  210a              MOVS     r1,#0xa
000e0c  48eb              LDR      r0,|L179.4540|
000e0e  f7fffffe          BL       uart_putchar
000e12  210a              MOVS     r1,#0xa
000e14  48e9              LDR      r0,|L179.4540|
000e16  f7fffffe          BL       uart_putchar
000e1a  210a              MOVS     r1,#0xa
000e1c  48e7              LDR      r0,|L179.4540|
000e1e  f7fffffe          BL       uart_putchar
000e22  210a              MOVS     r1,#0xa
000e24  48e5              LDR      r0,|L179.4540|
000e26  f7fffffe          BL       uart_putchar
000e2a  210a              MOVS     r1,#0xa
000e2c  48e3              LDR      r0,|L179.4540|
000e2e  f7fffffe          BL       uart_putchar
000e32  210a              MOVS     r1,#0xa
000e34  48e1              LDR      r0,|L179.4540|
000e36  f7fffffe          BL       uart_putchar
000e3a  210a              MOVS     r1,#0xa
000e3c  48df              LDR      r0,|L179.4540|
000e3e  f7fffffe          BL       uart_putchar
000e42  210a              MOVS     r1,#0xa
000e44  48dd              LDR      r0,|L179.4540|
000e46  f7fffffe          BL       uart_putchar
000e4a  210a              MOVS     r1,#0xa
000e4c  48db              LDR      r0,|L179.4540|
000e4e  f7fffffe          BL       uart_putchar
000e52  210a              MOVS     r1,#0xa
000e54  48d9              LDR      r0,|L179.4540|
000e56  f7fffffe          BL       uart_putchar
000e5a  210a              MOVS     r1,#0xa
000e5c  48d7              LDR      r0,|L179.4540|
000e5e  f7fffffe          BL       uart_putchar
000e62  210a              MOVS     r1,#0xa
000e64  48d5              LDR      r0,|L179.4540|
000e66  f7fffffe          BL       uart_putchar
000e6a  210a              MOVS     r1,#0xa
000e6c  48d3              LDR      r0,|L179.4540|
000e6e  f7fffffe          BL       uart_putchar
000e72  210a              MOVS     r1,#0xa
000e74  48d1              LDR      r0,|L179.4540|
000e76  f7fffffe          BL       uart_putchar
000e7a  210a              MOVS     r1,#0xa
000e7c  48cf              LDR      r0,|L179.4540|
000e7e  f7fffffe          BL       uart_putchar
000e82  210a              MOVS     r1,#0xa
000e84  48cd              LDR      r0,|L179.4540|
000e86  f7fffffe          BL       uart_putchar
000e8a  210a              MOVS     r1,#0xa
000e8c  48cb              LDR      r0,|L179.4540|
000e8e  f7fffffe          BL       uart_putchar
000e92  210a              MOVS     r1,#0xa
000e94  48c9              LDR      r0,|L179.4540|
000e96  f7fffffe          BL       uart_putchar
000e9a  210a              MOVS     r1,#0xa
000e9c  48c7              LDR      r0,|L179.4540|
000e9e  f7fffffe          BL       uart_putchar
000ea2  210a              MOVS     r1,#0xa
000ea4  48c5              LDR      r0,|L179.4540|
000ea6  f7fffffe          BL       uart_putchar
000eaa  210a              MOVS     r1,#0xa
000eac  48c3              LDR      r0,|L179.4540|
000eae  f7fffffe          BL       uart_putchar
000eb2  210a              MOVS     r1,#0xa
000eb4  48c1              LDR      r0,|L179.4540|
000eb6  f7fffffe          BL       uart_putchar
000eba  210a              MOVS     r1,#0xa
000ebc  48bf              LDR      r0,|L179.4540|
000ebe  f7fffffe          BL       uart_putchar
000ec2  210a              MOVS     r1,#0xa
000ec4  48bd              LDR      r0,|L179.4540|
000ec6  f7fffffe          BL       uart_putchar
000eca  210a              MOVS     r1,#0xa
000ecc  48bb              LDR      r0,|L179.4540|
000ece  f7fffffe          BL       uart_putchar
000ed2  210a              MOVS     r1,#0xa
000ed4  48b9              LDR      r0,|L179.4540|
000ed6  f7fffffe          BL       uart_putchar
000eda  210a              MOVS     r1,#0xa
000edc  48b7              LDR      r0,|L179.4540|
000ede  f7fffffe          BL       uart_putchar
000ee2  210a              MOVS     r1,#0xa
000ee4  48b5              LDR      r0,|L179.4540|
000ee6  f7fffffe          BL       uart_putchar
000eea  210a              MOVS     r1,#0xa
000eec  48b3              LDR      r0,|L179.4540|
000eee  f7fffffe          BL       uart_putchar
000ef2  210a              MOVS     r1,#0xa
000ef4  48b1              LDR      r0,|L179.4540|
000ef6  f7fffffe          BL       uart_putchar
000efa  210a              MOVS     r1,#0xa
000efc  48af              LDR      r0,|L179.4540|
000efe  f7fffffe          BL       uart_putchar
000f02  210a              MOVS     r1,#0xa
000f04  48ad              LDR      r0,|L179.4540|
000f06  f7fffffe          BL       uart_putchar
000f0a  210a              MOVS     r1,#0xa
000f0c  48ab              LDR      r0,|L179.4540|
000f0e  f7fffffe          BL       uart_putchar
000f12  210a              MOVS     r1,#0xa
000f14  48a9              LDR      r0,|L179.4540|
000f16  f7fffffe          BL       uart_putchar
000f1a  210a              MOVS     r1,#0xa
000f1c  48a7              LDR      r0,|L179.4540|
000f1e  f7fffffe          BL       uart_putchar
000f22  210a              MOVS     r1,#0xa
000f24  48a5              LDR      r0,|L179.4540|
000f26  f7fffffe          BL       uart_putchar
000f2a  210a              MOVS     r1,#0xa
000f2c  48a3              LDR      r0,|L179.4540|
000f2e  f7fffffe          BL       uart_putchar
000f32  210a              MOVS     r1,#0xa
000f34  48a1              LDR      r0,|L179.4540|
000f36  f7fffffe          BL       uart_putchar
000f3a  210a              MOVS     r1,#0xa
000f3c  489f              LDR      r0,|L179.4540|
000f3e  f7fffffe          BL       uart_putchar
000f42  210a              MOVS     r1,#0xa
000f44  489d              LDR      r0,|L179.4540|
000f46  f7fffffe          BL       uart_putchar
000f4a  210a              MOVS     r1,#0xa
000f4c  489b              LDR      r0,|L179.4540|
000f4e  f7fffffe          BL       uart_putchar
000f52  210a              MOVS     r1,#0xa
000f54  4899              LDR      r0,|L179.4540|
000f56  f7fffffe          BL       uart_putchar
000f5a  210a              MOVS     r1,#0xa
000f5c  4897              LDR      r0,|L179.4540|
000f5e  f7fffffe          BL       uart_putchar
000f62  210a              MOVS     r1,#0xa
000f64  4895              LDR      r0,|L179.4540|
000f66  f7fffffe          BL       uart_putchar
000f6a  210a              MOVS     r1,#0xa
000f6c  4893              LDR      r0,|L179.4540|
000f6e  f7fffffe          BL       uart_putchar
000f72  210a              MOVS     r1,#0xa
000f74  4891              LDR      r0,|L179.4540|
000f76  f7fffffe          BL       uart_putchar
000f7a  210a              MOVS     r1,#0xa
000f7c  488f              LDR      r0,|L179.4540|
000f7e  f7fffffe          BL       uart_putchar
000f82  210a              MOVS     r1,#0xa
000f84  488d              LDR      r0,|L179.4540|
000f86  f7fffffe          BL       uart_putchar
000f8a  210a              MOVS     r1,#0xa
000f8c  488b              LDR      r0,|L179.4540|
000f8e  f7fffffe          BL       uart_putchar
000f92  210a              MOVS     r1,#0xa
000f94  4889              LDR      r0,|L179.4540|
000f96  f7fffffe          BL       uart_putchar
000f9a  210a              MOVS     r1,#0xa
000f9c  4887              LDR      r0,|L179.4540|
000f9e  f7fffffe          BL       uart_putchar
000fa2  210a              MOVS     r1,#0xa
000fa4  4885              LDR      r0,|L179.4540|
000fa6  f7fffffe          BL       uart_putchar
;;;2406   									//memset(data,0,1000);
;;;2407   														//timer counts to wait for characters in uart 1 									
;;;2408   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
000faa  bf00              NOP      
                  |L179.4012|
000fac  4984              LDR      r1,|L179.4544|
000fae  4885              LDR      r0,|L179.4548|
000fb0  f7fffffe          BL       strstr
000fb4  2800              CMP      r0,#0
000fb6  d109              BNE      |L179.4044|
000fb8  4983              LDR      r1,|L179.4552|
000fba  4882              LDR      r0,|L179.4548|
000fbc  f7fffffe          BL       strstr
000fc0  2800              CMP      r0,#0
000fc2  d103              BNE      |L179.4044|
000fc4  4881              LDR      r0,|L179.4556|
000fc6  6800              LDR      r0,[r0,#0]  ; tout
000fc8  2805              CMP      r0,#5
000fca  ddef              BLE      |L179.4012|
                  |L179.4044|
;;;2409   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2410   									}
;;;2411   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
000fcc  f7fffffe          BL       clear
;;;2412   									//clear();
;;;2413   									memset(data,0,strlen(data));
000fd0  4878              LDR      r0,|L179.4532|
000fd2  f7fffffe          BL       strlen
000fd6  4604              MOV      r4,r0
000fd8  4621              MOV      r1,r4
000fda  4876              LDR      r0,|L179.4532|
000fdc  f7fffffe          BL       __aeabi_memclr
;;;2414   									clear();
000fe0  f7fffffe          BL       clear
                  |L179.4068|
;;;2415   
;;;2416   								
;;;2417   
;;;2418   break;
000fe4  e3fd              B        |L179.6114|
                  |L179.4070|
;;;2419   //log_it();
;;;2420   }
;;;2421   			
;;;2422   			
;;;2423   			
;;;2424   			
;;;2425   			
;;;2426   			}
;;;2427   			else
;;;2428   			{
;;;2429   			
;;;2430   			
;;;2431   		delay(100);
000fe6  2064              MOVS     r0,#0x64
000fe8  f7fffffe          BL       delay
;;;2432   		clear();//memset(uart_string_gsm,0,5000);
000fec  f7fffffe          BL       clear
;;;2433   	
;;;2434   	memset(at_,0,100);
000ff0  2164              MOVS     r1,#0x64
000ff2  4877              LDR      r0,|L179.4560|
000ff4  f7fffffe          BL       __aeabi_memclr
;;;2435   	sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
000ff8  486e              LDR      r0,|L179.4532|
000ffa  f7fffffe          BL       strlen
000ffe  1c44              ADDS     r4,r0,#1
001000  4623              MOV      r3,r4
001002  4a74              LDR      r2,|L179.4564|
001004  4974              LDR      r1,|L179.4568|
001006  4872              LDR      r0,|L179.4560|
001008  f7fffffe          BL       __2sprintf
;;;2436   	send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
00100c  2005              MOVS     r0,#5
00100e  4b6e              LDR      r3,|L179.4552|
001010  4a72              LDR      r2,|L179.4572|
001012  4973              LDR      r1,|L179.4576|
001014  9000              STR      r0,[sp,#0]
001016  486e              LDR      r0,|L179.4560|
001018  f7fffffe          BL       send_SD
;;;2437   	
;;;2438   	clear();	
00101c  f7fffffe          BL       clear
;;;2439   									k2=0;									//string array counter for uart 1
001020  2000              MOVS     r0,#0
001022  4970              LDR      r1,|L179.4580|
001024  6008              STR      r0,[r1,#0]  ; k2
;;;2440   									tout=0;	
001026  4969              LDR      r1,|L179.4556|
001028  6008              STR      r0,[r1,#0]  ; tout
;;;2441   		for(k=0;k<strlen(data);k++)
00102a  4963              LDR      r1,|L179.4536|
00102c  6008              STR      r0,[r1,#0]  ; k
00102e  e00b              B        |L179.4168|
                  |L179.4144|
;;;2442   		{
;;;2443   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001030  4860              LDR      r0,|L179.4532|
001032  4a61              LDR      r2,|L179.4536|
001034  6812              LDR      r2,[r2,#0]  ; k
001036  5c81              LDRB     r1,[r0,r2]
001038  4860              LDR      r0,|L179.4540|
00103a  f7fffffe          BL       uart_putchar
00103e  485e              LDR      r0,|L179.4536|
001040  6800              LDR      r0,[r0,#0]            ;2441  ; k
001042  1c40              ADDS     r0,r0,#1              ;2441
001044  495c              LDR      r1,|L179.4536|
001046  6008              STR      r0,[r1,#0]            ;2441  ; k
                  |L179.4168|
001048  485a              LDR      r0,|L179.4532|
00104a  f7fffffe          BL       strlen
00104e  495a              LDR      r1,|L179.4536|
001050  6809              LDR      r1,[r1,#0]            ;2441  ; k
001052  4288              CMP      r0,r1                 ;2441
001054  d8ec              BHI      |L179.4144|
;;;2444   		}	
;;;2445   		uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001056  210a              MOVS     r1,#0xa
001058  4858              LDR      r0,|L179.4540|
00105a  f7fffffe          BL       uart_putchar
00105e  210a              MOVS     r1,#0xa
001060  4856              LDR      r0,|L179.4540|
001062  f7fffffe          BL       uart_putchar
001066  210a              MOVS     r1,#0xa
001068  4854              LDR      r0,|L179.4540|
00106a  f7fffffe          BL       uart_putchar
00106e  210a              MOVS     r1,#0xa
001070  4852              LDR      r0,|L179.4540|
001072  f7fffffe          BL       uart_putchar
001076  210a              MOVS     r1,#0xa
001078  4850              LDR      r0,|L179.4540|
00107a  e000              B        |L179.4222|
                  |L179.4220|
00107c  e3fe              B        |L179.6268|
                  |L179.4222|
00107e  f7fffffe          BL       uart_putchar
001082  210a              MOVS     r1,#0xa
001084  484d              LDR      r0,|L179.4540|
001086  f7fffffe          BL       uart_putchar
00108a  210a              MOVS     r1,#0xa
00108c  484b              LDR      r0,|L179.4540|
00108e  f7fffffe          BL       uart_putchar
001092  210a              MOVS     r1,#0xa
001094  4849              LDR      r0,|L179.4540|
001096  f7fffffe          BL       uart_putchar
00109a  210a              MOVS     r1,#0xa
00109c  4847              LDR      r0,|L179.4540|
00109e  f7fffffe          BL       uart_putchar
0010a2  210a              MOVS     r1,#0xa
0010a4  4845              LDR      r0,|L179.4540|
0010a6  f7fffffe          BL       uart_putchar
0010aa  210a              MOVS     r1,#0xa
0010ac  4843              LDR      r0,|L179.4540|
0010ae  f7fffffe          BL       uart_putchar
0010b2  210a              MOVS     r1,#0xa
0010b4  4841              LDR      r0,|L179.4540|
0010b6  f7fffffe          BL       uart_putchar
0010ba  210a              MOVS     r1,#0xa
0010bc  483f              LDR      r0,|L179.4540|
0010be  f7fffffe          BL       uart_putchar
0010c2  210a              MOVS     r1,#0xa
0010c4  483d              LDR      r0,|L179.4540|
0010c6  f7fffffe          BL       uart_putchar
0010ca  210a              MOVS     r1,#0xa
0010cc  483b              LDR      r0,|L179.4540|
0010ce  f7fffffe          BL       uart_putchar
0010d2  210a              MOVS     r1,#0xa
0010d4  4839              LDR      r0,|L179.4540|
0010d6  f7fffffe          BL       uart_putchar
0010da  210a              MOVS     r1,#0xa
0010dc  4837              LDR      r0,|L179.4540|
0010de  f7fffffe          BL       uart_putchar
0010e2  210a              MOVS     r1,#0xa
0010e4  4835              LDR      r0,|L179.4540|
0010e6  f7fffffe          BL       uart_putchar
0010ea  210a              MOVS     r1,#0xa
0010ec  4833              LDR      r0,|L179.4540|
0010ee  f7fffffe          BL       uart_putchar
0010f2  210a              MOVS     r1,#0xa
0010f4  4831              LDR      r0,|L179.4540|
0010f6  f7fffffe          BL       uart_putchar
0010fa  210a              MOVS     r1,#0xa
0010fc  482f              LDR      r0,|L179.4540|
0010fe  f7fffffe          BL       uart_putchar
001102  210a              MOVS     r1,#0xa
001104  482d              LDR      r0,|L179.4540|
001106  f7fffffe          BL       uart_putchar
00110a  210a              MOVS     r1,#0xa
00110c  482b              LDR      r0,|L179.4540|
00110e  f7fffffe          BL       uart_putchar
001112  210a              MOVS     r1,#0xa
001114  4829              LDR      r0,|L179.4540|
001116  f7fffffe          BL       uart_putchar
00111a  210a              MOVS     r1,#0xa
00111c  4827              LDR      r0,|L179.4540|
00111e  f7fffffe          BL       uart_putchar
001122  210a              MOVS     r1,#0xa
001124  4825              LDR      r0,|L179.4540|
001126  f7fffffe          BL       uart_putchar
00112a  210a              MOVS     r1,#0xa
00112c  4823              LDR      r0,|L179.4540|
00112e  f7fffffe          BL       uart_putchar
001132  210a              MOVS     r1,#0xa
001134  4821              LDR      r0,|L179.4540|
001136  f7fffffe          BL       uart_putchar
00113a  210a              MOVS     r1,#0xa
00113c  481f              LDR      r0,|L179.4540|
00113e  f7fffffe          BL       uart_putchar
001142  210a              MOVS     r1,#0xa
001144  481d              LDR      r0,|L179.4540|
001146  f7fffffe          BL       uart_putchar
00114a  210a              MOVS     r1,#0xa
00114c  481b              LDR      r0,|L179.4540|
00114e  f7fffffe          BL       uart_putchar
001152  210a              MOVS     r1,#0xa
001154  4819              LDR      r0,|L179.4540|
001156  f7fffffe          BL       uart_putchar
00115a  210a              MOVS     r1,#0xa
00115c  4817              LDR      r0,|L179.4540|
00115e  f7fffffe          BL       uart_putchar
001162  210a              MOVS     r1,#0xa
001164  4815              LDR      r0,|L179.4540|
001166  f7fffffe          BL       uart_putchar
00116a  210a              MOVS     r1,#0xa
00116c  4813              LDR      r0,|L179.4540|
00116e  f7fffffe          BL       uart_putchar
001172  210a              MOVS     r1,#0xa
001174  4811              LDR      r0,|L179.4540|
001176  f7fffffe          BL       uart_putchar
00117a  210a              MOVS     r1,#0xa
00117c  480f              LDR      r0,|L179.4540|
00117e  f7fffffe          BL       uart_putchar
001182  210a              MOVS     r1,#0xa
001184  480d              LDR      r0,|L179.4540|
001186  f7fffffe          BL       uart_putchar
00118a  210a              MOVS     r1,#0xa
00118c  480b              LDR      r0,|L179.4540|
00118e  f7fffffe          BL       uart_putchar
001192  210a              MOVS     r1,#0xa
001194  4809              LDR      r0,|L179.4540|
001196  f7fffffe          BL       uart_putchar
00119a  210a              MOVS     r1,#0xa
00119c  4807              LDR      r0,|L179.4540|
00119e  f7fffffe          BL       uart_putchar
0011a2  210a              MOVS     r1,#0xa
0011a4  4805              LDR      r0,|L179.4540|
0011a6  f7fffffe          BL       uart_putchar
0011aa  210a              MOVS     r1,#0xa
0011ac  4803              LDR      r0,|L179.4540|
0011ae  f7fffffe          BL       uart_putchar
0011b2  e019              B        |L179.4584|
                  |L179.4532|
                          DCD      data
                  |L179.4536|
                          DCD      k
                  |L179.4540|
                          DCD      0x4006b000
                  |L179.4544|
                          DCD      ||.conststring||+0x70
                  |L179.4548|
                          DCD      uart_string_gsm
                  |L179.4552|
                          DCD      ||.conststring||+0xe0
                  |L179.4556|
                          DCD      tout
                  |L179.4560|
                          DCD      at_
                  |L179.4564|
                          DCD      drive
                  |L179.4568|
                          DCD      ||.conststring||+0x528
                  |L179.4572|
                          DCD      ||.conststring||+0x18
                  |L179.4576|
                          DCD      ||.conststring||+0x20
                  |L179.4580|
                          DCD      ||k2||
                  |L179.4584|
0011e8  210a              MOVS     r1,#0xa
0011ea  48fe              LDR      r0,|L179.5604|
0011ec  f7fffffe          BL       uart_putchar
0011f0  210a              MOVS     r1,#0xa
0011f2  48fc              LDR      r0,|L179.5604|
0011f4  f7fffffe          BL       uart_putchar
0011f8  210a              MOVS     r1,#0xa
0011fa  48fa              LDR      r0,|L179.5604|
0011fc  f7fffffe          BL       uart_putchar
001200  210a              MOVS     r1,#0xa
001202  48f8              LDR      r0,|L179.5604|
001204  f7fffffe          BL       uart_putchar
001208  210a              MOVS     r1,#0xa
00120a  48f6              LDR      r0,|L179.5604|
00120c  f7fffffe          BL       uart_putchar
001210  210a              MOVS     r1,#0xa
001212  48f4              LDR      r0,|L179.5604|
001214  f7fffffe          BL       uart_putchar
001218  210a              MOVS     r1,#0xa
00121a  48f2              LDR      r0,|L179.5604|
00121c  f7fffffe          BL       uart_putchar
001220  210a              MOVS     r1,#0xa
001222  48f0              LDR      r0,|L179.5604|
001224  f7fffffe          BL       uart_putchar
001228  210a              MOVS     r1,#0xa
00122a  48ee              LDR      r0,|L179.5604|
00122c  f7fffffe          BL       uart_putchar
001230  210a              MOVS     r1,#0xa
001232  48ec              LDR      r0,|L179.5604|
001234  f7fffffe          BL       uart_putchar
001238  210a              MOVS     r1,#0xa
00123a  48ea              LDR      r0,|L179.5604|
00123c  f7fffffe          BL       uart_putchar
001240  210a              MOVS     r1,#0xa
001242  48e8              LDR      r0,|L179.5604|
001244  f7fffffe          BL       uart_putchar
001248  210a              MOVS     r1,#0xa
00124a  48e6              LDR      r0,|L179.5604|
00124c  f7fffffe          BL       uart_putchar
001250  210a              MOVS     r1,#0xa
001252  48e4              LDR      r0,|L179.5604|
001254  f7fffffe          BL       uart_putchar
;;;2446   									//memset(data,0,1000);
;;;2447   														//timer counts to wait for characters in uart 1 									
;;;2448   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001258  bf00              NOP      
                  |L179.4698|
00125a  49e3              LDR      r1,|L179.5608|
00125c  48e3              LDR      r0,|L179.5612|
00125e  f7fffffe          BL       strstr
001262  2800              CMP      r0,#0
001264  d109              BNE      |L179.4730|
001266  49e2              LDR      r1,|L179.5616|
001268  48e0              LDR      r0,|L179.5612|
00126a  f7fffffe          BL       strstr
00126e  2800              CMP      r0,#0
001270  d103              BNE      |L179.4730|
001272  48e0              LDR      r0,|L179.5620|
001274  6800              LDR      r0,[r0,#0]  ; tout
001276  2805              CMP      r0,#5
001278  ddef              BLE      |L179.4698|
                  |L179.4730|
;;;2449   									{}
;;;2450   	                clear();
00127a  f7fffffe          BL       clear
;;;2451   									memset(data,0,strlen(data));
00127e  48de              LDR      r0,|L179.5624|
001280  f7fffffe          BL       strlen
001284  4604              MOV      r4,r0
001286  4621              MOV      r1,r4
001288  48db              LDR      r0,|L179.5624|
00128a  f7fffffe          BL       __aeabi_memclr
;;;2452   									clear();
00128e  f7fffffe          BL       clear
;;;2453   
;;;2454   								
;;;2455   			break;
001292  e6a7              B        |L179.4068|
                  |L179.4756|
;;;2456   			///returning; 
;;;2457   			//log_it();
;;;2458   			}
;;;2459   
;;;2460   
;;;2461   }
;;;2462   
;;;2463   //if(notsentflag==0){cursorvaluene=cursor_val(sd_data);cursorvaluepr+=cursorvaluene;}
;;;2464   
;;;2465   
;;;2466   }
;;;2467   else{
;;;2468   	remove_all_chars(data, '\n', '\n');
001294  220a              MOVS     r2,#0xa
001296  4611              MOV      r1,r2
001298  48d7              LDR      r0,|L179.5624|
00129a  f7fffffe          BL       remove_all_chars
;;;2469   			strreplace(data, ",L,", ",H,");	
00129e  4ad7              LDR      r2,|L179.5628|
0012a0  49d7              LDR      r1,|L179.5632|
0012a2  48d5              LDR      r0,|L179.5624|
0012a4  f7fffffe          BL       strreplace
;;;2470   			
;;;2471   	
;;;2472   	  delay(100);
0012a8  2064              MOVS     r0,#0x64
0012aa  f7fffffe          BL       delay
;;;2473   		clear();//memset(uart_string_gsm,0,5000);
0012ae  f7fffffe          BL       clear
;;;2474   	
;;;2475   	memset(at_,0,100);
0012b2  2164              MOVS     r1,#0x64
0012b4  48d3              LDR      r0,|L179.5636|
0012b6  f7fffffe          BL       __aeabi_memclr
;;;2476   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0012ba  48cf              LDR      r0,|L179.5624|
0012bc  f7fffffe          BL       strlen
0012c0  1c44              ADDS     r4,r0,#1
0012c2  4623              MOV      r3,r4
0012c4  4ad0              LDR      r2,|L179.5640|
0012c6  49d1              LDR      r1,|L179.5644|
0012c8  48ce              LDR      r0,|L179.5636|
0012ca  f7fffffe          BL       __2sprintf
;;;2477   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
0012ce  2005              MOVS     r0,#5
0012d0  4bc7              LDR      r3,|L179.5616|
0012d2  4acf              LDR      r2,|L179.5648|
0012d4  49cf              LDR      r1,|L179.5652|
0012d6  9000              STR      r0,[sp,#0]
0012d8  48ca              LDR      r0,|L179.5636|
0012da  f7fffffe          BL       send_SD
;;;2478   clear();	
0012de  f7fffffe          BL       clear
;;;2479   									k2=0;									//string array counter for uart 1
0012e2  2000              MOVS     r0,#0
0012e4  49cc              LDR      r1,|L179.5656|
0012e6  6008              STR      r0,[r1,#0]  ; k2
;;;2480   									tout=0;	
0012e8  49c2              LDR      r1,|L179.5620|
0012ea  6008              STR      r0,[r1,#0]  ; tout
;;;2481   		for(k=0;k<strlen(data);k++)
0012ec  49cb              LDR      r1,|L179.5660|
0012ee  6008              STR      r0,[r1,#0]  ; k
0012f0  e00b              B        |L179.4874|
                  |L179.4850|
;;;2482   		{
;;;2483   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
0012f2  48c1              LDR      r0,|L179.5624|
0012f4  4ac9              LDR      r2,|L179.5660|
0012f6  6812              LDR      r2,[r2,#0]  ; k
0012f8  5c81              LDRB     r1,[r0,r2]
0012fa  48ba              LDR      r0,|L179.5604|
0012fc  f7fffffe          BL       uart_putchar
001300  48c6              LDR      r0,|L179.5660|
001302  6800              LDR      r0,[r0,#0]            ;2481  ; k
001304  1c40              ADDS     r0,r0,#1              ;2481
001306  49c5              LDR      r1,|L179.5660|
001308  6008              STR      r0,[r1,#0]            ;2481  ; k
                  |L179.4874|
00130a  48bb              LDR      r0,|L179.5624|
00130c  f7fffffe          BL       strlen
001310  49c2              LDR      r1,|L179.5660|
001312  6809              LDR      r1,[r1,#0]            ;2481  ; k
001314  4288              CMP      r0,r1                 ;2481
001316  d8ec              BHI      |L179.4850|
;;;2484   		}	
;;;2485   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001318  210a              MOVS     r1,#0xa
00131a  48b2              LDR      r0,|L179.5604|
00131c  f7fffffe          BL       uart_putchar
001320  210a              MOVS     r1,#0xa
001322  48b0              LDR      r0,|L179.5604|
001324  f7fffffe          BL       uart_putchar
001328  210a              MOVS     r1,#0xa
00132a  48ae              LDR      r0,|L179.5604|
00132c  f7fffffe          BL       uart_putchar
001330  210a              MOVS     r1,#0xa
001332  48ac              LDR      r0,|L179.5604|
001334  f7fffffe          BL       uart_putchar
001338  210a              MOVS     r1,#0xa
00133a  48aa              LDR      r0,|L179.5604|
00133c  f7fffffe          BL       uart_putchar
001340  210a              MOVS     r1,#0xa
001342  48a8              LDR      r0,|L179.5604|
001344  f7fffffe          BL       uart_putchar
001348  210a              MOVS     r1,#0xa
00134a  48a6              LDR      r0,|L179.5604|
00134c  f7fffffe          BL       uart_putchar
001350  210a              MOVS     r1,#0xa
001352  48a4              LDR      r0,|L179.5604|
001354  f7fffffe          BL       uart_putchar
001358  210a              MOVS     r1,#0xa
00135a  48a2              LDR      r0,|L179.5604|
00135c  f7fffffe          BL       uart_putchar
001360  210a              MOVS     r1,#0xa
001362  48a0              LDR      r0,|L179.5604|
001364  f7fffffe          BL       uart_putchar
001368  210a              MOVS     r1,#0xa
00136a  489e              LDR      r0,|L179.5604|
00136c  f7fffffe          BL       uart_putchar
001370  210a              MOVS     r1,#0xa
001372  489c              LDR      r0,|L179.5604|
001374  f7fffffe          BL       uart_putchar
001378  210a              MOVS     r1,#0xa
00137a  489a              LDR      r0,|L179.5604|
00137c  f7fffffe          BL       uart_putchar
001380  210a              MOVS     r1,#0xa
001382  4898              LDR      r0,|L179.5604|
001384  f7fffffe          BL       uart_putchar
001388  210a              MOVS     r1,#0xa
00138a  4896              LDR      r0,|L179.5604|
00138c  f7fffffe          BL       uart_putchar
001390  210a              MOVS     r1,#0xa
001392  4894              LDR      r0,|L179.5604|
001394  f7fffffe          BL       uart_putchar
001398  210a              MOVS     r1,#0xa
00139a  4892              LDR      r0,|L179.5604|
00139c  f7fffffe          BL       uart_putchar
0013a0  210a              MOVS     r1,#0xa
0013a2  4890              LDR      r0,|L179.5604|
0013a4  f7fffffe          BL       uart_putchar
0013a8  210a              MOVS     r1,#0xa
0013aa  488e              LDR      r0,|L179.5604|
0013ac  e000              B        |L179.5040|
                  |L179.5038|
0013ae  e3fc              B        |L179.7082|
                  |L179.5040|
0013b0  f7fffffe          BL       uart_putchar
0013b4  210a              MOVS     r1,#0xa
0013b6  488b              LDR      r0,|L179.5604|
0013b8  f7fffffe          BL       uart_putchar
0013bc  210a              MOVS     r1,#0xa
0013be  4889              LDR      r0,|L179.5604|
0013c0  f7fffffe          BL       uart_putchar
0013c4  210a              MOVS     r1,#0xa
0013c6  4887              LDR      r0,|L179.5604|
0013c8  f7fffffe          BL       uart_putchar
0013cc  210a              MOVS     r1,#0xa
0013ce  4885              LDR      r0,|L179.5604|
0013d0  f7fffffe          BL       uart_putchar
0013d4  210a              MOVS     r1,#0xa
0013d6  4883              LDR      r0,|L179.5604|
0013d8  f7fffffe          BL       uart_putchar
0013dc  210a              MOVS     r1,#0xa
0013de  4881              LDR      r0,|L179.5604|
0013e0  f7fffffe          BL       uart_putchar
0013e4  210a              MOVS     r1,#0xa
0013e6  487f              LDR      r0,|L179.5604|
0013e8  f7fffffe          BL       uart_putchar
0013ec  210a              MOVS     r1,#0xa
0013ee  487d              LDR      r0,|L179.5604|
0013f0  f7fffffe          BL       uart_putchar
0013f4  210a              MOVS     r1,#0xa
0013f6  487b              LDR      r0,|L179.5604|
0013f8  f7fffffe          BL       uart_putchar
0013fc  210a              MOVS     r1,#0xa
0013fe  4879              LDR      r0,|L179.5604|
001400  f7fffffe          BL       uart_putchar
001404  210a              MOVS     r1,#0xa
001406  4877              LDR      r0,|L179.5604|
001408  f7fffffe          BL       uart_putchar
00140c  210a              MOVS     r1,#0xa
00140e  4875              LDR      r0,|L179.5604|
001410  f7fffffe          BL       uart_putchar
001414  210a              MOVS     r1,#0xa
001416  4873              LDR      r0,|L179.5604|
001418  f7fffffe          BL       uart_putchar
00141c  210a              MOVS     r1,#0xa
00141e  4871              LDR      r0,|L179.5604|
001420  f7fffffe          BL       uart_putchar
001424  210a              MOVS     r1,#0xa
001426  486f              LDR      r0,|L179.5604|
001428  f7fffffe          BL       uart_putchar
00142c  210a              MOVS     r1,#0xa
00142e  486d              LDR      r0,|L179.5604|
001430  f7fffffe          BL       uart_putchar
001434  210a              MOVS     r1,#0xa
001436  486b              LDR      r0,|L179.5604|
001438  f7fffffe          BL       uart_putchar
00143c  210a              MOVS     r1,#0xa
00143e  4869              LDR      r0,|L179.5604|
001440  f7fffffe          BL       uart_putchar
001444  210a              MOVS     r1,#0xa
001446  4867              LDR      r0,|L179.5604|
001448  f7fffffe          BL       uart_putchar
00144c  210a              MOVS     r1,#0xa
00144e  4865              LDR      r0,|L179.5604|
001450  f7fffffe          BL       uart_putchar
001454  210a              MOVS     r1,#0xa
001456  4863              LDR      r0,|L179.5604|
001458  f7fffffe          BL       uart_putchar
00145c  210a              MOVS     r1,#0xa
00145e  4861              LDR      r0,|L179.5604|
001460  f7fffffe          BL       uart_putchar
001464  210a              MOVS     r1,#0xa
001466  485f              LDR      r0,|L179.5604|
001468  f7fffffe          BL       uart_putchar
00146c  210a              MOVS     r1,#0xa
00146e  485d              LDR      r0,|L179.5604|
001470  f7fffffe          BL       uart_putchar
001474  210a              MOVS     r1,#0xa
001476  485b              LDR      r0,|L179.5604|
001478  f7fffffe          BL       uart_putchar
00147c  210a              MOVS     r1,#0xa
00147e  4859              LDR      r0,|L179.5604|
001480  f7fffffe          BL       uart_putchar
001484  210a              MOVS     r1,#0xa
001486  4857              LDR      r0,|L179.5604|
001488  f7fffffe          BL       uart_putchar
00148c  210a              MOVS     r1,#0xa
00148e  4855              LDR      r0,|L179.5604|
001490  f7fffffe          BL       uart_putchar
001494  210a              MOVS     r1,#0xa
001496  4853              LDR      r0,|L179.5604|
001498  f7fffffe          BL       uart_putchar
00149c  210a              MOVS     r1,#0xa
00149e  4851              LDR      r0,|L179.5604|
0014a0  f7fffffe          BL       uart_putchar
0014a4  210a              MOVS     r1,#0xa
0014a6  484f              LDR      r0,|L179.5604|
0014a8  f7fffffe          BL       uart_putchar
0014ac  210a              MOVS     r1,#0xa
0014ae  484d              LDR      r0,|L179.5604|
0014b0  f7fffffe          BL       uart_putchar
0014b4  210a              MOVS     r1,#0xa
0014b6  484b              LDR      r0,|L179.5604|
0014b8  f7fffffe          BL       uart_putchar
0014bc  210a              MOVS     r1,#0xa
0014be  4849              LDR      r0,|L179.5604|
0014c0  f7fffffe          BL       uart_putchar
0014c4  210a              MOVS     r1,#0xa
0014c6  4847              LDR      r0,|L179.5604|
0014c8  f7fffffe          BL       uart_putchar
0014cc  210a              MOVS     r1,#0xa
0014ce  4845              LDR      r0,|L179.5604|
0014d0  f7fffffe          BL       uart_putchar
0014d4  210a              MOVS     r1,#0xa
0014d6  4843              LDR      r0,|L179.5604|
0014d8  f7fffffe          BL       uart_putchar
0014dc  210a              MOVS     r1,#0xa
0014de  4841              LDR      r0,|L179.5604|
0014e0  f7fffffe          BL       uart_putchar
;;;2486   									//memset(data,0,1000);
;;;2487   														//timer counts to wait for characters in uart 1 									
;;;2488   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
0014e4  bf00              NOP      
                  |L179.5350|
0014e6  4940              LDR      r1,|L179.5608|
0014e8  4840              LDR      r0,|L179.5612|
0014ea  f7fffffe          BL       strstr
0014ee  2800              CMP      r0,#0
0014f0  d109              BNE      |L179.5382|
0014f2  493f              LDR      r1,|L179.5616|
0014f4  483d              LDR      r0,|L179.5612|
0014f6  f7fffffe          BL       strstr
0014fa  2800              CMP      r0,#0
0014fc  d103              BNE      |L179.5382|
0014fe  483d              LDR      r0,|L179.5620|
001500  6800              LDR      r0,[r0,#0]  ; tout
001502  2805              CMP      r0,#5
001504  ddef              BLE      |L179.5350|
                  |L179.5382|
;;;2489   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2490   									}
;;;2491   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001506  f7fffffe          BL       clear
;;;2492   									//clear();
;;;2493   									memset(data,0,strlen(data));
00150a  483b              LDR      r0,|L179.5624|
00150c  f7fffffe          BL       strlen
001510  4604              MOV      r4,r0
001512  4621              MOV      r1,r4
001514  4838              LDR      r0,|L179.5624|
001516  f7fffffe          BL       __aeabi_memclr
;;;2494   									clear();
00151a  f7fffffe          BL       clear
;;;2495   
;;;2496   								
;;;2497   	
;;;2498   	
;;;2499   	
;;;2500   	//log_it();
;;;2501   			memset(data,0,strlen(data));
00151e  4836              LDR      r0,|L179.5624|
001520  f7fffffe          BL       strlen
001524  4604              MOV      r4,r0
001526  4621              MOV      r1,r4
001528  4833              LDR      r0,|L179.5624|
00152a  f7fffffe          BL       __aeabi_memclr
;;;2502   //*****************************tcp_initialization();************************************//
;;;2503   
;;;2504   	
;;;2505   msg_sim800(); 
00152e  f7fffffe          BL       msg_sim800
;;;2506   send_GSM("\r\nAT+CFUN=0\r\r\n\n", "OK", "ERROR\r\n" , "ERROR",5);	
001532  2005              MOVS     r0,#5
001534  4b2e              LDR      r3,|L179.5616|
001536  4a36              LDR      r2,|L179.5648|
001538  4939              LDR      r1,|L179.5664|
00153a  9000              STR      r0,[sp,#0]
00153c  4839              LDR      r0,|L179.5668|
00153e  f7fffffe          BL       send_GSM
;;;2507   delay(100);
001542  2064              MOVS     r0,#0x64
001544  f7fffffe          BL       delay
;;;2508   send_GSM("\r\nAT+CFUN=1\r\n", "OK", "NOT INSERTED\r\nOK" , "ERROR", 4);	
001548  2004              MOVS     r0,#4
00154a  4b29              LDR      r3,|L179.5616|
00154c  4a36              LDR      r2,|L179.5672|
00154e  4934              LDR      r1,|L179.5664|
001550  9000              STR      r0,[sp,#0]
001552  4836              LDR      r0,|L179.5676|
001554  f7fffffe          BL       send_GSM
;;;2509   GPS_COLLECT2();
001558  f7fffffe          BL       GPS_COLLECT2
;;;2510   strreplace(data, ",L,", ",H,");		
00155c  4a27              LDR      r2,|L179.5628|
00155e  4928              LDR      r1,|L179.5632|
001560  4825              LDR      r0,|L179.5624|
001562  f7fffffe          BL       strreplace
;;;2511   GPS_COLLECT2();
001566  f7fffffe          BL       GPS_COLLECT2
;;;2512   strreplace(data, ",L,", ",H,");	
00156a  4a24              LDR      r2,|L179.5628|
00156c  4924              LDR      r1,|L179.5632|
00156e  4822              LDR      r0,|L179.5624|
001570  f7fffffe          BL       strreplace
;;;2513   GPS_COLLECT2();
001574  f7fffffe          BL       GPS_COLLECT2
;;;2514   strreplace(data, ",L,", ",H,");
001578  4a20              LDR      r2,|L179.5628|
00157a  4921              LDR      r1,|L179.5632|
00157c  481e              LDR      r0,|L179.5624|
00157e  f7fffffe          BL       strreplace
;;;2515   cond201=(strstr(uart_string_gsm, "OK"));
001582  4927              LDR      r1,|L179.5664|
001584  4819              LDR      r0,|L179.5612|
001586  f7fffffe          BL       strstr
00158a  4929              LDR      r1,|L179.5680|
00158c  6008              STR      r0,[r1,#0]  ; cond201
;;;2516   cond200=(strstr(uart_string_gsm, "ERROR"));
00158e  4918              LDR      r1,|L179.5616|
001590  4816              LDR      r0,|L179.5612|
001592  f7fffffe          BL       strstr
001596  4927              LDR      r1,|L179.5684|
001598  6008              STR      r0,[r1,#0]  ; cond200
;;;2517   if(  (!cond201 !=0  &&   !cond200 !=0)					&& sleep_flag != 1)
00159a  4825              LDR      r0,|L179.5680|
00159c  6800              LDR      r0,[r0,#0]  ; cond201
00159e  2800              CMP      r0,#0
0015a0  d101              BNE      |L179.5542|
0015a2  2001              MOVS     r0,#1
0015a4  e000              B        |L179.5544|
                  |L179.5542|
0015a6  2000              MOVS     r0,#0
                  |L179.5544|
0015a8  2800              CMP      r0,#0
                  |L179.5546|
0015aa  d07c              BEQ      |L179.5798|
0015ac  4821              LDR      r0,|L179.5684|
0015ae  6800              LDR      r0,[r0,#0]  ; cond200
0015b0  2800              CMP      r0,#0
0015b2  d101              BNE      |L179.5560|
0015b4  2001              MOVS     r0,#1
0015b6  e000              B        |L179.5562|
                  |L179.5560|
0015b8  2000              MOVS     r0,#0
                  |L179.5562|
0015ba  2800              CMP      r0,#0
0015bc  d0f5              BEQ      |L179.5546|
0015be  481e              LDR      r0,|L179.5688|
0015c0  6800              LDR      r0,[r0,#0]  ; sleep_flag
0015c2  2801              CMP      r0,#1
0015c4  d0f1              BEQ      |L179.5546|
;;;2518   {
;;;2519   delay(100);
0015c6  2064              MOVS     r0,#0x64
0015c8  f7fffffe          BL       delay
;;;2520   clear();//memset(uart_string_gsm,0,5000);
0015cc  f7fffffe          BL       clear
;;;2521   memset(at_,0,100);
0015d0  2164              MOVS     r1,#0x64
0015d2  480c              LDR      r0,|L179.5636|
0015d4  f7fffffe          BL       __aeabi_memclr
;;;2522   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
0015d8  4807              LDR      r0,|L179.5624|
0015da  f7fffffe          BL       strlen
0015de  1c44              ADDS     r4,r0,#1
0015e0  4623              MOV      r3,r4
0015e2  e02b              B        |L179.5692|
                  |L179.5604|
                          DCD      0x4006b000
                  |L179.5608|
                          DCD      ||.conststring||+0x70
                  |L179.5612|
                          DCD      uart_string_gsm
                  |L179.5616|
                          DCD      ||.conststring||+0xe0
                  |L179.5620|
                          DCD      tout
                  |L179.5624|
                          DCD      data
                  |L179.5628|
                          DCD      ||.conststring||+0x520
                  |L179.5632|
                          DCD      ||.conststring||+0x524
                  |L179.5636|
                          DCD      at_
                  |L179.5640|
                          DCD      drive
                  |L179.5644|
                          DCD      ||.conststring||+0x528
                  |L179.5648|
                          DCD      ||.conststring||+0x18
                  |L179.5652|
                          DCD      ||.conststring||+0x20
                  |L179.5656|
                          DCD      ||k2||
                  |L179.5660|
                          DCD      k
                  |L179.5664|
                          DCD      ||.conststring||+0x2c
                  |L179.5668|
                          DCD      ||.conststring||+0x7cc
                  |L179.5672|
                          DCD      ||.conststring||+0x7dc
                  |L179.5676|
                          DCD      ||.conststring||+0x7f0
                  |L179.5680|
                          DCD      cond201
                  |L179.5684|
                          DCD      cond200
                  |L179.5688|
                          DCD      sleep_flag
                  |L179.5692|
00163c  4afd              LDR      r2,|L179.6708|
00163e  49fe              LDR      r1,|L179.6712|
001640  48fe              LDR      r0,|L179.6716|
001642  f7fffffe          BL       __2sprintf
;;;2523   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001646  2005              MOVS     r0,#5
001648  4bfd              LDR      r3,|L179.6720|
00164a  4afe              LDR      r2,|L179.6724|
00164c  49fe              LDR      r1,|L179.6728|
00164e  9000              STR      r0,[sp,#0]
001650  48fa              LDR      r0,|L179.6716|
001652  f7fffffe          BL       send_SD
;;;2524   clear();	
001656  f7fffffe          BL       clear
;;;2525   k2=0;									//string array counter for uart 1
00165a  2000              MOVS     r0,#0
00165c  49fb              LDR      r1,|L179.6732|
00165e  6008              STR      r0,[r1,#0]  ; k2
;;;2526   tout=0;	
001660  49fb              LDR      r1,|L179.6736|
001662  6008              STR      r0,[r1,#0]  ; tout
;;;2527   for(k=0;k<strlen(data);k++)
001664  49fb              LDR      r1,|L179.6740|
001666  6008              STR      r0,[r1,#0]  ; k
001668  e00b              B        |L179.5762|
                  |L179.5738|
;;;2528   {
;;;2529   uart_putchar(UART1_BASE_PTR, data[k]);//clear();
00166a  48fb              LDR      r0,|L179.6744|
00166c  4af9              LDR      r2,|L179.6740|
00166e  6812              LDR      r2,[r2,#0]  ; k
001670  5c81              LDRB     r1,[r0,r2]
001672  48fa              LDR      r0,|L179.6748|
001674  f7fffffe          BL       uart_putchar
001678  48f6              LDR      r0,|L179.6740|
00167a  6800              LDR      r0,[r0,#0]            ;2527  ; k
00167c  1c40              ADDS     r0,r0,#1              ;2527
00167e  49f5              LDR      r1,|L179.6740|
001680  6008              STR      r0,[r1,#0]            ;2527  ; k
                  |L179.5762|
001682  48f5              LDR      r0,|L179.6744|
001684  f7fffffe          BL       strlen
001688  49f2              LDR      r1,|L179.6740|
00168a  6809              LDR      r1,[r1,#0]            ;2527  ; k
00168c  4288              CMP      r0,r1                 ;2527
00168e  d8ec              BHI      |L179.5738|
;;;2530   }	
;;;2531   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001690  210a              MOVS     r1,#0xa
001692  48f2              LDR      r0,|L179.6748|
001694  f7fffffe          BL       uart_putchar
001698  210a              MOVS     r1,#0xa
00169a  48f0              LDR      r0,|L179.6748|
00169c  f7fffffe          BL       uart_putchar
0016a0  210a              MOVS     r1,#0xa
0016a2  48ee              LDR      r0,|L179.6748|
0016a4  e000              B        |L179.5800|
                  |L179.5798|
0016a6  e106              B        |L179.6326|
                  |L179.5800|
0016a8  f7fffffe          BL       uart_putchar
0016ac  210a              MOVS     r1,#0xa
0016ae  48eb              LDR      r0,|L179.6748|
0016b0  f7fffffe          BL       uart_putchar
0016b4  210a              MOVS     r1,#0xa
0016b6  48e9              LDR      r0,|L179.6748|
0016b8  f7fffffe          BL       uart_putchar
0016bc  210a              MOVS     r1,#0xa
0016be  48e7              LDR      r0,|L179.6748|
0016c0  f7fffffe          BL       uart_putchar
0016c4  210a              MOVS     r1,#0xa
0016c6  48e5              LDR      r0,|L179.6748|
0016c8  f7fffffe          BL       uart_putchar
0016cc  210a              MOVS     r1,#0xa
0016ce  48e3              LDR      r0,|L179.6748|
0016d0  f7fffffe          BL       uart_putchar
0016d4  210a              MOVS     r1,#0xa
0016d6  48e1              LDR      r0,|L179.6748|
0016d8  f7fffffe          BL       uart_putchar
0016dc  210a              MOVS     r1,#0xa
0016de  48df              LDR      r0,|L179.6748|
0016e0  f7fffffe          BL       uart_putchar
0016e4  210a              MOVS     r1,#0xa
0016e6  48dd              LDR      r0,|L179.6748|
0016e8  f7fffffe          BL       uart_putchar
0016ec  210a              MOVS     r1,#0xa
0016ee  48db              LDR      r0,|L179.6748|
0016f0  f7fffffe          BL       uart_putchar
0016f4  210a              MOVS     r1,#0xa
0016f6  48d9              LDR      r0,|L179.6748|
0016f8  f7fffffe          BL       uart_putchar
0016fc  210a              MOVS     r1,#0xa
0016fe  48d7              LDR      r0,|L179.6748|
001700  f7fffffe          BL       uart_putchar
001704  210a              MOVS     r1,#0xa
001706  48d5              LDR      r0,|L179.6748|
001708  f7fffffe          BL       uart_putchar
00170c  210a              MOVS     r1,#0xa
00170e  48d3              LDR      r0,|L179.6748|
001710  f7fffffe          BL       uart_putchar
001714  210a              MOVS     r1,#0xa
001716  48d1              LDR      r0,|L179.6748|
001718  f7fffffe          BL       uart_putchar
00171c  210a              MOVS     r1,#0xa
00171e  48cf              LDR      r0,|L179.6748|
001720  f7fffffe          BL       uart_putchar
001724  210a              MOVS     r1,#0xa
001726  48cd              LDR      r0,|L179.6748|
001728  f7fffffe          BL       uart_putchar
00172c  210a              MOVS     r1,#0xa
00172e  48cb              LDR      r0,|L179.6748|
001730  f7fffffe          BL       uart_putchar
001734  210a              MOVS     r1,#0xa
001736  48c9              LDR      r0,|L179.6748|
001738  f7fffffe          BL       uart_putchar
00173c  210a              MOVS     r1,#0xa
00173e  48c7              LDR      r0,|L179.6748|
001740  f7fffffe          BL       uart_putchar
001744  210a              MOVS     r1,#0xa
001746  48c5              LDR      r0,|L179.6748|
001748  f7fffffe          BL       uart_putchar
00174c  210a              MOVS     r1,#0xa
00174e  48c3              LDR      r0,|L179.6748|
001750  f7fffffe          BL       uart_putchar
001754  210a              MOVS     r1,#0xa
001756  48c1              LDR      r0,|L179.6748|
001758  f7fffffe          BL       uart_putchar
00175c  210a              MOVS     r1,#0xa
00175e  48bf              LDR      r0,|L179.6748|
001760  f7fffffe          BL       uart_putchar
001764  210a              MOVS     r1,#0xa
001766  48bd              LDR      r0,|L179.6748|
001768  f7fffffe          BL       uart_putchar
00176c  210a              MOVS     r1,#0xa
00176e  48bb              LDR      r0,|L179.6748|
001770  f7fffffe          BL       uart_putchar
001774  210a              MOVS     r1,#0xa
001776  48b9              LDR      r0,|L179.6748|
001778  f7fffffe          BL       uart_putchar
00177c  210a              MOVS     r1,#0xa
00177e  48b7              LDR      r0,|L179.6748|
001780  f7fffffe          BL       uart_putchar
001784  210a              MOVS     r1,#0xa
001786  48b5              LDR      r0,|L179.6748|
001788  f7fffffe          BL       uart_putchar
00178c  210a              MOVS     r1,#0xa
00178e  48b3              LDR      r0,|L179.6748|
001790  f7fffffe          BL       uart_putchar
001794  210a              MOVS     r1,#0xa
001796  48b1              LDR      r0,|L179.6748|
001798  f7fffffe          BL       uart_putchar
00179c  210a              MOVS     r1,#0xa
00179e  48af              LDR      r0,|L179.6748|
0017a0  f7fffffe          BL       uart_putchar
0017a4  210a              MOVS     r1,#0xa
0017a6  48ad              LDR      r0,|L179.6748|
0017a8  f7fffffe          BL       uart_putchar
0017ac  210a              MOVS     r1,#0xa
0017ae  48ab              LDR      r0,|L179.6748|
0017b0  f7fffffe          BL       uart_putchar
0017b4  210a              MOVS     r1,#0xa
0017b6  48a9              LDR      r0,|L179.6748|
0017b8  f7fffffe          BL       uart_putchar
0017bc  210a              MOVS     r1,#0xa
0017be  48a7              LDR      r0,|L179.6748|
0017c0  f7fffffe          BL       uart_putchar
0017c4  210a              MOVS     r1,#0xa
0017c6  48a5              LDR      r0,|L179.6748|
0017c8  f7fffffe          BL       uart_putchar
0017cc  210a              MOVS     r1,#0xa
0017ce  48a3              LDR      r0,|L179.6748|
0017d0  f7fffffe          BL       uart_putchar
0017d4  210a              MOVS     r1,#0xa
0017d6  48a1              LDR      r0,|L179.6748|
0017d8  f7fffffe          BL       uart_putchar
0017dc  210a              MOVS     r1,#0xa
0017de  489f              LDR      r0,|L179.6748|
0017e0  e000              B        |L179.6116|
                  |L179.6114|
0017e2  e301              B        |L179.7656|
                  |L179.6116|
0017e4  f7fffffe          BL       uart_putchar
0017e8  210a              MOVS     r1,#0xa
0017ea  489c              LDR      r0,|L179.6748|
0017ec  f7fffffe          BL       uart_putchar
0017f0  210a              MOVS     r1,#0xa
0017f2  489a              LDR      r0,|L179.6748|
0017f4  f7fffffe          BL       uart_putchar
0017f8  210a              MOVS     r1,#0xa
0017fa  4898              LDR      r0,|L179.6748|
0017fc  f7fffffe          BL       uart_putchar
001800  210a              MOVS     r1,#0xa
001802  4896              LDR      r0,|L179.6748|
001804  f7fffffe          BL       uart_putchar
001808  210a              MOVS     r1,#0xa
00180a  4894              LDR      r0,|L179.6748|
00180c  f7fffffe          BL       uart_putchar
001810  210a              MOVS     r1,#0xa
001812  4892              LDR      r0,|L179.6748|
001814  f7fffffe          BL       uart_putchar
001818  210a              MOVS     r1,#0xa
00181a  4890              LDR      r0,|L179.6748|
00181c  f7fffffe          BL       uart_putchar
001820  210a              MOVS     r1,#0xa
001822  488e              LDR      r0,|L179.6748|
001824  f7fffffe          BL       uart_putchar
001828  210a              MOVS     r1,#0xa
00182a  488c              LDR      r0,|L179.6748|
00182c  f7fffffe          BL       uart_putchar
001830  210a              MOVS     r1,#0xa
001832  488a              LDR      r0,|L179.6748|
001834  f7fffffe          BL       uart_putchar
001838  210a              MOVS     r1,#0xa
00183a  4888              LDR      r0,|L179.6748|
00183c  f7fffffe          BL       uart_putchar
001840  210a              MOVS     r1,#0xa
001842  4886              LDR      r0,|L179.6748|
001844  f7fffffe          BL       uart_putchar
001848  210a              MOVS     r1,#0xa
00184a  4884              LDR      r0,|L179.6748|
00184c  f7fffffe          BL       uart_putchar
001850  210a              MOVS     r1,#0xa
001852  4882              LDR      r0,|L179.6748|
001854  f7fffffe          BL       uart_putchar
001858  210a              MOVS     r1,#0xa
00185a  4880              LDR      r0,|L179.6748|
00185c  f7fffffe          BL       uart_putchar
;;;2532   									//memset(data,0,1000);
;;;2533   														//timer counts to wait for characters in uart 1 									
;;;2534   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001860  bf00              NOP      
                  |L179.6242|
001862  497f              LDR      r1,|L179.6752|
001864  487f              LDR      r0,|L179.6756|
001866  f7fffffe          BL       strstr
00186a  2800              CMP      r0,#0
00186c  d10b              BNE      |L179.6278|
00186e  4974              LDR      r1,|L179.6720|
001870  487c              LDR      r0,|L179.6756|
001872  f7fffffe          BL       strstr
001876  2800              CMP      r0,#0
001878  d105              BNE      |L179.6278|
00187a  e000              B        |L179.6270|
                  |L179.6268|
00187c  e3fe              B        |L179.8316|
                  |L179.6270|
00187e  4874              LDR      r0,|L179.6736|
001880  6800              LDR      r0,[r0,#0]  ; tout
001882  2805              CMP      r0,#5
001884  dded              BLE      |L179.6242|
                  |L179.6278|
;;;2535   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2536   									}
;;;2537   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001886  f7fffffe          BL       clear
;;;2538   									//clear();
;;;2539   									memset(data,0,strlen(data));
00188a  4873              LDR      r0,|L179.6744|
00188c  f7fffffe          BL       strlen
001890  4604              MOV      r4,r0
001892  4621              MOV      r1,r4
001894  4870              LDR      r0,|L179.6744|
001896  f7fffffe          BL       __aeabi_memclr
;;;2540   									clear();
00189a  f7fffffe          BL       clear
;;;2541   									RESET_OFF;delay(100);
00189e  2020              MOVS     r0,#0x20
0018a0  4971              LDR      r1,|L179.6760|
0018a2  6088              STR      r0,[r1,#8]
0018a4  2064              MOVS     r0,#0x64
0018a6  f7fffffe          BL       delay
;;;2542   									RESET_ON;delay(100);		
0018aa  2020              MOVS     r0,#0x20
0018ac  496e              LDR      r1,|L179.6760|
0018ae  6048              STR      r0,[r1,#4]
0018b0  2064              MOVS     r0,#0x64
0018b2  f7fffffe          BL       delay
                  |L179.6326|
;;;2543   }
;;;2544   	
;;;2545   send_GSM("\r\nAT+CIPSHUT\r\n", "OK", "ERROR\r\n" , "ERROR:",4);	
0018b6  2004              MOVS     r0,#4
0018b8  4b6c              LDR      r3,|L179.6764|
0018ba  4a62              LDR      r2,|L179.6724|
0018bc  496c              LDR      r1,|L179.6768|
0018be  9000              STR      r0,[sp,#0]
0018c0  486c              LDR      r0,|L179.6772|
0018c2  f7fffffe          BL       send_GSM
;;;2546   GPS_COLLECT2();
0018c6  f7fffffe          BL       GPS_COLLECT2
;;;2547   strreplace(data, ",L,", ",H,");	
0018ca  4a6b              LDR      r2,|L179.6776|
0018cc  496b              LDR      r1,|L179.6780|
0018ce  4862              LDR      r0,|L179.6744|
0018d0  f7fffffe          BL       strreplace
;;;2548   memset(at_,0,100);
0018d4  2164              MOVS     r1,#0x64
0018d6  4859              LDR      r0,|L179.6716|
0018d8  f7fffffe          BL       __aeabi_memclr
;;;2549   sprintf(at_,"\r\nAT+CSTT=\"%s\"\r\n",apn);
0018dc  4a68              LDR      r2,|L179.6784|
0018de  4969              LDR      r1,|L179.6788|
0018e0  4856              LDR      r0,|L179.6716|
0018e2  f7fffffe          BL       __2sprintf
;;;2550   send_GSM(at_,	"OK", "ERROR\r\n" , "ERROR:",tmeout);							//delay(20);
0018e6  4868              LDR      r0,|L179.6792|
0018e8  6800              LDR      r0,[r0,#0]  ; tmeout
0018ea  4b60              LDR      r3,|L179.6764|
0018ec  4a55              LDR      r2,|L179.6724|
0018ee  4960              LDR      r1,|L179.6768|
0018f0  9000              STR      r0,[sp,#0]
0018f2  4852              LDR      r0,|L179.6716|
0018f4  f7fffffe          BL       send_GSM
;;;2551   msg_sim800(); 
0018f8  f7fffffe          BL       msg_sim800
;;;2552   send_GSM("\r\nAT+CIICR\r\r\n", "OK", "ERROR\r\n" , "DEACT",4);		
0018fc  2004              MOVS     r0,#4
0018fe  4b63              LDR      r3,|L179.6796|
001900  4a50              LDR      r2,|L179.6724|
001902  495b              LDR      r1,|L179.6768|
001904  9000              STR      r0,[sp,#0]
001906  4862              LDR      r0,|L179.6800|
001908  f7fffffe          BL       send_GSM
;;;2553   GPS_COLLECT2();
00190c  f7fffffe          BL       GPS_COLLECT2
;;;2554   strreplace(data, ",L,", ",H,");	
001910  4a59              LDR      r2,|L179.6776|
001912  495a              LDR      r1,|L179.6780|
001914  4850              LDR      r0,|L179.6744|
001916  f7fffffe          BL       strreplace
;;;2555   GPS_COLLECT2();
00191a  f7fffffe          BL       GPS_COLLECT2
;;;2556   strreplace(data, ",L,", ",H,");	
00191e  4a56              LDR      r2,|L179.6776|
001920  4956              LDR      r1,|L179.6780|
001922  484d              LDR      r0,|L179.6744|
001924  f7fffffe          BL       strreplace
;;;2557   
;;;2558   
;;;2559   msg_sim800(); 
001928  f7fffffe          BL       msg_sim800
;;;2560   GPS_COLLECT2();
00192c  f7fffffe          BL       GPS_COLLECT2
;;;2561   strreplace(data, ",L,", ",H,");	
001930  4a51              LDR      r2,|L179.6776|
001932  4952              LDR      r1,|L179.6780|
001934  4848              LDR      r0,|L179.6744|
001936  f7fffffe          BL       strreplace
;;;2562   send_GSM("\r\nAT+CIFSR\r\r\n", "OK", "ERROR\r\n" , "DEACT",1);		
00193a  2001              MOVS     r0,#1
00193c  4b53              LDR      r3,|L179.6796|
00193e  4a41              LDR      r2,|L179.6724|
001940  494b              LDR      r1,|L179.6768|
001942  9000              STR      r0,[sp,#0]
001944  4853              LDR      r0,|L179.6804|
001946  f7fffffe          BL       send_GSM
;;;2563   memset(ipadd,0,16);
00194a  2110              MOVS     r1,#0x10
00194c  4852              LDR      r0,|L179.6808|
00194e  f7fffffe          BL       __aeabi_memclr
;;;2564   parse_g(uart_string_gsm,1,2,'\n','\n',ipadd);
001952  4851              LDR      r0,|L179.6808|
001954  210a              MOVS     r1,#0xa
001956  460b              MOV      r3,r1
001958  2202              MOVS     r2,#2
00195a  9100              STR      r1,[sp,#0]
00195c  9001              STR      r0,[sp,#4]
00195e  2101              MOVS     r1,#1
001960  4840              LDR      r0,|L179.6756|
001962  f7fffffe          BL       parse_g
;;;2565   remove_all_chars(ipadd,'\r','\n');
001966  220a              MOVS     r2,#0xa
001968  210d              MOVS     r1,#0xd
00196a  484b              LDR      r0,|L179.6808|
00196c  f7fffffe          BL       remove_all_chars
;;;2566   if(strstr(uart_string_gsm,"0.0.0.0"))
001970  494a              LDR      r1,|L179.6812|
001972  483c              LDR      r0,|L179.6756|
001974  f7fffffe          BL       strstr
001978  2800              CMP      r0,#0
00197a  d001              BEQ      |L179.6528|
;;;2567   {
;;;2568   	reset_func();
00197c  f7fffffe          BL       reset_func
                  |L179.6528|
;;;2569   }	
;;;2570   
;;;2571   //					delay(20);
;;;2572   
;;;2573   
;;;2574   msg_sim800(); 
001980  f7fffffe          BL       msg_sim800
;;;2575   
;;;2576   						sprintf(at_, "\r\nAT+CIPSTART=\"TCP\",\"%s\",\"%s\"\r\n", ip, port);
001984  4b46              LDR      r3,|L179.6816|
001986  4a47              LDR      r2,|L179.6820|
001988  4947              LDR      r1,|L179.6824|
00198a  482c              LDR      r0,|L179.6716|
00198c  f7fffffe          BL       __2sprintf
;;;2577   						send_GSM( at_ , "CONNECT", "ERROR" , "ERROR:",tmeout);	
001990  483d              LDR      r0,|L179.6792|
001992  6800              LDR      r0,[r0,#0]  ; tmeout
001994  4b35              LDR      r3,|L179.6764|
001996  4a2a              LDR      r2,|L179.6720|
001998  4944              LDR      r1,|L179.6828|
00199a  9000              STR      r0,[sp,#0]
00199c  4827              LDR      r0,|L179.6716|
00199e  f7fffffe          BL       send_GSM
;;;2578   						clear();
0019a2  f7fffffe          BL       clear
;;;2579   						
;;;2580   						
;;;2581   						send_GSM("\r\nAT+CIPSEND\r\n", ">", "ERROR" , "CONNECT FAIL",tmeout);											
0019a6  4838              LDR      r0,|L179.6792|
0019a8  6800              LDR      r0,[r0,#0]  ; tmeout
0019aa  4b41              LDR      r3,|L179.6832|
0019ac  4a24              LDR      r2,|L179.6720|
0019ae  4926              LDR      r1,|L179.6728|
0019b0  9000              STR      r0,[sp,#0]
0019b2  4840              LDR      r0,|L179.6836|
0019b4  f7fffffe          BL       send_GSM
;;;2582   //*****************************tcp_initialization ends**********************************//		
;;;2583   
;;;2584   			if(mystrstr(uart_string_gsm,'>')){
0019b8  213e              MOVS     r1,#0x3e
0019ba  482a              LDR      r0,|L179.6756|
0019bc  f7fffffe          BL       mystrstr
0019c0  2800              CMP      r0,#0
0019c2  d036              BEQ      |L179.6706|
;;;2585   									clear();
0019c4  f7fffffe          BL       clear
;;;2586   									memset(uart_string_gsm,0,5000);
0019c8  493b              LDR      r1,|L179.6840|
0019ca  4826              LDR      r0,|L179.6756|
0019cc  f7fffffe          BL       __aeabi_memclr
;;;2587   									qwe=strlen(data);
0019d0  4821              LDR      r0,|L179.6744|
0019d2  f7fffffe          BL       strlen
0019d6  4939              LDR      r1,|L179.6844|
0019d8  6008              STR      r0,[r1,#0]  ; qwe
;;;2588   									tout=0;
0019da  2000              MOVS     r0,#0
0019dc  491c              LDR      r1,|L179.6736|
0019de  6008              STR      r0,[r1,#0]  ; tout
;;;2589   									k2=0;
0019e0  491a              LDR      r1,|L179.6732|
0019e2  6008              STR      r0,[r1,#0]  ; k2
;;;2590   									for(k=0;k<(qwe);k++)
0019e4  491b              LDR      r1,|L179.6740|
0019e6  6008              STR      r0,[r1,#0]  ; k
0019e8  e00b              B        |L179.6658|
                  |L179.6634|
;;;2591   									{
;;;2592   										uart_putchar(UART1_BASE_PTR, data[k]);
0019ea  481b              LDR      r0,|L179.6744|
0019ec  4a19              LDR      r2,|L179.6740|
0019ee  6812              LDR      r2,[r2,#0]  ; k
0019f0  5c81              LDRB     r1,[r0,r2]
0019f2  481a              LDR      r0,|L179.6748|
0019f4  f7fffffe          BL       uart_putchar
0019f8  4816              LDR      r0,|L179.6740|
0019fa  6800              LDR      r0,[r0,#0]            ;2590  ; k
0019fc  1c40              ADDS     r0,r0,#1              ;2590
0019fe  4915              LDR      r1,|L179.6740|
001a00  6008              STR      r0,[r1,#0]            ;2590  ; k
                  |L179.6658|
001a02  4814              LDR      r0,|L179.6740|
001a04  6800              LDR      r0,[r0,#0]            ;2590  ; k
001a06  492d              LDR      r1,|L179.6844|
001a08  6809              LDR      r1,[r1,#0]            ;2590  ; qwe
001a0a  4288              CMP      r0,r1                 ;2590
001a0c  dbed              BLT      |L179.6634|
;;;2593   									}uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);	
001a0e  210a              MOVS     r1,#0xa
001a10  4812              LDR      r0,|L179.6748|
001a12  f7fffffe          BL       uart_putchar
001a16  211a              MOVS     r1,#0x1a
001a18  4810              LDR      r0,|L179.6748|
001a1a  f7fffffe          BL       uart_putchar
001a1e  211a              MOVS     r1,#0x1a
001a20  480e              LDR      r0,|L179.6748|
001a22  f7fffffe          BL       uart_putchar
001a26  211a              MOVS     r1,#0x1a
001a28  480c              LDR      r0,|L179.6748|
001a2a  f7fffffe          BL       uart_putchar
001a2e  211a              MOVS     r1,#0x1a
001a30  e046              B        |L179.6848|
                  |L179.6706|
001a32  e1da              B        |L179.7658|
                  |L179.6708|
                          DCD      drive
                  |L179.6712|
                          DCD      ||.conststring||+0x528
                  |L179.6716|
                          DCD      at_
                  |L179.6720|
                          DCD      ||.conststring||+0xe0
                  |L179.6724|
                          DCD      ||.conststring||+0x18
                  |L179.6728|
                          DCD      ||.conststring||+0x20
                  |L179.6732|
                          DCD      ||k2||
                  |L179.6736|
                          DCD      tout
                  |L179.6740|
                          DCD      k
                  |L179.6744|
                          DCD      data
                  |L179.6748|
                          DCD      0x4006b000
                  |L179.6752|
                          DCD      ||.conststring||+0x70
                  |L179.6756|
                          DCD      uart_string_gsm
                  |L179.6760|
                          DCD      0x400ff080
                  |L179.6764|
                          DCD      ||.conststring||+0x10
                  |L179.6768|
                          DCD      ||.conststring||+0x2c
                  |L179.6772|
                          DCD      ||.conststring||+0x800
                  |L179.6776|
                          DCD      ||.conststring||+0x520
                  |L179.6780|
                          DCD      ||.conststring||+0x524
                  |L179.6784|
                          DCD      apn
                  |L179.6788|
                          DCD      ||.conststring||+0x810
                  |L179.6792|
                          DCD      tmeout
                  |L179.6796|
                          DCD      ||.conststring||+0x77c
                  |L179.6800|
                          DCD      ||.conststring||+0x824
                  |L179.6804|
                          DCD      ||.conststring||+0x834
                  |L179.6808|
                          DCD      ipadd
                  |L179.6812|
                          DCD      ||.conststring||+0x844
                  |L179.6816|
                          DCD      port
                  |L179.6820|
                          DCD      ||ip||
                  |L179.6824|
                          DCD      ||.conststring||+0x84c
                  |L179.6828|
                          DCD      ||.conststring||+0x7b4
                  |L179.6832|
                          DCD      ||.conststring||+0x86c
                  |L179.6836|
                          DCD      ||.conststring||+0x7bc
                  |L179.6840|
                          DCD      0x00001388
                  |L179.6844|
                          DCD      qwe
                  |L179.6848|
001ac0  48fe              LDR      r0,|L179.7868|
001ac2  f7fffffe          BL       uart_putchar
001ac6  211a              MOVS     r1,#0x1a
001ac8  48fc              LDR      r0,|L179.7868|
001aca  f7fffffe          BL       uart_putchar
001ace  211a              MOVS     r1,#0x1a
001ad0  48fa              LDR      r0,|L179.7868|
001ad2  f7fffffe          BL       uart_putchar
;;;2594   															do
001ad6  bf00              NOP      
                  |L179.6872|
;;;2595   																{q1=strstr(uart_string_gsm,"SEND OK");
001ad8  49f9              LDR      r1,|L179.7872|
001ada  48fa              LDR      r0,|L179.7876|
001adc  f7fffffe          BL       strstr
001ae0  49f9              LDR      r1,|L179.7880|
001ae2  6008              STR      r0,[r1,#0]  ; q1
;;;2596   																	q2=strstr(uart_string_gsm, "ERROR");
001ae4  49f9              LDR      r1,|L179.7884|
001ae6  48f7              LDR      r0,|L179.7876|
001ae8  f7fffffe          BL       strstr
001aec  49f8              LDR      r1,|L179.7888|
001aee  6008              STR      r0,[r1,#0]  ; q2
;;;2597   																		q3=strstr(uart_string_gsm, "FAIL");	
001af0  49f8              LDR      r1,|L179.7892|
001af2  48f4              LDR      r0,|L179.7876|
001af4  f7fffffe          BL       strstr
001af8  49f7              LDR      r1,|L179.7896|
001afa  6008              STR      r0,[r1,#0]  ; q3
;;;2598   																			q4=strstr(uart_string_gsm, "DEACT");	
001afc  49f7              LDR      r1,|L179.7900|
001afe  48f1              LDR      r0,|L179.7876|
001b00  f7fffffe          BL       strstr
001b04  49f6              LDR      r1,|L179.7904|
001b06  6008              STR      r0,[r1,#0]  ; q4
;;;2599   																	
;;;2600   																}while(!(q1 || q2 || q3 || q4 || (tout > 8) ) );
001b08  48ef              LDR      r0,|L179.7880|
001b0a  6800              LDR      r0,[r0,#0]  ; q1
001b0c  2800              CMP      r0,#0
001b0e  d10f              BNE      |L179.6960|
001b10  48ef              LDR      r0,|L179.7888|
001b12  6800              LDR      r0,[r0,#0]  ; q2
001b14  2800              CMP      r0,#0
001b16  d10b              BNE      |L179.6960|
001b18  48ef              LDR      r0,|L179.7896|
001b1a  6800              LDR      r0,[r0,#0]  ; q3
001b1c  2800              CMP      r0,#0
001b1e  d107              BNE      |L179.6960|
001b20  4608              MOV      r0,r1
001b22  6800              LDR      r0,[r0,#0]  ; q4
001b24  2800              CMP      r0,#0
001b26  d103              BNE      |L179.6960|
001b28  48ee              LDR      r0,|L179.7908|
001b2a  6800              LDR      r0,[r0,#0]  ; tout
001b2c  2808              CMP      r0,#8
001b2e  ddd3              BLE      |L179.6872|
                  |L179.6960|
;;;2601   															
;;;2602   																			delay(10);clear();
001b30  200a              MOVS     r0,#0xa
001b32  f7fffffe          BL       delay
001b36  f7fffffe          BL       clear
;;;2603   														uart_putchar(UART1_BASE_PTR,0x1A);
001b3a  211a              MOVS     r1,#0x1a
001b3c  48df              LDR      r0,|L179.7868|
001b3e  f7fffffe          BL       uart_putchar
;;;2604   												delay(10);
001b42  200a              MOVS     r0,#0xa
001b44  f7fffffe          BL       delay
;;;2605   										uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);uart_putchar(UART1_BASE_PTR, 0x1A);
001b48  211a              MOVS     r1,#0x1a
001b4a  48dc              LDR      r0,|L179.7868|
001b4c  f7fffffe          BL       uart_putchar
001b50  211a              MOVS     r1,#0x1a
001b52  48da              LDR      r0,|L179.7868|
001b54  f7fffffe          BL       uart_putchar
001b58  211a              MOVS     r1,#0x1a
001b5a  48d8              LDR      r0,|L179.7868|
001b5c  f7fffffe          BL       uart_putchar
;;;2606   delay(20);
001b60  2014              MOVS     r0,#0x14
001b62  f7fffffe          BL       delay
;;;2607   if(!strstr(uart_string_gsm,"SEND OK")){
001b66  49d6              LDR      r1,|L179.7872|
001b68  48d6              LDR      r0,|L179.7876|
001b6a  f7fffffe          BL       strstr
001b6e  2800              CMP      r0,#0
001b70  d11b              BNE      |L179.7082|
;;;2608   
;;;2609   
;;;2610   	delay(100);
001b72  2064              MOVS     r0,#0x64
001b74  f7fffffe          BL       delay
;;;2611   		clear();//memset(uart_string_gsm,0,5000);
001b78  f7fffffe          BL       clear
;;;2612   	
;;;2613   	memset(at_,0,100);
001b7c  2164              MOVS     r1,#0x64
001b7e  48da              LDR      r0,|L179.7912|
001b80  f7fffffe          BL       __aeabi_memclr
;;;2614   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001b84  48d9              LDR      r0,|L179.7916|
001b86  f7fffffe          BL       strlen
001b8a  1c44              ADDS     r4,r0,#1
001b8c  4623              MOV      r3,r4
001b8e  4ad8              LDR      r2,|L179.7920|
001b90  49d8              LDR      r1,|L179.7924|
001b92  48d5              LDR      r0,|L179.7912|
001b94  f7fffffe          BL       __2sprintf
;;;2615   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001b98  2005              MOVS     r0,#5
001b9a  4bcc              LDR      r3,|L179.7884|
001b9c  4ad6              LDR      r2,|L179.7928|
001b9e  49d7              LDR      r1,|L179.7932|
001ba0  9000              STR      r0,[sp,#0]
001ba2  48d1              LDR      r0,|L179.7912|
001ba4  f7fffffe          BL       send_SD
;;;2616   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2617   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2618   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2619   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2620   //	}
;;;2621   	
;;;2622   clear();	
001ba8  e000              B        |L179.7084|
                  |L179.7082|
001baa  e283              B        |L179.8372|
                  |L179.7084|
001bac  f7fffffe          BL       clear
;;;2623   									k2=0;									//string array counter for uart 1
001bb0  2000              MOVS     r0,#0
001bb2  49d3              LDR      r1,|L179.7936|
001bb4  6008              STR      r0,[r1,#0]  ; k2
;;;2624   									tout=0;	
001bb6  49cb              LDR      r1,|L179.7908|
001bb8  6008              STR      r0,[r1,#0]  ; tout
;;;2625   		for(k=0;k<strlen(data);k++)
001bba  49d2              LDR      r1,|L179.7940|
001bbc  6008              STR      r0,[r1,#0]  ; k
001bbe  e00b              B        |L179.7128|
                  |L179.7104|
;;;2626   		{
;;;2627   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001bc0  48ca              LDR      r0,|L179.7916|
001bc2  4ad0              LDR      r2,|L179.7940|
001bc4  6812              LDR      r2,[r2,#0]  ; k
001bc6  5c81              LDRB     r1,[r0,r2]
001bc8  48bc              LDR      r0,|L179.7868|
001bca  f7fffffe          BL       uart_putchar
001bce  48cd              LDR      r0,|L179.7940|
001bd0  6800              LDR      r0,[r0,#0]            ;2625  ; k
001bd2  1c40              ADDS     r0,r0,#1              ;2625
001bd4  49cb              LDR      r1,|L179.7940|
001bd6  6008              STR      r0,[r1,#0]            ;2625  ; k
                  |L179.7128|
001bd8  48c4              LDR      r0,|L179.7916|
001bda  f7fffffe          BL       strlen
001bde  49c9              LDR      r1,|L179.7940|
001be0  6809              LDR      r1,[r1,#0]            ;2625  ; k
001be2  4288              CMP      r0,r1                 ;2625
001be4  d8ec              BHI      |L179.7104|
;;;2628   		}	
;;;2629   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001be6  210a              MOVS     r1,#0xa
001be8  48b4              LDR      r0,|L179.7868|
001bea  f7fffffe          BL       uart_putchar
001bee  210a              MOVS     r1,#0xa
001bf0  48b2              LDR      r0,|L179.7868|
001bf2  f7fffffe          BL       uart_putchar
001bf6  210a              MOVS     r1,#0xa
001bf8  48b0              LDR      r0,|L179.7868|
001bfa  f7fffffe          BL       uart_putchar
001bfe  210a              MOVS     r1,#0xa
001c00  48ae              LDR      r0,|L179.7868|
001c02  f7fffffe          BL       uart_putchar
001c06  210a              MOVS     r1,#0xa
001c08  48ac              LDR      r0,|L179.7868|
001c0a  f7fffffe          BL       uart_putchar
001c0e  210a              MOVS     r1,#0xa
001c10  48aa              LDR      r0,|L179.7868|
001c12  f7fffffe          BL       uart_putchar
001c16  210a              MOVS     r1,#0xa
001c18  48a8              LDR      r0,|L179.7868|
001c1a  f7fffffe          BL       uart_putchar
001c1e  210a              MOVS     r1,#0xa
001c20  48a6              LDR      r0,|L179.7868|
001c22  f7fffffe          BL       uart_putchar
001c26  210a              MOVS     r1,#0xa
001c28  48a4              LDR      r0,|L179.7868|
001c2a  f7fffffe          BL       uart_putchar
001c2e  210a              MOVS     r1,#0xa
001c30  48a2              LDR      r0,|L179.7868|
001c32  f7fffffe          BL       uart_putchar
001c36  210a              MOVS     r1,#0xa
001c38  48a0              LDR      r0,|L179.7868|
001c3a  f7fffffe          BL       uart_putchar
001c3e  210a              MOVS     r1,#0xa
001c40  489e              LDR      r0,|L179.7868|
001c42  f7fffffe          BL       uart_putchar
001c46  210a              MOVS     r1,#0xa
001c48  489c              LDR      r0,|L179.7868|
001c4a  f7fffffe          BL       uart_putchar
001c4e  210a              MOVS     r1,#0xa
001c50  489a              LDR      r0,|L179.7868|
001c52  f7fffffe          BL       uart_putchar
001c56  210a              MOVS     r1,#0xa
001c58  4898              LDR      r0,|L179.7868|
001c5a  f7fffffe          BL       uart_putchar
001c5e  210a              MOVS     r1,#0xa
001c60  4896              LDR      r0,|L179.7868|
001c62  f7fffffe          BL       uart_putchar
001c66  210a              MOVS     r1,#0xa
001c68  4894              LDR      r0,|L179.7868|
001c6a  f7fffffe          BL       uart_putchar
001c6e  210a              MOVS     r1,#0xa
001c70  4892              LDR      r0,|L179.7868|
001c72  f7fffffe          BL       uart_putchar
001c76  210a              MOVS     r1,#0xa
001c78  4890              LDR      r0,|L179.7868|
001c7a  f7fffffe          BL       uart_putchar
001c7e  210a              MOVS     r1,#0xa
001c80  488e              LDR      r0,|L179.7868|
001c82  f7fffffe          BL       uart_putchar
001c86  210a              MOVS     r1,#0xa
001c88  488c              LDR      r0,|L179.7868|
001c8a  f7fffffe          BL       uart_putchar
001c8e  210a              MOVS     r1,#0xa
001c90  488a              LDR      r0,|L179.7868|
001c92  f7fffffe          BL       uart_putchar
001c96  210a              MOVS     r1,#0xa
001c98  4888              LDR      r0,|L179.7868|
001c9a  f7fffffe          BL       uart_putchar
001c9e  210a              MOVS     r1,#0xa
001ca0  4886              LDR      r0,|L179.7868|
001ca2  f7fffffe          BL       uart_putchar
001ca6  210a              MOVS     r1,#0xa
001ca8  4884              LDR      r0,|L179.7868|
001caa  f7fffffe          BL       uart_putchar
001cae  210a              MOVS     r1,#0xa
001cb0  4882              LDR      r0,|L179.7868|
001cb2  f7fffffe          BL       uart_putchar
001cb6  210a              MOVS     r1,#0xa
001cb8  4880              LDR      r0,|L179.7868|
001cba  f7fffffe          BL       uart_putchar
001cbe  210a              MOVS     r1,#0xa
001cc0  487e              LDR      r0,|L179.7868|
001cc2  f7fffffe          BL       uart_putchar
001cc6  210a              MOVS     r1,#0xa
001cc8  487c              LDR      r0,|L179.7868|
001cca  f7fffffe          BL       uart_putchar
001cce  210a              MOVS     r1,#0xa
001cd0  487a              LDR      r0,|L179.7868|
001cd2  f7fffffe          BL       uart_putchar
001cd6  210a              MOVS     r1,#0xa
001cd8  4878              LDR      r0,|L179.7868|
001cda  f7fffffe          BL       uart_putchar
001cde  210a              MOVS     r1,#0xa
001ce0  4876              LDR      r0,|L179.7868|
001ce2  f7fffffe          BL       uart_putchar
001ce6  210a              MOVS     r1,#0xa
001ce8  4874              LDR      r0,|L179.7868|
001cea  f7fffffe          BL       uart_putchar
001cee  210a              MOVS     r1,#0xa
001cf0  4872              LDR      r0,|L179.7868|
001cf2  f7fffffe          BL       uart_putchar
001cf6  210a              MOVS     r1,#0xa
001cf8  4870              LDR      r0,|L179.7868|
001cfa  f7fffffe          BL       uart_putchar
001cfe  210a              MOVS     r1,#0xa
001d00  486e              LDR      r0,|L179.7868|
001d02  f7fffffe          BL       uart_putchar
001d06  210a              MOVS     r1,#0xa
001d08  486c              LDR      r0,|L179.7868|
001d0a  f7fffffe          BL       uart_putchar
001d0e  210a              MOVS     r1,#0xa
001d10  486a              LDR      r0,|L179.7868|
001d12  f7fffffe          BL       uart_putchar
001d16  210a              MOVS     r1,#0xa
001d18  4868              LDR      r0,|L179.7868|
001d1a  f7fffffe          BL       uart_putchar
001d1e  210a              MOVS     r1,#0xa
001d20  4866              LDR      r0,|L179.7868|
001d22  f7fffffe          BL       uart_putchar
001d26  210a              MOVS     r1,#0xa
001d28  4864              LDR      r0,|L179.7868|
001d2a  f7fffffe          BL       uart_putchar
001d2e  210a              MOVS     r1,#0xa
001d30  4862              LDR      r0,|L179.7868|
001d32  f7fffffe          BL       uart_putchar
001d36  210a              MOVS     r1,#0xa
001d38  4860              LDR      r0,|L179.7868|
001d3a  f7fffffe          BL       uart_putchar
001d3e  210a              MOVS     r1,#0xa
001d40  485e              LDR      r0,|L179.7868|
001d42  f7fffffe          BL       uart_putchar
001d46  210a              MOVS     r1,#0xa
001d48  485c              LDR      r0,|L179.7868|
001d4a  f7fffffe          BL       uart_putchar
001d4e  210a              MOVS     r1,#0xa
001d50  485a              LDR      r0,|L179.7868|
001d52  f7fffffe          BL       uart_putchar
001d56  210a              MOVS     r1,#0xa
001d58  4858              LDR      r0,|L179.7868|
001d5a  f7fffffe          BL       uart_putchar
001d5e  210a              MOVS     r1,#0xa
001d60  4856              LDR      r0,|L179.7868|
001d62  f7fffffe          BL       uart_putchar
001d66  210a              MOVS     r1,#0xa
001d68  4854              LDR      r0,|L179.7868|
001d6a  f7fffffe          BL       uart_putchar
001d6e  210a              MOVS     r1,#0xa
001d70  4852              LDR      r0,|L179.7868|
001d72  f7fffffe          BL       uart_putchar
001d76  210a              MOVS     r1,#0xa
001d78  4850              LDR      r0,|L179.7868|
001d7a  f7fffffe          BL       uart_putchar
001d7e  210a              MOVS     r1,#0xa
001d80  484e              LDR      r0,|L179.7868|
001d82  f7fffffe          BL       uart_putchar
001d86  210a              MOVS     r1,#0xa
001d88  484c              LDR      r0,|L179.7868|
001d8a  f7fffffe          BL       uart_putchar
001d8e  210a              MOVS     r1,#0xa
001d90  484a              LDR      r0,|L179.7868|
001d92  f7fffffe          BL       uart_putchar
001d96  210a              MOVS     r1,#0xa
001d98  4848              LDR      r0,|L179.7868|
001d9a  f7fffffe          BL       uart_putchar
001d9e  210a              MOVS     r1,#0xa
001da0  4846              LDR      r0,|L179.7868|
001da2  f7fffffe          BL       uart_putchar
001da6  210a              MOVS     r1,#0xa
001da8  4844              LDR      r0,|L179.7868|
001daa  f7fffffe          BL       uart_putchar
;;;2630   									//memset(data,0,1000);
;;;2631   														//timer counts to wait for characters in uart 1 									
;;;2632   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
001dae  bf00              NOP      
                  |L179.7600|
001db0  4955              LDR      r1,|L179.7944|
001db2  4844              LDR      r0,|L179.7876|
001db4  f7fffffe          BL       strstr
001db8  2800              CMP      r0,#0
001dba  d109              BNE      |L179.7632|
001dbc  4943              LDR      r1,|L179.7884|
001dbe  4841              LDR      r0,|L179.7876|
001dc0  f7fffffe          BL       strstr
001dc4  2800              CMP      r0,#0
001dc6  d103              BNE      |L179.7632|
001dc8  4846              LDR      r0,|L179.7908|
001dca  6800              LDR      r0,[r0,#0]  ; tout
001dcc  2805              CMP      r0,#5
001dce  ddef              BLE      |L179.7600|
                  |L179.7632|
;;;2633   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2634   									}
;;;2635   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
001dd0  f7fffffe          BL       clear
;;;2636   									//clear();
;;;2637   									memset(data,0,strlen(data));
001dd4  4845              LDR      r0,|L179.7916|
001dd6  f7fffffe          BL       strlen
001dda  4604              MOV      r4,r0
001ddc  4621              MOV      r1,r4
001dde  4843              LDR      r0,|L179.7916|
001de0  f7fffffe          BL       __aeabi_memclr
;;;2638   									clear();
001de4  f7fffffe          BL       clear
                  |L179.7656|
;;;2639   
;;;2640   								
;;;2641   break;
001de8  e172              B        |L179.8400|
                  |L179.7658|
;;;2642   //log_it();
;;;2643   }
;;;2644   			
;;;2645   			
;;;2646   			
;;;2647   			
;;;2648   			
;;;2649   			}
;;;2650   			else
;;;2651   			{
;;;2652   				
;;;2653   				
;;;2654   				
;;;2655   	delay(100);
001dea  2064              MOVS     r0,#0x64
001dec  f7fffffe          BL       delay
;;;2656   		clear();//memset(uart_string_gsm,0,5000);
001df0  f7fffffe          BL       clear
;;;2657   	
;;;2658   	memset(at_,0,100);
001df4  2164              MOVS     r1,#0x64
001df6  483c              LDR      r0,|L179.7912|
001df8  f7fffffe          BL       __aeabi_memclr
;;;2659   sprintf(at_,"\r\nAT+FSWRITE=%s\\LOG.TXT,1,%d,10\n\n",drive,strlen(data)+1);	
001dfc  483b              LDR      r0,|L179.7916|
001dfe  f7fffffe          BL       strlen
001e02  1c44              ADDS     r4,r0,#1
001e04  4623              MOV      r3,r4
001e06  4a3a              LDR      r2,|L179.7920|
001e08  493a              LDR      r1,|L179.7924|
001e0a  4837              LDR      r0,|L179.7912|
001e0c  f7fffffe          BL       __2sprintf
;;;2660   send_SD(at_, ">", "ERROR\r\n" , "ERROR",5);
001e10  2005              MOVS     r0,#5
001e12  4b2e              LDR      r3,|L179.7884|
001e14  4a38              LDR      r2,|L179.7928|
001e16  4939              LDR      r1,|L179.7932|
001e18  9000              STR      r0,[sp,#0]
001e1a  4833              LDR      r0,|L179.7912|
001e1c  f7fffffe          BL       send_SD
;;;2661   //uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');uart_putchar(UART1_BASE_PTR,'\n');	
;;;2662   //	if(strstr(uart_string_gsm,"ERROR")){
;;;2663   //	sprintf(at_,"\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
;;;2664   //	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2665   //	}
;;;2666   	
;;;2667   clear();	
001e20  f7fffffe          BL       clear
;;;2668   									k2=0;									//string array counter for uart 1
001e24  2000              MOVS     r0,#0
001e26  4936              LDR      r1,|L179.7936|
001e28  6008              STR      r0,[r1,#0]  ; k2
;;;2669   									tout=0;	
001e2a  492e              LDR      r1,|L179.7908|
001e2c  6008              STR      r0,[r1,#0]  ; tout
;;;2670   		for(k=0;k<strlen(data);k++)
001e2e  4935              LDR      r1,|L179.7940|
001e30  6008              STR      r0,[r1,#0]  ; k
001e32  e00b              B        |L179.7756|
                  |L179.7732|
;;;2671   		{
;;;2672   			uart_putchar(UART1_BASE_PTR, data[k]);//clear();
001e34  482d              LDR      r0,|L179.7916|
001e36  4a33              LDR      r2,|L179.7940|
001e38  6812              LDR      r2,[r2,#0]  ; k
001e3a  5c81              LDRB     r1,[r0,r2]
001e3c  481f              LDR      r0,|L179.7868|
001e3e  f7fffffe          BL       uart_putchar
001e42  4830              LDR      r0,|L179.7940|
001e44  6800              LDR      r0,[r0,#0]            ;2670  ; k
001e46  1c40              ADDS     r0,r0,#1              ;2670
001e48  492e              LDR      r1,|L179.7940|
001e4a  6008              STR      r0,[r1,#0]            ;2670  ; k
                  |L179.7756|
001e4c  4827              LDR      r0,|L179.7916|
001e4e  f7fffffe          BL       strlen
001e52  492c              LDR      r1,|L179.7940|
001e54  6809              LDR      r1,[r1,#0]            ;2670  ; k
001e56  4288              CMP      r0,r1                 ;2670
001e58  d8ec              BHI      |L179.7732|
;;;2673   		}	
;;;2674   uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	uart_putchar(UART1_BASE_PTR, '\n');	
001e5a  210a              MOVS     r1,#0xa
001e5c  4817              LDR      r0,|L179.7868|
001e5e  f7fffffe          BL       uart_putchar
001e62  210a              MOVS     r1,#0xa
001e64  4815              LDR      r0,|L179.7868|
001e66  f7fffffe          BL       uart_putchar
001e6a  210a              MOVS     r1,#0xa
001e6c  4813              LDR      r0,|L179.7868|
001e6e  f7fffffe          BL       uart_putchar
001e72  210a              MOVS     r1,#0xa
001e74  4811              LDR      r0,|L179.7868|
001e76  f7fffffe          BL       uart_putchar
001e7a  210a              MOVS     r1,#0xa
001e7c  480f              LDR      r0,|L179.7868|
001e7e  f7fffffe          BL       uart_putchar
001e82  210a              MOVS     r1,#0xa
001e84  480d              LDR      r0,|L179.7868|
001e86  f7fffffe          BL       uart_putchar
001e8a  210a              MOVS     r1,#0xa
001e8c  480b              LDR      r0,|L179.7868|
001e8e  f7fffffe          BL       uart_putchar
001e92  210a              MOVS     r1,#0xa
001e94  4809              LDR      r0,|L179.7868|
001e96  f7fffffe          BL       uart_putchar
001e9a  210a              MOVS     r1,#0xa
001e9c  4807              LDR      r0,|L179.7868|
001e9e  f7fffffe          BL       uart_putchar
001ea2  210a              MOVS     r1,#0xa
001ea4  4805              LDR      r0,|L179.7868|
001ea6  f7fffffe          BL       uart_putchar
001eaa  210a              MOVS     r1,#0xa
001eac  4803              LDR      r0,|L179.7868|
001eae  f7fffffe          BL       uart_putchar
001eb2  210a              MOVS     r1,#0xa
001eb4  4801              LDR      r0,|L179.7868|
001eb6  f7fffffe          BL       uart_putchar
001eba  e027              B        |L179.7948|
                  |L179.7868|
                          DCD      0x4006b000
                  |L179.7872|
                          DCD      ||.conststring||+0x76c
                  |L179.7876|
                          DCD      uart_string_gsm
                  |L179.7880|
                          DCD      ||q1||
                  |L179.7884|
                          DCD      ||.conststring||+0xe0
                  |L179.7888|
                          DCD      ||q2||
                  |L179.7892|
                          DCD      ||.conststring||+0x774
                  |L179.7896|
                          DCD      ||q3||
                  |L179.7900|
                          DCD      ||.conststring||+0x77c
                  |L179.7904|
                          DCD      ||q4||
                  |L179.7908|
                          DCD      tout
                  |L179.7912|
                          DCD      at_
                  |L179.7916|
                          DCD      data
                  |L179.7920|
                          DCD      drive
                  |L179.7924|
                          DCD      ||.conststring||+0x528
                  |L179.7928|
                          DCD      ||.conststring||+0x18
                  |L179.7932|
                          DCD      ||.conststring||+0x20
                  |L179.7936|
                          DCD      ||k2||
                  |L179.7940|
                          DCD      k
                  |L179.7944|
                          DCD      ||.conststring||+0x70
                  |L179.7948|
001f0c  210a              MOVS     r1,#0xa
001f0e  4886              LDR      r0,|L179.8488|
001f10  f7fffffe          BL       uart_putchar
001f14  210a              MOVS     r1,#0xa
001f16  4884              LDR      r0,|L179.8488|
001f18  f7fffffe          BL       uart_putchar
001f1c  210a              MOVS     r1,#0xa
001f1e  4882              LDR      r0,|L179.8488|
001f20  f7fffffe          BL       uart_putchar
001f24  210a              MOVS     r1,#0xa
001f26  4880              LDR      r0,|L179.8488|
001f28  f7fffffe          BL       uart_putchar
001f2c  210a              MOVS     r1,#0xa
001f2e  487e              LDR      r0,|L179.8488|
001f30  f7fffffe          BL       uart_putchar
001f34  210a              MOVS     r1,#0xa
001f36  487c              LDR      r0,|L179.8488|
001f38  f7fffffe          BL       uart_putchar
001f3c  210a              MOVS     r1,#0xa
001f3e  487a              LDR      r0,|L179.8488|
001f40  f7fffffe          BL       uart_putchar
001f44  210a              MOVS     r1,#0xa
001f46  4878              LDR      r0,|L179.8488|
001f48  f7fffffe          BL       uart_putchar
001f4c  210a              MOVS     r1,#0xa
001f4e  4876              LDR      r0,|L179.8488|
001f50  f7fffffe          BL       uart_putchar
001f54  210a              MOVS     r1,#0xa
001f56  4874              LDR      r0,|L179.8488|
001f58  f7fffffe          BL       uart_putchar
001f5c  210a              MOVS     r1,#0xa
001f5e  4872              LDR      r0,|L179.8488|
001f60  f7fffffe          BL       uart_putchar
001f64  210a              MOVS     r1,#0xa
001f66  4870              LDR      r0,|L179.8488|
001f68  f7fffffe          BL       uart_putchar
001f6c  210a              MOVS     r1,#0xa
001f6e  486e              LDR      r0,|L179.8488|
001f70  f7fffffe          BL       uart_putchar
001f74  210a              MOVS     r1,#0xa
001f76  486c              LDR      r0,|L179.8488|
001f78  f7fffffe          BL       uart_putchar
001f7c  210a              MOVS     r1,#0xa
001f7e  486a              LDR      r0,|L179.8488|
001f80  f7fffffe          BL       uart_putchar
001f84  210a              MOVS     r1,#0xa
001f86  4868              LDR      r0,|L179.8488|
001f88  f7fffffe          BL       uart_putchar
001f8c  210a              MOVS     r1,#0xa
001f8e  4866              LDR      r0,|L179.8488|
001f90  f7fffffe          BL       uart_putchar
001f94  210a              MOVS     r1,#0xa
001f96  4864              LDR      r0,|L179.8488|
001f98  f7fffffe          BL       uart_putchar
001f9c  210a              MOVS     r1,#0xa
001f9e  4862              LDR      r0,|L179.8488|
001fa0  f7fffffe          BL       uart_putchar
001fa4  210a              MOVS     r1,#0xa
001fa6  4860              LDR      r0,|L179.8488|
001fa8  f7fffffe          BL       uart_putchar
001fac  210a              MOVS     r1,#0xa
001fae  485e              LDR      r0,|L179.8488|
001fb0  f7fffffe          BL       uart_putchar
001fb4  210a              MOVS     r1,#0xa
001fb6  485c              LDR      r0,|L179.8488|
001fb8  f7fffffe          BL       uart_putchar
001fbc  210a              MOVS     r1,#0xa
001fbe  485a              LDR      r0,|L179.8488|
001fc0  f7fffffe          BL       uart_putchar
001fc4  210a              MOVS     r1,#0xa
001fc6  4858              LDR      r0,|L179.8488|
001fc8  f7fffffe          BL       uart_putchar
001fcc  210a              MOVS     r1,#0xa
001fce  4856              LDR      r0,|L179.8488|
001fd0  f7fffffe          BL       uart_putchar
001fd4  210a              MOVS     r1,#0xa
001fd6  4854              LDR      r0,|L179.8488|
001fd8  f7fffffe          BL       uart_putchar
001fdc  210a              MOVS     r1,#0xa
001fde  4852              LDR      r0,|L179.8488|
001fe0  f7fffffe          BL       uart_putchar
001fe4  210a              MOVS     r1,#0xa
001fe6  4850              LDR      r0,|L179.8488|
001fe8  f7fffffe          BL       uart_putchar
001fec  210a              MOVS     r1,#0xa
001fee  484e              LDR      r0,|L179.8488|
001ff0  f7fffffe          BL       uart_putchar
001ff4  210a              MOVS     r1,#0xa
001ff6  484c              LDR      r0,|L179.8488|
001ff8  f7fffffe          BL       uart_putchar
001ffc  210a              MOVS     r1,#0xa
001ffe  484a              LDR      r0,|L179.8488|
002000  f7fffffe          BL       uart_putchar
002004  210a              MOVS     r1,#0xa
002006  4848              LDR      r0,|L179.8488|
002008  f7fffffe          BL       uart_putchar
00200c  210a              MOVS     r1,#0xa
00200e  4846              LDR      r0,|L179.8488|
002010  f7fffffe          BL       uart_putchar
002014  210a              MOVS     r1,#0xa
002016  4844              LDR      r0,|L179.8488|
002018  f7fffffe          BL       uart_putchar
00201c  210a              MOVS     r1,#0xa
00201e  4842              LDR      r0,|L179.8488|
002020  f7fffffe          BL       uart_putchar
002024  210a              MOVS     r1,#0xa
002026  4840              LDR      r0,|L179.8488|
002028  f7fffffe          BL       uart_putchar
00202c  210a              MOVS     r1,#0xa
00202e  483e              LDR      r0,|L179.8488|
002030  f7fffffe          BL       uart_putchar
002034  210a              MOVS     r1,#0xa
002036  483c              LDR      r0,|L179.8488|
002038  f7fffffe          BL       uart_putchar
00203c  210a              MOVS     r1,#0xa
00203e  483a              LDR      r0,|L179.8488|
002040  f7fffffe          BL       uart_putchar
002044  210a              MOVS     r1,#0xa
002046  4838              LDR      r0,|L179.8488|
002048  f7fffffe          BL       uart_putchar
00204c  210a              MOVS     r1,#0xa
00204e  4836              LDR      r0,|L179.8488|
002050  f7fffffe          BL       uart_putchar
002054  210a              MOVS     r1,#0xa
002056  4834              LDR      r0,|L179.8488|
002058  f7fffffe          BL       uart_putchar
00205c  210a              MOVS     r1,#0xa
00205e  4832              LDR      r0,|L179.8488|
002060  f7fffffe          BL       uart_putchar
002064  210a              MOVS     r1,#0xa
002066  4830              LDR      r0,|L179.8488|
002068  f7fffffe          BL       uart_putchar
00206c  210a              MOVS     r1,#0xa
00206e  482e              LDR      r0,|L179.8488|
002070  f7fffffe          BL       uart_putchar
;;;2675   									//memset(data,0,1000);
;;;2676   														//timer counts to wait for characters in uart 1 									
;;;2677   									while(!(strstr(uart_string_gsm,"OK\r\n")  || (strstr(uart_string_gsm, "ERROR") ||  (tout > 5) )))
002074  bf00              NOP      
                  |L179.8310|
002076  492d              LDR      r1,|L179.8492|
002078  482d              LDR      r0,|L179.8496|
00207a  e000              B        |L179.8318|
                  |L179.8316|
00207c  e020              B        |L179.8384|
                  |L179.8318|
00207e  f7fffffe          BL       strstr
002082  2800              CMP      r0,#0
002084  d109              BNE      |L179.8346|
002086  492b              LDR      r1,|L179.8500|
002088  4829              LDR      r0,|L179.8496|
00208a  f7fffffe          BL       strstr
00208e  2800              CMP      r0,#0
002090  d103              BNE      |L179.8346|
002092  4829              LDR      r0,|L179.8504|
002094  6800              LDR      r0,[r0,#0]  ; tout
002096  2805              CMP      r0,#5
002098  dded              BLE      |L179.8310|
                  |L179.8346|
;;;2678   									{				//uart_putchar(UART1_BASE_PTR, '\n');					
;;;2679   									}
;;;2680   	                clear();//uart_putchar(UART1_BASE_PTR,0x1a);
00209a  f7fffffe          BL       clear
;;;2681   									//clear();
;;;2682   									memset(data,0,strlen(data));
00209e  4827              LDR      r0,|L179.8508|
0020a0  f7fffffe          BL       strlen
0020a4  4604              MOV      r4,r0
0020a6  4621              MOV      r1,r4
0020a8  4824              LDR      r0,|L179.8508|
0020aa  f7fffffe          BL       __aeabi_memclr
;;;2683   									clear();
0020ae  f7fffffe          BL       clear
;;;2684   
;;;2685   								
;;;2686   				
;;;2687   				//log_it();
;;;2688   			
;;;2689   			
;;;2690   			
;;;2691   			
;;;2692   			break;
0020b2  e00d              B        |L179.8400|
                  |L179.8372|
;;;2693   			}
;;;2694   //			memset(at_,0,100);
;;;2695   //			sprintf(at_,"\nAT+FSFLSIZE=%s\\LOG.TXT\r\n",drive);	
;;;2696   //			send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
;;;2697   //			parse_g(uart_string_gsm, 1, 2, ' ', '\n', fsize);
;;;2698   //			fsz=stof(fsize);//7523.7412
;;;2699   //			times=(fsz/1256)+1;
;;;2700   		}	
;;;2701   	
;;;2702   //
;;;2703   if(rtcticks2>=1500){break;}		
0020b4  4822              LDR      r0,|L179.8512|
0020b6  6800              LDR      r0,[r0,#0]  ; rtcticks2
0020b8  4922              LDR      r1,|L179.8516|
0020ba  4288              CMP      r0,r1
0020bc  db00              BLT      |L179.8384|
0020be  e007              B        |L179.8400|
                  |L179.8384|
0020c0  4821              LDR      r0,|L179.8520|
0020c2  6800              LDR      r0,[r0,#0]            ;2147  ; k5
0020c4  4921              LDR      r1,|L179.8524|
0020c6  6809              LDR      r1,[r1,#0]            ;2147  ; times
0020c8  4288              CMP      r0,r1                 ;2147
0020ca  dc01              BGT      |L179.8400|
0020cc  f7fdffd7          BL       |L179.126|
                  |L179.8400|
0020d0  bf00              NOP                            ;2148
;;;2704   }
;;;2705   
;;;2706   if(((k5>=times) && log0!=1)){
0020d2  481d              LDR      r0,|L179.8520|
0020d4  6800              LDR      r0,[r0,#0]  ; k5
0020d6  491d              LDR      r1,|L179.8524|
0020d8  6809              LDR      r1,[r1,#0]  ; times
0020da  4288              CMP      r0,r1
0020dc  db1e              BLT      |L179.8476|
0020de  481c              LDR      r0,|L179.8528|
0020e0  6800              LDR      r0,[r0,#0]  ; log0
0020e2  2801              CMP      r0,#1
0020e4  d01a              BEQ      |L179.8476|
;;;2707   	cursorvaluepr=0;times=-2;k5=0;
0020e6  2000              MOVS     r0,#0
0020e8  491a              LDR      r1,|L179.8532|
0020ea  6008              STR      r0,[r1,#0]  ; cursorvaluepr
0020ec  1e80              SUBS     r0,r0,#2
0020ee  4917              LDR      r1,|L179.8524|
0020f0  6008              STR      r0,[r1,#0]  ; times
0020f2  2000              MOVS     r0,#0
0020f4  4914              LDR      r1,|L179.8520|
0020f6  6008              STR      r0,[r1,#0]  ; k5
;;;2708   	memset(at_,0,100);
0020f8  2164              MOVS     r1,#0x64
0020fa  4817              LDR      r0,|L179.8536|
0020fc  f7fffffe          BL       __aeabi_memclr
;;;2709   	sprintf(at_,"\r\nAT+FSCREATE=%s\\LOG.TXT\r\n",drive);
002100  4a16              LDR      r2,|L179.8540|
002102  4917              LDR      r1,|L179.8544|
002104  4814              LDR      r0,|L179.8536|
002106  f7fffffe          BL       __2sprintf
;;;2710   	send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",tmeout);
00210a  4816              LDR      r0,|L179.8548|
00210c  6800              LDR      r0,[r0,#0]  ; tmeout
00210e  4b16              LDR      r3,|L179.8552|
002110  4a16              LDR      r2,|L179.8556|
002112  4917              LDR      r1,|L179.8560|
002114  9000              STR      r0,[sp,#0]
002116  4810              LDR      r0,|L179.8536|
002118  f7fffffe          BL       send_GSM
                  |L179.8476|
;;;2711   
;;;2712   }		
;;;2713   
;;;2714   int_erval=temp;
00211c  4815              LDR      r0,|L179.8564|
00211e  6800              LDR      r0,[r0,#0]  ; temp
002120  4915              LDR      r1,|L179.8568|
002122  6008              STR      r0,[r1,#0]  ; int_erval
;;;2715   }
002124  bd7c              POP      {r2-r6,pc}
;;;2716   
                          ENDP

002126  0000              DCW      0x0000
                  |L179.8488|
                          DCD      0x4006b000
                  |L179.8492|
                          DCD      ||.conststring||+0x70
                  |L179.8496|
                          DCD      uart_string_gsm
                  |L179.8500|
                          DCD      ||.conststring||+0xe0
                  |L179.8504|
                          DCD      tout
                  |L179.8508|
                          DCD      data
                  |L179.8512|
                          DCD      rtcticks2
                  |L179.8516|
                          DCD      0x000005dc
                  |L179.8520|
                          DCD      ||k5||
                  |L179.8524|
                          DCD      times
                  |L179.8528|
                          DCD      log0
                  |L179.8532|
                          DCD      cursorvaluepr
                  |L179.8536|
                          DCD      at_
                  |L179.8540|
                          DCD      drive
                  |L179.8544|
                          DCD      ||.conststring||+0x87c
                  |L179.8548|
                          DCD      tmeout
                  |L179.8552|
                          DCD      ||.conststring||+0x10
                  |L179.8556|
                          DCD      ||.conststring||+0x18
                  |L179.8560|
                          DCD      ||.conststring||+0x2c
                  |L179.8564|
                          DCD      temp
                  |L179.8568|
                          DCD      int_erval

                          AREA ||i.readapn||, COMGROUP=readapn, CODE, READONLY, ALIGN=2

                  readapn PROC
;;;1188   
;;;1189   __inline void readapn()
000000  b51c              PUSH     {r2-r4,lr}
;;;1190   {
;;;1191   	memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480c              LDR      r0,|L186.56|
000006  f7fffffe          BL       __aeabi_memclr
;;;1192   		sprintf(at_, "\nAT+FSREAD=C:\\APN.TXT,0,100,1\r\n");		
00000a  490c              LDR      r1,|L186.60|
00000c  480a              LDR      r0,|L186.56|
00000e  f7fffffe          BL       __2sprintf
;;;1193   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0a              LDR      r3,|L186.64|
000016  4a0b              LDR      r2,|L186.68|
000018  490b              LDR      r1,|L186.72|
00001a  9000              STR      r0,[sp,#0]
00001c  4806              LDR      r0,|L186.56|
00001e  f7fffffe          BL       send_GSM
;;;1194   	
;;;1195   		parse_g(uart_string_gsm, 1,2, '|', '|',apn);
000022  480a              LDR      r0,|L186.76|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2202              MOVS     r2,#2
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2101              MOVS     r1,#1
000030  4807              LDR      r0,|L186.80|
000032  f7fffffe          BL       parse_g
;;;1196   	
;;;1197   	
;;;1198   }
000036  bd1c              POP      {r2-r4,pc}
;;;1199   
                          ENDP

                  |L186.56|
                          DCD      at_
                  |L186.60|
                          DCD      ||.conststring||+0x898
                  |L186.64|
                          DCD      ||.conststring||+0x10
                  |L186.68|
                          DCD      ||.conststring||+0x18
                  |L186.72|
                          DCD      ||.conststring||+0x2c
                  |L186.76|
                          DCD      apn
                  |L186.80|
                          DCD      uart_string_gsm

                          AREA ||i.ignread||, COMGROUP=ignread, CODE, READONLY, ALIGN=2

                  ignread PROC
;;;1325   
;;;1326   __inline void ignread(){
000000  b508              PUSH     {r3,lr}
;;;1327   memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4816              LDR      r0,|L193.96|
000006  f7fffffe          BL       __aeabi_memclr
;;;1328   		sprintf(at_, "\nAT+FSREAD=C:\\IGN.TXT,0,100,1\r\n");		
00000a  4916              LDR      r1,|L193.100|
00000c  4814              LDR      r0,|L193.96|
00000e  f7fffffe          BL       __2sprintf
;;;1329   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b14              LDR      r3,|L193.104|
000016  4a15              LDR      r2,|L193.108|
000018  4915              LDR      r1,|L193.112|
00001a  9000              STR      r0,[sp,#0]
00001c  4810              LDR      r0,|L193.96|
00001e  f7fffffe          BL       send_GSM
;;;1330   if(strstr(uart_string_gsm,"ION")){IGNITION_ON;FUEL_ON;ign = 1;}
000022  4914              LDR      r1,|L193.116|
000024  4814              LDR      r0,|L193.120|
000026  f7fffffe          BL       strstr
00002a  2800              CMP      r0,#0
00002c  d008              BEQ      |L193.64|
00002e  2002              MOVS     r0,#2
000030  4912              LDR      r1,|L193.124|
000032  6088              STR      r0,[r1,#8]
000034  2004              MOVS     r0,#4
000036  6088              STR      r0,[r1,#8]
000038  2001              MOVS     r0,#1
00003a  4911              LDR      r1,|L193.128|
00003c  6008              STR      r0,[r1,#0]  ; ign
00003e  e00d              B        |L193.92|
                  |L193.64|
;;;1331   else if(strstr(uart_string_gsm,"IOFF")){IGNITION_OFF;FUEL_OFF;ign = 0;}
000040  4910              LDR      r1,|L193.132|
000042  480d              LDR      r0,|L193.120|
000044  f7fffffe          BL       strstr
000048  2800              CMP      r0,#0
00004a  d007              BEQ      |L193.92|
00004c  2002              MOVS     r0,#2
00004e  490b              LDR      r1,|L193.124|
000050  6048              STR      r0,[r1,#4]
000052  2004              MOVS     r0,#4
000054  6048              STR      r0,[r1,#4]
000056  2000              MOVS     r0,#0
000058  4909              LDR      r1,|L193.128|
00005a  6008              STR      r0,[r1,#0]  ; ign
                  |L193.92|
;;;1332   
;;;1333   }	
00005c  bd08              POP      {r3,pc}
;;;1334   	
                          ENDP

00005e  0000              DCW      0x0000
                  |L193.96|
                          DCD      at_
                  |L193.100|
                          DCD      ||.conststring||+0x8b8
                  |L193.104|
                          DCD      ||.conststring||+0x10
                  |L193.108|
                          DCD      ||.conststring||+0x18
                  |L193.112|
                          DCD      ||.conststring||+0x2c
                  |L193.116|
                          DCD      ||.conststring||+0x8d8
                  |L193.120|
                          DCD      uart_string_gsm
                  |L193.124|
                          DCD      0x400ff000
                  |L193.128|
                          DCD      ign
                  |L193.132|
                          DCD      ||.conststring||+0x8dc

                          AREA ||i.readcursor||, COMGROUP=readcursor, CODE, READONLY, ALIGN=2

                  readcursor PROC
;;;1387   	
;;;1388   __inline void readcursor()
000000  b51c              PUSH     {r2-r4,lr}
;;;1389   {
;;;1390   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4824              LDR      r0,|L200.152|
000006  f7fffffe          BL       __aeabi_memclr
;;;1391   		sprintf(at_, "\nAT+FSREAD=C:\\CURSOR.TXT,0,100,1\r\n");		
00000a  4924              LDR      r1,|L200.156|
00000c  4822              LDR      r0,|L200.152|
00000e  f7fffffe          BL       __2sprintf
;;;1392   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b22              LDR      r3,|L200.160|
000016  4a23              LDR      r2,|L200.164|
000018  4923              LDR      r1,|L200.168|
00001a  9000              STR      r0,[sp,#0]
00001c  481e              LDR      r0,|L200.152|
00001e  f7fffffe          BL       send_GSM
;;;1393   		memset(at_,0,100);
000022  2164              MOVS     r1,#0x64
000024  481c              LDR      r0,|L200.152|
000026  f7fffffe          BL       __aeabi_memclr
;;;1394   		parse_g(uart_string_gsm, 4,5, ',', ',',at_);
00002a  481b              LDR      r0,|L200.152|
00002c  212c              MOVS     r1,#0x2c
00002e  460b              MOV      r3,r1
000030  2205              MOVS     r2,#5
000032  9100              STR      r1,[sp,#0]
000034  9001              STR      r0,[sp,#4]
000036  2104              MOVS     r1,#4
000038  481c              LDR      r0,|L200.172|
00003a  f7fffffe          BL       parse_g
;;;1395   		times=myAtoi(at_);		
00003e  4816              LDR      r0,|L200.152|
000040  f7fffffe          BL       myAtoi
000044  491a              LDR      r1,|L200.176|
000046  6008              STR      r0,[r1,#0]  ; times
;;;1396   		memset(at_,0,100);
000048  2164              MOVS     r1,#0x64
00004a  4813              LDR      r0,|L200.152|
00004c  f7fffffe          BL       __aeabi_memclr
;;;1397   		parse_g(uart_string_gsm, 5,6, ',', ',',at_);
000050  4811              LDR      r0,|L200.152|
000052  212c              MOVS     r1,#0x2c
000054  460b              MOV      r3,r1
000056  2206              MOVS     r2,#6
000058  9100              STR      r1,[sp,#0]
00005a  9001              STR      r0,[sp,#4]
00005c  2105              MOVS     r1,#5
00005e  4813              LDR      r0,|L200.172|
000060  f7fffffe          BL       parse_g
;;;1398   		k5=myAtoi(at_);		
000064  480c              LDR      r0,|L200.152|
000066  f7fffffe          BL       myAtoi
00006a  4912              LDR      r1,|L200.180|
00006c  6008              STR      r0,[r1,#0]  ; k5
;;;1399   		memset(at_,0,100);
00006e  2164              MOVS     r1,#0x64
000070  4809              LDR      r0,|L200.152|
000072  f7fffffe          BL       __aeabi_memclr
;;;1400   		parse_g(uart_string_gsm, 6,7, ',', ',',at_);
000076  4808              LDR      r0,|L200.152|
000078  212c              MOVS     r1,#0x2c
00007a  460b              MOV      r3,r1
00007c  2207              MOVS     r2,#7
00007e  9100              STR      r1,[sp,#0]
000080  9001              STR      r0,[sp,#4]
000082  2106              MOVS     r1,#6
000084  4809              LDR      r0,|L200.172|
000086  f7fffffe          BL       parse_g
;;;1401   		cursorvaluepr=myAtoi(at_);		
00008a  4803              LDR      r0,|L200.152|
00008c  f7fffffe          BL       myAtoi
000090  4909              LDR      r1,|L200.184|
000092  6008              STR      r0,[r1,#0]  ; cursorvaluepr
;;;1402   
;;;1403   
;;;1404   }	
000094  bd1c              POP      {r2-r4,pc}
;;;1405   	
                          ENDP

000096  0000              DCW      0x0000
                  |L200.152|
                          DCD      at_
                  |L200.156|
                          DCD      ||.conststring||+0x8e4
                  |L200.160|
                          DCD      ||.conststring||+0x10
                  |L200.164|
                          DCD      ||.conststring||+0x18
                  |L200.168|
                          DCD      ||.conststring||+0x2c
                  |L200.172|
                          DCD      uart_string_gsm
                  |L200.176|
                          DCD      times
                  |L200.180|
                          DCD      ||k5||
                  |L200.184|
                          DCD      cursorvaluepr

                          AREA ||i.LED_init||, COMGROUP=LED_init, CODE, READONLY, ALIGN=2

                  LED_init PROC
;;;26     
;;;27     __inline void LED_init(void){
000000  483f              LDR      r0,|L207.256|
;;;28       
;;;29         SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK ;      //Turn on clock to PORTE & D module
000002  6b80              LDR      r0,[r0,#0x38]
000004  210f              MOVS     r1,#0xf
000006  0289              LSLS     r1,r1,#10
000008  4308              ORRS     r0,r0,r1
00000a  493d              LDR      r1,|L207.256|
00000c  6388              STR      r0,[r1,#0x38]
;;;30     
;;;31     
;;;32     	
;;;33     
;;;34     		PORTE_PCR29 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
00000e  1588              ASRS     r0,r1,#22
000010  493c              LDR      r1,|L207.260|
000012  6348              STR      r0,[r1,#0x34]
;;;35       	PORTD_PCR7 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000014  493c              LDR      r1,|L207.264|
000016  61c8              STR      r0,[r1,#0x1c]
;;;36         PORTE_PCR31 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000018  493a              LDR      r1,|L207.260|
00001a  63c8              STR      r0,[r1,#0x3c]
;;;37         PORTD_PCR5 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode
00001c  493a              LDR      r1,|L207.264|
00001e  6148              STR      r0,[r1,#0x14]
;;;38     	
;;;39         PORTC_PCR5 = PORT_PCR_MUX(0x1);            //Set the PTE29 pin multiplexer to GPIO mode
000020  493a              LDR      r1,|L207.268|
000022  6148              STR      r0,[r1,#0x14]
;;;40         PORTC_PCR6 = PORT_PCR_MUX(0x1);	        //Set the PTE31 pin multiplexer to GPIO mode
000024  6188              STR      r0,[r1,#0x18]
;;;41         PORTC_PCR7 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	
000026  61c8              STR      r0,[r1,#0x1c]
;;;42         PORTC_PCR8 = PORT_PCR_MUX(0x1);             //Set the PTD5 pin multiplexer to GPIO mode	    
000028  6208              STR      r0,[r1,#0x20]
;;;43         PORTB_PCR2 = PORT_PCR_MUX(0x1);             //Set the PTB2 pin multiplexer to GPIO mode	   
00002a  4939              LDR      r1,|L207.272|
00002c  6088              STR      r0,[r1,#8]
;;;44     
;;;45     	
;;;46     	PORTB_PCR2 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
00002e  1c80              ADDS     r0,r0,#2
000030  6088              STR      r0,[r1,#8]
;;;47     		
;;;48     	PORTB_PCR1 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000032  6048              STR      r0,[r1,#4]
;;;49     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;50     	PTB->PDDR &= ~MASK(ADCIGN);
000034  4837              LDR      r0,|L207.276|
000036  6940              LDR      r0,[r0,#0x14]
000038  2102              MOVS     r1,#2
00003a  4388              BICS     r0,r0,r1
00003c  4935              LDR      r1,|L207.276|
00003e  6148              STR      r0,[r1,#0x14]
;;;51     	GPIOD_PDDR |= (1<<7);
000040  4834              LDR      r0,|L207.276|
000042  3080              ADDS     r0,r0,#0x80
000044  6940              LDR      r0,[r0,#0x14]
000046  2180              MOVS     r1,#0x80
000048  4308              ORRS     r0,r0,r1
00004a  4932              LDR      r1,|L207.276|
00004c  3180              ADDS     r1,r1,#0x80
00004e  6148              STR      r0,[r1,#0x14]
;;;52     
;;;53     	PORTB_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_SHIFT; //		GPIOB_PDDR = 0;
000050  20ff              MOVS     r0,#0xff
000052  3003              ADDS     r0,#3
000054  492e              LDR      r1,|L207.272|
000056  6008              STR      r0,[r1,#0]
;;;54     	PORTC_PCR0 = PORT_PCR_MUX(0x1)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; //		GPIOB_PDDR = 0;
000058  1c40              ADDS     r0,r0,#1
00005a  492c              LDR      r1,|L207.268|
00005c  6008              STR      r0,[r1,#0]
;;;55     
;;;56     //		GPIOB_PCOR |= ADCIGN_SHIFT 	;			//set initial input stage 0;
;;;57     	//PTB->PDDR &= ~MASK(ADCIGN);
;;;58     //	GPIOD_PDDR |= (1<<7);
;;;59     
;;;60     	  
;;;61         GPIOE_PSOR |= RED_SHIFT | GREEN_SHIFT;      //Set the initial output state to high
00005e  482d              LDR      r0,|L207.276|
000060  30c0              ADDS     r0,r0,#0xc0
000062  6840              LDR      r0,[r0,#4]
000064  2105              MOVS     r1,#5
000066  0749              LSLS     r1,r1,#29
000068  4308              ORRS     r0,r0,r1
00006a  492a              LDR      r1,|L207.276|
00006c  31c0              ADDS     r1,r1,#0xc0
00006e  6048              STR      r0,[r1,#4]
;;;62         GPIOD_PSOR |= BLUE_SHIFT;               	//Set the inital output state to high
000070  4828              LDR      r0,|L207.276|
000072  3080              ADDS     r0,r0,#0x80
000074  6840              LDR      r0,[r0,#4]
000076  2120              MOVS     r1,#0x20
000078  4308              ORRS     r0,r0,r1
00007a  4926              LDR      r1,|L207.276|
00007c  3180              ADDS     r1,r1,#0x80
00007e  6048              STR      r0,[r1,#4]
;;;63     		GPIOC_PSOR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT; 
000080  4824              LDR      r0,|L207.276|
000082  3040              ADDS     r0,r0,#0x40
000084  6840              LDR      r0,[r0,#4]
000086  21ff              MOVS     r1,#0xff
000088  31c1              ADDS     r1,r1,#0xc1
00008a  4308              ORRS     r0,r0,r1
00008c  4921              LDR      r1,|L207.276|
00008e  3140              ADDS     r1,r1,#0x40
000090  6048              STR      r0,[r1,#4]
;;;64     		GPIOC_PSOR |= RESET_SHIFT;
000092  4608              MOV      r0,r1
000094  6840              LDR      r0,[r0,#4]
000096  2120              MOVS     r1,#0x20
000098  4308              ORRS     r0,r0,r1
00009a  491e              LDR      r1,|L207.276|
00009c  3140              ADDS     r1,r1,#0x40
00009e  6048              STR      r0,[r1,#4]
;;;65         
;;;66         GPIOE_PDDR |= RED_SHIFT | GREEN_SHIFT;  //Set the pin's direction to output
0000a0  481c              LDR      r0,|L207.276|
0000a2  30c0              ADDS     r0,r0,#0xc0
0000a4  6940              LDR      r0,[r0,#0x14]
0000a6  2105              MOVS     r1,#5
0000a8  0749              LSLS     r1,r1,#29
0000aa  4308              ORRS     r0,r0,r1
0000ac  4919              LDR      r1,|L207.276|
0000ae  31c0              ADDS     r1,r1,#0xc0
0000b0  6148              STR      r0,[r1,#0x14]
;;;67         GPIOD_PDDR |= BLUE_SHIFT;               //Set the pin's direction to output
0000b2  4818              LDR      r0,|L207.276|
0000b4  3080              ADDS     r0,r0,#0x80
0000b6  6940              LDR      r0,[r0,#0x14]
0000b8  2120              MOVS     r1,#0x20
0000ba  4308              ORRS     r0,r0,r1
0000bc  4915              LDR      r1,|L207.276|
0000be  3180              ADDS     r1,r1,#0x80
0000c0  6148              STR      r0,[r1,#0x14]
;;;68     		GPIOC_PDDR |= REDBAT_SHIFT | BLUEBAT_SHIFT | GREENBAT_SHIFT | RESET_SHIFT; 
0000c2  4814              LDR      r0,|L207.276|
0000c4  3040              ADDS     r0,r0,#0x40
0000c6  6940              LDR      r0,[r0,#0x14]
0000c8  21ff              MOVS     r1,#0xff
0000ca  31e1              ADDS     r1,r1,#0xe1
0000cc  4308              ORRS     r0,r0,r1
0000ce  4911              LDR      r1,|L207.276|
0000d0  3140              ADDS     r1,r1,#0x40
0000d2  6148              STR      r0,[r1,#0x14]
;;;69         
;;;70         RED_ON;		//Turn off RED LED
0000d4  0588              LSLS     r0,r1,#22
0000d6  490f              LDR      r1,|L207.276|
0000d8  31c0              ADDS     r1,r1,#0xc0
0000da  6088              STR      r0,[r1,#8]
;;;71         GREEN_ON;	//Turn off GREEN LED
0000dc  0080              LSLS     r0,r0,#2
0000de  6088              STR      r0,[r1,#8]
;;;72         BLUE_ON;		//Turn off BLUE LED
0000e0  2020              MOVS     r0,#0x20
0000e2  490c              LDR      r1,|L207.276|
0000e4  3180              ADDS     r1,r1,#0x80
0000e6  6088              STR      r0,[r1,#8]
;;;73     		REDBAT_ON;
0000e8  2040              MOVS     r0,#0x40
0000ea  490a              LDR      r1,|L207.276|
0000ec  3140              ADDS     r1,r1,#0x40
0000ee  6088              STR      r0,[r1,#8]
;;;74     		GREENBAT_ON;
0000f0  2080              MOVS     r0,#0x80
0000f2  6088              STR      r0,[r1,#8]
;;;75     		BLUEBAT_ON;
0000f4  0040              LSLS     r0,r0,#1
0000f6  6088              STR      r0,[r1,#8]
;;;76     		RESET_ON;
0000f8  2020              MOVS     r0,#0x20
0000fa  6048              STR      r0,[r1,#4]
;;;77     		
;;;78     	
;;;79     }
0000fc  4770              BX       lr
;;;80     
                          ENDP

0000fe  0000              DCW      0x0000
                  |L207.256|
                          DCD      0x40048000
                  |L207.260|
                          DCD      0x4004d040
                  |L207.264|
                          DCD      0x4004c000
                  |L207.268|
                          DCD      0x4004b000
                  |L207.272|
                          DCD      0x4004a000
                  |L207.276|
                          DCD      0x400ff040

                          AREA ||i.ignstatoff||, COMGROUP=ignstatoff, CODE, READONLY, ALIGN=2

                  ignstatoff PROC
;;;1315   }	
;;;1316   __inline void ignstatoff(){
000000  b508              PUSH     {r3,lr}
;;;1317   send_GSM("\nAT+FSCREATE=C:\\IGN.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  480e              LDR      r0,|L214.60|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b0e              LDR      r3,|L214.64|
000008  4a0e              LDR      r2,|L214.68|
00000a  490f              LDR      r1,|L214.72|
00000c  9000              STR      r0,[sp,#0]
00000e  480f              LDR      r0,|L214.76|
000010  f7fffffe          BL       send_GSM
;;;1318   send_GSM("\r\nAT+FSWRITE=C:\\IGN.TXT,0,6,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b0a              LDR      r3,|L214.64|
000018  4a0a              LDR      r2,|L214.68|
00001a  490d              LDR      r1,|L214.80|
00001c  9000              STR      r0,[sp,#0]
00001e  480d              LDR      r0,|L214.84|
000020  f7fffffe          BL       send_GSM
;;;1319   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1320   send_GSM("\nIOFF\n\n\n\n", "OK\r\n", "ERROR\r\n" , "ERROR:",10);
00002a  200a              MOVS     r0,#0xa
00002c  4b04              LDR      r3,|L214.64|
00002e  4a05              LDR      r2,|L214.68|
000030  4909              LDR      r1,|L214.88|
000032  9000              STR      r0,[sp,#0]
000034  4809              LDR      r0,|L214.92|
000036  f7fffffe          BL       send_GSM
;;;1321   
;;;1322   
;;;1323   }		
00003a  bd08              POP      {r3,pc}
;;;1324   
                          ENDP

                  |L214.60|
                          DCD      tmeout
                  |L214.64|
                          DCD      ||.conststring||+0x10
                  |L214.68|
                          DCD      ||.conststring||+0x18
                  |L214.72|
                          DCD      ||.conststring||+0x2c
                  |L214.76|
                          DCD      ||.conststring||+0x30
                  |L214.80|
                          DCD      ||.conststring||+0x20
                  |L214.84|
                          DCD      ||.conststring||+0x4c
                  |L214.88|
                          DCD      ||.conststring||+0x70
                  |L214.92|
                          DCD      ||.conststring||+0x930

                          AREA ||i.clear2||, COMGROUP=clear2, CODE, READONLY, ALIGN=2

                  clear2 PROC
;;;1471   
;;;1472   __inline void clear2()
000000  4803              LDR      r0,|L220.16|
;;;1473   {
;;;1474   //    if (UART_S1_REG(UART2_BASE_PTR) & UART_S1_OR_MASK)
;;;1475   //    {
;;;1476   //      temp = UART_D_REG(UART2_BASE_PTR);
;;;1477   //    }
;;;1478   
;;;1479   	UART_S1_REG(UART2_BASE_PTR) |= (UART_S1_OR_MASK | UART_C2_ILIE_MASK );
000002  7900              LDRB     r0,[r0,#4]
000004  2118              MOVS     r1,#0x18
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L220.16|
00000a  7108              STRB     r0,[r1,#4]
;;;1480   }	
00000c  4770              BX       lr
;;;1481   
                          ENDP

00000e  0000              DCW      0x0000
                  |L220.16|
                          DCD      0x4006c000

                          AREA ||i.savecursord||, COMGROUP=savecursord, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  savecursord PROC
;;;1377   }	
;;;1378   	__inline void savecursord(){
000000  b508              PUSH     {r3,lr}
;;;1379   send_GSM("\nAT+FSCREATE=C:\\CURSOR.TXT\r\n", "OK", "ERROR\r\n" , "ERROR:",tmeout);
000002  4814              LDR      r0,|L226.84|
000004  6800              LDR      r0,[r0,#0]  ; tmeout
000006  4b14              LDR      r3,|L226.88|
000008  4a14              LDR      r2,|L226.92|
00000a  4915              LDR      r1,|L226.96|
00000c  9000              STR      r0,[sp,#0]
00000e  4815              LDR      r0,|L226.100|
000010  f7fffffe          BL       send_GSM
;;;1380   send_GSM("\r\nAT+FSWRITE=C:\\CURSOR.TXT,0,50,10\r\n", ">", "ERROR\r\n" , "ERROR:",5);
000014  2005              MOVS     r0,#5
000016  4b10              LDR      r3,|L226.88|
000018  4a10              LDR      r2,|L226.92|
00001a  4913              LDR      r1,|L226.104|
00001c  9000              STR      r0,[sp,#0]
00001e  4813              LDR      r0,|L226.108|
000020  f7fffffe          BL       send_GSM
;;;1381   	delay(10);
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       delay
;;;1382   memset(at_,0,100);
00002a  2164              MOVS     r1,#0x64
00002c  4810              LDR      r0,|L226.112|
00002e  f7fffffe          BL       __aeabi_memclr
;;;1383   sprintf(at_, "\n,%ld,%ld,%ld,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",0,0,0);		
000032  2000              MOVS     r0,#0
000034  4603              MOV      r3,r0
000036  4602              MOV      r2,r0
000038  490e              LDR      r1,|L226.116|
00003a  9000              STR      r0,[sp,#0]
00003c  480c              LDR      r0,|L226.112|
00003e  f7fffffe          BL       __2sprintf
;;;1384   send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);
000042  200a              MOVS     r0,#0xa
000044  4b04              LDR      r3,|L226.88|
000046  4a05              LDR      r2,|L226.92|
000048  4905              LDR      r1,|L226.96|
00004a  9000              STR      r0,[sp,#0]
00004c  4808              LDR      r0,|L226.112|
00004e  f7fffffe          BL       send_GSM
;;;1385   }	
000052  bd08              POP      {r3,pc}
;;;1386   		
                          ENDP

                  |L226.84|
                          DCD      tmeout
                  |L226.88|
                          DCD      ||.conststring||+0x10
                  |L226.92|
                          DCD      ||.conststring||+0x18
                  |L226.96|
                          DCD      ||.conststring||+0x2c
                  |L226.100|
                          DCD      ||.conststring||+0x674
                  |L226.104|
                          DCD      ||.conststring||+0x20
                  |L226.108|
                          DCD      ||.conststring||+0x694
                  |L226.112|
                          DCD      at_
                  |L226.116|
                          DCD      ||.conststring||+0x6bc

                          AREA ||i.read_ip_port||, COMGROUP=read_ip_port, CODE, READONLY, ALIGN=2

                  read_ip_port PROC
;;;1335   	
;;;1336   __inline void read_ip_port()
000000  b51c              PUSH     {r2-r4,lr}
;;;1337   {
;;;1338   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  4811              LDR      r0,|L232.76|
000006  f7fffffe          BL       __aeabi_memclr
;;;1339   	//	memset(ip,0,strlen(ip));
;;;1340   		//memset(port,0,strlen(port));
;;;1341   		sprintf(at_, "\nAT+FSREAD=C:\\IP_PORT.TXT,0,100,1\r\n");		
00000a  4911              LDR      r1,|L232.80|
00000c  480f              LDR      r0,|L232.76|
00000e  f7fffffe          BL       __2sprintf
;;;1342   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0f              LDR      r3,|L232.84|
000016  4a10              LDR      r2,|L232.88|
000018  4910              LDR      r1,|L232.92|
00001a  9000              STR      r0,[sp,#0]
00001c  480b              LDR      r0,|L232.76|
00001e  f7fffffe          BL       send_GSM
;;;1343   		parse_g(uart_string_gsm, 2,3, '|', '|',ip);
000022  480f              LDR      r0,|L232.96|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480c              LDR      r0,|L232.100|
000032  f7fffffe          BL       parse_g
;;;1344   		parse_g(uart_string_gsm, 4,5, '|', '|',port);
000036  480c              LDR      r0,|L232.104|
000038  217c              MOVS     r1,#0x7c
00003a  460b              MOV      r3,r1
00003c  2205              MOVS     r2,#5
00003e  9100              STR      r1,[sp,#0]
000040  9001              STR      r0,[sp,#4]
000042  2104              MOVS     r1,#4
000044  4807              LDR      r0,|L232.100|
000046  f7fffffe          BL       parse_g
;;;1345   	
;;;1346   }		
00004a  bd1c              POP      {r2-r4,pc}
;;;1347   	
                          ENDP

                  |L232.76|
                          DCD      at_
                  |L232.80|
                          DCD      ||.conststring||+0x93c
                  |L232.84|
                          DCD      ||.conststring||+0x10
                  |L232.88|
                          DCD      ||.conststring||+0x18
                  |L232.92|
                          DCD      ||.conststring||+0x2c
                  |L232.96|
                          DCD      ||ip||
                  |L232.100|
                          DCD      uart_string_gsm
                  |L232.104|
                          DCD      port

                          AREA ||i.read_interval||, COMGROUP=read_interval, CODE, READONLY, ALIGN=2

                  read_interval PROC
;;;1347   	
;;;1348   __inline void read_interval()
000000  b51c              PUSH     {r2-r4,lr}
;;;1349   {
;;;1350   		memset(at_,0,100);
000002  2164              MOVS     r1,#0x64
000004  480f              LDR      r0,|L238.68|
000006  f7fffffe          BL       __aeabi_memclr
;;;1351   		sprintf(at_, "\nAT+FSREAD=C:\\INTERVAL.TXT,0,100,1\r\n");		
00000a  490f              LDR      r1,|L238.72|
00000c  480d              LDR      r0,|L238.68|
00000e  f7fffffe          BL       __2sprintf
;;;1352   		send_GSM(at_, "OK", "ERROR\r\n" , "ERROR:",10);	
000012  200a              MOVS     r0,#0xa
000014  4b0d              LDR      r3,|L238.76|
000016  4a0e              LDR      r2,|L238.80|
000018  490e              LDR      r1,|L238.84|
00001a  9000              STR      r0,[sp,#0]
00001c  4809              LDR      r0,|L238.68|
00001e  f7fffffe          BL       send_GSM
;;;1353   		parse_g(uart_string_gsm, 2,3, '|', '|',interval);
000022  480d              LDR      r0,|L238.88|
000024  217c              MOVS     r1,#0x7c
000026  460b              MOV      r3,r1
000028  2203              MOVS     r2,#3
00002a  9100              STR      r1,[sp,#0]
00002c  9001              STR      r0,[sp,#4]
00002e  2102              MOVS     r1,#2
000030  480a              LDR      r0,|L238.92|
000032  f7fffffe          BL       parse_g
;;;1354   		int_erval=myAtoi(interval);		
000036  4808              LDR      r0,|L238.88|
000038  f7fffffe          BL       myAtoi
00003c  4908              LDR      r1,|L238.96|
00003e  6008              STR      r0,[r1,#0]  ; int_erval
;;;1355   
;;;1356   
;;;1357   }
000040  bd1c              POP      {r2-r4,pc}
;;;1358   __inline void read_licenceplate()
                          ENDP

000042  0000              DCW      0x0000
                  |L238.68|
                          DCD      at_
                  |L238.72|
                          DCD      ||.conststring||+0x960
                  |L238.76|
                          DCD      ||.conststring||+0x10
                  |L238.80|
                          DCD      ||.conststring||+0x18
                  |L238.84|
                          DCD      ||.conststring||+0x2c
                  |L238.88|
                          DCD      interval
                  |L238.92|
                          DCD      uart_string_gsm
                  |L238.96|
                          DCD      int_erval

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L244.24|
                  |L244.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L244.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L244.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\projects\\KEIL_MAG\\vts_ver2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_ign____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_vts_ver2_c_ign____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_vts_ver2_c_ign____REVSH|
#line 402
|__asm___10_vts_ver2_c_ign____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
