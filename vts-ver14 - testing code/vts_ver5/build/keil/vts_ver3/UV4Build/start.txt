; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\start.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\start.d --cpu=Cortex-M0+ --apcs=interwork -O0 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -IC:\Keil_v5\ARM\RV31\Inc -IC:\Users\Mridul\Desktop\vts_ver4\build\keil\vts_ver3\RTE -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.5.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__RTX -D__MICROLIB -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\start.crf ..\..\..\src\cpu\start.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  cpu_identify PROC
;;;67      */
;;;68     void cpu_identify (void)
000000  b510              PUSH     {r4,lr}
;;;69     {
;;;70       uint16 temp;
;;;71         /* Determine the Kinetis family */
;;;72         switch((SIM_SDID & SIM_SDID_FAMID(0x7))>>SIM_SDID_FAMID_SHIFT) 
000002  488c              LDR      r0,|L1.564|
000004  6a40              LDR      r0,[r0,#0x24]
000006  2107              MOVS     r1,#7
000008  0709              LSLS     r1,r1,#28
00000a  4008              ANDS     r0,r0,r1
00000c  0f00              LSRS     r0,r0,#28
00000e  0003              MOVS     r3,r0
000010  f7fffffe          BL       __ARM_common_switch8
000014  0504080c          DCB      0x05,0x04,0x08,0x0c
000018  10141800          DCB      0x10,0x14,0x18,0x00
;;;73         {  
;;;74         	case 0x0:
;;;75         		printf("\n\rKL0");
00001c  a086              ADR      r0,|L1.568|
00001e  f7fffffe          BL       __2printf
;;;76         		break;
000022  e013              B        |L1.76|
;;;77         	case 0x1:
;;;78         		printf("\n\rKL1");
000024  a086              ADR      r0,|L1.576|
000026  f7fffffe          BL       __2printf
;;;79         		break;
00002a  e00f              B        |L1.76|
;;;80         	case 0x2:
;;;81         		printf("\n\rKL2");
00002c  a086              ADR      r0,|L1.584|
00002e  f7fffffe          BL       __2printf
;;;82         		break;
000032  e00b              B        |L1.76|
;;;83         	case 0x3:
;;;84         		printf("\n\rKL3");
000034  a086              ADR      r0,|L1.592|
000036  f7fffffe          BL       __2printf
;;;85         		break;
00003a  e007              B        |L1.76|
;;;86         	case 0x4:
;;;87         		printf("\n\rKL4");
00003c  a086              ADR      r0,|L1.600|
00003e  f7fffffe          BL       __2printf
;;;88         		break;
000042  e003              B        |L1.76|
;;;89     	default:
;;;90     		printf("\n\rUnrecognized Kinetis family device.\n\r");  
000044  a086              ADR      r0,|L1.608|
000046  f7fffffe          BL       __2printf
;;;91     		break;  	
00004a  bf00              NOP      
                  |L1.76|
00004c  bf00              NOP                            ;76
;;;92         }
;;;93         
;;;94         /* Determine Sub-Family ID */
;;;95         switch((SIM_SDID & SIM_SDID_SUBFAMID(0x7))>>SIM_SDID_SUBFAMID_SHIFT) 
00004e  4879              LDR      r0,|L1.564|
000050  6a40              LDR      r0,[r0,#0x24]
000052  2107              MOVS     r1,#7
000054  0609              LSLS     r1,r1,#24
000056  4008              ANDS     r0,r0,r1
000058  0e00              LSRS     r0,r0,#24
00005a  2804              CMP      r0,#4
00005c  d004              BEQ      |L1.104|
00005e  2805              CMP      r0,#5
000060  d006              BEQ      |L1.112|
000062  2806              CMP      r0,#6
000064  d10c              BNE      |L1.128|
000066  e007              B        |L1.120|
                  |L1.104|
;;;96         {  
;;;97         	case 0x4:
;;;98         		printf("4\n\r");
000068  a087              ADR      r0,|L1.648|
00006a  f7fffffe          BL       __2printf
;;;99         		break;
00006e  e00b              B        |L1.136|
                  |L1.112|
;;;100        	case 0x5:
;;;101        		printf("5\n\r");
000070  a086              ADR      r0,|L1.652|
000072  f7fffffe          BL       __2printf
;;;102        		break;
000076  e007              B        |L1.136|
                  |L1.120|
;;;103            case 0x6:
;;;104                    printf("6\n\r");
000078  a085              ADR      r0,|L1.656|
00007a  f7fffffe          BL       __2printf
;;;105                    break;
00007e  e003              B        |L1.136|
                  |L1.128|
;;;106    	default:
;;;107    		printf("\n\rUnrecognized Kinetis sub-family device.\n\r");  
000080  a084              ADR      r0,|L1.660|
000082  f7fffffe          BL       __2printf
;;;108    		break;  	
000086  bf00              NOP      
                  |L1.136|
000088  bf00              NOP                            ;99
;;;109        }
;;;110        
;;;111        /* Determine the package size */
;;;112        switch((SIM_SDID & SIM_SDID_PINID(0xF))>>SIM_SDID_PINID_SHIFT) 
00008a  486a              LDR      r0,|L1.564|
00008c  6a40              LDR      r0,[r0,#0x24]
00008e  0700              LSLS     r0,r0,#28
000090  0f00              LSRS     r0,r0,#28
000092  0003              MOVS     r3,r0
000094  f7fffffe          BL       __ARM_common_switch8
000098  09060a0e          DCB      0x09,0x06,0x0a,0x0e
00009c  2212161a          DCB      0x22,0x12,0x16,0x1a
0000a0  221e2200          DCB      0x22,0x1e,0x22,0x00
;;;113        {  
;;;114        	case 0x0:
;;;115        		printf("16pin\n\r");
0000a4  a086              ADR      r0,|L1.704|
0000a6  f7fffffe          BL       __2printf
;;;116        		break;
0000aa  e01b              B        |L1.228|
;;;117        	case 0x1:
;;;118        		printf("24pin\n\r");
0000ac  a086              ADR      r0,|L1.712|
0000ae  f7fffffe          BL       __2printf
;;;119        		break;
0000b2  e017              B        |L1.228|
;;;120        	case 0x2:
;;;121        		printf("32pin\n\r");
0000b4  a086              ADR      r0,|L1.720|
0000b6  f7fffffe          BL       __2printf
;;;122        		break;
0000ba  e013              B        |L1.228|
;;;123        	case 0x4:
;;;124        		printf("48pin\n\r");
0000bc  a086              ADR      r0,|L1.728|
0000be  f7fffffe          BL       __2printf
;;;125        		break;
0000c2  e00f              B        |L1.228|
;;;126        	case 0x5:
;;;127        		printf("64pin\n\r");
0000c4  a086              ADR      r0,|L1.736|
0000c6  f7fffffe          BL       __2printf
;;;128                    break;
0000ca  e00b              B        |L1.228|
;;;129            case 0x6:
;;;130        		printf("80pin\n\r");
0000cc  a086              ADR      r0,|L1.744|
0000ce  f7fffffe          BL       __2printf
;;;131                    break;
0000d2  e007              B        |L1.228|
;;;132            case 0x8:
;;;133        		printf("100pin\n\r");        
0000d4  a086              ADR      r0,|L1.752|
0000d6  f7fffffe          BL       __2printf
;;;134        		break;
0000da  e003              B        |L1.228|
;;;135    	default:
;;;136    		printf("\n\rUnrecognized Kinetis package code.      ");  
0000dc  a087              ADR      r0,|L1.764|
0000de  f7fffffe          BL       __2printf
;;;137    		break;  	
0000e2  bf00              NOP      
                  |L1.228|
0000e4  bf00              NOP                            ;116
;;;138        }
;;;139        
;;;140        /* Determine Attribute ID */
;;;141        switch((SIM_SDID & SIM_SDID_SERIESID(0x7))>>SIM_SDID_SERIESID_SHIFT) 
0000e6  4853              LDR      r0,|L1.564|
0000e8  6a40              LDR      r0,[r0,#0x24]
0000ea  2107              MOVS     r1,#7
0000ec  0509              LSLS     r1,r1,#20
0000ee  4008              ANDS     r0,r0,r1
0000f0  0d00              LSRS     r0,r0,#20
0000f2  2801              CMP      r0,#1
0000f4  d103              BNE      |L1.254|
;;;142        {  
;;;143        	case 0x1:
;;;144        		printf("\n\rLow Power Line with Cortex M0+\n\r\n\r");
0000f6  a08c              ADR      r0,|L1.808|
0000f8  f7fffffe          BL       __2printf
;;;145        		break;
0000fc  e003              B        |L1.262|
                  |L1.254|
;;;146    	default:
;;;147    		printf("\n\rUnrecognized Kinetis family attribute.\n\r");  
0000fe  a094              ADR      r0,|L1.848|
000100  f7fffffe          BL       __2printf
;;;148    		break;  	
000104  bf00              NOP      
                  |L1.262|
000106  bf00              NOP                            ;145
;;;149        } 
;;;150        
;;;151        /* Determine the System SRAM Size */
;;;152        switch((SIM_SDID & SIM_SDID_SRAMSIZE(0x7))>>SIM_SDID_SRAMSIZE_SHIFT) 
000108  484a              LDR      r0,|L1.564|
00010a  6a40              LDR      r0,[r0,#0x24]
00010c  2107              MOVS     r1,#7
00010e  0409              LSLS     r1,r1,#16
000110  4008              ANDS     r0,r0,r1
000112  0c00              LSRS     r0,r0,#16
000114  0003              MOVS     r3,r0
000116  f7fffffe          BL       __ARM_common_switch8
00011a  0805              DCB      0x08,0x05
00011c  090d1115          DCB      0x09,0x0d,0x11,0x15
000120  191d2125          DCB      0x19,0x1d,0x21,0x25
;;;153        {  
;;;154        	case 0x0:
;;;155              printf("SRAM  size: 0.5 KB\n\r");
000124  a095              ADR      r0,|L1.892|
000126  f7fffffe          BL       __2printf
;;;156        		break;
00012a  e01f              B        |L1.364|
;;;157            case 0x1:
;;;158              printf("SRAM  size:  1 KB\n\r");
00012c  a099              ADR      r0,|L1.916|
00012e  f7fffffe          BL       __2printf
;;;159              break;
000132  e01b              B        |L1.364|
;;;160            case 0x2:
;;;161              printf("SRAM  size:  2 KB\n\r");
000134  a09c              ADR      r0,|L1.936|
000136  f7fffffe          BL       __2printf
;;;162              break;
00013a  e017              B        |L1.364|
;;;163            case 0x3:
;;;164              printf("SRAM  size:  4 KB\n\r");
00013c  a09f              ADR      r0,|L1.956|
00013e  f7fffffe          BL       __2printf
;;;165              break;
000142  e013              B        |L1.364|
;;;166            case 0x4:
;;;167              printf("SRAM  size:  8 KB\n\r");
000144  a0a2              ADR      r0,|L1.976|
000146  f7fffffe          BL       __2printf
;;;168              break;
00014a  e00f              B        |L1.364|
;;;169            case 0x5:
;;;170              printf("SRAM  size:  16 KB\n\r");
00014c  a0a5              ADR      r0,|L1.996|
00014e  f7fffffe          BL       __2printf
;;;171              break;
000152  e00b              B        |L1.364|
;;;172            case 0x6:
;;;173              printf("SRAM  size:  32 KB\n\r");
000154  a0a9              ADR      r0,|L1.1020|
000156  f7fffffe          BL       __2printf
;;;174              break;
00015a  e007              B        |L1.364|
;;;175            case 0x7:
;;;176              printf("SRAM  size:  64 KB\n\r");
00015c  a0ad              ADR      r0,|L1.1044|
00015e  f7fffffe          BL       __2printf
;;;177              break;
000162  e003              B        |L1.364|
;;;178    	default:
;;;179    		printf("\n\rUnrecognized SRAM Size.\n\r");  
000164  a0b1              ADR      r0,|L1.1068|
000166  f7fffffe          BL       __2printf
;;;180    		break;  	
00016a  bf00              NOP      
                  |L1.364|
00016c  bf00              NOP                            ;156
;;;181        }                
;;;182        
;;;183        /* Determine the flash revision */
;;;184        //flash_identify();    
;;;185        
;;;186        /* Determine the P-flash size */
;;;187      switch((SIM_FCFG1 & SIM_FCFG1_PFSIZE(0xF))>>SIM_FCFG1_PFSIZE_SHIFT)
00016e  4831              LDR      r0,|L1.564|
000170  3040              ADDS     r0,r0,#0x40
000172  68c0              LDR      r0,[r0,#0xc]
000174  210f              MOVS     r1,#0xf
000176  0609              LSLS     r1,r1,#24
000178  4008              ANDS     r0,r0,r1
00017a  0e00              LSRS     r0,r0,#24
00017c  2805              CMP      r0,#5
00017e  d01a              BEQ      |L1.438|
000180  dc06              BGT      |L1.400|
000182  2800              CMP      r0,#0
000184  d00b              BEQ      |L1.414|
000186  2801              CMP      r0,#1
000188  d00d              BEQ      |L1.422|
00018a  2803              CMP      r0,#3
00018c  d123              BNE      |L1.470|
00018e  e00e              B        |L1.430|
                  |L1.400|
000190  2807              CMP      r0,#7
000192  d014              BEQ      |L1.446|
000194  2809              CMP      r0,#9
000196  d016              BEQ      |L1.454|
000198  280f              CMP      r0,#0xf
00019a  d11c              BNE      |L1.470|
00019c  e017              B        |L1.462|
                  |L1.414|
;;;188        {
;;;189      	case 0x0:
;;;190        		printf("Flash size:  8 KB program flash, 0.25 KB protection region\n\r");
00019e  a0aa              ADR      r0,|L1.1096|
0001a0  f7fffffe          BL       __2printf
;;;191        		break;
0001a4  e01b              B        |L1.478|
                  |L1.422|
;;;192        	case 0x1:
;;;193        		printf("Flash size:  16 KB program flash, 0.5 KB protection region\n\r");
0001a6  a0b8              ADR      r0,|L1.1160|
0001a8  f7fffffe          BL       __2printf
;;;194        		break;
0001ac  e017              B        |L1.478|
                  |L1.430|
;;;195            case 0x3:
;;;196        		printf("Flash size:  32 KB program flash, 1 KB protection region\n\r");
0001ae  a0c6              ADR      r0,|L1.1224|
0001b0  f7fffffe          BL       __2printf
;;;197        		break;
0001b4  e013              B        |L1.478|
                  |L1.438|
;;;198        	case 0x5:
;;;199        		printf("Flash size:  64 KB program flash, 2 KB protection region\n\r");
0001b6  a0d3              ADR      r0,|L1.1284|
0001b8  f7fffffe          BL       __2printf
;;;200        		break;
0001bc  e00f              B        |L1.478|
                  |L1.446|
;;;201            case 0x7:
;;;202        		printf("Flash size:  128 KB program flash, 4 KB protection region\n\r");
0001be  a0e0              ADR      r0,|L1.1344|
0001c0  f7fffffe          BL       __2printf
;;;203        		break;
0001c4  e00b              B        |L1.478|
                  |L1.454|
;;;204            case 0x9:
;;;205        		printf("Flash size:  256 KB program flash, 4 KB protection region\n\r");
0001c6  a0ed              ADR      r0,|L1.1404|
0001c8  f7fffffe          BL       __2printf
;;;206        		break;
0001cc  e007              B        |L1.478|
                  |L1.462|
;;;207            case 0xF:
;;;208        		printf("Flash size:  128 KB program flash, 4 KB protection region\n\r");
0001ce  a0dc              ADR      r0,|L1.1344|
0001d0  f7fffffe          BL       __2printf
;;;209        		break;
0001d4  e003              B        |L1.478|
                  |L1.470|
;;;210    	default:
;;;211    		printf("ERR!! Undefined flash size\n\r");  
0001d6  a0f8              ADR      r0,|L1.1464|
0001d8  f7fffffe          BL       __2printf
;;;212    		break;  	  		
0001dc  bf00              NOP      
                  |L1.478|
0001de  bf00              NOP                            ;191
;;;213        }
;;;214        
;;;215        /* Determine the revision ID */
;;;216        temp = ((SIM_SDID_REVID(0xF))>>SIM_SDID_REVID_SHIFT);
0001e0  240f              MOVS     r4,#0xf
;;;217        printf("Silicon rev %d\n\r", temp);       
0001e2  4621              MOV      r1,r4
0001e4  a0fc              ADR      r0,|L1.1496|
0001e6  f7fffffe          BL       __2printf
;;;218    }
0001ea  bd10              POP      {r4,pc}
;;;219    /********************************************************************/
                          ENDP

                  start PROC
;;;21      */
;;;22     void start(void)
0001ec  b510              PUSH     {r4,lr}
;;;23     {            
;;;24     		/* Disable the watchdog timer */
;;;25         SIM_COPC = 0x00;
0001ee  2000              MOVS     r0,#0
0001f0  49fe              LDR      r1,|L1.1516|
0001f2  6008              STR      r0,[r1,#0]
;;;26         
;;;27     #ifndef CMSIS    // If conforming to CMSIS, we do not need to perform this code
;;;28     
;;;29     
;;;30     	/* Copy any vector or data sections that need to be in RAM */
;;;31     	common_startup();
;;;32     #endif
;;;33     
;;;34     	/* Perform clock initialization, default UART initialization,
;;;35          * initializes clock out function, and enables the abort button
;;;36          */
;;;37     	sysinit();
0001f4  f7fffffe          BL       sysinit
;;;38             
;;;39             printf("\n\r\n\r");
0001f8  a053              ADR      r0,|L1.840|
0001fa  f7fffffe          BL       __2printf
;;;40     	
;;;41     	/* Determine the last cause(s) of reset */
;;;42     	outSRS();	
0001fe  f7fffffe          BL       outSRS
;;;43     	
;;;44     	/* Determine specific Kinetis L Family device and revision */
;;;45     	cpu_identify();
000202  f7fffffe          BL       cpu_identify
;;;46     	
;;;47     #ifndef CMSIS    // If conforming to CMSIS, we do not need to perform this code
;;;48     	/* Jump to main process */
;;;49     	main();
;;;50     
;;;51     	/* No actions to perform after this so wait forever */
;;;52     	while(1);
;;;53     #endif 
;;;54     }
000206  bd10              POP      {r4,pc}
;;;55     /********************************************************************/
                          ENDP

                  flash_identify PROC
;;;230     */
;;;231    void flash_identify (void)
000208  b510              PUSH     {r4,lr}
;;;232    {
;;;233        /* Get the flash parameter version */
;;;234    
;;;235        /* Write the flash FCCOB registers with the values for a read resource command */
;;;236        FTFA_FCCOB0 = 0x03;
00020a  2003              MOVS     r0,#3
00020c  49f8              LDR      r1,|L1.1520|
00020e  71c8              STRB     r0,[r1,#7]
;;;237        FTFA_FCCOB1 = 0x00;
000210  2000              MOVS     r0,#0
000212  7188              STRB     r0,[r1,#6]
;;;238        FTFA_FCCOB2 = 0x00;
000214  7148              STRB     r0,[r1,#5]
;;;239        FTFA_FCCOB3 = 0x00;
000216  7108              STRB     r0,[r1,#4]
;;;240        FTFA_FCCOB8 = 0x01;
000218  2001              MOVS     r0,#1
00021a  73c8              STRB     r0,[r1,#0xf]
;;;241    
;;;242        /* All required FCCOBx registers are written, so launch the command */
;;;243        FTFA_FSTAT = FTFA_FSTAT_CCIF_MASK;
00021c  2080              MOVS     r0,#0x80
00021e  7008              STRB     r0,[r1,#0]
;;;244    
;;;245        /* Wait for the command to complete */
;;;246        while(!(FTFA_FSTAT & FTFA_FSTAT_CCIF_MASK));
000220  bf00              NOP      
                  |L1.546|
000222  48f3              LDR      r0,|L1.1520|
000224  7800              LDRB     r0,[r0,#0]
000226  2180              MOVS     r1,#0x80
000228  4008              ANDS     r0,r0,r1
00022a  2800              CMP      r0,#0
00022c  d0f9              BEQ      |L1.546|
;;;247        
;;;248        printf("Flash parameter version %d ",FTFA_FCCOB4);
00022e  48f0              LDR      r0,|L1.1520|
000230  7ac1              LDRB     r1,[r0,#0xb]
000232  e1df              B        |L1.1524|
                  |L1.564|
                          DCD      0x40048000
                  |L1.568|
000238  0a0d4b4c          DCB      "\n\rKL0",0
00023c  3000    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L1.576|
000240  0a0d4b4c          DCB      "\n\rKL1",0
000244  3100    
000246  00                DCB      0
000247  00                DCB      0
                  |L1.584|
000248  0a0d4b4c          DCB      "\n\rKL2",0
00024c  3200    
00024e  00                DCB      0
00024f  00                DCB      0
                  |L1.592|
000250  0a0d4b4c          DCB      "\n\rKL3",0
000254  3300    
000256  00                DCB      0
000257  00                DCB      0
                  |L1.600|
000258  0a0d4b4c          DCB      "\n\rKL4",0
00025c  3400    
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
000260  0a0d556e          DCB      "\n\rUnrecognized Kinetis family device.\n\r",0
000264  7265636f
000268  676e697a
00026c  6564204b
000270  696e6574
000274  69732066
000278  616d696c
00027c  79206465
000280  76696365
000284  2e0a0d00
                  |L1.648|
000288  340a0d00          DCB      "4\n\r",0
                  |L1.652|
00028c  350a0d00          DCB      "5\n\r",0
                  |L1.656|
000290  360a0d00          DCB      "6\n\r",0
                  |L1.660|
000294  0a0d556e          DCB      "\n\rUnrecognized Kinetis sub-family device.\n\r",0
000298  7265636f
00029c  676e697a
0002a0  6564204b
0002a4  696e6574
0002a8  69732073
0002ac  75622d66
0002b0  616d696c
0002b4  79206465
0002b8  76696365
0002bc  2e0a0d00
                  |L1.704|
0002c0  31367069          DCB      "16pin\n\r",0
0002c4  6e0a0d00
                  |L1.712|
0002c8  32347069          DCB      "24pin\n\r",0
0002cc  6e0a0d00
                  |L1.720|
0002d0  33327069          DCB      "32pin\n\r",0
0002d4  6e0a0d00
                  |L1.728|
0002d8  34387069          DCB      "48pin\n\r",0
0002dc  6e0a0d00
                  |L1.736|
0002e0  36347069          DCB      "64pin\n\r",0
0002e4  6e0a0d00
                  |L1.744|
0002e8  38307069          DCB      "80pin\n\r",0
0002ec  6e0a0d00
                  |L1.752|
0002f0  31303070          DCB      "100pin\n\r",0
0002f4  696e0a0d
0002f8  00      
0002f9  00                DCB      0
0002fa  00                DCB      0
0002fb  00                DCB      0
                  |L1.764|
0002fc  0a0d556e          DCB      "\n\rUnrecognized Kinetis package code.      ",0
000300  7265636f
000304  676e697a
000308  6564204b
00030c  696e6574
000310  69732070
000314  61636b61
000318  67652063
00031c  6f64652e
000320  20202020
000324  202000  
000327  00                DCB      0
                  |L1.808|
000328  0a0d4c6f          DCB      "\n\rLow Power Line with Cortex M0+"
00032c  7720506f
000330  77657220
000334  4c696e65
000338  20776974
00033c  6820436f
000340  72746578
000344  204d302b
                  |L1.840|
000348  0a0d0a0d          DCB      "\n\r\n\r",0
00034c  00      
00034d  00                DCB      0
00034e  00                DCB      0
00034f  00                DCB      0
                  |L1.848|
000350  0a0d556e          DCB      "\n\rUnrecognized Kinetis family attribute.\n\r",0
000354  7265636f
000358  676e697a
00035c  6564204b
000360  696e6574
000364  69732066
000368  616d696c
00036c  79206174
000370  74726962
000374  7574652e
000378  0a0d00  
00037b  00                DCB      0
                  |L1.892|
00037c  5352414d          DCB      "SRAM  size: 0.5 KB\n\r",0
000380  20207369
000384  7a653a20
000388  302e3520
00038c  4b420a0d
000390  00      
000391  00                DCB      0
000392  00                DCB      0
000393  00                DCB      0
                  |L1.916|
000394  5352414d          DCB      "SRAM  size:  1 KB\n\r",0
000398  20207369
00039c  7a653a20
0003a0  2031204b
0003a4  420a0d00
                  |L1.936|
0003a8  5352414d          DCB      "SRAM  size:  2 KB\n\r",0
0003ac  20207369
0003b0  7a653a20
0003b4  2032204b
0003b8  420a0d00
                  |L1.956|
0003bc  5352414d          DCB      "SRAM  size:  4 KB\n\r",0
0003c0  20207369
0003c4  7a653a20
0003c8  2034204b
0003cc  420a0d00
                  |L1.976|
0003d0  5352414d          DCB      "SRAM  size:  8 KB\n\r",0
0003d4  20207369
0003d8  7a653a20
0003dc  2038204b
0003e0  420a0d00
                  |L1.996|
0003e4  5352414d          DCB      "SRAM  size:  16 KB\n\r",0
0003e8  20207369
0003ec  7a653a20
0003f0  20313620
0003f4  4b420a0d
0003f8  00      
0003f9  00                DCB      0
0003fa  00                DCB      0
0003fb  00                DCB      0
                  |L1.1020|
0003fc  5352414d          DCB      "SRAM  size:  32 KB\n\r",0
000400  20207369
000404  7a653a20
000408  20333220
00040c  4b420a0d
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L1.1044|
000414  5352414d          DCB      "SRAM  size:  64 KB\n\r",0
000418  20207369
00041c  7a653a20
000420  20363420
000424  4b420a0d
000428  00      
000429  00                DCB      0
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
00042c  0a0d556e          DCB      "\n\rUnrecognized SRAM Size.\n\r",0
000430  7265636f
000434  676e697a
000438  65642053
00043c  52414d20
000440  53697a65
000444  2e0a0d00
                  |L1.1096|
000448  466c6173          DCB      "Flash size:  8 KB program flash, 0.25 KB protection reg"
00044c  68207369
000450  7a653a20
000454  2038204b
000458  42207072
00045c  6f677261
000460  6d20666c
000464  6173682c
000468  20302e32
00046c  35204b42
000470  2070726f
000474  74656374
000478  696f6e20
00047c  726567  
00047f  696f6e0a          DCB      "ion\n\r",0
000483  0d00    
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  466c6173          DCB      "Flash size:  16 KB program flash, 0.5 KB protection reg"
00048c  68207369
000490  7a653a20
000494  20313620
000498  4b422070
00049c  726f6772
0004a0  616d2066
0004a4  6c617368
0004a8  2c20302e
0004ac  35204b42
0004b0  2070726f
0004b4  74656374
0004b8  696f6e20
0004bc  726567  
0004bf  696f6e0a          DCB      "ion\n\r",0
0004c3  0d00    
0004c5  00                DCB      0
0004c6  00                DCB      0
0004c7  00                DCB      0
                  |L1.1224|
0004c8  466c6173          DCB      "Flash size:  32 KB program flash, 1 KB protection regio"
0004cc  68207369
0004d0  7a653a20
0004d4  20333220
0004d8  4b422070
0004dc  726f6772
0004e0  616d2066
0004e4  6c617368
0004e8  2c203120
0004ec  4b422070
0004f0  726f7465
0004f4  6374696f
0004f8  6e207265
0004fc  67696f  
0004ff  6e0a0d00          DCB      "n\n\r",0
000503  00                DCB      0
                  |L1.1284|
000504  466c6173          DCB      "Flash size:  64 KB program flash, 2 KB protection regio"
000508  68207369
00050c  7a653a20
000510  20363420
000514  4b422070
000518  726f6772
00051c  616d2066
000520  6c617368
000524  2c203220
000528  4b422070
00052c  726f7465
000530  6374696f
000534  6e207265
000538  67696f  
00053b  6e0a0d00          DCB      "n\n\r",0
00053f  00                DCB      0
                  |L1.1344|
000540  466c6173          DCB      "Flash size:  128 KB program flash, 4 KB protection regi"
000544  68207369
000548  7a653a20
00054c  20313238
000550  204b4220
000554  70726f67
000558  72616d20
00055c  666c6173
000560  682c2034
000564  204b4220
000568  70726f74
00056c  65637469
000570  6f6e2072
000574  656769  
000577  6f6e0a0d          DCB      "on\n\r",0
00057b  00      
                  |L1.1404|
00057c  466c6173          DCB      "Flash size:  256 KB program flash, 4 KB protection regi"
000580  68207369
000584  7a653a20
000588  20323536
00058c  204b4220
000590  70726f67
000594  72616d20
000598  666c6173
00059c  682c2034
0005a0  204b4220
0005a4  70726f74
0005a8  65637469
0005ac  6f6e2072
0005b0  656769  
0005b3  6f6e0a0d          DCB      "on\n\r",0
0005b7  00      
                  |L1.1464|
0005b8  45525221          DCB      "ERR!! Undefined flash size\n\r",0
0005bc  2120556e
0005c0  64656669
0005c4  6e656420
0005c8  666c6173
0005cc  68207369
0005d0  7a650a0d
0005d4  00      
0005d5  00                DCB      0
0005d6  00                DCB      0
0005d7  00                DCB      0
                  |L1.1496|
0005d8  53696c69          DCB      "Silicon rev %d\n\r",0
0005dc  636f6e20
0005e0  72657620
0005e4  25640a0d
0005e8  00      
0005e9  00                DCB      0
0005ea  00                DCB      0
0005eb  00                DCB      0
                  |L1.1516|
                          DCD      0x40048100
                  |L1.1520|
                          DCD      0x40020000
                  |L1.1524|
0005f4  a01c              ADR      r0,|L1.1640|
0005f6  f7fffffe          BL       __2printf
;;;249        printf(" %d ",FTFA_FCCOB5);
0005fa  4822              LDR      r0,|L1.1668|
0005fc  7a81              LDRB     r1,[r0,#0xa]
0005fe  a022              ADR      r0,|L1.1672|
000600  f7fffffe          BL       __2printf
;;;250        printf(" %d ",FTFA_FCCOB6);
000604  481f              LDR      r0,|L1.1668|
000606  7a41              LDRB     r1,[r0,#9]
000608  a01f              ADR      r0,|L1.1672|
00060a  f7fffffe          BL       __2printf
;;;251        printf(" %d\n\r",FTFA_FCCOB7);
00060e  481d              LDR      r0,|L1.1668|
000610  7a01              LDRB     r1,[r0,#8]
000612  a01f              ADR      r0,|L1.1680|
000614  f7fffffe          BL       __2printf
;;;252    
;;;253        /* Get the flash version ID */   
;;;254    
;;;255        /* Write the flash FCCOB registers with the values for a read resource command */
;;;256        FTFA_FCCOB0 = 0x03;
000618  2003              MOVS     r0,#3
00061a  491a              LDR      r1,|L1.1668|
00061c  71c8              STRB     r0,[r1,#7]
;;;257        FTFA_FCCOB1 = 0x00;
00061e  2000              MOVS     r0,#0
000620  7188              STRB     r0,[r1,#6]
;;;258        FTFA_FCCOB2 = 0x00;
000622  7148              STRB     r0,[r1,#5]
;;;259        FTFA_FCCOB3 = 0x04;
000624  2004              MOVS     r0,#4
000626  7108              STRB     r0,[r1,#4]
;;;260        FTFA_FCCOB8 = 0x01;
000628  2001              MOVS     r0,#1
00062a  73c8              STRB     r0,[r1,#0xf]
;;;261    
;;;262        /* All required FCCOBx registers are written, so launch the command */
;;;263        FTFA_FSTAT = FTFA_FSTAT_CCIF_MASK;
00062c  2080              MOVS     r0,#0x80
00062e  7008              STRB     r0,[r1,#0]
;;;264    
;;;265        /* Wait for the command to complete */
;;;266        while(!(FTFA_FSTAT & FTFA_FSTAT_CCIF_MASK));
000630  bf00              NOP      
                  |L1.1586|
000632  4814              LDR      r0,|L1.1668|
000634  7800              LDRB     r0,[r0,#0]
000636  2180              MOVS     r1,#0x80
000638  4008              ANDS     r0,r0,r1
00063a  2800              CMP      r0,#0
00063c  d0f9              BEQ      |L1.1586|
;;;267    
;;;268        printf("Flash version ID %d ",FTFA_FCCOB4);  
00063e  4811              LDR      r0,|L1.1668|
000640  7ac1              LDRB     r1,[r0,#0xb]
000642  a015              ADR      r0,|L1.1688|
000644  f7fffffe          BL       __2printf
;;;269        printf(" %d",FTFA_FCCOB5);  
000648  480e              LDR      r0,|L1.1668|
00064a  7a81              LDRB     r1,[r0,#0xa]
00064c  a018              ADR      r0,|L1.1712|
00064e  f7fffffe          BL       __2printf
;;;270        printf(" %d ",FTFA_FCCOB6);  
000652  480c              LDR      r0,|L1.1668|
000654  7a41              LDRB     r1,[r0,#9]
000656  a00c              ADR      r0,|L1.1672|
000658  f7fffffe          BL       __2printf
;;;271        printf("%d\n\r",FTFA_FCCOB7);  
00065c  4809              LDR      r0,|L1.1668|
00065e  7a01              LDRB     r1,[r0,#8]
000660  4814              LDR      r0,|L1.1716|
000662  f7fffffe          BL       __2printf
;;;272    }
000666  bd10              POP      {r4,pc}
;;;273    /********************************************************************/
                          ENDP

                  |L1.1640|
000668  466c6173          DCB      "Flash parameter version %d ",0
00066c  68207061
000670  72616d65
000674  74657220
000678  76657273
00067c  696f6e20
000680  25642000
                  |L1.1668|
                          DCD      0x40020000
                  |L1.1672|
000688  20256420          DCB      " %d ",0
00068c  00      
00068d  00                DCB      0
00068e  00                DCB      0
00068f  00                DCB      0
                  |L1.1680|
000690  2025640a          DCB      " %d\n\r",0
000694  0d00    
000696  00                DCB      0
000697  00                DCB      0
                  |L1.1688|
000698  466c6173          DCB      "Flash version ID %d ",0
00069c  68207665
0006a0  7273696f
0006a4  6e204944
0006a8  20256420
0006ac  00      
0006ad  00                DCB      0
0006ae  00                DCB      0
0006af  00                DCB      0
                  |L1.1712|
0006b0  20256400          DCB      " %d",0
                  |L1.1716|
                          DCD      ||.text||+0x5e4

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L13.24|
                  |L13.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L13.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L13.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\cpu\\start.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_start_c_start____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_start_c_start____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_start_c_start____REVSH|
#line 144
|__asm___7_start_c_start____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
