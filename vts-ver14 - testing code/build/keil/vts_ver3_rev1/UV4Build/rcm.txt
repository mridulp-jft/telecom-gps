; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\uv4build\rcm.o --asm_dir=.\UV4Build\ --list_dir=.\UV4Build\ --depend=.\uv4build\rcm.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\src\projects\KEIL_MAG -I..\..\..\src\common -I..\..\..\src\cpu -I..\..\..\src\cpu\headers\CMSIS\MKL26Z4\Include -I..\..\..\src\drivers\llwu -I..\..\..\src\drivers\lptmr -I..\..\..\src\drivers\mcg -I..\..\..\src\drivers\pmc -I..\..\..\src\drivers\rcm -I..\..\..\src\drivers\rtc -I..\..\..\src\drivers\smc -I..\..\..\src\drivers\uart -I..\..\..\src\drivers\cmp -I..\..\..\src\platforms -I..\.. -I..\..\..\src\cpu\CMSIS\Source -I..\..\..\src\cpu\CMSIS\Source\arm -I..\..\..\..\inc -I"E:\bitbuck\gps-trackr\Software\vts-ver14 - testing code\build\keil\vts_ver3_rev1\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.11.0\Device\Include -D__UVISION_VERSION=518 -D_RTE_ -DMKL26Z128xxx4 -DKEIL -DFREEDOM -DCMSIS --omf_browse=.\uv4build\rcm.crf ..\..\..\src\drivers\rcm\rcm.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  outSRS PROC
;;;13      */
;;;14     void outSRS(void){                         //[outSRS]
000000  b510              PUSH     {r4,lr}
;;;15     delay(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       delay
;;;16       
;;;17     	if (RCM_SRS1 & RCM_SRS1_SACKERR_MASK)
000008  485d              LDR      r0,|L1.384|
00000a  7840              LDRB     r0,[r0,#1]
00000c  2120              MOVS     r1,#0x20
00000e  4008              ANDS     r0,r0,r1
000010  2800              CMP      r0,#0
000012  d002              BEQ      |L1.26|
;;;18     		printf("\n\rStop Mode Acknowledge Error Reset");
000014  a05b              ADR      r0,|L1.388|
000016  f7fffffe          BL       __2printf
                  |L1.26|
;;;19     	if (RCM_SRS1 & RCM_SRS1_MDM_AP_MASK)
00001a  4859              LDR      r0,|L1.384|
00001c  7840              LDRB     r0,[r0,#1]
00001e  2108              MOVS     r1,#8
000020  4008              ANDS     r0,r0,r1
000022  2800              CMP      r0,#0
000024  d002              BEQ      |L1.44|
;;;20     		printf("\n\rMDM-AP Reset");
000026  a060              ADR      r0,|L1.424|
000028  f7fffffe          BL       __2printf
                  |L1.44|
;;;21     	if (RCM_SRS1 & RCM_SRS1_SW_MASK)
00002c  4854              LDR      r0,|L1.384|
00002e  7840              LDRB     r0,[r0,#1]
000030  2104              MOVS     r1,#4
000032  4008              ANDS     r0,r0,r1
000034  2800              CMP      r0,#0
000036  d002              BEQ      |L1.62|
;;;22     		printf("\n\rSoftware Reset");
000038  a05f              ADR      r0,|L1.440|
00003a  f7fffffe          BL       __2printf
                  |L1.62|
;;;23     	if (RCM_SRS1 & RCM_SRS1_LOCKUP_MASK)
00003e  4850              LDR      r0,|L1.384|
000040  7840              LDRB     r0,[r0,#1]
000042  2102              MOVS     r1,#2
000044  4008              ANDS     r0,r0,r1
000046  2800              CMP      r0,#0
000048  d002              BEQ      |L1.80|
;;;24     		printf("\n\rCore Lockup Event Reset");
00004a  a060              ADR      r0,|L1.460|
00004c  f7fffffe          BL       __2printf
                  |L1.80|
;;;25     	
;;;26     	if (RCM_SRS0 & RCM_SRS0_POR_MASK)
000050  484b              LDR      r0,|L1.384|
000052  7800              LDRB     r0,[r0,#0]
000054  2180              MOVS     r1,#0x80
000056  4008              ANDS     r0,r0,r1
000058  2800              CMP      r0,#0
00005a  d002              BEQ      |L1.98|
;;;27     		printf("\n\rPower-on Reset");
00005c  a062              ADR      r0,|L1.488|
00005e  f7fffffe          BL       __2printf
                  |L1.98|
;;;28     	if (RCM_SRS0 & RCM_SRS0_PIN_MASK)
000062  4847              LDR      r0,|L1.384|
000064  7800              LDRB     r0,[r0,#0]
000066  2140              MOVS     r1,#0x40
000068  4008              ANDS     r0,r0,r1
00006a  2800              CMP      r0,#0
00006c  d002              BEQ      |L1.116|
;;;29     		printf("\n\rExternal Pin Reset");
00006e  a063              ADR      r0,|L1.508|
000070  f7fffffe          BL       __2printf
                  |L1.116|
;;;30     	if (RCM_SRS0 & RCM_SRS0_WDOG_MASK)
000074  4842              LDR      r0,|L1.384|
000076  7800              LDRB     r0,[r0,#0]
000078  2120              MOVS     r1,#0x20
00007a  4008              ANDS     r0,r0,r1
00007c  2800              CMP      r0,#0
00007e  d002              BEQ      |L1.134|
;;;31     		printf("\n\rWatchdog(COP) Reset");
000080  a064              ADR      r0,|L1.532|
000082  f7fffffe          BL       __2printf
                  |L1.134|
;;;32     	if (RCM_SRS0 & RCM_SRS0_LOC_MASK)
000086  483e              LDR      r0,|L1.384|
000088  7800              LDRB     r0,[r0,#0]
00008a  2104              MOVS     r1,#4
00008c  4008              ANDS     r0,r0,r1
00008e  2800              CMP      r0,#0
000090  d002              BEQ      |L1.152|
;;;33     		printf("\n\rLoss of External Clock Reset");
000092  a066              ADR      r0,|L1.556|
000094  f7fffffe          BL       __2printf
                  |L1.152|
;;;34     	if (RCM_SRS0 & RCM_SRS0_LOL_MASK)
000098  4839              LDR      r0,|L1.384|
00009a  7800              LDRB     r0,[r0,#0]
00009c  2108              MOVS     r1,#8
00009e  4008              ANDS     r0,r0,r1
0000a0  2800              CMP      r0,#0
0000a2  d002              BEQ      |L1.170|
;;;35     		printf("\n\rLoss of Lock in PLL Reset");
0000a4  a069              ADR      r0,|L1.588|
0000a6  f7fffffe          BL       __2printf
                  |L1.170|
;;;36     	if (RCM_SRS0 & RCM_SRS0_LVD_MASK)
0000aa  4835              LDR      r0,|L1.384|
0000ac  7800              LDRB     r0,[r0,#0]
0000ae  2102              MOVS     r1,#2
0000b0  4008              ANDS     r0,r0,r1
0000b2  2800              CMP      r0,#0
0000b4  d002              BEQ      |L1.188|
;;;37     		printf("\n\rLow-voltage Detect Reset");
0000b6  a06c              ADR      r0,|L1.616|
0000b8  f7fffffe          BL       __2printf
                  |L1.188|
;;;38     	if (RCM_SRS0 & RCM_SRS0_WAKEUP_MASK)
0000bc  4830              LDR      r0,|L1.384|
0000be  7800              LDRB     r0,[r0,#0]
0000c0  07c0              LSLS     r0,r0,#31
0000c2  0fc0              LSRS     r0,r0,#31
0000c4  2800              CMP      r0,#0
0000c6  d047              BEQ      |L1.344|
;;;39             {
;;;40               printf("\n\r[outSRS]Wakeup bit set from low power mode ");
0000c8  a06e              ADR      r0,|L1.644|
0000ca  f7fffffe          BL       __2printf
;;;41               if ((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 3)
0000ce  4879              LDR      r0,|L1.692|
0000d0  7840              LDRB     r0,[r0,#1]
0000d2  0740              LSLS     r0,r0,#29
0000d4  0f40              LSRS     r0,r0,#29
0000d6  2803              CMP      r0,#3
0000d8  d102              BNE      |L1.224|
;;;42                 printf("LLS exit ") ;
0000da  a077              ADR      r0,|L1.696|
0000dc  f7fffffe          BL       __2printf
                  |L1.224|
;;;43               if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 0))
0000e0  4874              LDR      r0,|L1.692|
0000e2  7840              LDRB     r0,[r0,#1]
0000e4  0740              LSLS     r0,r0,#29
0000e6  0f40              LSRS     r0,r0,#29
0000e8  2804              CMP      r0,#4
0000ea  d108              BNE      |L1.254|
0000ec  4871              LDR      r0,|L1.692|
0000ee  7880              LDRB     r0,[r0,#2]
0000f0  0740              LSLS     r0,r0,#29
0000f2  0f40              LSRS     r0,r0,#29
0000f4  2800              CMP      r0,#0
0000f6  d102              BNE      |L1.254|
;;;44                 printf("VLLS0 exit ") ;
0000f8  a072              ADR      r0,|L1.708|
0000fa  f7fffffe          BL       __2printf
                  |L1.254|
;;;45               if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 1))
0000fe  486d              LDR      r0,|L1.692|
000100  7840              LDRB     r0,[r0,#1]
000102  0740              LSLS     r0,r0,#29
000104  0f40              LSRS     r0,r0,#29
000106  2804              CMP      r0,#4
000108  d108              BNE      |L1.284|
00010a  486a              LDR      r0,|L1.692|
00010c  7880              LDRB     r0,[r0,#2]
00010e  0740              LSLS     r0,r0,#29
000110  0f40              LSRS     r0,r0,#29
000112  2801              CMP      r0,#1
000114  d102              BNE      |L1.284|
;;;46                 printf("VLLS1 exit ") ;
000116  a06e              ADR      r0,|L1.720|
000118  f7fffffe          BL       __2printf
                  |L1.284|
;;;47               if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 2))
00011c  4865              LDR      r0,|L1.692|
00011e  7840              LDRB     r0,[r0,#1]
000120  0740              LSLS     r0,r0,#29
000122  0f40              LSRS     r0,r0,#29
000124  2804              CMP      r0,#4
000126  d108              BNE      |L1.314|
000128  4862              LDR      r0,|L1.692|
00012a  7880              LDRB     r0,[r0,#2]
00012c  0740              LSLS     r0,r0,#29
00012e  0f40              LSRS     r0,r0,#29
000130  2802              CMP      r0,#2
000132  d102              BNE      |L1.314|
;;;48                 printf("VLLS2 exit") ;
000134  a069              ADR      r0,|L1.732|
000136  f7fffffe          BL       __2printf
                  |L1.314|
;;;49               if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 3))
00013a  485e              LDR      r0,|L1.692|
00013c  7840              LDRB     r0,[r0,#1]
00013e  0740              LSLS     r0,r0,#29
000140  0f40              LSRS     r0,r0,#29
000142  2804              CMP      r0,#4
000144  d108              BNE      |L1.344|
000146  485b              LDR      r0,|L1.692|
000148  7880              LDRB     r0,[r0,#2]
00014a  0740              LSLS     r0,r0,#29
00014c  0f40              LSRS     r0,r0,#29
00014e  2803              CMP      r0,#3
000150  d102              BNE      |L1.344|
;;;50                 printf("VLLS3 exit ") ; 
000152  a065              ADR      r0,|L1.744|
000154  f7fffffe          BL       __2printf
                  |L1.344|
;;;51     	}
;;;52     
;;;53             if ((RCM_SRS0 == 0) && (RCM_SRS1 == 0)) 
000158  4809              LDR      r0,|L1.384|
00015a  7800              LDRB     r0,[r0,#0]
00015c  2800              CMP      r0,#0
00015e  d10d              BNE      |L1.380|
000160  4807              LDR      r0,|L1.384|
000162  7840              LDRB     r0,[r0,#1]
000164  2800              CMP      r0,#0
000166  d109              BNE      |L1.380|
;;;54             {
;;;55     	       printf("[outSRS]RCM_SRS0 is ZERO   = %#02X \r\n\r", (RCM_SRS0))  ;
000168  4805              LDR      r0,|L1.384|
00016a  7801              LDRB     r1,[r0,#0]
00016c  a061              ADR      r0,|L1.756|
00016e  f7fffffe          BL       __2printf
;;;56     	       printf("[outSRS]RCM_SRS1 is ZERO   = %#02X \r\n\r", (RCM_SRS1))  ;	 
000172  4803              LDR      r0,|L1.384|
000174  7841              LDRB     r1,[r0,#1]
000176  a069              ADR      r0,|L1.796|
000178  f7fffffe          BL       __2printf
                  |L1.380|
;;;57             }
;;;58       }
00017c  bd10              POP      {r4,pc}
;;;59     
                          ENDP

00017e  0000              DCW      0x0000
                  |L1.384|
                          DCD      0x4007f000
                  |L1.388|
000184  0a0d5374          DCB      "\n\rStop Mode Acknowledge Error Reset",0
000188  6f70204d
00018c  6f646520
000190  41636b6e
000194  6f776c65
000198  64676520
00019c  4572726f
0001a0  72205265
0001a4  73657400
                  |L1.424|
0001a8  0a0d4d44          DCB      "\n\rMDM-AP Reset",0
0001ac  4d2d4150
0001b0  20526573
0001b4  657400  
0001b7  00                DCB      0
                  |L1.440|
0001b8  0a0d536f          DCB      "\n\rSoftware Reset",0
0001bc  66747761
0001c0  72652052
0001c4  65736574
0001c8  00      
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L1.460|
0001cc  0a0d436f          DCB      "\n\rCore Lockup Event Reset",0
0001d0  7265204c
0001d4  6f636b75
0001d8  70204576
0001dc  656e7420
0001e0  52657365
0001e4  7400    
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L1.488|
0001e8  0a0d506f          DCB      "\n\rPower-on Reset",0
0001ec  7765722d
0001f0  6f6e2052
0001f4  65736574
0001f8  00      
0001f9  00                DCB      0
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L1.508|
0001fc  0a0d4578          DCB      "\n\rExternal Pin Reset",0
000200  7465726e
000204  616c2050
000208  696e2052
00020c  65736574
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L1.532|
000214  0a0d5761          DCB      "\n\rWatchdog(COP) Reset",0
000218  74636864
00021c  6f672843
000220  4f502920
000224  52657365
000228  7400    
00022a  00                DCB      0
00022b  00                DCB      0
                  |L1.556|
00022c  0a0d4c6f          DCB      "\n\rLoss of External Clock Reset",0
000230  7373206f
000234  66204578
000238  7465726e
00023c  616c2043
000240  6c6f636b
000244  20526573
000248  657400  
00024b  00                DCB      0
                  |L1.588|
00024c  0a0d4c6f          DCB      "\n\rLoss of Lock in PLL Reset",0
000250  7373206f
000254  66204c6f
000258  636b2069
00025c  6e20504c
000260  4c205265
000264  73657400
                  |L1.616|
000268  0a0d4c6f          DCB      "\n\rLow-voltage Detect Reset",0
00026c  772d766f
000270  6c746167
000274  65204465
000278  74656374
00027c  20526573
000280  657400  
000283  00                DCB      0
                  |L1.644|
000284  0a0d5b6f          DCB      "\n\r[outSRS]Wakeup bit set from low power mode ",0
000288  75745352
00028c  535d5761
000290  6b657570
000294  20626974
000298  20736574
00029c  2066726f
0002a0  6d206c6f
0002a4  7720706f
0002a8  77657220
0002ac  6d6f6465
0002b0  2000    
0002b2  00                DCB      0
0002b3  00                DCB      0
                  |L1.692|
                          DCD      0x4007e000
                  |L1.696|
0002b8  4c4c5320          DCB      "LLS exit ",0
0002bc  65786974
0002c0  2000    
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L1.708|
0002c4  564c4c53          DCB      "VLLS0 exit ",0
0002c8  30206578
0002cc  69742000
                  |L1.720|
0002d0  564c4c53          DCB      "VLLS1 exit ",0
0002d4  31206578
0002d8  69742000
                  |L1.732|
0002dc  564c4c53          DCB      "VLLS2 exit",0
0002e0  32206578
0002e4  697400  
0002e7  00                DCB      0
                  |L1.744|
0002e8  564c4c53          DCB      "VLLS3 exit ",0
0002ec  33206578
0002f0  69742000
                  |L1.756|
0002f4  5b6f7574          DCB      "[outSRS]RCM_SRS0 is ZERO   = %#02X \r\n\r",0
0002f8  5352535d
0002fc  52434d5f
000300  53525330
000304  20697320
000308  5a45524f
00030c  2020203d
000310  20252330
000314  3258200d
000318  0a0d00  
00031b  00                DCB      0
                  |L1.796|
00031c  5b6f7574          DCB      "[outSRS]RCM_SRS1 is ZERO   = %#02X \r\n\r",0
000320  5352535d
000324  52434d5f
000328  53525331
00032c  20697320
000330  5a45524f
000334  2020203d
000338  20252330
00033c  3258200d
000340  0a0d00  
000343  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\src\\drivers\\rcm\\rcm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rcm_c_outSRS____REV16|
#line 383 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0-Beta4\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_rcm_c_outSRS____REV16| PROC
#line 384

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rcm_c_outSRS____REVSH|
#line 397
|__asm___5_rcm_c_outSRS____REVSH| PROC
#line 398

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
